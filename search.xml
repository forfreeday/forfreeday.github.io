<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go--go安装</title>
      <link href="2021/10/27/go-go%E5%AE%89%E8%A3%85/"/>
      <url>2021/10/27/go-go%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h2><p>一般是直接上官网下载安装，不同版本功能还不一样，也可以使用脚本来快速安装。</p><p><a href="https://golang.org/dl">https://golang.org/dl</a></p><p>也可以参考官方安装文档<br><a href="https://golang.org/doc/install#install">https://golang.org/doc/install#install</a></p><p><img src="/2021/10/27/go-go%E5%AE%89%E8%A3%85/go安装.jpg" alt="go下载列表"></p><h3 id="如果需要其他版本"><a href="#如果需要其他版本" class="headerlink" title="如果需要其他版本"></a>如果需要其他版本</h3><p>选 Archived versions 可以查看之前的发行版</p><p><img src="/2021/10/27/go-go%E5%AE%89%E8%A3%85/其他版本.jpg" alt="其他版本"></p><h2 id="开发环境安装"><a href="#开发环境安装" class="headerlink" title="开发环境安装"></a>开发环境安装</h2><p>开发环境安装通常使用脚本快速安装</p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch install.sh</span><br><span class="line">chmod u+x install.sh</span><br></pre></td></tr></table></figure><h3 id="添加脚本"><a href="#添加脚本" class="headerlink" title="添加脚本"></a>添加脚本</h3><p>脚本会在当前用户下创建 go 目录，写入 .bash_profile 中<br><code>VERSION</code> 是版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; install.sh &lt;&lt;&quot;EOF&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">VERSION=&quot;1.16.4&quot;</span><br><span class="line">[ -z &quot;$GOROOT&quot; ] &amp;&amp; GOROOT=&quot;$HOME/.go&quot;</span><br><span class="line">[ -z &quot;$GOPATH&quot; ] &amp;&amp; GOPATH=&quot;$HOME/go&quot;</span><br><span class="line"></span><br><span class="line">OS=&quot;$(uname -s)&quot;</span><br><span class="line">ARCH=&quot;$(uname -m)&quot;</span><br><span class="line"></span><br><span class="line">case $OS in</span><br><span class="line">    &quot;Linux&quot;)</span><br><span class="line">        case $ARCH in</span><br><span class="line">        &quot;x86_64&quot;)</span><br><span class="line">            ARCH=amd64</span><br><span class="line">            ;;</span><br><span class="line">        &quot;armv6&quot;)</span><br><span class="line">            ARCH=armv6l</span><br><span class="line">            ;;</span><br><span class="line">        &quot;armv8&quot;)</span><br><span class="line">            ARCH=arm64</span><br><span class="line">            ;;</span><br><span class="line">        .*386.*)</span><br><span class="line">            ARCH=386</span><br><span class="line">            ;;</span><br><span class="line">        esac</span><br><span class="line">        PLATFORM=&quot;linux-$ARCH&quot;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;Darwin&quot;)</span><br><span class="line">        PLATFORM=&quot;darwin-amd64&quot;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">print_help() &#123;</span><br><span class="line">    echo &quot;Usage: bash goinstall.sh OPTIONS&quot;</span><br><span class="line">    echo -e &quot;\nOPTIONS:&quot;</span><br><span class="line">    echo -e &quot;  --remove\tRemove currently installed version&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ -n &quot;`$SHELL -c &#x27;echo $ZSH_VERSION&#x27;`&quot; ]; then</span><br><span class="line">    shell_profile=&quot;zshrc&quot;</span><br><span class="line">elif [ -n &quot;`$SHELL -c &#x27;echo $BASH_VERSION&#x27;`&quot; ]; then</span><br><span class="line">    shell_profile=&quot;bashrc&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">PACKAGE_NAME=&quot;go$VERSION.$PLATFORM.tar.gz&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; == &quot;--remove&quot; ]; then</span><br><span class="line">    rm -rf &quot;$GOROOT&quot;</span><br><span class="line">    if [ &quot;$OS&quot; == &quot;Darwin&quot; ]; then</span><br><span class="line">        sed -i &quot;&quot; &#x27;/# GoLang/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &quot;&quot; &#x27;/export GOROOT/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &quot;&quot; &#x27;/$GOROOT\/bin/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &quot;&quot; &#x27;/export GOPATH/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &quot;&quot; &#x27;/$GOPATH\/bin/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">    else</span><br><span class="line">        sed -i &#x27;/# GoLang/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &#x27;/export GOROOT/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &#x27;/$GOROOT\/bin/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &#x27;/export GOPATH/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &#x27;/$GOPATH\/bin/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo &quot;Go removed.&quot;</span><br><span class="line">    exit 0</span><br><span class="line">elif [ &quot;$1&quot; == &quot;--help&quot; ]; then</span><br><span class="line">    print_help</span><br><span class="line">    exit 0</span><br><span class="line">elif [ ! -z &quot;$1&quot; ]; then</span><br><span class="line">    echo &quot;Unrecognized option: $1&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -d &quot;$GOROOT&quot; ]; then</span><br><span class="line">    echo &quot;The Go install directory ($GOROOT) already exists. Exiting.&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;Downloading $PACKAGE_NAME ...&quot;</span><br><span class="line">if hash wget 2&gt;/dev/null; then</span><br><span class="line">    wget https://storage.googleapis.com/golang/$PACKAGE_NAME -O /tmp/go.tar.gz</span><br><span class="line">else</span><br><span class="line">    curl -o /tmp/go.tar.gz https://storage.googleapis.com/golang/$PACKAGE_NAME</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo &quot;Download failed! Exiting.&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;Extracting File...&quot;</span><br><span class="line">mkdir -p &quot;$GOROOT&quot;</span><br><span class="line">tar -C &quot;$GOROOT&quot; --strip-components=1 -xzf /tmp/go.tar.gz</span><br><span class="line">touch &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">&#123;</span><br><span class="line">    echo &#x27;# GoLang&#x27;</span><br><span class="line">    echo &quot;export GOROOT=$&#123;GOROOT&#125;&quot;</span><br><span class="line">    echo &#x27;export PATH=$GOROOT/bin:$PATH&#x27;</span><br><span class="line">    echo &quot;export GOPATH=$GOPATH&quot;</span><br><span class="line">    echo &#x27;export PATH=$GOPATH/bin:$PATH&#x27;</span><br><span class="line">    echo &quot;export GOBIN=$GOPATH/bin&quot;</span><br><span class="line">&#125; &gt;&gt; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p $GOPATH/&#123;src,pkg,bin&#125;</span><br><span class="line">echo -e &quot;\nGo $VERSION was installed into $GOROOT.\nMake sure to relogin into your shell or run:&quot;</span><br><span class="line">echo -e &quot;\n\tsource $HOME/.$&#123;shell_profile&#125;\n\nto update your environment variables.&quot;</span><br><span class="line">echo &quot;Tip: Opening a new terminal window usually just works. :)&quot;</span><br><span class="line">rm -f /tmp/go.tar.gz</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh install.sh</span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq-安装</title>
      <link href="2021/10/26/rabbitmq-%E5%AE%89%E8%A3%85/"/>
      <url>2021/10/26/rabbitmq-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>RabbitMQ 基于 Erlang，安装前，需要安装对应版本的 Erlang<br>官网 RabbitMQ 与 Erlang 版本对照表 <a href="https://www.rabbitmq.com/which-erlang.html">https://www.rabbitmq.com/which-erlang.html</a><br>CentOS 7 环境下安装</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h3><ol><li><p>查看是否存在旧erlang版本<br><code>erl -version</code></p></li><li><p>若版本低于（version 11.2.2），卸载erlang<br><code>yum -y remove erlang-*</code></p></li><li><p>安装erlang所依赖工具<br><code>yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</code></p></li><li><p>安装 socat<br>erlang内存管理依赖socat<br><code>yum install -y socat</code></p></li><li><p>安装 signing-key，用于和 yum更新源通信<br><code>rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</code></p></li><li><p>更新源<br><code>vi /etc/yum.repos.d/rabbitmq_erlang.repo</code><br>将对应的内容拷贝到文件里面，参考链接：<a href="https://github.com/rabbitmq/erlang-rpm">https://github.com/rabbitmq/erlang-rpm</a><br>使用 Erlang 23.3 配置<br>复制除 begin end 分割线外的中间内容</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[rabbitmq_erlang]</span><br><span class="line">name=rabbitmq-rabbitmq-erlang</span><br><span class="line">baseurl=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/rpm/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/gpg.E495BB49CC4BBE5B.key</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">gpgcheck=1</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line">pkg_gpgcheck=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-noarch]</span><br><span class="line">name=rabbitmq-rabbitmq-erlang-noarch</span><br><span class="line">baseurl=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/rpm/el/7/noarch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/gpg.E495BB49CC4BBE5B.key</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">gpgcheck=1</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line">pkg_gpgcheck=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-source]</span><br><span class="line">name=rabbitmq-rabbitmq-erlang-source</span><br><span class="line">baseurl=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/rpm/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/gpg.E495BB49CC4BBE5B.key</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">gpgcheck=1</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line">pkg_gpgcheck=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br></pre></td></tr></table></figure><ol start="7"><li><p>更新源<br>yum update -y</p></li><li><p>安装erlang<br>yum install -y erlang-23.3.4</p></li></ol><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><ol><li><p>安装RabbitMQ<br><code>yum install -y https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.22/rabbitmq-server-3.8.22-1.el7.noarch.rpm</code></p></li><li><p>systemctl 系统命令操作</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rabbitmq-server   #启动</span><br><span class="line">systemctl restart rabbitmq-server #重启</span><br><span class="line">systemctl stop rabbitmq-server    #关闭</span><br><span class="line">systemctl status rabbitmq-server  #查看状态</span><br></pre></td></tr></table></figure><ol start="2"><li>rabbitmqctl 相关命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl status   #查看服务状态</span><br><span class="line">sudo rabbitmqctl version  #查看服务版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matic </tag>
            
            <tag> mq </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matic--checkpoint理解</title>
      <link href="2021/10/19/matic-Checkpoint%E7%90%86%E8%A7%A3/"/>
      <url>2021/10/19/matic-Checkpoint%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>checkpoint</code>是<code>Matic</code>协议中最关键的部分。它代表了<code>Bor</code>链状态的快照，应该由⅔+的验证器集证明，然后再验证并提交给部署在以太坊上的合约。</p><p>这里有几个问题：</p><ol><li>checkpoint 是什么</li><li>为什么要提交bor的状态，状态中包含哪些信息</li><li>checkpoint 验证流程</li></ol><h2 id="checkpoint-是什么"><a href="#checkpoint-是什么" class="headerlink" title="checkpoint 是什么"></a>checkpoint 是什么</h2><p><code>checkpoint</code>是<code>Matic</code>协议中最关键的部分。它代表了<code>Bor</code>链状态的快照，应该由⅔+的<code>validator</code>集证明，然后再验证并提交给部署在以太坊上的合约。</p><p>Heimdall 层允许将 Bor 生成的区块聚合到单个 Merkle 根中，并定期将其发布到以太坊主链。<br>此已发布状态也称为检查点，因此整个过程称为<code>validator(检查点)</code>。<br>检查点提议者最初是通过 <code>Tendermint</code> 的加权循环算法选择的。</p><h3 id="checkpoint-结构"><a href="#checkpoint-结构" class="headerlink" title="checkpoint 结构"></a>checkpoint 结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CheckpointBlockHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Proposer is selected based on stake</span></span><br><span class="line">    Proposer        types.HeimdallAddress <span class="string">`json:&quot;proposer&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// StartBlock: The block number on Bor from which this checkpoint starts</span></span><br><span class="line">    StartBlock      <span class="keyword">uint64</span>                <span class="string">`json:&quot;startBlock&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// EndBlock: The block number on Bor from which this checkpoint ends</span></span><br><span class="line">    EndBlock        <span class="keyword">uint64</span>                <span class="string">`json:&quot;endBlock&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RootHash is the Merkle root of all the leaves containing the block</span></span><br><span class="line">    <span class="comment">// headers starting from start to the end block</span></span><br><span class="line">    RootHash        types.HeimdallHash    <span class="string">`json:&quot;rootHash&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Account root hash for each validator</span></span><br><span class="line">    <span class="comment">// Hash of data that needs to be passed from Heimdall to Ethereum chain like slashing, withdraw topup etc.</span></span><br><span class="line">    AccountRootHash types.HeimdallHash    <span class="string">`json:&quot;accountRootHash&quot;`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Timestamp when checkpoint was created on Heimdall</span></span><br><span class="line">    TimeStamp       <span class="keyword">uint64</span>          <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这里 checkpoint 的提交是基于 bor 的<code>StartBlock</code>到<code>EndBlock</code>之间的区块，这点很重要。<br><code>bor</code>是基于<code>Ethereum协议</code>实现的底层链。<a href="https://docs.polygon.technology/docs/contribute/bor/overview">官方定义</a></p><p><img src="/2021/10/19/matic-Checkpoint%E7%90%86%E8%A7%A3/checkpoint.svg" alt="checkpoint"></p><h3 id="blockHash"><a href="#blockHash" class="headerlink" title="blockHash"></a>blockHash</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blockHash = keccak256([number, time, tx hash, receipt hash])</span><br></pre></td></tr></table></figure><h3 id="rootHash"><a href="#rootHash" class="headerlink" title="rootHash"></a>rootHash</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B(<span class="number">1</span>) := keccak256([number, time, tx hash, receipt hash])</span><br><span class="line">B(<span class="number">2</span>) := keccak256([number, time, tx hash, receipt hash])</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">B(n) := keccak256([number, time, tx hash, receipt hash])</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkpoint is Merkle root of all block hash</span></span><br><span class="line">checkpoint<span class="string">&#x27;s root hash = Merkel[B(1), B(2), ....., B(n)]</span></span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>下面是 Bor 链区块创建<code>checkpoint</code>的代码片段，官方代码：<br><a href="https://github.com/maticnetwork/heimdall/blob/develop/checkpoint/types/merkel.go#L60-L114">https://github.com/maticnetwork/heimdall/blob/develop/checkpoint/types/merkel.go#L60-L114</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Golang representation of block data used in checkpoint</span></span><br><span class="line">blockData := crypto.Keccak256(appendBytes32(</span><br><span class="line">    blockHeader.Number.Bytes(),</span><br><span class="line">    <span class="built_in">new</span>(big.Int).SetUint64(blockHeader.Time).Bytes(),</span><br><span class="line">    blockHeader.TxHash.Bytes(),</span><br><span class="line">    blockHeader.ReceiptHash.Bytes(),</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="comment">// array of block hashes of Bor blocks</span></span><br><span class="line">headers := [blockData1, blockData2, ..., blockDataN]</span><br><span class="line"></span><br><span class="line"><span class="comment">// merkel tre</span></span><br><span class="line">tree := merkle.NewTreeWithOpts(merkle.TreeOptions&#123;EnableHashSorting: <span class="literal">false</span>, DisableHashLeaves: <span class="literal">true</span>&#125;)</span><br><span class="line">tree.Generate(convert(headers), sha3.NewLegacyKeccak256())</span><br><span class="line"></span><br><span class="line"><span class="comment">// create checkpoint&#x27;s root hash</span></span><br><span class="line">rootHash := tree.Root().Hash</span><br></pre></td></tr></table></figure><h2 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h2><ol><li>侧链提交 checkpoint</li><li>Validator 接收、验证checkpoint，并提交主链</li><li>主链接收checkpoint，并发送checkpoint-ack</li><li>Validator 接收、验证 checkpoint-ack</li></ol><p><code>Validator</code> 层通过 <code>bridge</code>模块监听<code>主链</code>和<code>侧链</code>上的合约事件。</p><p><strong>质押</strong>：质押链为<code>ETH主链</code></p><p><strong>存款</strong>：发生在<code>ETH主链</code></p><p><strong>取款</strong>：发生在<code>MATIC侧链</code><br>下面的流程图代表了<code>checkpoint</code>的生命周期。<br><img src="/2021/10/19/matic-Checkpoint%E7%90%86%E8%A7%A3/checkpoint流程.png" alt="checkpoint流程"></p><p><code>Heimdall</code>使用与<code>Tendermint</code>相同的<code>共识算法</code>来选择下一个Proposer。<code>Proposer</code> 也就是 <code>Heimdall</code> 层的出块者，在 Matic 中发分起一个 Propose 提案</p><p>在以太坊链上提交<code>checkpoint</code>时，可能会因为多种原因而失败，如<code>gas limit</code>，以太坊拥堵，高<code>gas</code>费用。这就是为什么需要多阶段的<code>checkpoint</code>过程。</p><p>因为每个<code>checkpoint</code>都<code>Proposer</code>提起的，而每个<code>validator</code>都有机会被选举为<code>Proposer</code>。<br>如果提交以太坊链上的<code>checkpoint</code>成功或失败，将会发送<code>ack</code>和<code>no-ack</code>交易将改变Heimdall上的提议者，以进行下一个检查点。</p><h2 id="Checkpoint-流程"><a href="#Checkpoint-流程" class="headerlink" title="Checkpoint 流程"></a>Checkpoint 流程</h2><p><img src="/2021/10/19/matic-Checkpoint%E7%90%86%E8%A7%A3/checkpointMessage 流程.jpg" alt="Checkpoint 流程"></p><p>那么问题来了，Heimdall 链是怎么知道 checkpoint 提交 Ethereum主链成功没成功？</p><p>Heimdall项目中的bor模块，是基于<code>Ethereum</code>实现ETH协议，实际就是包装了EVM，可以接收ETH广播的区块，并监听合约事件，从事件中获取需要的事件信息。</p><h2 id="Checkpoint-事件监听"><a href="#Checkpoint-事件监听" class="headerlink" title="Checkpoint 事件监听"></a>Checkpoint 事件监听</h2><p>看下 checkpoint 相关的事件监听，heimdall 的事件处理通过将监听器监听到的事件，发送到队列当中，由事件处理器进行处理。<br>这些逻辑在 <code>bridge</code> 模块中进行。</p><p>关键事件：</p><ol><li>sendCheckpointToHeimdall</li><li>sendCheckpointToRootchain</li><li>sendCheckpointAckToHeimdall</li></ol><p>Rootchain是<code>Ethereum</code><br>Heimdall是matic的中间层</p><h3 id="获取监听事件"><a href="#获取监听事件" class="headerlink" title="获取监听事件"></a>获取监听事件</h3><p>bridge/setu/listener/heimdall.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ProcessBlockEvent - process Blockevents (BeginBlock, EndBlock events) from heimdall.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(hl *HeimdallListener)</span> <span class="title">ProcessBlockEvent</span><span class="params">(event sdk.StringEvent, blockHeight <span class="keyword">int64</span>)</span></span> &#123;</span><br><span class="line">    hl.Logger.Info(<span class="string">&quot;Received block event from Heimdall&quot;</span>, <span class="string">&quot;eventType&quot;</span>, event.Type, <span class="string">&quot;height&quot;</span>, blockHeight)</span><br><span class="line">    eventBytes, err := json.Marshal(event)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        hl.Logger.Error(<span class="string">&quot;Error while parsing block event&quot;</span>, <span class="string">&quot;error&quot;</span>, err, <span class="string">&quot;eventType&quot;</span>, event.Type)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> event.Type &#123;</span><br><span class="line">    <span class="keyword">case</span> checkpointTypes.EventTypeCheckpoint:</span><br><span class="line">        <span class="comment">//发送事件到队列</span></span><br><span class="line">        hl.sendBlockTask(<span class="string">&quot;sendCheckpointToRootchain&quot;</span>, eventBytes, blockHeight)</span><br><span class="line">    <span class="keyword">case</span> checkpointTypes.EventTypeCheckpointSync:</span><br><span class="line">        hl.sendBlockTask(<span class="string">&quot;sendCheckpointSyncToStakeChain&quot;</span>, eventBytes, blockHeight)</span><br><span class="line">    <span class="keyword">case</span> slashingTypes.EventTypeSlashLimit:</span><br><span class="line">        hl.sendBlockTask(<span class="string">&quot;sendTickToHeimdall&quot;</span>, eventBytes, blockHeight)</span><br><span class="line">    <span class="keyword">case</span> slashingTypes.EventTypeTickConfirm:</span><br><span class="line">        hl.sendBlockTask(<span class="string">&quot;sendTickToRootchain&quot;</span>, eventBytes, blockHeight)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> stakingTypes.EventTypeValidatorJoin,</span><br><span class="line">        stakingTypes.EventTypeSignerUpdate,</span><br><span class="line">        stakingTypes.EventTypeValidatorExit,</span><br><span class="line">        stakingTypes.EventTypeStakingSyncAck:</span><br><span class="line">        hl.sendBlockTask(<span class="string">&quot;sendStakingSyncToHeimdall&quot;</span>, eventBytes, blockHeight)</span><br><span class="line">    <span class="keyword">case</span> stakingTypes.EventTypeStakingSync:</span><br><span class="line">        hl.sendBlockTask(<span class="string">&quot;sendStakingSyncToRootChain&quot;</span>, eventBytes, blockHeight)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        hl.Logger.Debug(<span class="string">&quot;BlockEvent Type mismatch&quot;</span>, <span class="string">&quot;eventType&quot;</span>, event.Type)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送事件到队列"><a href="#发送事件到队列" class="headerlink" title="发送事件到队列"></a>发送事件到队列</h3><p>hl.queueConnector 是Heimdall的内部队列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(hl *HeimdallListener)</span> <span class="title">sendBlockTask</span><span class="params">(taskName <span class="keyword">string</span>, eventBytes []<span class="keyword">byte</span>, blockHeight <span class="keyword">int64</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// create machinery task</span></span><br><span class="line">    signature := &amp;tasks.Signature&#123;</span><br><span class="line">        Name: taskName,</span><br><span class="line">        Args: []tasks.Arg&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                Type:  <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                Value: <span class="keyword">string</span>(eventBytes),</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                Type:  <span class="string">&quot;int64&quot;</span>,</span><br><span class="line">                Value: blockHeight,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    signature.RetryCount = <span class="number">3</span></span><br><span class="line">    signature.RetryTimeout = <span class="number">3</span></span><br><span class="line">    hl.Logger.Info(<span class="string">&quot;Sending block level task&quot;</span>,</span><br><span class="line">        <span class="string">&quot;taskName&quot;</span>, taskName, <span class="string">&quot;eventBytes&quot;</span>, eventBytes, <span class="string">&quot;currentTime&quot;</span>, time.Now(), <span class="string">&quot;blockHeight&quot;</span>, blockHeight)</span><br><span class="line">    <span class="comment">// send task</span></span><br><span class="line">    _, err := hl.queueConnector.Server.SendTask(signature)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        hl.Logger.Error(<span class="string">&quot;Error sending block level task&quot;</span>, <span class="string">&quot;taskName&quot;</span>, taskName, <span class="string">&quot;blockHeight&quot;</span>, blockHeight, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理队列的-checkpoint-事件"><a href="#处理队列的-checkpoint-事件" class="headerlink" title="处理队列的 checkpoint 事件"></a>处理队列的 checkpoint 事件</h3><p>bridge/setu/processor/checkpoint.go</p><ol><li><code>sendCheckpointToHeimdall</code> 监听事件</li><li><code>cp.sendCheckpointToHeimdall</code> 事件处理器</li><li><code>sendCheckpointAckToHeimdall</code> checkpoint-Ack事件</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RegisterTasks - Registers checkpoint related tasks with machinery</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cp *CheckpointProcessor)</span> <span class="title">RegisterTasks</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cp.Logger.Info(<span class="string">&quot;Registering checkpoint tasks&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointToHeimdall&quot;</span>, cp.sendCheckpointToHeimdall); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointToHeimdall&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointToRootchain&quot;</span>, cp.sendCheckpointToRootchain); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointToRootchain&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointAckToHeimdall&quot;</span>, cp.sendCheckpointAckToHeimdall); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointAckToHeimdall&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointSyncToStakeChain&quot;</span>, cp.sendCheckpointSyncToStakeChain); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointSyncToStakeChain&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointSyncAckToHeimdall&quot;</span>, cp.sendCheckpointSyncAckToHeimdall); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointSyncAckToHeimdall&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> matic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> matic </tag>
            
            <tag> checkpoint </tag>
            
            <tag> polygon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMS 问题定位与排查</title>
      <link href="2021/07/21/jvm-CMS%E8%B0%83%E4%BC%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
      <url>2021/07/21/jvm-CMS%E8%B0%83%E4%BC%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近排查一个历史老问题，历史问题就是大家都知道，但是没人愿意处理。<br>线上节点 16 和 32 G 内存频繁的出现GC，并且由于 GC 还导至两个问题，1.CPU使用率在GC时变高，2.业务出现异常。<br>这个问题变得无法忍耐了，跟踪程序线程使用，CMS GC 线程CPU 使用在初始化时都 11-99% 之间，严重影响业务处理。<br>通过 <code>jstat</code> 观察，FullGC 不多，但是 YoungGC 非常频繁，YoungGC 多不影响服务性能吗？也影响。<br>计算一个服务GC的好坏，不是看 FullGC 多少，而是看整体服务的吞吐量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">68096.0 68096.0 16840.1  0.0   545344.0 115481.1 6658496.0  4835834.6  63280.0 60712.9 7084.0 6615.1 1930261 53981.101 4804  1248.371 55229.471</span><br><span class="line">68096.0 68096.0  0.0   17347.7 545344.0 12072.1  6658496.0  4836565.4  63280.0 60712.9 7084.0 6615.1 1930262 53981.125 4804  1248.371 55229.496</span><br><span class="line">68096.0 68096.0  0.0   12854.1 545344.0 252246.5 6658496.0  4838818.8  63280.0 60712.9 7084.0 6615.1 1930264 53981.168 4804  1248.371 55229.539</span><br><span class="line">68096.0 68096.0 19501.0  0.0   545344.0 187933.5 6658496.0  4838869.4  63280.0 60712.9 7084.0 6615.1 1930265 53981.189 4804  1248.371 55229.559</span><br><span class="line">68096.0 68096.0 19501.0  0.0   545344.0 445775.5 6658496.0  4838869.4  63280.0 60712.9 7084.0 6615.1 1930265 53981.189 4804  1248.371 55229.559</span><br><span class="line">68096.0 68096.0 11858.3  0.0   545344.0 515043.9 6658496.0  4845614.9  63280.0 60712.9 7084.0 6615.1 1930267 53981.239 4804  1248.371 55229.610</span><br><span class="line">68096.0 68096.0  0.0   16469.0 545344.0 361227.7 6658496.0  4846356.5  63280.0 60712.9 7084.0 6615.1 1930268 53981.263 4804  1248.371 55229.634</span><br><span class="line">68096.0 68096.0  0.0   20075.6 545344.0 226522.4 6658496.0  4847100.6  63280.0 60712.9 7084.0 6615.1 1930270 53981.316 4804  1248.371 55229.687</span><br><span class="line">68096.0 68096.0 19591.2  0.0   545344.0 325872.6 6658496.0  4852312.8  63280.0 60712.9 7084.0 6615.1 1930271 53981.344 4804  1248.371 55229.715</span><br><span class="line">68096.0 68096.0  0.0   19282.2 545344.0 206195.9 6658496.0  4853497.6  63280.0 60712.9 7084.0 6615.1 1930272 53981.368 4804  1248.371 55229.739</span><br><span class="line">68096.0 68096.0  0.0   16319.6 545344.0 520305.2 6658496.0  4858184.1  63280.0 60712.9 7084.0 6615.1 1930274 53981.414 4804  1248.371 55229.785</span><br><span class="line">68096.0 68096.0 19240.3  0.0   545344.0 349365.5 6658496.0  4859016.3  63280.0 60712.9 7084.0 6615.1 1930275 53981.445 4804  1248.371 55229.815</span><br></pre></td></tr></table></figure><p>计算吞吐量</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>先排除环境原因，从开发环境到线上环境发现情况是相同的，可以初步认定是一个普遍问题。</p><h3 id="定位-16G-内存服务情况"><a href="#定位-16G-内存服务情况" class="headerlink" title="定位 16G 内存服务情况"></a>定位 16G 内存服务情况</h3><p>先从 <strong>16G</strong> 内存开始，收集一些基本信息，再观察运行情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java -Xms9g -Xmx9g</span><br><span class="line">   -XX:+UseConcMarkSweepGC</span><br><span class="line">   -XX:+PrintGCDetails -Xloggc:./gc.log</span><br><span class="line">   -XX:+PrintGCDateStamps</span><br><span class="line">   -XX:+CMSParallelRemarkEnabled</span><br><span class="line">   -XX:ReservedCodeCacheSize=<span class="number">256</span>m</span><br><span class="line">   -XX:+CMSScavengeBeforeRemark</span><br><span class="line">   -XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">   -XX:MaxDirectMemorySize=<span class="number">1</span>g</span><br><span class="line">  -jar Node.jar</span><br><span class="line">  -c config.conf</span><br></pre></td></tr></table></figure><p>从这上面能看到关于 <strong>CMS</strong> 关相的几个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:+CMSParallelRemarkEnabled</span><br><span class="line">-XX:+CMSScavengeBeforeRemark</span><br></pre></td></tr></table></figure><h4 id="内存使用情况"><a href="#内存使用情况" class="headerlink" title="内存使用情况"></a>内存使用情况</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = <span class="number">40</span></span><br><span class="line">   MaxHeapFreeRatio         = <span class="number">70</span></span><br><span class="line">   MaxHeapSize              = <span class="number">9663676416</span> (<span class="number">9216.0</span>MB)</span><br><span class="line">   NewSize                  = <span class="number">697892864</span> (<span class="number">665.5625</span>MB)</span><br><span class="line">   MaxNewSize               = <span class="number">697892864</span> (<span class="number">665.5625</span>MB)</span><br><span class="line">   OldSize                  = <span class="number">8965783552</span> (<span class="number">8550.4375</span>MB)</span><br><span class="line">   NewRatio                 = <span class="number">2</span></span><br><span class="line">   SurvivorRatio            = <span class="number">8</span></span><br><span class="line">   MetaspaceSize            = <span class="number">21807104</span> (<span class="number">20.796875</span>MB)</span><br><span class="line">   CompressedClassSpaceSize = <span class="number">1073741824</span> (<span class="number">1024.0</span>MB)</span><br><span class="line">   MaxMetaspaceSize         = <span class="number">17592186044415</span> MB</span><br><span class="line">   G1HeapRegionSize         = <span class="number">0</span> (<span class="number">0.0</span>MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line"><span class="function">New <span class="title">Generation</span> <span class="params">(Eden + <span class="number">1</span> Survivor Space)</span>:</span></span><br><span class="line"><span class="function">   capacity </span>= <span class="number">628162560</span> (<span class="number">599.0625</span>MB)</span><br><span class="line">   used     = <span class="number">511774816</span> (<span class="number">488.0664978027344</span>MB)</span><br><span class="line">   free     = <span class="number">116387744</span> (<span class="number">110.99600219726562</span>MB)</span><br><span class="line">   <span class="number">81.47171585648148</span>% used</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity = <span class="number">558432256</span> (<span class="number">532.5625</span>MB)</span><br><span class="line">   used     = <span class="number">487164440</span> (<span class="number">464.5962142944336</span>MB)</span><br><span class="line">   free     = <span class="number">71267816</span> (<span class="number">67.9662857055664</span>MB)</span><br><span class="line">   <span class="number">87.23787617311275</span>% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity = <span class="number">69730304</span> (<span class="number">66.5</span>MB)</span><br><span class="line">   used     = <span class="number">24610376</span> (<span class="number">23.47028350830078</span>MB)</span><br><span class="line">   free     = <span class="number">45119928</span> (<span class="number">43.02971649169922</span>MB)</span><br><span class="line">   <span class="number">35.29365941097862</span>% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity = <span class="number">69730304</span> (<span class="number">66.5</span>MB)</span><br><span class="line">   used     = <span class="number">0</span> (<span class="number">0.0</span>MB)</span><br><span class="line">   free     = <span class="number">69730304</span> (<span class="number">66.5</span>MB)</span><br><span class="line">   <span class="number">0.0</span>% used</span><br><span class="line">concurrent mark-sweep generation:</span><br><span class="line">   capacity = <span class="number">8965783552</span> (<span class="number">8550.4375</span>MB)</span><br><span class="line">   used     = <span class="number">4737287088</span> (<span class="number">4517.829025268555</span>MB)</span><br><span class="line">   free     = <span class="number">4228496464</span> (<span class="number">4032.6084747314453</span>MB)</span><br><span class="line">   <span class="number">52.837401890471156</span>% used</span><br><span class="line"></span><br><span class="line"><span class="number">20983</span> interned Strings occupying <span class="number">2039024</span> bytes.</span><br></pre></td></tr></table></figure><p>这里看出一个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = <span class="number">40</span></span><br><span class="line">   MaxHeapFreeRatio         = <span class="number">70</span></span><br><span class="line">   MaxHeapSize              = <span class="number">9663676416</span> (<span class="number">9216.0</span>MB)</span><br><span class="line">   NewSize                  = <span class="number">697892864</span> (<span class="number">665.5625</span>MB)</span><br><span class="line">   MaxNewSize               = <span class="number">697892864</span> (<span class="number">665.5625</span>MB)</span><br><span class="line">   OldSize                  = <span class="number">8965783552</span> (<span class="number">8550.4375</span>MB)</span><br><span class="line">   NewRatio                 = <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>NewRatio=2</strong> 但是实际新生代获得的内存空间只有 <strong>665.5625MB</strong>，这就有点奇怪了，不是说好的老年代:新生代 2 : 1 吗。<br>这是一个问题，另外从当前的 GC 回收时间推算出，当前吞吐量为: 96%，还没有达到最优的情况。</p><h4 id="修复新生代比例大小"><a href="#修复新生代比例大小" class="headerlink" title="修复新生代比例大小"></a>修复新生代比例大小</h4><p>添加启动参数 -XX:NewRatio=2，完整启动命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java -Xms9g -Xmx9g</span><br><span class="line">   -XX:NewRatio=<span class="number">2</span></span><br><span class="line">   -XX:+UseConcMarkSweepGC</span><br><span class="line">   -XX:+PrintGCDetails -Xloggc:./gc.log</span><br><span class="line">   -XX:+PrintGCDateStamps</span><br><span class="line">   -XX:+CMSParallelRemarkEnabled</span><br><span class="line">   -XX:ReservedCodeCacheSize=<span class="number">256</span>m</span><br><span class="line">   -XX:+CMSScavengeBeforeRemark</span><br><span class="line">   -XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">   -XX:MaxDirectMemorySize=<span class="number">1</span>g</span><br><span class="line">  -jar Node.jar</span><br><span class="line">  -c config.conf</span><br></pre></td></tr></table></figure><p>通过 <code>jstat -gc pid 1000</code> 观察一下 GC 情况<br>添加 <code>-XX:NewRatio=2</code> 启动参数的机器情况</p><p>jmap -heap 查看一下调整后的新生代占比，现在 <code>NewSize=3072.0MB</code> <code>OldSize=6144.0MB</code><br>这时比例生效了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         &#x3D; 40</span><br><span class="line">   MaxHeapFreeRatio         &#x3D; 70</span><br><span class="line">   MaxHeapSize              &#x3D; 9663676416 (9216.0MB)</span><br><span class="line">   NewSize                  &#x3D; 3221225472 (3072.0MB)</span><br><span class="line">   MaxNewSize               &#x3D; 3221225472 (3072.0MB)</span><br><span class="line">   OldSize                  &#x3D; 6442450944 (6144.0MB)</span><br><span class="line">   NewRatio                 &#x3D; 2</span><br><span class="line">   SurvivorRatio            &#x3D; 8</span><br><span class="line">   MetaspaceSize            &#x3D; 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize &#x3D; 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         &#x3D; 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         &#x3D; 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">New Generation (Eden + 1 Survivor Space):</span><br><span class="line">   capacity &#x3D; 2899116032 (2764.8125MB)</span><br><span class="line">   used     &#x3D; 2516795744 (2400.2034606933594MB)</span><br><span class="line">   free     &#x3D; 382320288 (364.6090393066406MB)</span><br><span class="line">   86.81252203154317% used</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity &#x3D; 2577006592 (2457.625MB)</span><br><span class="line">   used     &#x3D; 2194686304 (2093.0159606933594MB)</span><br><span class="line">   free     &#x3D; 382320288 (364.6090393066406MB)</span><br><span class="line">   85.16417112836008% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity &#x3D; 322109440 (307.1875MB)</span><br><span class="line">   used     &#x3D; 322109440 (307.1875MB)</span><br><span class="line">   free     &#x3D; 0 (0.0MB)</span><br><span class="line">   100.0% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity &#x3D; 322109440 (307.1875MB)</span><br><span class="line">   used     &#x3D; 0 (0.0MB)</span><br><span class="line">   free     &#x3D; 322109440 (307.1875MB)</span><br><span class="line">   0.0% used</span><br><span class="line">concurrent mark-sweep generation:</span><br><span class="line">   capacity &#x3D; 6442450944 (6144.0MB)</span><br><span class="line">   used     &#x3D; 525052336 (500.7289276123047MB)</span><br><span class="line">   free     &#x3D; 5917398608 (5643.271072387695MB)</span><br><span class="line">   8.149884889523188% used</span><br><span class="line"></span><br><span class="line">13727 interned Strings occupying 1224528 bytes.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">S0C      S1C      S0U    S1U     EC        EU        OC         OU         MC      MU      CCSC   CCSU     YGC   YGCT     FGC    FGCT    GCT</span><br><span class="line">314560.0 314560.0  0.0   85539.9 2516608.0 1975197.4 6291456.0  4613067.7  63012.0 59752.3 7024.0 6520.3   9317  494.820  222    22.566  517.386</span><br><span class="line">314560.0 314560.0  0.0   85539.9 2516608.0 2228635.2 6291456.0  4613067.7  63012.0 59752.3 7024.0 6520.3   9317  494.820  222    22.566  517.386</span><br><span class="line">314560.0 314560.0 87689.1  0.0   2516608.0 681984.2  6291456.0  4621812.0  63012.0 59752.3 7024.0 6520.3   9318  494.875  222    22.566  517.441</span><br><span class="line">314560.0 314560.0 87689.1  0.0   2516608.0 1965292.1 6291456.0  4621812.0  63012.0 59752.3 7024.0 6520.3   9318  494.875  222    22.566  517.441</span><br><span class="line">314560.0 314560.0  0.0   95789.9 2516608.0 145469.7  6291456.0  4629480.3  63012.0 59752.3 7024.0 6520.3   9319  494.928  222    22.566  517.494</span><br><span class="line">314560.0 314560.0  0.0   95789.9 2516608.0 1741481.8 6291456.0  4629480.3  63012.0 59752.3 7024.0 6520.3   9319  494.928  222    22.566  517.494</span><br><span class="line">314560.0 314560.0  0.0   95789.9 2516608.0 1978876.4 6291456.0  4629480.3  63012.0 59752.3 7024.0 6520.3   9319  494.928  222    22.566  517.494</span><br><span class="line">314560.0 314560.0 74735.8  0.0   2516608.0 306828.0  6291456.0  4638677.5  63012.0 59752.3 7024.0 6520.3   9320  494.982  222    22.566  517.549</span><br><span class="line">314560.0 314560.0 74735.8  0.0   2516608.0 1513196.3 6291456.0  4638677.5  63012.0 59752.3 7024.0 6520.3   9320  494.982  222    22.566  517.549</span><br><span class="line">314560.0 314560.0 74735.8  0.0   2516608.0 1941220.4 6291456.0  4638677.5  63012.0 59752.3 7024.0 6520.3   9320  494.982  222    22.566  517.549</span><br><span class="line">314560.0 314560.0 74735.8  0.0   2516608.0 2415940.5 6291456.0  4638677.5  63012.0 59752.3 7024.0 6520.3   9320  494.982  222    22.566  517.549</span><br></pre></td></tr></table></figure><p>对比存在问题的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">S0C     S1C     S0U    S1U     EC       EU       OC         OU         MC      MU      CCSC   CCSU    YGC    YGCT     FGC     FGCT  GCT</span><br><span class="line">68096.0 68096.0  0.0   16853.2 545344.0 371165.3 8755648.0  5890791.6  62312.0 59746.5 7076.0 6608.5  43879 1312.752  60      5.206 1317.958</span><br><span class="line">68096.0 68096.0 19377.9  0.0   545344.0 420827.3 8755648.0  5891528.9  62312.0 59746.5 7076.0 6608.5  43880 1312.785  60      5.206 1317.991</span><br><span class="line">68096.0 68096.0  0.0   22147.2 545344.0 295435.0 8755648.0  5891577.4  62312.0 59746.5 7076.0 6608.5  43881 1312.816  60      5.206 1318.022</span><br><span class="line">68096.0 68096.0 21257.5  0.0   545344.0 461020.2 8755648.0  5898299.9  62312.0 59746.5 7076.0 6608.5  43882 1312.850  60      5.206 1318.056</span><br><span class="line">68096.0 68096.0  0.0   13895.9 545344.0 419534.8 8755648.0  5901746.3  62312.0 59746.5 7076.0 6608.5  43885 1312.961  60      5.206 1318.167</span><br><span class="line">68096.0 68096.0  0.0   17542.7 545344.0 63902.2  8755648.0  5906856.1  62312.0 59746.5 7076.0 6608.5  43887 1313.028  60      5.206 1318.234</span><br><span class="line">68096.0 68096.0  0.0   17542.7 545344.0 444878.0 8755648.0  5906856.1  62312.0 59746.5 7076.0 6608.5  43887 1313.028  60      5.206 1318.234</span><br><span class="line">68096.0 68096.0 15241.8  0.0   545344.0 403475.0 8755648.0  5909706.0  62312.0 59746.5 7076.0 6608.5  43890 1313.108  60      5.206 1318.314</span><br><span class="line">68096.0 68096.0 24031.2  0.0   545344.0 52019.0  8755648.0  5916571.4  62312.0 59746.5 7076.0 6608.5  43892 1313.174  60      5.206 1318.380</span><br><span class="line">68096.0 68096.0 17381.4  0.0   545344.0 349457.1 8755648.0  5919082.7  62312.0 59746.5 7076.0 6608.5  43894 1313.232  60      5.206 1318.438</span><br><span class="line">68096.0 68096.0  0.0   20887.7 545344.0 442091.1 8755648.0  5919151.3  62312.0 59746.5 7076.0 6608.5  43895 1313.261  60      5.206 1318.467</span><br></pre></td></tr></table></figure><p>这两组数据能看出什么?</p><blockquote><p>YGC : 新生代垃圾回收次数<br>YGCT : 新生代垃圾回收时间<br>FGC : 老年代垃圾回收次数<br>FGCT : 老年代垃圾回收时间<br>GCT : 垃圾回收总消耗时间</p></blockquote><p>对比两组GC回收时间数据</p><ol><li>YGC <code>9320 : 43895</code>，次数减少 4.7倍</li><li>YGCT <code>494.982 : 1313.261</code>， 减少 2.6倍</li><li>GCT <code>517.549: 1318.467</code>，减少 2.5 倍</li><li>FGC <code>222 : 60</code> 却增加了 3.7 倍的次数</li></ol><p>这有点出乎意料，如果新生代空间够大之后，对象有足够的新生代空间可以分配对象，保证尽可能多的对象在新生代中被回收，熬不到老年代。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> gc </tag>
            
            <tag> cms </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链--06bitcore钱包使用</title>
      <link href="2021/05/24/blockchain-06bitcore%E9%92%B1%E5%8C%85%E4%BD%BF%E7%94%A8/"/>
      <url>2021/05/24/blockchain-06bitcore%E9%92%B1%E5%8C%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="比特币钱包"><a href="#比特币钱包" class="headerlink" title="比特币钱包"></a>比特币钱包</h2><p>不管是开发者，还是投资者，比特币钱包都是一个不错的学习工具，和常用的电子钱包相差不大。<br>开发者可以很好的从这个工具是学习比特币在客户端的应用，非常值得借鉴，包括现在很多项目都有比特币的影子，有些甚致直接拿到比特币的代码改改就发行自己加密货币。</p><p>比特币官网: <a href="https://bitcoin.org/zh_CN/">https://bitcoin.org/zh_CN/</a></p><p>直接跳到钱包选择页面: <a href="https://bitcoin.org/zh_CN/choose-your-wallet?step=5&amp;platform=mac">https://bitcoin.org/zh_CN/choose-your-wallet?step=5&amp;platform=mac</a></p><p>我这里使用的时 BitCore 钱包，这个钱包比较成熟。<br><a href="https://bitcoin.org/zh_CN/wallets/desktop/mac/bitcoincore/?step=5&amp;platform=mac">https://bitcoin.org/zh_CN/wallets/desktop/mac/bitcoincore/?step=5&amp;platform=mac</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-同步数据"><a href="#1-同步数据" class="headerlink" title="1.同步数据"></a>1.同步数据</h3><p>初次使用比特币钱包，会进行一次全量数据同步，大概在 500G 左右，所以硬盘要保证够大，同步完成后，会进行裁剪。大几2G左右大小。</p><p><img src="/2021/05/24/blockchain-06bitcore%E9%92%B1%E5%8C%85%E4%BD%BF%E7%94%A8/1.jpg" alt="同步数据"></p><h3 id="2-创建钱包"><a href="#2-创建钱包" class="headerlink" title="2.创建钱包"></a>2.创建钱包</h3><p>同步完成后，才能进行后续的操作。<br>先创建钱包密码，这个密码会需要记住，不能忘记，否则会使用不了钱包。</p><p><img src="/2021/05/24/blockchain-06bitcore%E9%92%B1%E5%8C%85%E4%BD%BF%E7%94%A8/2.jpg" alt="创建密码"></p><p><img src="/2021/05/24/blockchain-06bitcore%E9%92%B1%E5%8C%85%E4%BD%BF%E7%94%A8/3.jpg" alt="创建钱包"></p><h3 id="3-导出私钥"><a href="#3-导出私钥" class="headerlink" title="3.导出私钥"></a>3.导出私钥</h3><p>私钥非常重要，保证你的钱包可以在不同设置之间进行使用，那么需要保存好私钥，不能丢失或泄露。大部份丢失的钱包都是因为丢失了私钥，找不回钱包。<br>在 “窗口”–&gt;”控制台” 通过命令行提取私钥。<br><img src="/2021/05/24/blockchain-06bitcore%E9%92%B1%E5%8C%85%E4%BD%BF%E7%94%A8/4.jpg" alt="控制台"></p><h4 id="解锁提取操作-walletpassphrase"><a href="#解锁提取操作-walletpassphrase" class="headerlink" title="解锁提取操作 walletpassphrase"></a>解锁提取操作 walletpassphrase</h4><blockquote><p>格式: walletpassphrase 密码 超时时间</p></blockquote><p>walletpassphrase test 120<br>在 120 秒超时时间内进行操作，如果超时了，重新执行一下上面的命令。</p><h4 id="提取私钥-dumpprivkey"><a href="#提取私钥-dumpprivkey" class="headerlink" title="提取私钥 dumpprivkey"></a>提取私钥 dumpprivkey</h4><blockquote><p>格式: dumpprivkey 钱包地址</p></blockquote><p>dumpprivkey 2testzjylkq9ldnvqwwtest</p><p>通过这个操作，就可以得到钱包的私钥，一定保存好这个私钥。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> BTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 比特币 </tag>
            
            <tag> 钱包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链--04coinbase交易</title>
      <link href="2021/05/24/blockchain-04coinbase%E4%BA%A4%E6%98%93/"/>
      <url>2021/05/24/blockchain-04coinbase%E4%BA%A4%E6%98%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>coinbase交易，也是被打包在区块中的第一笔交易，只是这笔是区块的第一笔交易，是挖矿产生的奖励。</p></blockquote><h2 id="查看-coinbase交易"><a href="#查看-coinbase交易" class="headerlink" title="查看 coinbase交易"></a>查看 coinbase交易</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.blockcypher.com/v1/btc/main/txs/1a44cb6551af919652eac49d953c50ab2acb1ebdfe7d2b20ed3c1944bd37ac96</span><br></pre></td></tr></table></figure><h2 id="coinbase-结构"><a href="#coinbase-结构" class="headerlink" title="coinbase 结构"></a>coinbase 结构</h2><p>可以很明显的看到，除了公共字段外，有 outputs、inputs 两个字段。</p><ol><li>outputs: 交易输出</li><li>inputs: 交易输入</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  block_hash: &quot;00000000000000000000bca6ccc2ef309fd814f80a55b3e08a4212326137d7d2&quot;,</span><br><span class="line">  block_height: 681181,</span><br><span class="line">  block_index: 0,</span><br><span class="line">  hash: &quot;1a44cb6551af919652eac49d953c50ab2acb1ebdfe7d2b20ed3c1944bd37ac96&quot;,</span><br><span class="line">  addresses: [</span><br><span class="line">    <span class="string">&quot;1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  total: 680382463,</span><br><span class="line">  fees: 0,</span><br><span class="line">  size: 378,</span><br><span class="line">  vsize: 351,</span><br><span class="line">  preference: &quot;low&quot;,</span><br><span class="line">  confirmed: &quot;2021-04-30T05:03:17.197Z&quot;,</span><br><span class="line">  received: &quot;2021-04-30T05:03:17.197Z&quot;,</span><br><span class="line">  ver: 1,</span><br><span class="line">  lock_time: 1241604347,</span><br><span class="line">  double_spend: false,</span><br><span class="line">  vin_sz: 1,</span><br><span class="line">  vout_sz: 4,</span><br><span class="line">  opt_in_rbf: true,</span><br><span class="line">  data_protocol: &quot;unknown&quot;,</span><br><span class="line">  confirmations: 3552,</span><br><span class="line">  confidence: 1,</span><br><span class="line">  inputs: [</span><br><span class="line">    &#123;</span><br><span class="line">      output_index: -1,</span><br><span class="line">      script: &quot;03dd640a2cfabe6d6ddc65590fdf47b7f8d0805179ce336bb1dfb8fc6697e67bac15286de7910b4a7610000000f09f909f082f4632506f6f6c2f114d696e6564206279206c67316467737472000000000000000000000000000000000000050000000000&quot;,</span><br><span class="line">      sequence: 420554726,</span><br><span class="line">      script_type: &quot;empty&quot;,</span><br><span class="line">      age: 681181</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  outputs: [</span><br><span class="line">    &#123;</span><br><span class="line">      value: 680382463,</span><br><span class="line">      script: &quot;76a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac&quot;,</span><br><span class="line">      spent_by: &quot;e80511c1ed5deec12f50d918614a94145d3089f269e33522a0aa72b0054a5c96&quot;,</span><br><span class="line">      addresses: [</span><br><span class="line">        <span class="string">&quot;1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      script_type: &quot;pay-to-pubkey-hash&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: 0,</span><br><span class="line">      script: &quot;6a24aa21a9ed24ea773c9b58e4a4ad4c14ae4b75ff79cb1adbb08b0d3960d532d655414030dc&quot;,</span><br><span class="line">      addresses: null,</span><br><span class="line">      script_type: &quot;null-data&quot;,</span><br><span class="line">      data_hex: &quot;aa21a9ed24ea773c9b58e4a4ad4c14ae4b75ff79cb1adbb08b0d3960d532d655414030dc&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: 0,</span><br><span class="line">      script: &quot;6a3448617468ae18c94d8ebfbebe1e8a6567fee08b7023579133e65a4ad2ac48ef7c13b6f444a3bf7eac9e8b418186649d337d64fee1&quot;,</span><br><span class="line">      addresses: null,</span><br><span class="line">      script_type: &quot;null-data&quot;,</span><br><span class="line">      data_hex: &quot;48617468ae18c94d8ebfbebe1e8a6567fee08b7023579133e65a4ad2ac48ef7c13b6f444a3bf7eac9e8b418186649d337d64fee1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: 0,</span><br><span class="line">      script: &quot;6a24b9e11b6d267720bd57a3442dd397de915eb9c2d46e3dc90633755d504e5458ef23804ff2&quot;,</span><br><span class="line">      addresses: null,</span><br><span class="line">      script_type: &quot;null-data&quot;,</span><br><span class="line">      data_hex: &quot;b9e11b6d267720bd57a3442dd397de915eb9c2d46e3dc90633755d504e5458ef23804ff2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总体结构说明"><a href="#总体结构说明" class="headerlink" title="总体结构说明"></a>总体结构说明</h2><table><thead><tr><th style="text-align:center">字节</th><th style="text-align:center">字段</th><th style="text-align:center">字段说明</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">4</td><td style="text-align:center">ver</td><td style="text-align:center">交易版本号</td><td style="text-align:center">明确这笔交易参照的规则</td></tr><tr><td style="text-align:center">1-9</td><td style="text-align:center">vin_sz</td><td style="text-align:center">输入计数器</td><td style="text-align:center">包含的交易输入数量</td></tr><tr><td style="text-align:center">不定</td><td style="text-align:center">inputs</td><td style="text-align:center">交易输入</td><td style="text-align:center">一个或多个交易输入</td></tr><tr><td style="text-align:center">1-9</td><td style="text-align:center">vout_sz</td><td style="text-align:center">输出计数器</td><td style="text-align:center">包含的交易输出数量</td></tr><tr><td style="text-align:center">不定</td><td style="text-align:center">outputs</td><td style="text-align:center">交易输出</td><td style="text-align:center">一个或多个交易输出</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">lock_time</td><td style="text-align:center">锁定时间</td><td style="text-align:center">一个区块号或UNIX时间戳</td></tr></tbody></table><h3 id="inputs-交易输入"><a href="#inputs-交易输入" class="headerlink" title="inputs 交易输入"></a>inputs 交易输入</h3><table><thead><tr><th style="text-align:center">字节长度</th><th style="text-align:center">字段</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">32</td><td style="text-align:center">交易哈希值</td><td style="text-align:center">固定为全0</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">输出索引</td><td style="text-align:center">固定为全1</td></tr><tr><td style="text-align:center">1-9</td><td style="text-align:center">Coinbase脚本长度</td><td style="text-align:center">coinbase的脚本字节长度</td></tr><tr><td style="text-align:center">不定</td><td style="text-align:center">coinbase脚本</td><td style="text-align:center">coinbase脚本，可以任意填充</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">序列号</td><td style="text-align:center">固定值0xFFFFFFFF</td></tr></tbody></table><h3 id="outputs-交易输出"><a href="#outputs-交易输出" class="headerlink" title="outputs 交易输出"></a>outputs 交易输出</h3><table><thead><tr><th style="text-align:center">字节长度</th><th style="text-align:center">字段</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">字节长度</td><td style="text-align:center">字段</td><td style="text-align:center">说明</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">总量</td><td style="text-align:center">用聪表示的比特币值</td></tr><tr><td style="text-align:center">1-9</td><td style="text-align:center">锁定脚本大小</td><td style="text-align:center">用字节表示的后面的锁定脚本长度</td></tr><tr><td style="text-align:center">不定</td><td style="text-align:center">锁定脚本</td><td style="text-align:center">一个定义了支付输出所需条件的脚本</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> coinbase交易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链--05比特币区块同步机制</title>
      <link href="2021/04/29/blockchain-%E5%8C%BA%E5%9D%97%E9%93%BE-05%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/"/>
      <url>2021/04/29/blockchain-%E5%8C%BA%E5%9D%97%E9%93%BE-05%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>一个区块生产出来之后，需要进行同步给其它的节点。由于区块链是去中心化的，所以所有节点都保留相同的全量数据。<br>当一个区块打包好一个区块后，需要同步给其它节点，进行校验 和 上链。<br>只有上链的成功的区块，才算是区块链上的一个块。换句话说，区块可能上链成功，也有可能上链不成功。</p></blockquote><h2 id="同步区块中的问题"><a href="#同步区块中的问题" class="headerlink" title="同步区块中的问题"></a>同步区块中的问题</h2><ol><li>为什么要同步区块</li><li>如何保证同步</li><li>网络延迟如何解决</li><li>同时收到相同高度的块，该同步谁的块</li><li>如何得知块已被确认</li><li>被丢块的节点会怎么样</li></ol><h2 id="区块打包"><a href="#区块打包" class="headerlink" title="区块打包"></a>区块打包</h2><h2 id="区块广播"><a href="#区块广播" class="headerlink" title="区块广播"></a>区块广播</h2><h2 id="区块验证"><a href="#区块验证" class="headerlink" title="区块验证"></a>区块验证</h2><h2 id="区块上链"><a href="#区块上链" class="headerlink" title="区块上链"></a>区块上链</h2><h2 id="区块回滚"><a href="#区块回滚" class="headerlink" title="区块回滚"></a>区块回滚</h2>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> BTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 比特币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链--04交易广播和打包上链</title>
      <link href="2021/04/27/blockchain-04%E4%BA%A4%E6%98%93%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6/"/>
      <url>2021/04/27/blockchain-04%E4%BA%A4%E6%98%93%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="交易发起"><a href="#交易发起" class="headerlink" title="交易发起"></a>交易发起</h2><p>交易的发起打包都经历了哪些步骤</p><h2 id="交易打包"><a href="#交易打包" class="headerlink" title="交易打包"></a>交易打包</h2><p>交易如何打包</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> BTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 交易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链--03比特币区块结构</title>
      <link href="2021/04/20/blockchain-03%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84/"/>
      <url>2021/04/20/blockchain-03%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="区块结构"><a href="#区块结构" class="headerlink" title="区块结构"></a>区块结构</h2><blockquote><p>区块链开发之前，先了解比特币的区块结构，有利于了解后续比特币的各种数据结构的做用。</p></blockquote><p>本文要介结几个重要概念：</p><ol><li>区块结构</li><li>区块头</li><li>区块体</li><li>区块查看工具</li></ol><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块是比特币的核心。<br>当前比特币网络，每10分产一个块。<br>区块的作用: 比特币最核心的数据结构，包含了交易的重要标识，包括：区块头、区块体、区块大小等数据。</p><h3 id="一个完整的区块结构"><a href="#一个完整的区块结构" class="headerlink" title="一个完整的区块结构"></a>一个完整的区块结构</h3><table><thead><tr><th style="text-align:center">数据项</th><th style="text-align:center">字节</th><th style="text-align:center">字段</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Magic NO</td><td style="text-align:center">4</td><td style="text-align:center">魔数</td><td style="text-align:center">常数0xD9B4BEF9</td></tr><tr><td style="text-align:center">Blocksize</td><td style="text-align:center">4</td><td style="text-align:center">区块大小</td><td style="text-align:center">用字节表示的该字段之后的区块大小</td></tr><tr><td style="text-align:center">Blockheader</td><td style="text-align:center">80</td><td style="text-align:center">区块头</td><td style="text-align:center">组成区块头的几个字段</td></tr><tr><td style="text-align:center">Transaction counter</td><td style="text-align:center">1-9</td><td style="text-align:center">交易计数器</td><td style="text-align:center">该区块包含的交易数量，包含coinbase交易</td></tr><tr><td style="text-align:center">Transactions</td><td style="text-align:center">不定</td><td style="text-align:center">交易</td><td style="text-align:center">记录在区块里的交易信息，使用原生的交易信息格式，并且交易在数据流中的位置必须与Merkle树的叶子节点顺序一致</td></tr></tbody></table><p><img src="/2021/04/20/blockchain-03%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84/区块.jpeg" alt="区块"></p><p>这里最典型的要数 <strong>区块头</strong>和 <strong>区块体</strong> 了，因为它们通常在学习区块链的时候，比较能说明区块链的重要特性。</p><p>另外区块链不看不见摸不着的东西，人往往需要可视化的模型会更有助于理解抽象的概念。</p><p>这里介绍一个工具，区块链浏览器：<br><a href="https://blockchain.info/">https://blockchain.info/</a></p><p> 通过这个浏览器，可以查看区块内的信息。<br> 为什么这个站点可以查看区块信息？<br> 因为区块链的服务，也就是个服务，提供了查询接口，机构或个人，只需要运行区块链服务，在本地运行就可以访问区块链信息，前提是要同步好区块数据。<br> 之前的文章就强调过，鼓励大家运行区块链服务是区块链的特点，币是奖励，算是一种副产物，是被金融机构炒起来的。</p><h3 id="区块头"><a href="#区块头" class="headerlink" title="区块头"></a>区块头</h3><p><strong>查看区块信息</strong>￼</p><blockquote><p>getblock  00000000000000000000bca6ccc2ef309fd814f80a55b3e08a4212326137d7d2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;hash&quot;: &quot;00000000000000000000bca6ccc2ef309fd814f80a55b3e08a4212326137d7d2&quot;,</span><br><span class="line">  &quot;confirmations&quot;: 30,</span><br><span class="line">  &quot;strippedsize&quot;: 884103,</span><br><span class="line">  &quot;size&quot;: 1345977,</span><br><span class="line">  &quot;weight&quot;: 3998286,</span><br><span class="line">  &quot;height&quot;: 681181,</span><br><span class="line">  &quot;version&quot;: 536870912,</span><br><span class="line">  &quot;versionHex&quot;: &quot;20000000&quot;,</span><br><span class="line">  &quot;merkleroot&quot;: &quot;574dfd1961a53bb1fd307d7345b2aff6a196cce29a824b9029d454e1f61cfb35&quot;,</span><br><span class="line">  &quot;tx&quot;: [</span><br><span class="line">    &quot;1a44cb6551af919652eac49d953c50ab2acb1ebdfe7d2b20ed3c1944bd37ac96&quot;,</span><br><span class="line">    &quot;3e06d35f7f550068a72991d62dd32281a13e1492867b1c8531a4aa12f591cff8&quot;,</span><br><span class="line">    &quot;9d66b3a4b6b683aa4d03d8186d31d33e41e73bd96692cbf33a152b99100b326a&quot;,</span><br><span class="line">    &quot;ae6fdde3a16e91d587a5d3c1500d5828a01e69c02b6832cde132111fd90c4760&quot;,</span><br><span class="line">    &quot;91a5aa20c0582695a90cfdf4dab5540406c9b78fba4a20f6cd6cb96445d31be5&quot;,</span><br><span class="line">    &quot;471ce26f56eb1c164315704b923a1095145256c0e43a77ccd72254265c950b0f&quot;,</span><br><span class="line">    &quot;fb56a184da1cff5e8c0cc65c13392c68517713754338f87047bef07c1a43b032&quot;,</span><br><span class="line">    &quot;8be8b938eff96313ee9e61c287fdffea2779c0537d2f0ccd7fc1e973693fd12b&quot;,</span><br><span class="line">    &quot;d12faee60ec1f46f2bdd6a490b1c92c2e804955786a014b56d8fb9e6d2a35eef&quot;,</span><br><span class="line">    &quot;819f0fb4a16a3f88079bf35f6f03c0b032879a75f56b412baedfe525e19708f4&quot;,</span><br><span class="line">    &quot;dcc9e980cd345e9a6e136d76a4cd36a36bb7e3217b3685ad9ca577acc8019bf8&quot;,</span><br><span class="line">    &quot;6a1a122610ff86d6037d46e57c49183960bcefad04ea233a387fc3d8a0db997b&quot;,</span><br><span class="line">    &quot;23dab800d04d100b2748b2addec5237b75ad6da992de80984f95d8decd546859&quot;</span><br><span class="line">    &#x2F;&#x2F;省略部份交易</span><br><span class="line">  ],</span><br><span class="line">  &quot;time&quot;: 1619758979,</span><br><span class="line">  &quot;mediantime&quot;: 1619755004,</span><br><span class="line">  &quot;nonce&quot;: 32721792,</span><br><span class="line">  &quot;bits&quot;: &quot;170bef93&quot;,</span><br><span class="line">  &quot;difficulty&quot;: 23581981443663.85,</span><br><span class="line">  &quot;chainwork&quot;: &quot;00000000000000000000000000000000000000001cb2cd894a35651ba07be168&quot;,</span><br><span class="line">  &quot;nTx&quot;: 2158,</span><br><span class="line">  &quot;previousblockhash&quot;: &quot;00000000000000000004cabf7ba2626c0da40182c19324ea12c13b2aac8ade98&quot;,</span><br><span class="line">  &quot;nextblockhash&quot;: &quot;000000000000000000058960a47748b02e4b659ba529a0e9c6fb9e1991158f6f&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含以下数据:</p><table><thead><tr><th style="text-align:center">字节长度</th><th style="text-align:center">字段</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">4</td><td style="text-align:center">version</td><td style="text-align:center">区块版本号</td></tr><tr><td style="text-align:center">32</td><td style="text-align:center">previousblockhash</td><td style="text-align:center">前一个区块头的哈希值</td></tr><tr><td style="text-align:center">32</td><td style="text-align:center">merkleroot</td><td style="text-align:center">Merkle根哈希，交易列表生成的默克尔树根哈希</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">time</td><td style="text-align:center">时间戳，该区块产生的近似时间，精确到秒的UNIX时间戳</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">bits</td><td style="text-align:center">难度目标，挖矿难度值</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Nonce</td><td style="text-align:center">挖矿过程中使用的随机值</td></tr></tbody></table><p>区块头中的数据分成三不同的意义：</p><ol><li>区块元数据</li><li>打包相关元数据</li><li>交易树据根</li></ol><h4 id="1-区块元数据"><a href="#1-区块元数据" class="headerlink" title="1.区块元数据"></a>1.区块元数据</h4><ol><li>父哈希(前一个块）</li><li>版本号<br>即前区块的上一个区块，就是父区块(前一个块)的哈希值，父哈希值用来将该区块与它的前一区块相连接；</li></ol><h4 id="2-打包相关元数据"><a href="#2-打包相关元数据" class="headerlink" title="2.打包相关元数据"></a>2.打包相关元数据</h4><ol><li>难度</li><li>时间戳</li><li>Nonce(随机数）</li></ol><h4 id="3-交易树据根"><a href="#3-交易树据根" class="headerlink" title="3.交易树据根"></a>3.交易树据根</h4><p>这个根在区块头中就是根哈希值，即区块体中的默克尔树的根。</p><h3 id="区块体"><a href="#区块体" class="headerlink" title="区块体"></a>区块体</h3><p>区块体包括当前区块经过验证的、 区块创建过程中生成的所有交易记录。这些记录通过默克尔（Merkle）树的哈希过程生成唯一的默克尔，根并记入区块头。<br>区块体，包含交易数据。<br>比特币中的交易比较简单，就是转账，A -&gt; B 转账，这笔交易从比特币客户端发起后，就会进行广播。<br>比特币的节点收到交易后，会将交易存储到交易队列当中，直到进行打包时才会将交易队列中的交易，打包其实是构建一个数据结构，包括：</p><p><strong>默克尔树</strong><br>当前区块的交易集合而生成的一颗树，目的是通过每一笔交易，从下往上生成一树哈希树。<br>自下往上看：<br><img src="/2021/04/20/blockchain-03%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84/默克尔树.jpeg" alt="默克尔树"></p><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>就是字面意思，由一个个区块组成的链条。<br>创世块：比特币网络中的第一个块。几乎所有的区块链服务，都有创有块。<br>学习区块链，就必须了解区块的本质，区块链的是由一个一个区块组成的链条。</p><p>区块链是逻辑上的链条，每一个区块之间通过确认父哈希的形式，来确定自己的父块。<br><img src="/2021/04/20/blockchain-03%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84/区块链结构.jpeg" alt="区块链结构"></p><p>那么这样就会产生几个问题？</p><ol><li>区块链网络中有很多的节点同时产块，该确认谁才是下一个节点？</li><li>如果 A 先产块，B 后产块，但是 A 的网速有延迟，传输比 B 后到达，其他节点怎么处理 A 的区块？</li><li>如何保证传输过来的块一定是合法块，不是一个恶意节点广播过来的块 或者 没有被恶意修过过的块？</li></ol><p>比特币是如何解决上述这些问题的。</p><p>综上，比特币的区块头 和 区块体 是紧密相连的数据结构，缺一不可。</p><h2 id="bitcore-区块链钱包"><a href="#bitcore-区块链钱包" class="headerlink" title="bitcore 区块链钱包"></a>bitcore 区块链钱包</h2><p>比特币的工具有很多，PC端常用的工具就是比特币钱包。钱包的种类也有不少，可以查看比特币官网，这里用的是 bitcore。<br>通过命令行窗口，可以执行一些命令来看查看比特币相关的数据。<br><strong>查看区块信息</strong></p><blockquote><p>getblock 00000000000000000000bca6ccc2ef309fd814f80a55b3e08a4212326137d7d2</p></blockquote><p><img src="/2021/04/20/blockchain-03%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84/工具.jpg" alt="钱包工具"></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> BTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> BTC </tag>
            
            <tag> 比特币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链--02比特币技术体系</title>
      <link href="2021/04/17/blockchain-%E5%8C%BA%E5%9D%97%E9%93%BE-02%E6%AF%94%E7%89%B9%E5%B8%81%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/"/>
      <url>2021/04/17/blockchain-%E5%8C%BA%E5%9D%97%E9%93%BE-02%E6%AF%94%E7%89%B9%E5%B8%81%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习区块链技术，首先应该了解最经典的 比特币。比特币做为最早的分布式去中心化的区块链应用，其经典设计值得学习。</p></blockquote><h2 id="比特币架构"><a href="#比特币架构" class="headerlink" title="比特币架构"></a>比特币架构</h2><p>比特币通过将各项技术进行结合，创造出来的这个产品，其本质的功能是记账，副做用是炒。<br>比特币的设计是为了保证所有数据是分布式的、去中心化的保存数据，防止数据在中心的节点中保存。</p><p><img src="/2021/04/17/blockchain-%E5%8C%BA%E5%9D%97%E9%93%BE-02%E6%AF%94%E7%89%B9%E5%B8%81%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/BTC架构图.jpeg" alt="架构图"></p><p>自上而下，共分6层</p><ol><li>应用层</li><li>RPC 层</li><li>网络层</li><li>共识层</li><li>数据层</li><li>存储层</li></ol><h3 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1.应用层"></a>1.应用层</h3><p>包括比特币钱包、客户端等种上层的应用，一般是比特币程序本身的外部应用。<br>以比特币钱包为例，比特币钱包有很多种，可以上官网上下载不同钱包，比如最简单的钱包，早期这个钱包还保留有CPU挖矿功能。现在版本已不支持，可以参考官方 Github 文档:</p><p><a href="https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.0.md">https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.0.md</a><br><img src="/2021/04/17/blockchain-%E5%8C%BA%E5%9D%97%E9%93%BE-02%E6%AF%94%E7%89%B9%E5%B8%81%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/BTC钱包.jpg" alt="PC钱包"></p><h3 id="2-RPC-层"><a href="#2-RPC-层" class="headerlink" title="2.RPC 层"></a>2.RPC 层</h3><p>RPC 层的作用是进行RPC 通信。测试可以使用 BitCore 这个工具来进行测试。</p><p>测试一个 RPC 命令，查看区块信息: <strong>getblockchaininfo</strong><br><strong>命令行</strong><br><img src="/2021/04/17/blockchain-%E5%8C%BA%E5%9D%97%E9%93%BE-02%E6%AF%94%E7%89%B9%E5%B8%81%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/命令行.jpg" alt="钱包"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;chain&quot;</span>: <span class="string">&quot;main&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;blocks&quot;</span>: <span class="number">680816</span>,</span><br><span class="line">  <span class="attr">&quot;headers&quot;</span>: <span class="number">680816</span>,</span><br><span class="line">  <span class="attr">&quot;bestblockhash&quot;</span>: <span class="string">&quot;0000000000000000000133b07fdf287ddca3cca80162b4a06a05d6904190cd37&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span>: <span class="number">23581981443663.85</span>,</span><br><span class="line">  <span class="attr">&quot;mediantime&quot;</span>: <span class="number">1619518237</span>,</span><br><span class="line">  <span class="attr">&quot;verificationprogress&quot;</span>: <span class="number">0.999995596389184</span>,</span><br><span class="line">  <span class="attr">&quot;initialblockdownload&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;chainwork&quot;</span>: <span class="string">&quot;00000000000000000000000000000000000000001c943902d1cf6cdd1387c75c&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;size_on_disk&quot;</span>: <span class="number">1904190175</span>,</span><br><span class="line">  <span class="attr">&quot;pruned&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;pruneheight&quot;</span>: <span class="number">679647</span>,</span><br><span class="line">  <span class="attr">&quot;automatic_pruning&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;prune_target_size&quot;</span>: <span class="number">1999634432</span>,</span><br><span class="line">  <span class="attr">&quot;softforks&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bip34&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">227931</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;bip66&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">363725</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;bip65&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">388381</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;csv&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">419328</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;segwit&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">481824</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;warnings&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3.网络层"></a>3.网络层</h3><p>网络层使用 Peer-to-Peer，即点对点通信。每个BTC网络当中的节点中的通信，没有中心化的节点进行转发，需要通过节点发现，进行通信。<br>这也体现出BTC网络中当，每个节点都是平等的节点，没有哪个节点可以控制其他节点。</p><p>这种去中心化的好处就是可以做到节点之间的平等，但是也存在几个问题。</p><ol><li>网络延迟</li><li>联合作敝</li></ol><p>3.1 网络延迟很好理解，由于节点之间是平等的，每个节点都会呈现为网状的连接，当一个区块被生产出来后，会同步到相邻的网络节点当中，进行相邻转发。并不是通过中心节点订阅或转发的，一个区块到达所有的节点会有网络延迟。</p><p>3.2 联合作敝，去中心化的通信，节点间的数据只能依赖于依赖于各个节点间的验证，那就给做敝留下了空间。</p><h3 id="4-共识层"><a href="#4-共识层" class="headerlink" title="4.共识层"></a>4.共识层</h3><p>什么是共识，这个非常重要，非常重要。<br>因为在平等的网络当中，每个节点都是分散的，该如何保证每个节点的验证、转发是一致？<br>这就需要每个节点与节点之间达成共识。以此来保证所有节点的行为一致。</p><p><strong>什么是共识</strong><br>共识就是，共识即认可，比特币中有很多节点，要让这些节点达成一致性，比特币采用的是：POW 工作量证明。<br>比特币共识：说白点就是大家通过计算一个随机生成的Hash值的方式，来决定谁先打包。是不是感觉没什么，计算这个Hash并不是一件马上就可以算出来的事情。<br>大概流程：</p><ol><li>所有比特币中的交易会向所有节点广播，所有节点接收到交易后，放于交易队列当中</li><li>全世界所有节点通过计算 Hash 来决定谁交这些交易打包，先算出者，打包交易成一个区块并广播区块</li><li>打包者，将一个随机数加处块头中，使得计算的哈希结果小于或等于块头中目标值</li><li>其他节点收到区块后，验证区块和区块内的交易，验证正确保留该区块</li></ol><p><strong>为什么要给一个随机Hash数来给节点计算</strong><br>为了证明这个块的正确性。比特币的区块链当中，第一个节点产生的第一个块叫做：创世块，这个块是比特币运行时产生的第一个块，这个块会产生一个随机Hash数，打包进第一个块的块头中，然后广播。<br>其他节点收到区块后，对这个创世块进行验证。先验出者，证明了这个块是正确的，然后根据这个创建块，将收到的交易进行打包，并链接到这个创世块后面，就成了第二个块，并且这个节点也根据收到的交易产生了个随机Hash，广播给其它节点。<br>其他节点收到后，重复这个流程，证明这个块的正确性，并进行上链。这个就是 POW 的义意。</p><h3 id="5-数据层"><a href="#5-数据层" class="headerlink" title="5.数据层"></a>5.数据层</h3><p>数据层是指比特币的数据结构。比特币的数据结构比较典型，很多后来的区块链都借鉴这些数据模型。</p><ol><li>区块</li><li>区块链</li><li>Merkle树，也称，默克尔树</li><li>Hash</li><li>时间戳</li></ol><h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><p>是指将交易进行打构的区块数据结构，包含：区块头、区块体、哈希、时间戳 等。</p><h4 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h4><p>是指由区块构成的链条，就是指区块链，比较直白。</p><h4 id="Merkle树，也称，默克尔树"><a href="#Merkle树，也称，默克尔树" class="headerlink" title="Merkle树，也称，默克尔树"></a>Merkle树，也称，默克尔树</h4><p>Merkle树的作用：防窜改。<br>这里仅需要知道即可，这些点每一个展开都是一个大点，后续会做很详细的讲解。<br>Merkle树的构成是通过将每一笔交易的哈希，自上而下，相邻两个节点向上构建出一个新的父哈希值，由此来构建一棵哈希树。</p><h3 id="6-存储层"><a href="#6-存储层" class="headerlink" title="6.存储层"></a>6.存储层</h3><p>存储主要使用的是 LevelDB，进行存储，LevelDB 是基于 SSTable 进行设计实现的一个数据引擎。很多数据库都是基 LevelDB 进开发。<br>LevelDB 本身具体高性能读写，通过在内存缓存 和 多层级文件存储而取名 LevelDB。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> BTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 比特币 </tag>
            
            <tag> 技术体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链--01区块链初识</title>
      <link href="2021/04/14/blockchain--%E5%8C%BA%E5%9D%97%E9%93%BE01-%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
      <url>2021/04/14/blockchain--%E5%8C%BA%E5%9D%97%E9%93%BE01-%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>区块链技术，发展到目前，主流的区块链有两个代表，一个是以 比特币(BTC) 为代表的分布式去中心化记账本，一个是以 以态坊(ETH) 为代表的图灵完备的分布式去中心化计算机。名词解释会放到下面。</p></blockquote><h2 id="为什么写这个文章"><a href="#为什么写这个文章" class="headerlink" title="为什么写这个文章"></a>为什么写这个文章</h2><p>投身加密货币研究有一段时间了，其间了解到了比特币的原理和应用，想把了解到的知识整理成一个简单直白的系列科普文章，希望可以帮助大家轻松简单学习并使用加密货币。<br>本篇作为开篇，仅提一些简单概念，以免概念太多，让人望而却步。</p><h2 id="加密货币"><a href="#加密货币" class="headerlink" title="加密货币"></a>加密货币</h2><p>加密货币当下有两种主流的技术模型：</p><ol><li>比特币</li><li>以太坊</li></ol><p>这两种加密货币有本质的区别，之所以很少听说以太坊，是因为以太坊出现的在比特币之后，出现在人们的视野里比较晚，但是其设计理念相较比特币较超前，当前和比特币并驾齐驱。<br>现在主流的一些币都是基于以太坊的基础上进行设计，还可以基于以太坊发行自己的货币，在这里不用深究，后续会深入讲解。</p><h2 id="比特币-Bitcoin"><a href="#比特币-Bitcoin" class="headerlink" title="比特币(Bitcoin)"></a>比特币(Bitcoin)</h2><blockquote><p>本质是分布式记账本</p></blockquote><p>比特币的宗旨是做为一个去中心化的分布试记账本，仅为了记账而存在。<br>比特币的由来就不赘述，可自行了解。<br>BTC是一种点对点（Peer-2-Peer）传输的数字加密货币。宗旨在于使用点网络节点，构成一个分布式、去中心化的加密货币网络。<br>机器只需要运行 BTC 程序，就可以加入到比特币网络当中，成为一个节点，每个节点同步保存全量数据，所以硬盘容量要大。</p><p><strong>官网</strong> <a href="https://bitcoin.org/zh_CN/">https://bitcoin.org/zh_CN/</a></p><h3 id="1-本质"><a href="#1-本质" class="headerlink" title="1.本质"></a>1.本质</h3><p>是一个分布式、去中心化账本！！<br>记账才是其主要功能，奖励的币仅是副产物。</p><h3 id="2-币是什么"><a href="#2-币是什么" class="headerlink" title="2.币是什么"></a>2.币是什么</h3><p>币，是每个机器运行比特币服务而获得的奖励，鼓励大家都运行节点，保存数据。就像是去玩某个游戏，每日登陆获取积分一样。<br>每个机器节点的硬盘上保留全量数据，就可以不依赖于中心化节点中的数据，从而实现去中心化。<br>每个用户下载 BTC 的钱包服务运行，注册钱包，生成私钥，私钥需要保管好。并配上自己的钱包地址。</p><h3 id="3-如何获得一个比特币"><a href="#3-如何获得一个比特币" class="headerlink" title="3.如何获得一个比特币"></a>3.如何获得一个比特币</h3><p>谁打包谁获得比特币奖励。<br>比特币的将励不是公平的，而是一有套获取奖励的规则，并不是运行的久的节点一定获得奖励。而在于你的计算机的算力。<br>比特币规定，所有记账节点都有资格打包，但是需要算出一道数学题，谁先算出来，谁就有资格打包，打包的节点就会获得奖励。<br>这种模式即：<strong>POW 工作量证明</strong></p><h3 id="4-比特币白皮书"><a href="#4-比特币白皮书" class="headerlink" title="4.比特币白皮书"></a>4.比特币白皮书</h3><p><a href="https://bitcoin.org/bitcoin.pdf">比特币白皮书原版</a><br>当然还有中文版。</p><h3 id="比特币泛汲到的技术"><a href="#比特币泛汲到的技术" class="headerlink" title="比特币泛汲到的技术"></a>比特币泛汲到的技术</h3><p><strong>结构图</strong><br><img src="/2021/04/14/blockchain--%E5%8C%BA%E5%9D%97%E9%93%BE01-%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/BTC.jpeg" alt="结构图"><br>比特币并没有发明什么新技术，而是将已有的技术进行一个融合。</p><ol><li>加密技术</li><li>P2P 通信(点对点)</li><li>共识</li><li>存储</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h2 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a>以太坊</h2><blockquote><p>区块链世界中的计算机。</p></blockquote><p>如果说 比特币 是一个分布式、去中心化账本，那以太坊就是一台分布式去中心化，运行在计算机上的微型计算机。<br>其设计架构就是图灵完备的设计，本质是一套程序，但是它有计算机一样的：输入、输出、执行指令，因此可以说是图灵完备的。</p><h3 id="以太坊架构图"><a href="#以太坊架构图" class="headerlink" title="以太坊架构图"></a>以太坊架构图</h3><p><img src="/2021/04/14/blockchain--%E5%8C%BA%E5%9D%97%E9%93%BE01-%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/架构图.png" alt="架构图"></p><h3 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h3><ol><li>智能合约</li><li>加密技术</li><li>P2P 通信(点对点)</li><li>共识</li><li>存储</li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>以太坊在设计上和比特币目的相同，但是在很多设计上又有很多的不同。</p><h4 id="1-可编程"><a href="#1-可编程" class="headerlink" title="1.可编程"></a>1.可编程</h4><p>以太坊的最大特点就是，它是一个<strong>可编程</strong>的区块链。<br>每个用户可自行编写自己业务逻辑代码，通过接口去触发自己编写的代码，这种代码官方叫做智能合约。<br>通过智能合约(编程代码)，用户可以实现很多功能，比如：分布式去中心化应用(DAPP)、分布式去中心化金融(DeFi) 等。<br>DAPP 包括一些游戏，目前国内 DAPP 数量较多的是波场(Tron)的 DAPP。</p><p>实现这些功能是因为设计了编程语言 Solidity 和 虚拟机EVM</p><p>和BTC 一样也是基于 POW 的区块链。但是 ETH2.0 正在转向 POS。什么是 POS 后面再说。</p><h4 id="2-账户模型"><a href="#2-账户模型" class="headerlink" title="2.账户模型"></a>2.账户模型</h4><p>以太坊的账户模型是基于账户系统，另外还有一个世界状态。这个世界状态也是有利有憋。</p><h4 id="3-奖励机制"><a href="#3-奖励机制" class="headerlink" title="3.奖励机制"></a>3.奖励机制</h4><p>这个和比特币不同，比特币只有产块的节点能获得比特币。以太坊采用叔块（Uncle Block）激励机制，即你产了这个块，但是最后确认不是你所产的这个块，未被确认的这个块叫(Uncle Block),也给你一定的奖励。</p><h4 id="4-燃汽-Gas"><a href="#4-燃汽-Gas" class="headerlink" title="4.燃汽 Gas"></a>4.燃汽 Gas</h4><p>以太坊还引入了 燃汽 Gas 的概念，转账需要消耗 Gas，就这让使用 ETH 币进行转账就需要成本。这个有利也有憋。<br>有了 Gas 之后，对于矿工来说，矿工们就可以选择将转账支付 Gas 较高的订单优先进行上链，矿工们收益好。但是对于用户来说，如果支付的低的话，那就要等上一些时间。<br>这样就造成拥堵。<br>Gas 还有个作用，控制每一次执行合约的消耗，即 GasLimit，看不明白的不用深究，后续都会深入说明。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当下区块链世界各种生态都在雨后春笋一般的建设中，BTC 是当之无愧的价值体现，以太坊也在奋起直追。币圈的运做也可以看做另一个世界的金融运做，币本身构建自己的生态，金融圈大庄操作币价。两相结合，推动币值，一边割韭菜，一边做技术。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blockchain--区块链文章大纲</title>
      <link href="2021/04/11/blockchain-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%96%87%E7%AB%A0%E5%A4%A7%E7%BA%B2/"/>
      <url>2021/04/11/blockchain-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%96%87%E7%AB%A0%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<p>现在从业区块链行业的架构研发，记录对区块链的理解，创建一个文章目录，将需要理解的东西一一记录下来。</p><h1 id="区块链文章大纲"><a href="#区块链文章大纲" class="headerlink" title="区块链文章大纲"></a>区块链文章大纲</h1><h2 id="区块链架构"><a href="#区块链架构" class="headerlink" title="区块链架构"></a>区块链架构</h2><h2 id="快速使用体验"><a href="#快速使用体验" class="headerlink" title="快速使用体验"></a>快速使用体验</h2><ul><li>钱包</li><li>交易<h2 id="如何交易"><a href="#如何交易" class="headerlink" title="如何交易"></a>如何交易</h2></li></ul><h2 id="成为矿工"><a href="#成为矿工" class="headerlink" title="成为矿工"></a>成为矿工</h2><h2 id="区块链共识"><a href="#区块链共识" class="headerlink" title="区块链共识"></a>区块链共识</h2><h2 id="区块链存储"><a href="#区块链存储" class="headerlink" title="区块链存储"></a>区块链存储</h2><h2 id="区块链网络"><a href="#区块链网络" class="headerlink" title="区块链网络"></a>区块链网络</h2><h2 id="区块链加密"><a href="#区块链加密" class="headerlink" title="区块链加密"></a>区块链加密</h2><h2 id="跨链"><a href="#跨链" class="headerlink" title="跨链"></a>跨链</h2><h2 id="预言机"><a href="#预言机" class="headerlink" title="预言机"></a>预言机</h2>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim01-环境配置</title>
      <link href="2020/12/17/linux-vim01-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>2020/12/17/linux-vim01-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>现在开发、写文章基本上已经离不开 <code>vim</code>了，写代码<code>idea</code> + <code>vim</code> 配合，写文章就是直接上<code>vim</code>。vim 有一定的学习曲线，但是习惯了就好。<br>习惯以后，再使用这些插件就会更好用。</p><h2 id="配置存放仓库"><a href="#配置存放仓库" class="headerlink" title="配置存放仓库"></a>配置存放仓库</h2><p>不定期更新配置</p><p><a href="https://github.com/forfreeday/vim">https://github.com/forfreeday/vim</a></p><h2 id="coc-java-问题"><a href="#coc-java-问题" class="headerlink" title="coc java 问题"></a>coc java 问题</h2><p>JDK 版本要高于1.8否则，JDT会启动失败。<br><a id="more"></a></p><h2 id="先上效果图"><a href="#先上效果图" class="headerlink" title="先上效果图"></a>先上效果图</h2><p><img src="/2020/12/17/linux-vim01-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/1.jpg" alt="效果图"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>macOs</li><li>iterm2</li><li>on-my-zsh</li><li>nvim</li></ul><p>这三个是什么关系，iterm2 是终端工具，负责调用终端命令行工具，on-my-zsh 是 bash 工具，对bash增加了一些优化，nvim 是vim工具。</p><h3 id="插件依赖环境"><a href="#插件依赖环境" class="headerlink" title="插件依赖环境"></a>插件依赖环境</h3><ul><li>python3</li><li>nodejs</li><li>pip3</li></ul><p>如果已经有了相关环境不需要安装，如果没有安装一下依赖环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g neovim</span><br><span class="line">npm install -g typescript</span><br><span class="line"></span><br><span class="line">pip3 install jedi</span><br><span class="line">pip3 install pylint</span><br></pre></td></tr></table></figure><h3 id="iterm2-配置"><a href="#iterm2-配置" class="headerlink" title="iterm2 配置"></a>iterm2 配置</h3><h4 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h4><p>将 <code>powerline</code> 的字体也放到项目当中，方便大家直接导入字体。解决 <strong>vim-airline</strong> 下符号显示导常，箭头标志大小异常的问题</p><p>在我的项目中已经集成好字体，直接在项目中双点安装或自行下载安装</p><p><a href="https://github.com/forfreeday/vim/tree/master/font/powerline-fonts">https://github.com/forfreeday/vim/tree/master/font/powerline-fonts</a></p><p>字线官方github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/supermarin/powerline-fonts.git</span><br></pre></td></tr></table></figure><p>安装 <code>Menlo Regular for Powerline.otf</code> 这个字体，在 iTerm2下显示为 <code>Menlo for Powerline</code>，的字体</p><p><img src="/2020/12/17/linux-vim01-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/设置字体.jpg" alt="设置字体"></p><h2 id="安装-on-my-zsh"><a href="#安装-on-my-zsh" class="headerlink" title="安装 on-my-zsh"></a>安装 on-my-zsh</h2><p>mac 自带<code>zsh</code>替换成<code>on-my-zsh</code> 安装后，对<code>.zshrc</code>配置文件进行配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果是首次安装 ～目录下没有.zshrc</span></span><br><span class="line">touch .zshrc</span><br><span class="line"></span><br><span class="line">cp ~/.zshrc   ~/.zshrc.orig</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建zsh配置文件</span></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><p>oh-my-zsh 提供、自带很多<code>console</code>的美化样式，可以自很选择<br>查看 <code>～/.oh-my-zsh/themes</code> 目录目录下，并在配置文件.zshrc 中进行配置。</p><p>官方github上的样式介绍<br><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes">https://github.com/ohmyzsh/ohmyzsh/wiki/themes</a></p><h4 id="agnoster"><a href="#agnoster" class="headerlink" title="agnoster"></a>agnoster</h4><p><img src="https://user-images.githubusercontent.com/49100982/108254745-777cb400-716c-11eb-800a-a8cfa612253f.jpg" alt="agnoster"></p><h4 id="bira"><a href="#bira" class="headerlink" title="bira"></a>bira</h4><p><img src="https://user-images.githubusercontent.com/49100982/108254762-7a77a480-716c-11eb-8665-b4f459fd8920.jpg" alt="bira"></p><p>我选 agnoster 这个风格，因为跟 air-line 一样的风格<br>vim ~/.zshrc</p><p><code>ZSH_THEME=&quot;agnoster&quot;</code></p><h3 id="安装-on-my-zsh-插件"><a href="#安装-on-my-zsh-插件" class="headerlink" title="安装 on-my-zsh 插件"></a>安装 on-my-zsh 插件</h3><p>这些插件可以让oh-my-zsh更好用，推荐安装，不安装对使用vim也没什么影响。<br>分两步</p><ol><li>添加配置</li><li>下载插件<br><code>autojump</code>、<code>zsh-autosuggestion</code> 和 <code>zsh-syntax-highlighting</code></li></ol><p>vim ~/.zshrc 在 plugins 中换行添加即可</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    autojump</span><br><span class="line">    zsh-<span class="keyword">syntax</span>-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="安装-nvim"><a href="#安装-nvim" class="headerlink" title="安装 nvim"></a>安装 nvim</h2><h3 id="Plug-插件管理"><a href="#Plug-插件管理" class="headerlink" title="Plug 插件管理"></a>Plug 插件管理</h3><p>这个是管理插件的插件，用它可以装各种需要插件，简单不要太方便，当然不需要它也是可以的，将插件自行下载，放到 vim 或 nvim 对应的 plugged 目录下即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><h3 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h3><p>nvim 默认路径：<code>~/.config/nvim/init.vim</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; VIM 自身配置</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 编码设置</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line"><span class="keyword">set</span> enc=utf8</span><br><span class="line"><span class="keyword">set</span> fencs=utf8,gbk,gb2312,gb18030</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 启用插件</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">filetype</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Tab 转空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 列高亮</span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 记录上次光标位置</span></span><br><span class="line"><span class="keyword">au</span> BufReadPost * <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) | <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 分屏设置</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向右边</span></span><br><span class="line"><span class="keyword">map</span> td :<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向左边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ta</span> :<span class="keyword">set</span> nosplitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向上边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ts</span> :<span class="keyword">set</span> nosplitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向下边</span></span><br><span class="line"><span class="keyword">map</span> tw :<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 替换方向键为调节分屏大小</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;up&gt;</span> :<span class="keyword">res</span> +<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;down&gt;</span> :<span class="keyword">res</span> -<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;left&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>-<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;right&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>+<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按键映射</span></span><br><span class="line"><span class="keyword">map</span> W :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :<span class="keyword">wq</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> tq :q!<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">te</span> :terminal<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置 buff、空白字符的视觉提示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span> listchars=<span class="built_in">extend</span><span class="variable">s:</span>❯,precede<span class="variable">s:</span>❮,<span class="keyword">ta</span><span class="variable">b:</span>▸\ ,trai<span class="variable">l:</span>˽</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 其他的一些配置</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>   <span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>      <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="string">&quot;set relativenumber    &quot;</span> 相对行号</span><br><span class="line"><span class="keyword">set</span> wildmenu    <span class="comment">&quot;  让vim命令可用Tab补全</span></span><br><span class="line"><span class="keyword">set</span> hlsearch      <span class="comment">&quot; 变输入搜索词边高亮</span></span><br><span class="line"><span class="keyword">set</span> incsearch      <span class="comment">&quot; 光标自动跳转到搜索结果上</span></span><br><span class="line"><span class="keyword">set</span> t_ut=  <span class="comment">&quot;防止vim背景颜色错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;======================================</span></span><br><span class="line"><span class="comment">&quot; VIM 自带颜色配置</span></span><br><span class="line"><span class="comment">&quot;======================================</span></span><br><span class="line"><span class="comment">&quot;光标选中部分的底色</span></span><br><span class="line"><span class="keyword">hi</span> Visual  guibg=#<span class="number">99</span>cc99  guifg=#<span class="number">334433</span> <span class="keyword">gui</span>=none ctermbg=<span class="number">9</span> ctermfg=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--开始</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; coc.nvim代码补全</span></span><br><span class="line">Plug <span class="string">&#x27;neoclide/coc.nvim&#x27;</span>, &#123;<span class="string">&#x27;branch&#x27;</span>: <span class="string">&#x27;release&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; vim的dart支持</span></span><br><span class="line">Plug <span class="string">&#x27;dart-lang/dart-vim-plugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; NERDTree文件树</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span>, &#123; <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;NERDTreeToggle&#x27;</span> &#125;</span><br><span class="line">Plug <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 修改启动界面</span></span><br><span class="line">Plug <span class="string">&#x27;mhinz/vim-startify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 状态栏、主题美化</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline-themes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 增加代码缩进线</span></span><br><span class="line">Plug <span class="string">&#x27;yggdroot/indentline&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 快速注释</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdcommenter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 彩色括号</span></span><br><span class="line">Plug <span class="string">&#x27;luochen1990/rainbow&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 配色</span></span><br><span class="line">Plug <span class="string">&#x27;crusoexia/vim-monokai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 展示当前文件的一些函数</span></span><br><span class="line">Plug <span class="string">&#x27;majutsushi/tagbar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 翻译</span></span><br><span class="line">Plug <span class="string">&#x27;voldikss/vim-translator&#x27;</span></span><br><span class="line"><span class="comment">&quot; 模糊搜索</span></span><br><span class="line">Plug <span class="string">&#x27;ctrlpvim/ctrlp.vim&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--结束</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; vim-translator</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; 在窗口中显示翻译</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">w</span> <span class="symbol">&lt;Plug&gt;</span>TranslateW</span><br><span class="line"><span class="comment">&quot; 将文字替换为翻译</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;Leader&gt;</span>r <span class="symbol">&lt;Plug&gt;</span>TranslateR</span><br><span class="line"><span class="comment">&quot; 翻译剪贴板中的文字</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">x</span> <span class="symbol">&lt;Plug&gt;</span>TranslateX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; vim-monokai</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot;colo monokai</span></span><br><span class="line"><span class="keyword">colo</span> gruvbox</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; tagbar</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_width</span>=<span class="number">30</span></span><br><span class="line"><span class="comment">&quot; 将tagbar的开关按键设置为 F5</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;F5&gt;</span> :TagbarToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; startify 设置 </span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置Startify 快捷键</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;F4&gt;</span> :Startify<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="keyword">map</span> tt :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; \ + r 定位当前文件所在目录，这个很有用</span></span><br><span class="line"><span class="comment">&quot; 当前从左树进入，又要将当前目录定位到当前位置用这个</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span>r :NERDTreeFind<span class="symbol">&lt;cr&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="symbol">&lt;C-w&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;显示书签&quot;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 忽略一下文件的显示</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore=[<span class="string">&#x27;\.pyc&#x27;</span>,<span class="string">&#x27;\~$&#x27;</span>,<span class="string">&#x27;\.swp&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeIndicatorMapCustom</span> = &#123;</span><br><span class="line">    \ <span class="string">&quot;Modified&quot;</span>  : <span class="string">&quot;✹&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Staged&quot;</span>    : <span class="string">&quot;✚&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Untracked&quot;</span> : <span class="string">&quot;✭&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Renamed&quot;</span>   : <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unmerged&quot;</span>  : <span class="string">&quot;═&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Deleted&quot;</span>   : <span class="string">&quot;✖&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Dirty&quot;</span>     : <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Clean&quot;</span>     : <span class="string">&quot;✔︎&quot;</span>,</span><br><span class="line">    \ <span class="string">&#x27;Ignored&#x27;</span>   : <span class="string">&#x27;☒&#x27;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unknown&quot;</span>   : <span class="string">&quot;?&quot;</span></span><br><span class="line">    \ &#125;</span><br><span class="line"><span class="comment">&quot; &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; vim-airline</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; 设置状态栏</span></span><br><span class="line"><span class="comment">&quot;字体设置，装完 powerline 后，添加这一项不会乱码，否则注释这一行</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_powerline_fonts</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot; 关闭状态显示空白符号计数</span></span><br><span class="line"> <span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#whitespace#enabled = <span class="number">0</span></span><br><span class="line"> <span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#whitespace#symbol = <span class="string">&#x27;!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> t_Co=<span class="number">256</span> <span class="string">&quot;终端开启256色支持&quot;</span></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span>  <span class="string">&quot;1为关闭底部状态栏 2为开启&quot;</span></span><br><span class="line"><span class="comment">&quot; 开启tabline</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#enabled = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot; tabline中未激活buffer两端的分隔字符</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#left_alt_sep = <span class="string">&#x27;|&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#buffer_nr_show = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#formatter = <span class="string">&#x27;default&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_theme</span> = <span class="string">&#x27;desertink&#x27;</span>  <span class="comment">&quot; 主题</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#keymap#enabled = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#buffer_idx_mode = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#buffer_idx_format = &#123;</span><br><span class="line">       \ <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;0 &#x27;</span>,</span><br><span class="line">       \ <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;1 &#x27;</span>,</span><br><span class="line">       \ <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;2 &#x27;</span>,</span><br><span class="line">       \ <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;3 &#x27;</span>,</span><br><span class="line">       \ <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;4 &#x27;</span>,</span><br><span class="line">       \ <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;5 &#x27;</span>,</span><br><span class="line">       \ <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;6 &#x27;</span>,</span><br><span class="line">       \ <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;7 &#x27;</span>,</span><br><span class="line">       \ <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;8 &#x27;</span>,</span><br><span class="line">       \ <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;9 &#x27;</span></span><br><span class="line">       \&#125;</span><br><span class="line"><span class="comment">&quot; 设置切换tab的快捷键 &lt;\&gt; + &lt;i&gt; 切换到第i个 tab</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">1</span> <span class="symbol">&lt;Plug&gt;</span>AirlineSelectTab1</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">2</span> <span class="symbol">&lt;Plug&gt;</span>AirlineSelectTab2</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">3</span> <span class="symbol">&lt;Plug&gt;</span>AirlineSelectTab3</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">4</span> <span class="symbol">&lt;Plug&gt;</span>AirlineSelectTab4</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">5</span> <span class="symbol">&lt;Plug&gt;</span>AirlineSelectTab5</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">6</span> <span class="symbol">&lt;Plug&gt;</span>AirlineSelectTab6</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">7</span> <span class="symbol">&lt;Plug&gt;</span>AirlineSelectTab7</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">8</span> <span class="symbol">&lt;Plug&gt;</span>AirlineSelectTab8</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">9</span> <span class="symbol">&lt;Plug&gt;</span>AirlineSelectTab9</span><br><span class="line"><span class="comment">&quot; 设置切换tab的快捷键 &lt;\&gt; + &lt;-&gt; 切换到前一个 tab</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>- <span class="symbol">&lt;Plug&gt;</span>AirlineSelectPrevTab</span><br><span class="line"><span class="comment">&quot; 设置切换tab的快捷键 &lt;\&gt; + &lt;+&gt; 切换到后一个 tab</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>+ <span class="symbol">&lt;Plug&gt;</span>AirlineSelectNextTab</span><br><span class="line"><span class="comment">&quot; 设置切换tab的快捷键 &lt;\&gt; + &lt;q&gt; 退出当前的 tab</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>q :<span class="keyword">bp</span><span class="symbol">&lt;cr&gt;</span>:<span class="keyword">bd</span> #<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;tab&gt;</span> :<span class="keyword">bn</span><span class="symbol">&lt;cr&gt;</span> <span class="string">&quot;设置tab键映射&quot;</span></span><br><span class="line"><span class="keyword">map</span>  <span class="symbol">&lt;S-tab&gt;</span> :<span class="keyword">bp</span><span class="symbol">&lt;cr&gt;</span> <span class="string">&quot;设置tab键映射&quot;</span></span><br><span class="line"><span class="keyword">map</span>  <span class="symbol">&lt;S-q&gt;</span> :<span class="keyword">bp</span>\|<span class="keyword">bd</span> #<span class="symbol">&lt;cr&gt;</span> <span class="string">&quot;关闭buffer&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; nerdcommenter</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot;add spaces after comment delimiters by default</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDSpaceDelims</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot; python 自动的会多加一个空格</span></span><br><span class="line"><span class="keyword">au</span> FileType <span class="keyword">python</span> <span class="keyword">let</span> <span class="variable">g:NERDSpaceDelims</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Use compact syntax for prettified multi-line comments</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDCompactSexyComs</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Align line-wise comment delimiters flush left instead of following code indentation</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDDefaultAlign</span> = <span class="string">&#x27;left&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Set a language to use its alternate delimiters by default</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDAltDelims_java</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自定义格式</span></span><br><span class="line"><span class="comment">&quot; let g:NERDCustomDelimiters = &#123; &#x27;c&#x27;: &#123; &#x27;left&#x27;: &#x27;/**&#x27;,&#x27;right&#x27;: &#x27;*/&#x27; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Allow commenting and inverting empty lines (useful when commenting a region)</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDCommentEmptyLines</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Enable trimming of trailing whitespace when uncommenting</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTrimTrailingWhitespace</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Enable NERDCommenterToggle to check all selected lines is commented or not</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDToggleCheckAllLines</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; indentline</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:indentLine_char</span>=<span class="string">&#x27;┆&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:indentLine_enabled</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; rainbow</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:rainbow_active</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:rainbow_conf</span> = &#123;</span><br><span class="line">\   <span class="string">&#x27;guifgs&#x27;</span>: [<span class="string">&#x27;darkorange3&#x27;</span>, <span class="string">&#x27;seagreen3&#x27;</span>, <span class="string">&#x27;royalblue3&#x27;</span>, <span class="string">&#x27;firebrick&#x27;</span>],</span><br><span class="line">\   <span class="string">&#x27;ctermfgs&#x27;</span>: [<span class="string">&#x27;lightyellow&#x27;</span>, <span class="string">&#x27;lightcyan&#x27;</span>,<span class="string">&#x27;lightblue&#x27;</span>, <span class="string">&#x27;lightmagenta&#x27;</span>],</span><br><span class="line">\   <span class="string">&#x27;operators&#x27;</span>: <span class="string">&#x27;_,_&#x27;</span>,</span><br><span class="line">\   <span class="string">&#x27;parentheses&#x27;</span>: [<span class="string">&#x27;start=/(/ end=/)/ fold&#x27;</span>, <span class="string">&#x27;start=/\[/ end=/\]/ fold&#x27;</span>, <span class="string">&#x27;start=/&#123;/ end=/&#125;/ fold&#x27;</span>],</span><br><span class="line">\   <span class="string">&#x27;separately&#x27;</span>: &#123;</span><br><span class="line">\       <span class="string">&#x27;*&#x27;</span>: &#123;&#125;,</span><br><span class="line">\       <span class="string">&#x27;tex&#x27;</span>: &#123;</span><br><span class="line">\           <span class="string">&#x27;parentheses&#x27;</span>: [<span class="string">&#x27;start=/(/ end=/)/&#x27;</span>, <span class="string">&#x27;start=/\[/ end=/\]/&#x27;</span>],</span><br><span class="line">\       &#125;,</span><br><span class="line">\       <span class="string">&#x27;lisp&#x27;</span>: &#123;</span><br><span class="line">\           <span class="string">&#x27;guifgs&#x27;</span>: [<span class="string">&#x27;darkorange3&#x27;</span>, <span class="string">&#x27;seagreen3&#x27;</span>, <span class="string">&#x27;royalblue3&#x27;</span>, <span class="string">&#x27;firebrick&#x27;</span>],</span><br><span class="line">\       &#125;,</span><br><span class="line">\       <span class="string">&#x27;vim&#x27;</span>: &#123;</span><br><span class="line">\           <span class="string">&#x27;parentheses&#x27;</span>: [<span class="string">&#x27;start=/(/ end=/)/&#x27;</span>, <span class="string">&#x27;start=/\[/ end=/\]/&#x27;</span>, <span class="string">&#x27;start=/&#123;/ end=/&#125;/ fold&#x27;</span>, <span class="string">&#x27;start=/(/ end=/)/ containedin=vimFuncBody&#x27;</span>, <span class="string">&#x27;start=/\[/ end=/\]/ containedin=vimFuncBody&#x27;</span>, <span class="string">&#x27;start=/&#123;/ end=/&#125;/ fold containedin=vimFuncBody&#x27;</span>],</span><br><span class="line">\       &#125;,</span><br><span class="line">\       <span class="string">&#x27;html&#x27;</span>: &#123;</span><br><span class="line">\           <span class="string">&#x27;parentheses&#x27;</span>: [<span class="string">&#x27;start=/\v\&lt;((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ &gt;])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=(&quot;[^&quot;]*&quot;|&#x27;</span>.<span class="string">&quot;&#x27;&quot;</span>.<span class="string">&#x27;[^&#x27;</span>.<span class="string">&quot;&#x27;&quot;</span>.<span class="string">&#x27;]*&#x27;</span>.<span class="string">&quot;&#x27;&quot;</span>.<span class="string">&#x27;|[^ &#x27;</span>.<span class="string">&quot;&#x27;&quot;</span>.<span class="string">&#x27;&quot;&gt;&lt;=`]*))?)*\&gt;/ end=#&lt;/\z1&gt;# fold&#x27;</span>],</span><br><span class="line">\       &#125;,</span><br><span class="line">\       <span class="string">&#x27;css&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">\   &#125;</span><br><span class="line">\&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; coc.nvim</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:coc_global_extensions</span> = [</span><br><span class="line">            \ <span class="string">&#x27;coc-json&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-vimlsp&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-tsserver&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-python&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-java&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-html&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-css&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-pairs&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-snippets&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-markdownlint&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-explorer&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;coc-flutter-tools&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> hidden</span><br><span class="line"><span class="keyword">set</span> updatetime=<span class="number">200</span></span><br><span class="line"><span class="keyword">set</span> shortmess+=<span class="keyword">c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:coc_snippet_next</span> = <span class="string">&#x27;&lt;c-n&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:coc_snippet_prev</span> = <span class="string">&#x27;&lt;c-p&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; diagnostics appear/become resolved.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">&quot;patch-8.1.1564&quot;</span>)</span><br><span class="line">  <span class="comment">&quot; Recently vim can merge signcolumn and number column into one</span></span><br><span class="line">  <span class="keyword">set</span> signcolumn=<span class="keyword">number</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">set</span> signcolumn=yes</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 让Tab键可以补全</span></span><br><span class="line"><span class="comment">&quot; Use tab for trigger completion with characters ahead and navigate.</span></span><br><span class="line"><span class="comment">&quot; <span class="doctag">NOTE:</span> Use command &#x27;:verbose imap &lt;tab&gt;&#x27; to make sure tab is not mapped by</span></span><br><span class="line"><span class="comment">&quot; other plugin before putting this into your config.</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;TAB&gt;</span></span><br><span class="line">      \ <span class="built_in">pumvisible</span>() ? <span class="string">&quot;\&lt;C-n&gt;&quot;</span> :</span><br><span class="line">      \ <span class="symbol">&lt;SID&gt;</span>check_back_space() ? <span class="string">&quot;\&lt;TAB&gt;&quot;</span> :</span><br><span class="line">      \ coc#refresh()</span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span><span class="symbol">&lt;S-TAB&gt;</span> <span class="built_in">pumvisible</span>() ? <span class="string">&quot;\&lt;C-p&gt;&quot;</span> : <span class="string">&quot;\&lt;C-h&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">s</span>:<span class="title">check_back_space</span><span class="params">()</span> <span class="title">abort</span></span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">col</span> = <span class="keyword">col</span>(<span class="string">&#x27;.&#x27;</span>) - <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> !col || <span class="built_in">getline</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="keyword">col</span> - <span class="number">1</span>]  =~# <span class="string">&#x27;\s&#x27;</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Ctrl+o 调出自动补全</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;c-o&gt;</span> coc#refresh()</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Use &lt;cr&gt; to confirm completion, `&lt;C-g&gt;u` means break undo chain at current</span></span><br><span class="line"><span class="comment">&quot; position. Coc only does snippet and additional edit on confirm.</span></span><br><span class="line"><span class="comment">&quot; &lt;cr&gt; could be remapped by other vim plugin, try `:verbose imap &lt;CR&gt;`.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">exists</span>(<span class="string">&#x27;*complete_info&#x27;</span>)</span><br><span class="line">  <span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;cr&gt;</span> complete_info()[<span class="string">&quot;selected&quot;</span>] != <span class="string">&quot;-1&quot;</span> ? <span class="string">&quot;\&lt;C-y&gt;&quot;</span> : <span class="string">&quot;\&lt;C-g&gt;u\&lt;CR&gt;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;cr&gt;</span> <span class="built_in">pumvisible</span>() ? <span class="string">&quot;\&lt;C-y&gt;&quot;</span> : <span class="string">&quot;\&lt;C-g&gt;u\&lt;CR&gt;&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Use `[g` and `]g` to navigate diagnostics</span></span><br><span class="line"><span class="comment">&quot; Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> [g <span class="symbol">&lt;Plug&gt;</span>(coc-diagnostic-<span class="keyword">prev</span>)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> ]g <span class="symbol">&lt;Plug&gt;</span>(coc-diagnostic-<span class="keyword">next</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; GoTo code navigation.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gd <span class="symbol">&lt;Plug&gt;</span>(coc-definition)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gy <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">type</span>-definition)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gi <span class="symbol">&lt;Plug&gt;</span>(coc-implementation)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="keyword">gr</span> <span class="symbol">&lt;Plug&gt;</span>(coc-references)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Use K to show documentation in preview window.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> K :<span class="keyword">call</span> <span class="symbol">&lt;SID&gt;</span>show_documentation()<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">s</span>:<span class="title">show_documentation</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">index</span>([<span class="string">&#x27;vim&#x27;</span>,<span class="string">&#x27;help&#x27;</span>], &amp;<span class="keyword">filetype</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">execute</span> <span class="string">&#x27;h &#x27;</span>.<span class="built_in">expand</span>(<span class="string">&#x27;&lt;cword&gt;&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">call</span> CocAction(<span class="string">&#x27;doHover&#x27;</span>)</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Highlight the symbol and its references when holding the cursor.</span></span><br><span class="line"><span class="keyword">autocmd</span> CursorHold * <span class="keyword">silent</span> <span class="keyword">call</span> CocActionAsync(<span class="string">&#x27;highlight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Symbol renaming.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>rn <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">rename</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Formatting selected code.</span></span><br><span class="line"><span class="keyword">xmap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">f</span>  <span class="symbol">&lt;Plug&gt;</span>(coc-format-selected)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">f</span>  <span class="symbol">&lt;Plug&gt;</span>(coc-format-selected)</span><br><span class="line"></span><br><span class="line"><span class="keyword">augroup</span> mygroup</span><br><span class="line">  autocmd!</span><br><span class="line">  <span class="comment">&quot; Setup formatexpr specified filetype(s).</span></span><br><span class="line">  <span class="keyword">autocmd</span> FileType typescript,json <span class="keyword">setl</span> formatexpr=CocAction(<span class="string">&#x27;formatSelected&#x27;</span>)</span><br><span class="line">  <span class="comment">&quot; Update signature help on jump placeholder.</span></span><br><span class="line">  <span class="keyword">autocmd</span> User CocJumpPlaceholder <span class="keyword">call</span> CocActionAsync(<span class="string">&#x27;showSignatureHelp&#x27;</span>)</span><br><span class="line"><span class="keyword">augroup</span> end</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Applying codeAction to the selected region.</span></span><br><span class="line"><span class="comment">&quot; Example: `&lt;leader&gt;aap` for current paragraph</span></span><br><span class="line"><span class="keyword">xmap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">a</span>  <span class="symbol">&lt;Plug&gt;</span>(coc-codeaction-selected)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">a</span>  <span class="symbol">&lt;Plug&gt;</span>(coc-codeaction-selected)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Remap keys for applying codeAction to the current buffer.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>ac  <span class="symbol">&lt;Plug&gt;</span>(coc-codeaction)</span><br><span class="line"><span class="comment">&quot; Apply AutoFix to problem on the current line.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>qf  <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="keyword">fix</span>-current)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Map function and class text objects</span></span><br><span class="line"><span class="comment">&quot; <span class="doctag">NOTE:</span> Requires &#x27;textDocument.documentSymbol&#x27; support from the language server.</span></span><br><span class="line"><span class="keyword">xmap</span> <span class="keyword">if</span> <span class="symbol">&lt;Plug&gt;</span>(coc-funcobj-i)</span><br><span class="line"><span class="keyword">omap</span> <span class="keyword">if</span> <span class="symbol">&lt;Plug&gt;</span>(coc-funcobj-i)</span><br><span class="line"><span class="keyword">xmap</span> af <span class="symbol">&lt;Plug&gt;</span>(coc-funcobj-<span class="keyword">a</span>)</span><br><span class="line"><span class="keyword">omap</span> af <span class="symbol">&lt;Plug&gt;</span>(coc-funcobj-<span class="keyword">a</span>)</span><br><span class="line"><span class="keyword">xmap</span> ic <span class="symbol">&lt;Plug&gt;</span>(coc-classobj-i)</span><br><span class="line"><span class="keyword">omap</span> ic <span class="symbol">&lt;Plug&gt;</span>(coc-classobj-i)</span><br><span class="line"><span class="keyword">xmap</span> ac <span class="symbol">&lt;Plug&gt;</span>(coc-classobj-<span class="keyword">a</span>)</span><br><span class="line"><span class="keyword">omap</span> ac <span class="symbol">&lt;Plug&gt;</span>(coc-classobj-<span class="keyword">a</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Use CTRL-S for selections ranges.</span></span><br><span class="line"><span class="comment">&quot; Requires &#x27;textDocument/selectionRange&#x27; support of LS, ex: coc-tsserver</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;C-s&gt;</span> <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">range</span>-select)</span><br><span class="line"><span class="keyword">xmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;C-s&gt;</span> <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">range</span>-select)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Add `:Format` command to format current buffer.</span></span><br><span class="line">command! -nargs=<span class="number">0</span> Format :<span class="keyword">call</span> CocAction(<span class="string">&#x27;format&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Add `:Fold` command to fold current buffer.</span></span><br><span class="line">command! -nargs=? Fold :<span class="keyword">call</span>     CocAction(<span class="string">&#x27;fold&#x27;</span>, <span class="symbol">&lt;f-args&gt;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Add `:OR` command for organize imports of the current buffer.</span></span><br><span class="line">command! -nargs=<span class="number">0</span> OR   :<span class="keyword">call</span>     CocAction(<span class="string">&#x27;runCommand&#x27;</span>, <span class="string">&#x27;editor.action.organizeImport&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Add (Neo)Vim&#x27;s native statusline support.</span></span><br><span class="line"><span class="comment">&quot; <span class="doctag">NOTE:</span> Please see `:h coc-status` for integrations with external plugins that</span></span><br><span class="line"><span class="comment">&quot; provide custom statusline: lightline.vim, vim-airline.</span></span><br><span class="line"><span class="keyword">set</span> statusline^=%&#123;coc#status()&#125;%&#123;<span class="built_in">get</span>(<span class="variable">b:</span>,<span class="string">&#x27;coc_current_function&#x27;</span>,<span class="string">&#x27;&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Mappings for CoCList</span></span><br><span class="line"><span class="comment">&quot; Show all diagnostics.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">a</span>  :<span class="symbol">&lt;C-u&gt;</span>CocList diagnostics<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">&quot; Manage extensions.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">e</span>  :<span class="symbol">&lt;C-u&gt;</span>CocList extensions<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">&quot; Show commands.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">c</span>  :<span class="symbol">&lt;C-u&gt;</span>CocList commands<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">&quot; Find symbol of current document.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">o</span>  :<span class="symbol">&lt;C-u&gt;</span>CocList outline<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">&quot; Search workspace symbols.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span>s  :<span class="symbol">&lt;C-u&gt;</span>CocList -I symbols<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">&quot; Do default action for next item.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">j</span>  :<span class="symbol">&lt;C-u&gt;</span>CocNext<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; Do default action for previous item.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">k</span>  :<span class="symbol">&lt;C-u&gt;</span>CocPrev<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; Resume latest coc list.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">p</span>  :<span class="symbol">&lt;C-u&gt;</span>CocListResume<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="coc-settings-json"><a href="#coc-settings-json" class="headerlink" title="coc-settings.json"></a>coc-settings.json</h2><p>特别说明，要使有 coc 的java语法提示，必须指定<code>jdk</code>为<code>JDK11</code>，否则报错，语法提示服务无法启动。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;suggest.noselect&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.enablePreselect&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;codeLens.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;java.home&quot;</span>: <span class="string">&quot;/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.completionItemKindLabels&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;class&quot;</span>: <span class="string">&quot;\uf0e8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;\ue22b&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;constant&quot;</span>: <span class="string">&quot;\uf8fe&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;default&quot;</span>: <span class="string">&quot;\uf29c&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;enum&quot;</span>: <span class="string">&quot;\uf435&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;enumMember&quot;</span>: <span class="string">&quot;\uf02b&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;event&quot;</span>: <span class="string">&quot;\ufacd&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;\uf93d&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;\uf723&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;folder&quot;</span>: <span class="string">&quot;\uf115&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;function&quot;</span>: <span class="string">&quot;\u0192&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;interface&quot;</span>: <span class="string">&quot;\uf417&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;keyword&quot;</span>: <span class="string">&quot;\uf1de&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;\uf6a6&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;\uf40d&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;\uf915&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;property&quot;</span>: <span class="string">&quot;\ue624&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reference&quot;</span>: <span class="string">&quot;\ufa46&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;snippet&quot;</span>: <span class="string">&quot;\ue60b&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;struct&quot;</span>: <span class="string">&quot;\ufb44&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;\ue612&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;typeParameter&quot;</span>: <span class="string">&quot;\uf728&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;unit&quot;</span>: <span class="string">&quot;\uf475&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;\uf89f&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;variable&quot;</span>: <span class="string">&quot;\ue71b&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;coc.preferences.formatOnSaveFiletypes&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java&quot;</span>,</span><br><span class="line">        <span class="string">&quot;python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;css&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dart&quot;</span>,</span><br><span class="line">        <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javascript&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
            <tag> mac </tag>
            
            <tag> mvin </tag>
            
            <tag> on-my-zsh </tag>
            
            <tag> zsh </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-283-移动零</title>
      <link href="2020/12/16/%E7%AE%97%E6%B3%95--leetcode-283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
      <url>2020/12/16/%E7%AE%97%E6%B3%95--leetcode-283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<p>相当于是使用 for 进行交换的一个小技巧的练习，后面会给出一些算法的小技巧，都是总结的一些算法的小技巧。</p><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>必须在原数组上操作，不能拷贝额外的数组。<br>尽量减少操作次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">               arr[j] = arr[i];</span><br><span class="line">               arr[i] = temp;</span><br><span class="line">               j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 3, 5, 7, 8, 9, 0, 0, 0, 0]</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h3><p><a href="https://leetcode-cn.com/problems/move-zeroes">https://leetcode-cn.com/problems/move-zeroes</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode007-整数反转</title>
      <link href="2020/12/16/%E7%AE%97%E6%B3%95--leetcode007-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>2020/12/16/%E7%AE%97%E6%B3%95--leetcode007-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x &#x3D; 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x &#x3D; -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x &#x3D; 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x &#x3D; 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>提示：</p><p><code>-231 &lt;= x &lt;= 231 - 1</code></p><p>当所计算数字大于2^30 次方或等于2^31 次方但余下的数大于7或小于-2^30 次方或等于-2^31 次方但余下的数小于-8时，只要再计算一次就溢出。</p><h3 id="解题方式"><a href="#解题方式" class="headerlink" title="解题方式"></a>解题方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pop;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        pop = x % <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;pop: &quot;</span> + pop);</span><br><span class="line">        x = x / <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;x: &quot;</span> + x);</span><br><span class="line">        <span class="keyword">if</span> (res &gt; Integer.MAX_VALUE / <span class="number">10</span> || (res == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; Integer.MIN_VALUE / <span class="number">10</span> || (res == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;res before: &quot;</span> + res);</span><br><span class="line">        res = res * <span class="number">10</span> + pop;</span><br><span class="line">        System.out.println(<span class="string">&quot;res after: &quot;</span> + res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h3><p><a href="https://leetcode-cn.com/problems/reverse-integer">https://leetcode-cn.com/problems/reverse-integer</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode232-栈stack-用栈实现队列</title>
      <link href="2020/12/15/%E7%AE%97%E6%B3%95--leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>2020/12/15/%E7%AE%97%E6%B3%95--leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><p>这个是 Leetcode 232 题，用两个栈来实现一个先进先出的队列，实现了一个版本。</p><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p><p>实现 <code>MyQueue</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li></ul><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ul><li>你只能使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li></ul><h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h3><ul><li>你能否实现每个操作均摊时间复杂度为 <code>O(1)</code> 的队列？换句话说，执行 n 个操作的总时间复杂度为 <code>O(n)</code> ，即使其中一个操作可能花费较长时间。</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyQueue myQueue &#x3D; new MyQueue();</span><br><span class="line">myQueue.push(1); &#x2F;&#x2F; queue is: [1]</span><br><span class="line">myQueue.push(2); &#x2F;&#x2F; queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); &#x2F;&#x2F; return 1</span><br><span class="line">myQueue.pop(); &#x2F;&#x2F; return 1, queue is [2]</span><br><span class="line">myQueue.empty(); &#x2F;&#x2F; return false</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= x &lt;= 9</code></li><li>最多调用 <code>100</code> 次 <code>push</code>、<code>pop</code>、<code>peek</code> 和 <code>empty</code></li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 <code>pop</code> 或者 <code>peek</code> 操作）</li></ul><a id="more"></a><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize your data structure here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Push element x to the back of queue.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack1.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = stack2.pop();</span><br><span class="line">        <span class="keyword">while</span> (!stack2.empty()) &#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the front element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = stack2.peek();</span><br><span class="line">        <span class="keyword">while</span> (!stack2.empty()) &#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns whether the queue is empty.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack1.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原题出处"><a href="#原题出处" class="headerlink" title="原题出处"></a>原题出处</h3><p><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">https://leetcode-cn.com/problems/implement-queue-using-stacks/</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群容错模式</title>
      <link href="2020/05/06/architecture-%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/05/06/architecture-%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="Failfast-Cluster模式"><a href="#Failfast-Cluster模式" class="headerlink" title="Failfast Cluster模式"></a>Failfast Cluster模式</h3><p>这种模式称为快速失败模式，调用只执行一次，失败则立即报错。这种模式适用于非幂等性操作，每次调用的副作用是不同的，如写操作，比如交易系统我们要下订单，如果一次失败就应该让它失败，通常由服务消费方控制是否重新发起下订单操作请求（另一个新的订单）。<br>-Failsafe Cluster模式<br>失败安全模式，如果调用失败， 则直接忽略失败的调用，而是要记录下失败的调用到日志文件，以便后续审计。<br><a id="more"></a></p><h3 id="Failback-Cluster模式"><a href="#Failback-Cluster模式" class="headerlink" title="Failback Cluster模式"></a>Failback Cluster模式</h3><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p><h3 id="Forking-Cluster模式"><a href="#Forking-Cluster模式" class="headerlink" title="Forking Cluster模式"></a>Forking Cluster模式</h3><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。</p><h3 id="Broadcast-Cluster模式"><a href="#Broadcast-Cluster模式" class="headerlink" title="Broadcast Cluster模式"></a>Broadcast Cluster模式</h3><p>广播调用所有提供者，逐个调用，任意一台报错则报错（2.1.0开始支持）。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
          <category> 概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 概念 </tag>
            
            <tag> 容错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Gateway 静态路由--路径切割</title>
      <link href="2019/07/22/Spring-Spring-Cloud-Gateway-%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1-%E8%B7%AF%E5%BE%84%E5%88%87%E5%89%B2/"/>
      <url>2019/07/22/Spring-Spring-Cloud-Gateway-%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1-%E8%B7%AF%E5%BE%84%E5%88%87%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<p>以代码 或 配置文件形式进行配置。<br>RewritePath：路径匹配切割<br>StripPrefix： 路径载取</p><p>参数说明<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">路由ID</span></span><br><span class="line"><span class="attr">uri:</span> <span class="string">目标地址，可以是服务，如果服务Spring推荐用全大写，实际调用大小写不敏感，都可以调通。</span></span><br><span class="line"><span class="attr">predicates:</span> <span class="string">匹配路径，以浏览器请求的端口号后面的第一级路径为起始。</span></span><br><span class="line"><span class="attr">filters:</span> <span class="string">过滤器，包含Spring</span> <span class="string">Gateway</span> <span class="string">内置过滤器，可以自定义过滤器。</span></span><br></pre></td></tr></table></figure></p><h2 id="1-请求转发，转发到目标地址"><a href="#1-请求转发，转发到目标地址" class="headerlink" title="1. 请求转发，转发到目标地址"></a>1. 请求转发，转发到目标地址</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="comment"># 跳转URL</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">163_route</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">http://www.163.com/</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/163</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-切路径"><a href="#2-切路径" class="headerlink" title="2.切路径"></a>2.切路径</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oauth2 认证</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">OAUTH2</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">lb://OAUTH-SERVER</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/oauth-server/**</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>参数说明</p><ol><li>StripPrefix的意思是将路径切掉一级，这个例子中 oauth-server 被剪。</li><li>请求路径：localhost:9000/oauth-server/oauth-center/oauth/token?username=admin</li><li>最终结果：lb://OAUTH-SERVER/oauth-center/oauth/token?username=admin</li></ol><h2 id="3-请求重写"><a href="#3-请求重写" class="headerlink" title="3.请求重写"></a>3.请求重写</h2>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oauth2 认证</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">OAUTH2</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">lb://OAUTH-SERVER/</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/oauth-server/**</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RewritePath=/oauth-server/(?&lt;path&gt;.*),</span> <span class="string">/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><ol><li>请求路径: localhost:9000/oauth-server/oauth-center/oauth/token?username=admin</li><li>最终结果: lb://OAUTH-SERVER/oauth-center/oauth/token?username=admin</li></ol><h3 id="验证了一下，RewritePath-的处理方式："><a href="#验证了一下，RewritePath-的处理方式：" class="headerlink" title="验证了一下，RewritePath 的处理方式："></a>验证了一下，RewritePath 的处理方式：</h3><ol><li>RewritePath 找到自己的 /oauth-server/ 这一段，从 - Path 中去匹配，如果能匹配的到就是会将路径进行切割，注意是切割</li><li>切割方式将 /oauth-server/(?<path></path>.*) ，中 <path></path> 中的路径切出来，也就是 oauth-server/后面的部份。</li><li>并将切的结果赋值到 {path} 中。</li><li>最后的拼接路径为     lb://SPRINGCLOUD-PROVIDER/path</li></ol><h3 id="Path-设置多个无效"><a href="#Path-设置多个无效" class="headerlink" title="-Path 设置多个无效"></a>-Path 设置多个无效</h3><p>验证 predicates 的 -Path 设置多个无效，如果 -Path 中的路径匹配对了，但是 RewritePath 中的路径和 -Path 匹配不上会报 HTTP Status 404</p><h2 id="4-路径重定–结果路径多一级"><a href="#4-路径重定–结果路径多一级" class="headerlink" title="4.路径重定–结果路径多一级"></a>4.路径重定–结果路径多一级</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">4</span><span class="string">.路径重写</span></span><br><span class="line">    <span class="string">这个测试，是在请求路径中不存在的url，添加到最终的请求路径中去</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">OAUTH2</span></span><br><span class="line">     <span class="attr">uri:</span> <span class="string">lb://OAUTH-SERVER/</span></span><br><span class="line">     <span class="attr">predicates:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">Path=/oauth-server/**</span></span><br><span class="line">     <span class="attr">filters:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">RewritePath=/oauth-server/(?&lt;path&gt;.*),</span> <span class="string">/oauth-center/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><ul><li>请求路径: localhost:9000/oauth-server/oauth/token?username=admin</li><li>最终结果: lb://OAUTH-SERVER/oauth-center/oauth/token?username=admin<br>oauth-center 在请求的路径中不存在，在 RewritePath 中进行重写，添加了一级路径。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>RewritePath: predicates 中的 - path 路径如果和 RewritePath 匹配则会被 RewritePath 剪切。</li><li>StripPrefix：剪取指定路径位数截取</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">举个示例</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rewritepath_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/a/b/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RewritePath=/a/b/(?&lt;segment&gt;.*),</span> <span class="string">/f/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">请求的时为：</span> <span class="string">/a/b/c</span></span><br><span class="line"><span class="string">最终结果为：</span> <span class="string">/f/c</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> spring gateway </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试-产生线程死锁的原因和处理方式</title>
      <link href="2019/07/02/%E9%9D%A2%E8%AF%95-%E4%BA%A7%E7%94%9F%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>2019/07/02/%E9%9D%A2%E8%AF%95-%E4%BA%A7%E7%94%9F%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h3><p>线程同步(就是加锁)会有一个问题，就是产生死锁<br>所谓死锁: 是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p><h3 id="帮助理解："><a href="#帮助理解：" class="headerlink" title="帮助理解："></a>帮助理解：</h3><p>地上放着两个桶泡面，一个老坛酸菜，一个小鸡炖磨茹。有两个人：<code>一个产品</code>(线程1)，<code>一个测试</code>(线程2)，同时扑向<code>抢老坛酸菜</code>(锁A)和<code>小鸡炖磨茹</code>(锁B)，产品拿到老坛酸菜，测试拿到小鸡炖磨茹，同一时刻，产品伸要去拽测试怀里的小鸡炖磨茹，测试伸手去拽产品的老坛酸菜，互使剪刀脚两个僵持不下，就卡死在那了，叫这就死锁。如果没有<code>一个开发</code>将他们各打一顿解救出来(中断状态)，它们将无法推进下去。</p><h3 id="发生死锁的具体原因如下"><a href="#发生死锁的具体原因如下" class="headerlink" title="发生死锁的具体原因如下:"></a>发生死锁的具体原因如下:</h3><a id="more"></a><ol><li>因为系统资源不足。</li><li>进程运行推进的顺序不合适。    </li><li>资源分配不当。</li></ol><h3 id="举列说明场景"><a href="#举列说明场景" class="headerlink" title="举列说明场景:"></a>举列说明场景:</h3><p>死锁是因为多线程访问共享资源，由于访问的顺序不当所造成的，通常是一个线程锁定了一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在等待，而无法执行的情况。</p><h3 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h3><p>如果只使用一个锁就不会有死锁的问题，不过复杂场景下不太理实。<br>1.以确定的顺序获得锁<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">线程A</span> <span class="string">---&gt;</span> <span class="string">锁定</span> <span class="string">A</span>  <span class="string">----&gt;</span> <span class="string">偿试锁定</span> <span class="string">B</span></span><br><span class="line"><span class="string">线程B</span> <span class="string">---&gt;</span> <span class="string">锁定</span> <span class="string">A</span>  <span class="string">----&gt;</span> <span class="string">偿试锁定</span> <span class="string">B</span></span><br><span class="line"><span class="string">这样就不会发生死锁</span></span><br></pre></td></tr></table></figure></p><p>2.超时放弃<br>Lock接口提供了boolean tryLock(long time, TimeUnit unit) throws InterruptedException方法，该方法可以按照固定时长等待锁，因此线程可以在获取锁超时以后，主动释放之前已经获得的所有的锁。通过这种方式，也可以很有效地避免死锁。</p><p>死锁示列:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">packag com.liukai.thread.daed_locl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncDeadLock</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object locka = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lockb = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SyncDeadLock().deadLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 拿到 lock-A!&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 偿试获取 lock-B!&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 已获得 lock-B!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 拿到 lock-B!&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 偿试获取 lock-A!&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 已获得 lock-A!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;thread2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 线程死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用递归实现地址数据菜单</title>
      <link href="2019/06/14/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%A1%A8%E6%A0%91%E5%9E%8B%E5%AE%9E%E7%8E%B0/"/>
      <url>2019/06/14/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%A1%A8%E6%A0%91%E5%9E%8B%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>跟网上的不同的是，我这种方式是以时间换空间的做法，不会一次性把数据全查出来再慢慢遍历，而是每次查询是否存在子级，有就递归下去查。<br>数据量大时，查库的次数比较多，数据量少时对数据库查询次数少，压力较小，但是多次查询不会出现一次查询数据量很大卡住的情况。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>先获取一级菜单，对每个一级菜单设子区域。</li><li>如果子区域还有子区域，就递归查询，直到查不到子区域返回。</li><li>递归的核心就是在方法中设置一个返回条件，防止无限递归下去。</li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@author</span> liukai</span><br><span class="line"> * <span class="meta">@since</span> <span class="number">2019</span>/<span class="number">6</span>/<span class="number">12</span> <span class="number">16</span>:<span class="number">14.</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RegionDao regionDao = <span class="keyword">new</span> RegionDao();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先拿到第一级地址</span></span><br><span class="line">        <span class="comment">//2. 递归查每一级下面的子级：</span></span><br><span class="line">        <span class="comment">//      如果子级下面，还有子级就递归</span></span><br><span class="line">        <span class="comment">//      如果子级下面，没有子级就返回退出递归</span></span><br><span class="line">        List&lt;RegionBean&gt; firstRegion = regionDao.queryParentId(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (RegionBean regionBean : firstRegion) &#123;</span><br><span class="line">            <span class="comment">//设置子区域</span></span><br><span class="line">            regionBean.setRegionBeanList(setChild(regionBean.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">        String jsonObject = JSONObject.toJSONString(firstRegion);</span><br><span class="line"></span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归查询所有子级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;RegionBean&gt; <span class="title">setChild</span><span class="params">(<span class="keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">        List&lt;RegionBean&gt; childList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;RegionBean&gt; childTemp = regionDao.queryParentId(parentId);</span><br><span class="line">        <span class="keyword">if</span> (childTemp != <span class="keyword">null</span> &amp;&amp; childTemp.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RegionBean regionBean : childTemp) &#123;</span><br><span class="line">                childList.add(regionBean);</span><br><span class="line">                regionBean.setRegionBeanList(setChild(regionBean.getId()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> childList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> childList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegionDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询父级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;RegionBean&gt; <span class="title">queryParentId</span><span class="params">(<span class="keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">        List&lt;RegionBean&gt; regionBeans = dataBaseRegion();</span><br><span class="line">        List&lt;RegionBean&gt; firstRegion = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (RegionBean regionBean : regionBeans) &#123;</span><br><span class="line">            <span class="keyword">if</span> (regionBean.getParentId() == parentId) &#123;</span><br><span class="line">                firstRegion.add(regionBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> firstRegion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;RegionBean&gt; <span class="title">dataBaseRegion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;RegionBean&gt; regionBeans = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">2</span>, <span class="string">&quot;北京市&quot;</span>, <span class="string">&quot;北京市&quot;</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">22</span>, <span class="string">&quot;天津市&quot;</span>, <span class="string">&quot;天津市&quot;</span>, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">783</span>, <span class="string">&quot;上海市&quot;</span>, <span class="string">&quot;上海市&quot;</span>, <span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">457</span>, <span class="string">&quot;辽宁省&quot;</span>, <span class="string">&quot;辽宁省&quot;</span>, <span class="number">0</span>, <span class="number">8</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">458</span>, <span class="string">&quot;沈阳市&quot;</span>, <span class="string">&quot;辽宁省-沈阳市&quot;</span>, <span class="number">457</span>, <span class="number">1</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">472</span>, <span class="string">&quot;铁岭市&quot;</span>, <span class="string">&quot;辽宁省-铁岭市&quot;</span>, <span class="number">457</span>, <span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">480</span>, <span class="string">&quot;大连市&quot;</span>, <span class="string">&quot;辽宁省-大连市&quot;</span>, <span class="number">457</span>, <span class="number">3</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">491</span>, <span class="string">&quot;鞍山市&quot;</span>, <span class="string">&quot;辽宁省-鞍山市&quot;</span>, <span class="number">457</span>, <span class="number">4</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">499</span>, <span class="string">&quot;抚顺市&quot;</span>, <span class="string">&quot;辽宁省-抚顺市&quot;</span>, <span class="number">457</span>, <span class="number">5</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">507</span>, <span class="string">&quot;本溪市&quot;</span>, <span class="string">&quot;辽宁省-本溪市&quot;</span>, <span class="number">457</span>, <span class="number">6</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">514</span>, <span class="string">&quot;丹东市&quot;</span>, <span class="string">&quot;辽宁省-丹东市&quot;</span>, <span class="number">457</span>, <span class="number">7</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">521</span>, <span class="string">&quot;锦州市&quot;</span>, <span class="string">&quot;辽宁省-锦州市&quot;</span>, <span class="number">457</span>, <span class="number">8</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">529</span>, <span class="string">&quot;营口市&quot;</span>, <span class="string">&quot;辽宁省-营口市&quot;</span>, <span class="number">457</span>, <span class="number">9</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">536</span>, <span class="string">&quot;阜新市&quot;</span>, <span class="string">&quot;辽宁省-阜新市&quot;</span>, <span class="number">457</span>, <span class="number">10</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">544</span>, <span class="string">&quot;辽阳市&quot;</span>, <span class="string">&quot;辽宁省-辽阳市&quot;</span>, <span class="number">457</span>, <span class="number">11</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">552</span>, <span class="string">&quot;朝阳市&quot;</span>, <span class="string">&quot;辽宁省-朝阳市&quot;</span>, <span class="number">457</span>, <span class="number">12</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">560</span>, <span class="string">&quot;盘锦市&quot;</span>, <span class="string">&quot;辽宁省-盘锦市&quot;</span>, <span class="number">457</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">561</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">562</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">563</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">564</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">565</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">566</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">666</span>, <span class="string">&quot;四级数据&quot;</span>, <span class="string">&quot;辽宁省-四级数据&quot;</span>, <span class="number">566</span>, <span class="number">13</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> regionBeans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegionBean</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String fullLabel;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> parentId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> sortId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;RegionBean&gt; regionBeanList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;fullLabel&quot;:&quot;北京市&quot;,&quot;id&quot;:2,&quot;label&quot;:&quot;北京市&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:1&#125;,&#123;&quot;fullLabel&quot;:&quot;天津市&quot;,&quot;id&quot;:22,&quot;label&quot;:&quot;天津市&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:2&#125;,&#123;&quot;fullLabel&quot;:&quot;上海市&quot;,&quot;id&quot;:783,&quot;label&quot;:&quot;上海市&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:3&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省&quot;,&quot;id&quot;:457,&quot;label&quot;:&quot;辽宁省&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[&#123;&quot;fullLabel&quot;:&quot;辽宁省-沈阳市&quot;,&quot;id&quot;:458,&quot;label&quot;:&quot;沈阳市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:1&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-铁岭市&quot;,&quot;id&quot;:472,&quot;label&quot;:&quot;铁岭市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:2&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-大连市&quot;,&quot;id&quot;:480,&quot;label&quot;:&quot;大连市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:3&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-鞍山市&quot;,&quot;id&quot;:491,&quot;label&quot;:&quot;鞍山市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:4&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-抚顺市&quot;,&quot;id&quot;:499,&quot;label&quot;:&quot;抚顺市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:5&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-本溪市&quot;,&quot;id&quot;:507,&quot;label&quot;:&quot;本溪市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:6&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-丹东市&quot;,&quot;id&quot;:514,&quot;label&quot;:&quot;丹东市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:7&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-锦州市&quot;,&quot;id&quot;:521,&quot;label&quot;:&quot;锦州市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:8&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-营口市&quot;,&quot;id&quot;:529,&quot;label&quot;:&quot;营口市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:9&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-阜新市&quot;,&quot;id&quot;:536,&quot;label&quot;:&quot;阜新市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:10&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-辽阳市&quot;,&quot;id&quot;:544,&quot;label&quot;:&quot;辽阳市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:11&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-朝阳市&quot;,&quot;id&quot;:552,&quot;label&quot;:&quot;朝阳市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:12&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-盘锦市&quot;,&quot;id&quot;:560,&quot;label&quot;:&quot;盘锦市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:561,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:562,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:563,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:564,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:565,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:566,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[&#123;&quot;fullLabel&quot;:&quot;辽宁省-四级数据&quot;,&quot;id&quot;:666,&quot;label&quot;:&quot;四级数据&quot;,&quot;parentId&quot;:566,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;],&quot;sortId&quot;:13&#125;],&quot;sortId&quot;:13&#125;],&quot;sortId&quot;:8&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1n712ep0u8906">https://cloud.tencent.com/developer/support-plan?invite_code=1n712ep0u8906</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>server和client模式的区别</title>
      <link href="2019/06/01/jvm-server%E5%92%8Cclient%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/06/01/jvm-server%E5%92%8Cclient%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<pre><code>这两个相反的，由jvm启动时自动选择。</code></pre><p>   <code>-server 模式</code>：初始空间大，默认启动并行 VM，启动慢，运行快<br>    <code>-client 模式</code>：初始空间小，默认启动串行 VM，启动快，运行慢<br>    一般情况下 -server 模式多<br><a id="more"></a></p><ol><li><p>64位系统只能使用 server 模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">java version <span class="string">&quot;11.0.2&quot;</span> <span class="number">2019</span>-<span class="number">01</span>-<span class="number">15</span> LTS</span><br><span class="line">Java(TM) SE Runtime Environment <span class="number">18.9</span> (build <span class="number">11.0</span>.<span class="number">2</span>+<span class="number">9</span>-LTS)</span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server VM 18.9 <span class="params">(build <span class="number">11.0</span><span class="number">.2</span>+<span class="number">9</span>-LTS, mixed mode)</span></span></span><br></pre></td></tr></table></figure><p> 32位了解即可</p></li><li><p>测试 java -D 命令<br> -D 后面传入的命令，会解析成 System 中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//java -DtestJvm=test TestGetSystemProperties</span></span><br><span class="line">    String test = System.getProperty(<span class="string">&quot;testJvm&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != test) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test -&gt;&quot;</span> + test);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;property is null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.启动选择模式<br><code>java -client -showversion TestGetSystemProperties</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> client 模式 </tag>
            
            <tag> server 模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud eureka 注册服务显示IP端口号</title>
      <link href="2019/05/06/springcloud--%E6%9C%8D%E5%8A%A1%E6%98%BE%E7%A4%BAIP%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
      <url>2019/05/06/springcloud--%E6%9C%8D%E5%8A%A1%E6%98%BE%E7%A4%BAIP%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>Spring cloud 显示 INSTANCE-ID 如果以IP + 端口号的形式显示，会更清析的定位每个服务所在的机器节点的状态。</p><h3 id="依赖的-pom"><a href="#依赖的-pom" class="headerlink" title="依赖的 pom"></a>依赖的 pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="yml-相关配置"><a href="#yml-相关配置" class="headerlink" title="yml 相关配置"></a>yml 相关配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://10.168.16.101:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2019/05/06/springcloud--%E6%9C%8D%E5%8A%A1%E6%98%BE%E7%A4%BAIP%E7%AB%AF%E5%8F%A3%E5%8F%B7/1557126376514.jpg" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> java </tag>
            
            <tag> eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud 四种服务下线方式</title>
      <link href="2019/05/05/springcloud--%E5%9B%9B%E7%A7%8D%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%BA%BF%E6%96%B9%E5%BC%8F/"/>
      <url>2019/05/05/springcloud--%E5%9B%9B%E7%A7%8D%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%BA%BF%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>这里指已经在 Eureka 注册中心注册的服务，如果需要停用，有四种方式进行停用。</p><h3 id="1-直接关闭"><a href="#1-直接关闭" class="headerlink" title="1.直接关闭"></a>1.直接关闭</h3><p>最粗暴。<br>写这个是因为，直接关闭，如果 Eureka 开了保护模式，会导至服务已关闭，但是未下线，还是会重试调用。如果不需强稳定性的话可以这么干。</p><h3 id="2-客户端主动通知注册中心下线"><a href="#2-客户端主动通知注册中心下线" class="headerlink" title="2.客户端主动通知注册中心下线"></a>2.客户端主动通知注册中心下线</h3><p>安全。<br>Eureka注册中心在收到某个客户端下线后不会马上通知所有的注册的客户端，而是等到客户端进行心跳的时候(心跳(续约)频率，默认30秒 )再将下的数据返回。通过这种方式下线的话，可以在某个服务下线后防止其他服务调用此服务失败。</p><p>白话就是，服务状态下线了，但是不通知其他服务。等到续约时间到了，再通知所有注册服务。</p><a id="more"></a><p>猜测，服务下线后，在没有心跳前，其他服务还是可以进行调用。等到心跳后，通知所有服务已下线，其他服务认为已下线，就不会再调该下线服务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/eurekaUnRegister&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       eurekaClient.shutdown();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;eurekaUnRegistering&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>或<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/offline&quot;, method = RequestMethod.GET)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offLine</span><span class="params">()</span></span>&#123;</span><br><span class="line">   DiscoveryManager.getInstance().shutdownComponent();</span><br><span class="line"> &#125;  </span><br></pre></td></tr></table></figure></p><h3 id="3-调用接口方式下线"><a href="#3-调用接口方式下线" class="headerlink" title="3.调用接口方式下线"></a>3.调用接口方式下线</h3><p><a href="http://10.168.62.58:9999/message/actuator/shutdown">http://10.168.62.58:9999/message/actuator/shutdown</a></p><p>返回结果<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Shutting down, bye...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>本地起机器后，调试结果</p><p>结果就是服务线程关闭，服务停止：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stopping beans in phase 2147483647</span><br><span class="line">Stopping beans in phase 0</span><br><span class="line">Unregistering JMX-exposed beans on shutdown</span><br><span class="line">DiscoveryClient_GROUP-MESSAGE&#x2F;group-message-provider-704 - registration status: 204</span><br><span class="line">Shutting down DiscoveryClient ...</span><br><span class="line">Unregistering ...</span><br><span class="line">DiscoveryClient_GROUP-MESSAGE&#x2F;group-message-provider-704 - deregister  status: 200</span><br></pre></td></tr></table></figure><br>网上博客<a href="https://blog.csdn.net/memmsc/article/details/78122962">https://blog.csdn.net/memmsc/article/details/78122962</a></p><h3 id="4-修改服务状态"><a href="#4-修改服务状态" class="headerlink" title="4.修改服务状态"></a>4.修改服务状态</h3><p>这种方式，服务不会停止，只是状态变为 DOWN，适合禁用该服务的操作。<br>DOWN 禁用<br>UP 启用<br><a href="http://10.168.62.58:9999/message/actuator/service-registry">http://10.168.62.58:9999/message/actuator/service-registry</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>sprinng boot 2.0 以上需要添加额外配置才能生效，否则报404<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"> <span class="attr">endpoints:</span></span><br><span class="line">   <span class="attr">web:</span></span><br><span class="line">     <span class="attr">exposure:</span></span><br><span class="line">       <span class="attr">include:</span> <span class="string">&quot;*&quot;</span>                <span class="comment">#包含的路径，可以单个如 info</span></span><br><span class="line"> <span class="attr">endpoint:</span></span><br><span class="line">   <span class="attr">shutdown:</span></span><br><span class="line">     <span class="attr">enabled:</span> <span class="literal">true</span>                <span class="comment">#开启shutdown 关闭</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> java </tag>
            
            <tag> 服务下线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 日志输出参数 [-XX:+PrintGCDetails] 解释</title>
      <link href="2019/04/25/jvm-%E8%AF%A6%E7%BB%86%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/"/>
      <url>2019/04/25/jvm-%E8%AF%A6%E7%BB%86%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>-XX:+PrintGCDetails 是在启动 java 时，添加的 VM 参数，用来在控制台中输出 GC 的详情。<br>用这个参数可以详细的查看 GC 的回收操作，一般会将 GC 的输出，单独单到一个 log 文件当中进行查看。</p></blockquote><h3 id="添加启动参数"><a href="#添加启动参数" class="headerlink" title="添加启动参数"></a>添加启动参数</h3><blockquote><p>java  -XX:+PrintGCDetails -jar Demo.jar</p></blockquote><h3 id="GC日志示例"><a href="#GC日志示例" class="headerlink" title="GC日志示例"></a>GC日志示例</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">0.098:</span> [<span class="string">GC</span> <span class="string">(Allocation</span> <span class="string">Failure)</span> [<span class="attr">PSYoungGen:</span> <span class="string">1022K-&gt;490K(1536K)</span>] <span class="string">1022K-&gt;522K(30208K)</span>, <span class="number">0.0007804</span> <span class="string">secs</span>] [<span class="attr">Times:</span> <span class="string">user=0.00</span> <span class="string">sys=0.00</span>, <span class="string">real=0.00</span> <span class="string">secs</span>]</span><br><span class="line"><span class="attr">1.959:</span> [<span class="string">Full</span> <span class="string">GC</span> <span class="string">(Ergonomics)</span> [<span class="attr">PSYoungGen:</span> <span class="string">384K-&gt;0K(1536K)</span>] [<span class="attr">ParOldGen:</span> <span class="string">28064K-&gt;11941K(28672K)</span>] <span class="string">28448K-&gt;11941K(30208K)</span>, [<span class="attr">Metaspace:</span> <span class="string">3382K-&gt;3382K(1056768K)</span>], <span class="number">0.0063741</span> <span class="string">secs</span>] [<span class="attr">Times:</span> <span class="string">user=0.02</span> <span class="string">sys=0.00</span>, <span class="string">real=0.01</span> <span class="string">secs</span>]</span><br></pre></td></tr></table></figure><p>这个用来理解每个日志的意义。</p><blockquote><p>1.Allocation Failure 分配 失败<br>2.promotion Failure: 晋升 失败，进行Minor GC时，survivor space放不下, 对象只能放入老年代，而此时老年代也放不下造成的；<br>3.concurrent mode failure：是在执行CMS GC的过程中同时有对象要放入老年代，而此时老年代空间不足造成的</p></blockquote><p><strong>日志说明</strong></p><blockquote><p>0.098: 运行时间<br>GC (Allocation Failure): [GC类型 (原因)]<br>[PSYoungGen: 1022K-&gt;490K(1536K)]: [收集器类型: GC前该内存区域已经使用容量-&gt;GC后该内存区域已使用容量(该内存区域总容量)],执行时间 secs<br>[Times: user=0.00 sys=0.00, real=0.00 secs]: user=用户线程使用时间 sys=系统执行使用时间, real=真正回收时间</p></blockquote><p><strong>连起来看</strong><br>运行时间: [GC类型 (原因)] [收集器类型: GC前该内存区域已经使用容量-&gt;GC后该内存区域已使用容量(该内存区域总容量)] GC前Java堆已使用容量-&gt;GC后Java堆已使用容量（Java堆总容量）, 执行时间 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</p><h3 id="2-jvm-执持时间"><a href="#2-jvm-执持时间" class="headerlink" title="2.jvm 执持时间"></a>2.jvm 执持时间</h3><p>0.098、0.143 都是 jvm 启动后的时间，从 0 开始</p><h3 id="3-GC-和-Full-GC-回收类型"><a href="#3-GC-和-Full-GC-回收类型" class="headerlink" title="3.GC 和 Full (GC 回收类型)"></a>3.GC 和 Full (GC 回收类型)</h3><p>以 GC 和 Full GC 开头的说明了这次回收的停顿为型。<br>而不是用来区分新生代GC还是老年代GC的。<br>如果有”Full GC”，说明这次GC是发生了Stop-The-World的。<br><a id="more"></a></p><h3 id="4-PSYoungGen、-ParOldGen、-Metaspace表示GC发生的区域"><a href="#4-PSYoungGen、-ParOldGen、-Metaspace表示GC发生的区域" class="headerlink" title="4.[PSYoungGen、[ParOldGen、[Metaspace表示GC发生的区域"></a>4.[PSYoungGen、[ParOldGen、[Metaspace表示GC发生的区域</h3><p>这里显示的区域名称与使用的GC收集器是密切相关的，<br>例如上面的PSYoungGen表示采用Parallel Scavenge收集器，<br>ParOldGen表示采用Parallel Old收集器。<br>如果使用Serial收集器显示[DefNew，如果使用ParNew收集器显示[ParNew。</p><h3 id="5-括号中的含义"><a href="#5-括号中的含义" class="headerlink" title="5.括号中的含义"></a>5.括号中的含义</h3><p>后面方括号内部的1022K-&gt;490K(1536K)含义是:<br>“GC前该内存区域已经使用容量-&gt;GC后该内存区域已使用容量（该内存区域总容量）”。<br>而在方括号之外的1022K-&gt;522K(30208K)表示：<br>“GC前Java堆已使用容量-&gt;GC后Java堆已使用容量（Java堆总容量）”。<br>再往后的 0.0007804 secs 表示该内存区域GC所占用的时间，单位是秒。</p><blockquote><p>[Times: user=0.00 sys=0.00, real=0.00 secs]<br>表示:<br>user、sys、real 与 Linux 的 time 命令所输出的时间含义一致，分别代表用户态消耗的CPU时间、内核态消耗的CPU时间 和 操作从开始到结束所经过的墙钟时间（Wall Clock Time）。<br>CPU时间与墙钟时间的区别是，墙钟时间包括各种非运算的等待耗时，例如等待磁盘IO、等待线程阻塞，而CPU时间不包括这些耗时，但当系统有多CPU或者多核的话，多线程操作会叠加这些CPU时间，所以读者看到 user 或 sys 时间超过 real 时间是完全正常的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0.098: [GC (Allocation Failure) [PSYoungGen: 1022K-&gt;490K(1536K)] 1022K-&gt;522K(30208K), 0.0007804 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.143: [GC (Allocation Failure) [PSYoungGen: 1514K-&gt;490K(1536K)] 1546K-&gt;797K(30208K), 0.0014763 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.154: [GC (Allocation Failure) [PSYoungGen: 1466K-&gt;490K(1536K)] 1773K-&gt;1064K(30208K), 0.0021920 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.179: [GC (Allocation Failure) [PSYoungGen: 1514K-&gt;490K(1536K)] 2088K-&gt;1224K(30208K), 0.0014370 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.212: [GC (Allocation Failure) [PSYoungGen: 1514K-&gt;490K(1536K)] 2248K-&gt;1534K(30208K), 0.0013529 secs] [Times: user&#x3D;0.01 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.257: [GC (Allocation Failure) [PSYoungGen: 1513K-&gt;490K(1536K)] 2556K-&gt;1664K(30208K), 0.0082179 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs]</span><br><span class="line">1.957: [GC (Allocation Failure) [PSYoungGen: 769K-&gt;384K(1536K)] 28567K-&gt;28448K(30208K), 0.0016967 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">1.959: [Full GC (Ergonomics) [PSYoungGen: 384K-&gt;0K(1536K)] [ParOldGen: 28064K-&gt;11941K(28672K)] 28448K-&gt;11941K(30208K), [Metaspace: 3382K-&gt;3382K(1056768K)], 0.0063741 secs] [Times: user&#x3D;0.02 sys&#x3D;0.00, real&#x3D;0.01 secs]</span><br><span class="line">3.621: [GC (Allocation Failure) [PSYoungGen: 20K-&gt;32K(1536K)] 28346K-&gt;28357K(30208K), 0.0012428 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs]</span><br><span class="line">3.622: [Full GC (Ergonomics) [PSYoungGen: 32K-&gt;0K(1536K)] [ParOldGen: 28325K-&gt;11936K(28672K)] 28357K-&gt;11936K(30208K), [Metaspace: 3386K-&gt;3386K(1056768K)], 0.0038742 secs] [Times: user&#x3D;0.01 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 日志 </tag>
            
            <tag> 说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产生线程死锁的原因和处理方式</title>
      <link href="2019/04/20/java-%E4%BA%A7%E7%94%9F%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>2019/04/20/java-%E4%BA%A7%E7%94%9F%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><blockquote><p>简单的说：线程1 想要去拿一个由 线程2 持有的锁，由于synchronized 的锁是互斥锁，某一时刻只能被一个线程所持有，所以线程1 就拿不到锁。</p></blockquote><p><img src="/2019/04/20/java-%E4%BA%A7%E7%94%9F%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/1.jpeg" alt="死锁"></p><h2 id="死锁原因"><a href="#死锁原因" class="headerlink" title="死锁原因"></a>死锁原因</h2><p>是指<code>两个</code>或<code>两个以上</code>的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。<br>原因如下:</p><a id="more"></a><ol><li>因为系统资源不足。</li><li>进程运行推进的顺序不合适，这种产生的最多。</li><li>资源分配不当。</li></ol><p>多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放，而该资源又被其他线程锁定，从而导致每一个线程都得等其它线程释放其锁定的资源，造成了所有线程都无法正常结束。</p><p>因为多线程访问共享资源，由于访问的顺序不当所造成的，通常是一个线程锁定了一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在等待，而无法执行的情况。</p><p>产生背景: 在多线程环境下，争抢同是争抢对方资源(锁)就会产生该问题，即产生死锁。</p><h3 id="java-死锁产生的四个必要条件"><a href="#java-死锁产生的四个必要条件" class="headerlink" title="java 死锁产生的四个必要条件"></a>java 死锁产生的四个必要条件</h3><ol><li>互斥使用，即当资源被一个线程使用(占有)时，别的线程不能使用</li><li>不可抢占，资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放。</li><li>请求和保持，即当资源请求者在请求其他的资源的同时保持对原有资源的占有。</li><li>循环等待，即存在一个等待队列：P1占有P2的资源，P2占有P3的资源，P3占有P1的资源。这样就形成了一个等待环路。</li></ol><h3 id="举列说明场景"><a href="#举列说明场景" class="headerlink" title="举列说明场景"></a>举列说明场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncDeadLock</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Object locka = <span class="keyword">new</span> Object();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Object lockb = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> SyncDeadLock().deadLock();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (locka) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 拿到 lock-A!&quot;</span>);</span><br><span class="line">          Thread.sleep(<span class="number">500</span>);</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 偿试获取 lock-B!&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lockb) &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已获得 lock-B!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;thread1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (lockb) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 拿到 lock-B!&quot;</span>);</span><br><span class="line">          Thread.sleep(<span class="number">500</span>);</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 偿试获取 lock-A!&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (locka) &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已获得 lock-A!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;thread2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    thread1.start();</span><br><span class="line">    thread2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thread1 拿到 lock-A!</span><br><span class="line">thread2 拿到 lock-B!</span><br><span class="line">thread1 睡眠 500ms 后续继执行...!</span><br><span class="line">thread1 偿试获取 lock-B!</span><br><span class="line">thread2 睡眠 500ms 后续继执行...!</span><br><span class="line">thread2 偿试获取 lock-A!</span><br></pre></td></tr></table></figure><h3 id="帮助理解"><a href="#帮助理解" class="headerlink" title="帮助理解"></a>帮助理解</h3><p>地上放着两个桶泡面，一个老坛酸菜，一个小鸡炖磨茹。两个人一个产品，一个测试，同时出发去抢老坛酸菜和小鸡炖磨茹，产品老坛酸菜，测试拿到小鸡炖磨茹，同一时刻，产品伸要去拽测试怀里的小鸡炖磨茹，测试伸手去拽产品的老坛酸菜，两个僵持不下，就死在那了，叫死锁。如果没有开发将他们各打一顿解救出来，它们奖无法推进下去。</p><p>死锁是因为多线程访问共享资源，由于访问的顺序不当所造成的，通常是一个线程锁定了一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在等待，而无法执行的情况。</p><h2 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h2><p>如果只使用一个锁就不会有死锁的问题，不过复杂场景下不太理实。</p><h3 id="以确定的顺序获得锁"><a href="#以确定的顺序获得锁" class="headerlink" title="以确定的顺序获得锁"></a>以确定的顺序获得锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程A ---&gt; 锁定 A  ----&gt; 偿试锁定 B</span><br><span class="line">线程B ---&gt; 锁定 A  ----&gt; 偿试锁定 B</span><br><span class="line">这样就不会发生死锁</span><br></pre></td></tr></table></figure><h3 id="超时放弃"><a href="#超时放弃" class="headerlink" title="超时放弃"></a>超时放弃</h3><p>Lock 接口提供了<code>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</code>方法，该方法可以按照固定时长等待锁，因此线程可以在获取锁超时以后，主动释放之前已经获得的所有的锁。通过这种方式，也可以很有效地避免死锁。</p><h3 id="信号量控制"><a href="#信号量控制" class="headerlink" title="信号量控制"></a>信号量控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 信号量控制，解决死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnLockTest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore a1 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore a2 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      LockAa la = <span class="keyword">new</span> LockAa();</span><br><span class="line">      <span class="keyword">new</span> Thread(la).start();</span><br><span class="line">      LockBb lb = <span class="keyword">new</span> LockBb();</span><br><span class="line">      <span class="keyword">new</span> Thread(lb).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockAa</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UnLockTest.a1.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj1&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (UnLockTest.a2.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj2&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// do something</span></span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockA 锁 obj2 失败&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockA 锁 obj1 失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            UnLockTest.a1.release(); <span class="comment">// 释放</span></span><br><span class="line">            UnLockTest.a2.release();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">// 马上进行尝试，现实情况下do something是不确定的</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockBb</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UnLockTest.a2.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj2&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (UnLockTest.a1.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj1&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// do something</span></span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockB 锁 obj1 失败&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockB 锁 obj2 失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            UnLockTest.a1.release(); <span class="comment">// 释放</span></span><br><span class="line">            UnLockTest.a2.release();</span><br><span class="line">            Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">// 这里只是为了演示，所以tryAcquire只用1秒，而且B要给A让出能执行的时间，否则两个永远是死锁</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sun Oct 10 12:15:25 CST 2018 LockA 锁住 obj1</span><br><span class="line">Sun Oct 10 12:15:25 CST 2018 LockA 锁住 obj2</span><br><span class="line">Sun Oct 10 12:15:43 CST 2018 LockB 锁住 obj2</span><br><span class="line">Sun Oct 10 12:15:43 CST 2018 LockB 锁住 obj1</span><br><span class="line">Sun Oct 10 12:16:26 CST 2018 LockA 锁住 obj1</span><br><span class="line">Sun Oct 10 12:16:26 CST 2018 LockA 锁住 obj2</span><br><span class="line">Sun Oct 10 12:16:53 CST 2018 LockB 锁住 obj2</span><br><span class="line">Sun Oct 10 12:16:53 CST 2018 LockB 锁住 obj1</span><br><span class="line">Sun Oct 10 12:17:27 CST 2018 LockA 锁住 obj1</span><br><span class="line">Sun Oct 10 12:17:27 CST 2018 LockA 锁住 obj2</span><br><span class="line">Sun Oct 10 12:18:03 CST 2018 LockB 锁住 obj2</span><br><span class="line">Sun Oct 10 12:18:03 CST 2018 LockB 锁住 obj1</span><br><span class="line">Sun Oct 10 12:18:28 CST 2018 LockA 锁住 obj1</span><br><span class="line">Sun Oct 10 12:18:28 CST 2018 LockA 锁住 obj2</span><br><span class="line">Sun Oct 10 12:19:13 CST 2018 LockB 锁住 obj2</span><br><span class="line">Sun Oct 10 12:19:13 CST 2018 LockB 锁住 obj1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 死锁 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你为什么学不会lambda</title>
      <link href="2019/04/14/java--lambda--%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B8%8D%E4%BC%9Alamdbd/"/>
      <url>2019/04/14/java--lambda--%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B8%8D%E4%BC%9Alamdbd/</url>
      
        <content type="html"><![CDATA[<p>这个一篇对学习 Lambda 表达式进行解惑的文章，主要是总结了自己在学习 Lambda 表达式时候的一些理解不了的坑进行总结。长篇大论和详细语法，自行谷歌，这里只说一些理解起来不顺的概念。</p><h3 id="重要事情说三遍"><a href="#重要事情说三遍" class="headerlink" title="重要事情说三遍"></a>重要事情说三遍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先 Lambda 表达式 ()-&gt;&#123; &#125; 是一种方法实现，并且在直接调用的时候才会执行。</span><br><span class="line">首先 Lambda 表达式 ()-&gt;&#123; &#125; 是一种方法实现，并且在直接调用的时候才会执行。</span><br><span class="line">首先 Lambda 表达式 ()-&gt;&#123; &#125; 是一种方法实现，并且在直接调用的时候才会执行。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-什么是-gt"><a href="#1-什么是-gt" class="headerlink" title="1. 什么是 ()-&gt;{ }"></a>1. 什么是 ()-&gt;{ }</h3><p>理论造航母，程序就一行。<br>不提什么是函数式编程，用大白话，其实就是写了一个匿名实现，并且在需要使用这行匿名实现的时候调用了一下，才会直正去执行这个匿名实现方法。<br>Lambda 表达式，本质上是一种延迟加载执行。将预先写好的实现方法进行加载。到实际使用时，再执行。</p><h3 id="演示执行过程："><a href="#演示执行过程：" class="headerlink" title="演示执行过程："></a>演示执行过程：</h3><h4 id="1-声明一个-Lambda-表达式接口"><a href="#1-声明一个-Lambda-表达式接口" class="headerlink" title="1.声明一个 Lambda 表达式接口"></a>1.声明一个 Lambda 表达式接口</h4><h4 id="2-加载一下匿名实现方法"><a href="#2-加载一下匿名实现方法" class="headerlink" title="2.加载一下匿名实现方法"></a>2.加载一下匿名实现方法</h4><h4 id="3-执行一下"><a href="#3-执行一下" class="headerlink" title="3.执行一下"></a>3.执行一下</h4><ol><li>新建一个类，声明一个 Lambda 表达式接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunctional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//只允许存在一个 public abstract 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新建一个测试类，加载一下匿名函数实现<br>用来测试 Lambda 表达式的执行顺序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReference</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 一般匿名写法，这里仅是声明了这个匿名写法，但是并没有执行任务操作</span></span><br><span class="line">        testRef((test) -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;3. lambda 接口调用方法时传入的参数: %s&quot;</span>, test));</span><br><span class="line">            System.out.println(<span class="string">&quot;4.bbb&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> test;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testRef</span><span class="params">(MyFunctional myFunctional)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;1. 到这一步，lambda 表达式还没有执行&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. 传入一个参数&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 真正的去调用 lambda 表达式的实现方法</span></span><br><span class="line">        myFunctional.say(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>执行结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 到这一步，lambda 表达式还没有执行</span><br><span class="line"><span class="number">2.</span> 传入一个参数</span><br><span class="line"><span class="number">3.</span> lambda 接口调用方法时传入的参数: aaaa</span><br><span class="line"><span class="number">4.</span> bbb</span><br></pre></td></tr></table></figure></li></ol><p>用 IDEA 到 Functional 接口中点一下，可以看到，直接跳到 MethodReference 这个测试为的这一行 lambda 表达式中，也就是说，当有一个 lambda 表达式实现了 Functional 接口时，并通过以当前 Functional 为形参的方法传入时，可以被调用到。<br><img src="https://upload-images.jianshu.io/upload_images/6164010-9e0fc62a80bb14ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker run 和 start 的区别</title>
      <link href="2019/03/08/docker--run%E5%92%8Cstart%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2019/03/08/docker--run%E5%92%8Cstart%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="1-docker-run"><a href="#1-docker-run" class="headerlink" title="1.docker run"></a>1.docker run</h3><p>docker run 只在第一次运行时使用，将镜像放到容器中，以后再次启动这个容器时，只需要使用命令docker start 即可。<br>docker run相当于执行了两步操作：将镜像放入容器中（docker create）,然后将容器启动，使之变成运行时容器（docker start）。</p><h3 id="2-docker-start"><a href="#2-docker-start" class="headerlink" title="2.docker start"></a>2.docker start</h3><p>docker start的作用是，重新启动已存在的镜像。也就是说，如果使用这个命令，我们必须事先知道这个容器的ID，或者这个容器的名字，我们可以使用docker ps找到这个容器的信息。<br><a id="more"></a></p><h3 id="3-查看所有容器"><a href="#3-查看所有容器" class="headerlink" title="3.查看所有容器"></a>3.查看所有容器</h3><p>而要显示出所有容器，包括没有启动的，可以使用命令<br>docker ps -a</p><h3 id="4-重命名"><a href="#4-重命名" class="headerlink" title="4.重命名"></a>4.重命名</h3><p>docker rename old_name new_name</p><h3 id="5-启停"><a href="#5-启停" class="headerlink" title="5.启停"></a>5.启停</h3><p>docker [stop]|[start] name</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 基本操作</title>
      <link href="2019/03/04/docker--%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2019/03/04/docker--%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>最近在研究使用 docker 进行微服务改造，总结了一下常用的命令，docker 这东西，单个用简单，整体配合 k8s 和 spring cloud 坑还是不少，一个一个解决掉以后，他的易用性和高可用的特性确实很棒。</p><p>如果是业务日志需要输出到宿主机上，可以使用 -v 挂载。</p><h4 id="1-查看-docker-信息-info"><a href="#1-查看-docker-信息-info" class="headerlink" title="1.查看 docker 信息 info"></a>1.查看 docker 信息 info</h4><p>dorker info</p><a id="more"></a><p>####2.运行 docker 容器 run<br>docker run IMAGE    //启动容器<br>docker run ubuntu echo “en heng”<br>这种命令运行完就退出了。</p><h4 id="3-启动交互式容器"><a href="#3-启动交互式容器" class="headerlink" title="3.启动交互式容器"></a>3.启动交互式容器</h4><p>docker run -it IMAGE    //交互式，即进入容器<br>docker run -i -t ubuntu /bin/bash    //进入容器<br>ps -ef<br>exit        //退出</p><h4 id="4-查看容器-ps"><a href="#4-查看容器-ps" class="headerlink" title="4.查看容器 ps"></a>4.查看容器 ps</h4><p>docker ps [-a] [-l]<br>docker ps<br>docker ps -a        //-a 全部容器</p><p>CONTAINER ID        //docker为容器分配的id，即守护进程ID<br>NAME            //docker 自动为镜象创建的名称</p><h4 id="5-自定义容器名称-name"><a href="#5-自定义容器名称-name" class="headerlink" title="5.自定义容器名称 name"></a>5.自定义容器名称 name</h4><p>docker run –name=[自定义名称] -i -t ubuntu /bin/bash<br>docker run –name=container01 -i -t ubuntu /bin/bash</p><h4 id="6-重新启动停止的容器-start"><a href="#6-重新启动停止的容器-start" class="headerlink" title="6.重新启动停止的容器 start"></a>6.重新启动停止的容器 start</h4><p>docker start [-i] 容器ID<br>-i 交互模式<br>docker start  8cf94828c8e6<br>进入容器<br>docker exec -it 8cf94828c8e6 bash</p><h4 id="7-删除已经停止的容器"><a href="#7-删除已经停止的容器" class="headerlink" title="7.删除已经停止的容器"></a>7.删除已经停止的容器</h4><p>docker rm [容器id | 容器名]    //不能删除正在运行的容器</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态资源配置的问题</title>
      <link href="2019/01/10/springboot--%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2019/01/10/springboot--%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>spring boot 的项目是将静态资源打包到.jar 的文件包中， 项目中有碰到需要使用外部静态资源的情况，使用外部资源的一直老出问题，查了google 后发现是指定的方式不对。</p><h3 id="静态资源配置"><a href="#静态资源配置" class="headerlink" title="静态资源配置"></a>静态资源配置</h3><p>将 <code>resource/static</code> 进行映射，springboot 默认优先级:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;META-INF&#x2F;resources&#x2F;</span><br><span class="line">&#x2F;resources&#x2F;</span><br><span class="line">&#x2F;static&#x2F;</span><br><span class="line">&#x2F;public&#x2F;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>spring 属性合配 resources 配置<br>1.本项目包含路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">mvc:</span><br><span class="line">   static-path-pattern: &#x2F;late</span><br><span class="line">resources:</span><br><span class="line">  static-locations: classpath:&#x2F;templates&#x2F;dist&#x2F;</span><br></pre></td></tr></table></figure><br>这两天遇到的坑</p><p>2.指定项目外的磁盘路径<br>如果要映射本地磁盘路径，可以使用，注意必须得有 <code>file:</code>, 注意必须得有<code>file:</code>,注意必须得有<code>file:</code>  否则 404, 重要事情说三遍。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">mvc:</span><br><span class="line">   static-path-pattern: &#x2F;late</span><br><span class="line">resources:</span><br><span class="line">   static-locations: file:&#x2F;templates&#x2F;dist&#x2F;</span><br></pre></td></tr></table></figure></p><p>浏览器的访问路径通过这个就可以改。<br>static-path-pattern</p><p>3.还有一种方式是打包到 webjars 中，不过一样是费劲的事，不如直接指定外部磁盘路径，使用 nginx 做转换成功访问静态文件，但是配置更麻烦。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> yml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 注解实现日志切面</title>
      <link href="2018/11/27/springboot--%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%88%87%E9%9D%A2/"/>
      <url>2018/11/27/springboot--%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%88%87%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>项目中很多时候需要去打印方法入参和出参的日志，有助于排查错误。<br>注解需要操作简单。<br>常用的方式之一就是使用切面来切日志。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>定义自定义注解</li><li>编写自定义注解的切面方法</li><li>使用注解在需要输出日志的方法上</li></ol><a id="more"></a><h4 id="1-自定义注解"><a href="#1-自定义注解" class="headerlink" title="1.自定义注解"></a>1.自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * controller 注解切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2018/8/7 15:26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><span class="comment">//目标是方法</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//注解会在class中存在，运行时可通过反射获取</span></span><br><span class="line"><span class="meta">@Documented</span><span class="comment">//文档生成时，该注解将被包含在javadoc中，可去掉</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ControllerLog &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作描述 业务名称business</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作模块</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">OperateModule <span class="title">module</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作类型 create modify delete</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">OperateType <span class="title">opType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键入参参数名称，入参中的哪个参数为主键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">primaryKeyName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键在参数中的顺序，从0开始，默认0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">primaryKeySort</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">business</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-模块枚举"><a href="#2-模块枚举" class="headerlink" title="2.模块枚举"></a>2.模块枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 操作类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/7/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OperateModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOGIN(<span class="string">&quot;登陆&quot;</span>),</span><br><span class="line">    LOGOUT(<span class="string">&quot;退出登陆&quot;</span>),</span><br><span class="line">    DEMAND(<span class="string">&quot;需求&quot;</span>),</span><br><span class="line">    ITERATION(<span class="string">&quot;迭代&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    OperateModule(String text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-操作类型"><a href="#3-操作类型" class="headerlink" title="3.操作类型"></a>3.操作类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.group.core.web.log;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 操作类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/7/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OperateModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOGIN(<span class="string">&quot;登陆&quot;</span>),</span><br><span class="line">    LOGOUT(<span class="string">&quot;退出登陆&quot;</span>),</span><br><span class="line">    DEMAND(<span class="string">&quot;需求&quot;</span>),</span><br><span class="line">    ITERATION(<span class="string">&quot;迭代&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    OperateModule(String text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-日志切面"><a href="#4-日志切面" class="headerlink" title="4.日志切面"></a>4.日志切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.group.core.web.log;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.group.common.constants.Constants;</span><br><span class="line"><span class="keyword">import</span> com.group.core.model.SysLog;</span><br><span class="line"><span class="keyword">import</span> com.group.core.service.SysLogService;</span><br><span class="line"><span class="keyword">import</span> com.group.core.web.vo.ResultVo;</span><br><span class="line"><span class="keyword">import</span> com.group.core.web.log.annotation.ControllerLog;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.CodeSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志切面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2018/8/7 15:50.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODULE = <span class="string">&quot;module&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysLogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SecurityManager securityManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切入点.</span></span><br><span class="line"><span class="comment">     * (&quot;execution(public * com.group.*.web..*.*(..))&quot;)</span></span><br><span class="line"><span class="comment">     * 解释下：</span></span><br><span class="line"><span class="comment">     * 第一个 * 代表任意修饰符及任意返回值.</span></span><br><span class="line"><span class="comment">     * 第二个 * 任意包名</span></span><br><span class="line"><span class="comment">     * 第三个 * 代表任意方法.</span></span><br><span class="line"><span class="comment">     * 第四个 * 定义在web包或者子包</span></span><br><span class="line"><span class="comment">     * 第五个 * 任意方法</span></span><br><span class="line"><span class="comment">     * .. 匹配任意数量的参数.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.group..*.controller..*.*(..))  &amp;&amp; @annotation(com.group.core.web.log.annotation.ControllerLog)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * round</span></span><br><span class="line"><span class="comment">     * 环境切面方法，切日方法调用的出入时的操作</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 16:16</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">round</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;环绕日志切面开始&quot;</span>);</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        String user = (String) subject.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(user)) &#123;</span><br><span class="line">            JSONObject jsonObject = JSONObject.parseObject(user.substring(<span class="number">4</span>));</span><br><span class="line">            user = jsonObject.getString(<span class="string">&quot;sub&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; controllerAnnotationValues = getControllerAnnotationValue(joinPoint);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(user)) &#123;</span><br><span class="line">            controllerAnnotationValues.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;用户 &#123;&#125;-- 操作:&#123;&#125; -- 模块: &#123;&#125;&quot;</span>, user, controllerAnnotationValues.get(<span class="string">&quot;operateName&quot;</span>), controllerAnnotationValues.get(<span class="string">&quot;moduleName&quot;</span>));</span><br><span class="line"><span class="comment">//            //需求目志特殊处理</span></span><br><span class="line"><span class="comment">//            if (controllerAnnotationValues.get(MODULE).equals(OperateModule.DEMAND.toString())) &#123;</span></span><br><span class="line"><span class="comment">////                demandLogger.insertLog(controllerAnnotationValues, getParameter(joinPoint));</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line">            insertLog(controllerAnnotationValues);</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//切面返回值</span></span><br><span class="line">        Object returnValue = joinPoint.proceed();</span><br><span class="line">        <span class="comment">//用户登陆，登陆后 subject 才会包含用户信息。</span></span><br><span class="line">        <span class="keyword">if</span> (returnValue <span class="keyword">instanceof</span> ResultVo &amp;&amp; user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Subject logSubject = SecurityUtils.getSubject();</span><br><span class="line">            String logUser = (String) logSubject.getPrincipal();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(logUser)) &#123;</span><br><span class="line">                JSONObject jsonObject = JSONObject.parseObject(logUser.substring(<span class="number">4</span>));</span><br><span class="line">                logUser = jsonObject.getString(<span class="string">&quot;sub&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            controllerAnnotationValues.put(<span class="string">&quot;user&quot;</span>, logUser);</span><br><span class="line">            insertLog(controllerAnnotationValues);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入通用日志</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/10 17:33</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> controllerParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertLog</span><span class="params">(Map&lt;String, Object&gt; controllerParam)</span> </span>&#123;</span><br><span class="line">        SysLog sysLog = <span class="keyword">new</span> SysLog();</span><br><span class="line">        String moduleName = (String) controllerParam.get(<span class="string">&quot;moduleName&quot;</span>);</span><br><span class="line">        String operateName = (String) controllerParam.get(<span class="string">&quot;operateName&quot;</span>);</span><br><span class="line">        controllerParam.get(<span class="string">&quot;primaryKeyName&quot;</span>);</span><br><span class="line">        controllerParam.get(<span class="string">&quot;primaryKeySort&quot;</span>);</span><br><span class="line">        String user = (String) controllerParam.get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        sysLog.setOperationUser(user);</span><br><span class="line">        sysLog.setModifyUserId(user);</span><br><span class="line">        sysLog.setCreateUserId(user);</span><br><span class="line">        sysLog.setOperation(operateName);</span><br><span class="line">        sysLog.setModel(moduleName);</span><br><span class="line">        sysLog.setFlag(Constants.DELETE_TYPE_FALSE);</span><br><span class="line">        logService.insert(sysLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取日志注解的方法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 16:41</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String   ,   java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getControllerAnnotationValue</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//取切点相关参数</span></span><br><span class="line">        String targetName = joinPoint.getTarget().getClass().getName();</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        Object[] arguments = joinPoint.getArgs();</span><br><span class="line">        LOGGER.info(<span class="string">&quot;targetName: &#123;&#125; - methodName: &#123;&#125; - arguments: &#123;&#125;&quot;</span>, targetName, methodName, arguments.toString());</span><br><span class="line">        <span class="comment">//实例化该</span></span><br><span class="line">        Class targetClass = Class.forName(targetName);</span><br><span class="line">        <span class="comment">//获取该类的所有方法</span></span><br><span class="line">        Method[] methods = targetClass.getMethods();</span><br><span class="line">        Map&lt;String, Object&gt; map = Maps.newHashMapWithExpectedSize(<span class="number">7</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(methodName)) &#123;</span><br><span class="line">                Class[] classes = method.getParameterTypes();</span><br><span class="line">                <span class="keyword">if</span> (classes.length == arguments.length) &#123;</span><br><span class="line">                    String description = method.getAnnotation(ControllerLog.class).description();</span><br><span class="line">                    String <span class="keyword">module</span> = method.getAnnotation(ControllerLog.class).<span class="keyword">module</span>().name();</span><br><span class="line">                    String operateType = method.getAnnotation(ControllerLog.class).opType().name();</span><br><span class="line">                    String primaryKeyName = method.getAnnotation(ControllerLog.class).primaryKeyName();</span><br><span class="line">                    <span class="keyword">int</span> primaryKeySort = method.getAnnotation(ControllerLog.class).primaryKeySort();</span><br><span class="line">                    String operateName = getOpName(operateType);</span><br><span class="line">                    String moduleName = getModelName(<span class="keyword">module</span>);</span><br><span class="line">                    map.put(<span class="string">&quot;module&quot;</span>, <span class="keyword">module</span>);</span><br><span class="line">                    map.put(<span class="string">&quot;moduleName&quot;</span>, moduleName);</span><br><span class="line">                    map.put(<span class="string">&quot;operateType&quot;</span>, operateType);</span><br><span class="line">                    map.put(<span class="string">&quot;operateName&quot;</span>, operateName);</span><br><span class="line">                    map.put(<span class="string">&quot;business&quot;</span>, description);</span><br><span class="line">                    map.put(<span class="string">&quot;primaryKeyName&quot;</span>, primaryKeyName);</span><br><span class="line">                    map.put(<span class="string">&quot;primaryKeySort&quot;</span>, primaryKeySort);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取模块名</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 21:11</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> module</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getModelName</span><span class="params">(String <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">        String operate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (OperateModule model : OperateModule.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (model.name().equals(<span class="keyword">module</span>)) &#123;</span><br><span class="line">                operate = model.getText();</span><br><span class="line">                <span class="keyword">return</span> operate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> operate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类型名</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 21:06</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operateType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getOpName</span><span class="params">(String operateType)</span> </span>&#123;</span><br><span class="line">        String operate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (OperateType opType : OperateType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (opType.name().equals(operateType)) &#123;</span><br><span class="line">                operate = opType.getMsg();</span><br><span class="line">                <span class="keyword">return</span> operate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> operate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getParameter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//入参  value</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="comment">//入参名称</span></span><br><span class="line">        String[] paramNames = ((CodeSignature) joinPoint.getSignature()).getParameterNames();</span><br><span class="line">        Map&lt;String, Object&gt; params = Maps.newHashMapWithExpectedSize(<span class="number">7</span>);</span><br><span class="line">        <span class="comment">//获取所有参数对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != args[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> BindingResult) &#123;</span><br><span class="line">                    params.put(paramNames[i], <span class="string">&quot;bindingResult&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    params.put(paramNames[i], args[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                params.put(paramNames[i], <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-使用注解"><a href="#5-使用注解" class="headerlink" title="5.使用注解"></a>5.使用注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 退出</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2018/8/2 上午9:05</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/logout&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@ControllerLog(module = OperateModule.LOGOUT, opType = OperateType.logout)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResultVo <span class="title">logOut</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">       ResultVo resultVo = <span class="keyword">new</span> ResultVo();</span><br><span class="line">       Subject subject = SecurityUtils.getSubject();</span><br><span class="line">       resultVo.setCode(SUCCESS_CODE);</span><br><span class="line">       resultVo.setMsg(<span class="string">&quot;退出登陆&quot;</span>);</span><br><span class="line">       logger.info(<span class="string">&quot;退出登陆&quot;</span>);</span><br><span class="line">       subject.logout();</span><br><span class="line">       <span class="keyword">return</span> resultVo;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 日志 </tag>
            
            <tag> srping boot </tag>
            
            <tag> aop </tag>
            
            <tag> 切面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda--Functional 函数式接口</title>
      <link href="2018/10/10/java-lambda-Functional%E6%8E%A5%E5%8F%A3/"/>
      <url>2018/10/10/java-lambda-Functional%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Functional 为 lambda 方法提供一个接口</p></blockquote><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>Functional 的定义其实很简单：任何接口，如果只包含 唯一一个抽象方法，那么它就是一个 Functional Interface ,<br>函数式接口？这注解名字好。<br>为了让编译器帮助我们确保一个接口满足 Functional Interface 的要求（也就是说有且仅有一个抽象方法），Java8提供了<code>@FunctionalInterface</code>注解。</p><p>先学习函数式接，才能理解学习 <code>Lambda</code> 表达式。</p><h2 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h2><p>白话：用来为函数式编程提供接口。<br>就是一个有<code>且仅有</code>一个抽象方法，但是可以有<code>多个非抽象方法</code>的接口。<br>函数式接口可以被隐式转换为 lambda 表达式。</p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>写一个最简单的例子做为入门参考，看不懂不要紧，这个只是一个例子。</p><h3 id="声明一个无参的接口"><a href="#声明一个无参的接口" class="headerlink" title="声明一个无参的接口"></a>声明一个无参的接口</h3><p>声明一个无参函数式接口，为 lambda 提供一个接口。<br>在接口上添加<code>@Functional</code>那么这个接口就是一个<code>函数式接口</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> interfaceMyFunctional &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>自己实现一个<code>Functional</code>接口，只需要 <code>()-&gt; System.out.println(&quot;test&quot;)</code> 进行实现。<code>()-&gt;System.out.println(&quot;test&quot;)</code> 就是一个<code>lambda</code>实现。<br>这里主要关注<code>Functional</code>接口，不需要关注<code>lambda</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实现 lambda</span></span><br><span class="line">    MyFunctional myFunctional = () -&gt; System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">//调用 Functional 接口来执行 lambda 实现</span></span><br><span class="line">    System.out.println(myFunctional.run());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h2><p>首先它是一个接口。然后这个接口里面只能有一个抽象方法。<br>这种类型的接口也称为SAM接口，即Single Abstract Method interfaces。</p><p>规则</p><ol><li>函数式接口里允许定义默认方法，因为默认方法不是抽象方法，其有一个默认实现，所以是符合函数式接口的定义的</li><li>函数式接口里允许定义静态方法，因为静态方法不能是抽象方法，是一个已经实现了的方法，所以是符合函数式接口的定义的</li><li>函数式接口里允许定义Java.lang.Object里的public方法，这些方法对于函数式接口来说，不被当成是抽象方法（虽然它们是抽象方法）；因为任何一个函数式接口的实现，默认都继承了Object类，包含了来自<code>java.lang.Object</code>里对这些抽象方法的实现；</li><li>函数式接口里允许子接口继承多个父接口，但每个父接口中都只能存在一个抽象方，且必须的相同的抽象方法。</li></ol><hr><h3 id="jdk-中的-lambda-实现示例"><a href="#jdk-中的-lambda-实现示例" class="headerlink" title="jdk 中的 lambda 实现示例"></a>jdk 中的 lambda 实现示例</h3><p>使用 Arrays 对数据进行排序。<br>Arrays 的 sort 方法，可以使用 lambda 的方法，这个方法是怎么实现的呢。<br>老套路:</p><ol><li>定义 Functional 接口</li><li>Functional 做为形参</li><li>有一个地方实现了这个Functional接口</li><li>调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 lambda expression 排序 players</span></span><br><span class="line">Comparator&lt;String&gt; sortByName = (s1, s2) -&gt; (s1.compareTo(s2));</span><br><span class="line">Arrays.sort(players, sortByName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价形式</span></span><br><span class="line">Arrays.sort(players, (s1, s2)-&gt; (s1.compareTo(s2)));</span><br></pre></td></tr></table></figure><p>看看 <code>sort</code> 的具体实现，<code>sort</code> 是对 <code>Comparator</code> 接口的具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sort(a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">    legacyMergeSort(a, c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Comparator</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认方法-和-静态方法"><a href="#默认方法-和-静态方法" class="headerlink" title="默认方法 和 静态方法"></a>默认方法 和 静态方法</h3><p>默认方法是可以直接被 类名.方法名使用的。<br>lambda 的默认实现方法，可以直接写在接口当中，然后具体使用的时候引用即可。<br>封装的时候也可以直接引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunctional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//只允许存在一个 public abstract 方法</span></span><br><span class="line">     <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="comment">// 这个方法就是对上面  boolean test(T t);  的一个默认实现</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">getBoolean</span> <span class="params">(T b)</span> </span>&#123;</span><br><span class="line">        System.out.println(b.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于使用了范形，入参就变得灵活</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">testPrintString</span> <span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(message);        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用范形方法</span></span><br><span class="line">     <span class="keyword">default</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">testPrint</span> <span class="params">(T message)</span> </span>&#123;</span><br><span class="line">        System.out.println(message);        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//允许存在默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;    <span class="comment">//允许存在静态方法</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;使用静态方法&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)? Objects::isNull: object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//直接使用默认实现</span></span><br><span class="line">  <span class="keyword">static</span> &lt;T &gt; <span class="function"><span class="keyword">boolean</span> <span class="title">getBoolean</span> <span class="params">(T b)</span></span></span><br><span class="line"><span class="function">  MyFunctional myFunctional </span>= MyFunctional::getBoolean;</span><br><span class="line">  myFunctional.test(<span class="keyword">new</span> Date());</span><br><span class="line">  myFunctional.testPrintString(<span class="string">&quot;test....&quot;</span>);</span><br><span class="line">  <span class="comment">//使用具体类型，默认方法</span></span><br><span class="line">  myFunctional.testPrint(<span class="keyword">new</span> Date());</span><br><span class="line">  <span class="comment">//使用范形默认方法</span></span><br><span class="line">  <span class="comment">// 直接传入默认实现即可</span></span><br><span class="line">  testDefault(MyFunctional::getBoolean);</span><br><span class="line">  <span class="comment">//使用静态方法</span></span><br><span class="line">  MyFunctional.isEqual(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装 lambda 表达式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">testDefault</span><span class="params">(MyFunctional myFunctional)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> myFunctional.testPrintString(<span class="string">&quot;just test lambda&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用freemarker页面静态化</title>
      <link href="2018/10/06/java-%E4%BD%BF%E7%94%A8freemarker%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96/"/>
      <url>2018/10/06/java-%E4%BD%BF%E7%94%A8freemarker%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>公司使用 <code>vue + ngixn</code> 前后端分离架构，重构一套新的静态化的门户网站。后台管理系统为动态页面。<br>使用 freemarker 进行页面静态化的处理，生成静态化页在。<br>前后分离的页面，静态图片需要使用 nginx 进行路径转换。UEditor 上传到本地的图片，没有使用文件管理系统，直接存放到服务器本地，需要 nginx 进行路径转换。</p><p>使用原理:<br>1.freemarker 将数据填充入 ftl 模板中，再由 freemarker 生成静态页面<br>2.vue 获取静态页面进行数据展示</p><a id="more"></a><p>1.工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title: 工具类</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/20 上午10:37.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateHtmlUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CreateHtmlUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;htmlPath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String htmlPath;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ftlPath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ftlPath;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过freemarker生成静态HTML页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">createHtml</span><span class="params">(String templateName,String targetFileName,Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;生成路径: &#123;&#125;, 模板路径：&#123;&#125;&quot;</span>, htmlPath, ftlPath);</span><br><span class="line">        <span class="comment">//创建fm的配置</span></span><br><span class="line">        Configuration config = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">//指定默认编码格式</span></span><br><span class="line">        config.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        Template template = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//设置模版文件的路径</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            config.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(ftlPath));</span><br><span class="line">            <span class="comment">//获得模版包</span></span><br><span class="line">            template = config.getTemplate(templateName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;设置模板包异常：&#123;&#125;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义输出流，注意必须指定编码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fileInputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(htmlPath+<span class="string">&quot;/&quot;</span>+targetFileName));</span><br><span class="line">             OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(fileInputStream, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">             Writer writer = <span class="keyword">new</span> BufferedWriter(outputStreamWriter)) &#123;</span><br><span class="line">            template.process(map, writer);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;写入html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;生成异常: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.添加填充数据据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateHtml</span> <span class="params">(Integer CategoryNo, <span class="keyword">int</span> count, Map&lt;String, Object&gt; pageMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String htmlFileName = getHtmlFileName(CategoryNo, count + <span class="number">1</span>);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;html 文件名: &#123;&#125;&quot;</span> , htmlFileName);</span><br><span class="line">        createHtmlUtil.createHtml(NEWS_TEMPLATE, htmlFileName, pageMap);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.静态页面<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;total&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;total&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">newsPageDatas</span>??&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#list</span> <span class="attr">newsPageDatas</span> <span class="attr">as</span> <span class="attr">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;new-item-box clearfix clear&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image fl&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;#if key.titleUrl??&gt;$&#123;key.titleUrl&#125;&lt;#else &gt;../images/news-1.png&lt;/#if&gt;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-content-box&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-content&quot;</span>&gt;</span></span><br><span class="line">                    $&#123;key.title!&#x27;&#x27;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time-arrow clearfix&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time-day&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">key.publishDate</span>??&gt;</span></span><br><span class="line">                                $&#123;key.publishDate?string(&quot;dd&quot;)!&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time-year&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">key.publishDate</span>??&gt;</span></span><br><span class="line">                                $&#123;key.publishDate?string(&quot;yyyy.MM&quot;)!&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../page/news_details_$&#123;key.id&#125;.html&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/jiantou.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> freemarker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 页面静态化 </tag>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是上下文context</title>
      <link href="2018/09/17/springboot-%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87context/"/>
      <url>2018/09/17/springboot-%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87context/</url>
      
        <content type="html"><![CDATA[<p>上下文(背景/语境) context<br>是当前运行程序的环境。<br>网上各种不可说，模糊不清，但是一个概念的提出肯定有最初的含义。</p><h3 id="总结上下文可以理解成："><a href="#总结上下文可以理解成：" class="headerlink" title="总结上下文可以理解成："></a>总结上下文可以理解成：</h3><ol><li>上下文指由代码已运行的程序环境，不是指代码。</li><li>一组状态，这个好理解，取 spring cloud 的官方文档的例子：<blockquote><p>一个Spring Cloud应用程序通过创建一个”引导”上下文来进行操作，这个上下文是主应用程序的父上下文。<br>引导上下文使用与主应用程序上下文不同的外部配置约定，因此使用bootstrap.yml application.yml（或.properties）代替引导和主上下文的外部配置。<br>这里所谓的 引导上下文 就是一组状态，实际就是一个保存配置的大对象，换个角度理就是环境。</p></blockquote></li><li>环境背景<br>每一段程序都有很多外部变量。只有像Add这种简单的函数才是没有外部变量的。一旦你的一段程序有了外部变量，这段程序就不完整，不能独立运行。你为了使他们运行，就要给所有的外部变量一个一个写一些值进去。这些值的集合就叫上下文。</li></ol><p>查了一下 context<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n.        语境; 上下文; 背景; 环境;</span><br></pre></td></tr></table></figure><br>谁用的翻译上下文，明明用背景、环境更贴切，</p><h3 id="摘自知乎"><a href="#摘自知乎" class="headerlink" title="摘自知乎"></a>摘自知乎</h3><blockquote><p>和其他传入对象参数没什么区别。<br>但是通常使用Context来描述有几个特点：<br>被传入Context的部分（组件），内部需要频繁的获取Context的data和调用function。<br>对context有很强的依赖，实现建立在context的基础上。<br>Context会被较为多数部分（组件）所需要，在软件实现部分Context会在某个scene下出现单一实例化，然后被多个部分（组件）实例对象调用。<br>出现局部全局化。<br>Context会持有很多状态data。<br>Coder习惯，命名选择困难下的胶合产物。</p></blockquote><p><a href="https://www.zhihu.com/question/26387327">https://www.zhihu.com/question/26387327</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 使用 maven 打 jar 包配置</title>
      <link href="2018/09/02/springboot--%E4%BD%BF%E7%94%A8%20maven%E6%89%93jar%E5%8C%85%E9%85%8D%E7%BD%AE/"/>
      <url>2018/09/02/springboot--%E4%BD%BF%E7%94%A8%20maven%E6%89%93jar%E5%8C%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>使用 ide 进行开发时，直接在ide上启动即可，如果要放到服务器上进行使用，就必须打成jar包，这里使用 maven 的打包插件进行打包。注意 <code>&lt;mainClass&gt;com.devops.WebApplication&lt;/mainClass&gt;</code> 这行要改成你的启动类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>devops-web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.devops.WebApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 实现 map的分词原理</title>
      <link href="2018/08/19/bigdata--map%E4%BB%BB%E5%8A%A1python%E5%AE%9E%E7%8E%B0/"/>
      <url>2018/08/19/bigdata--map%E4%BB%BB%E5%8A%A1python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>Map 的作用，即数据的映射，用于把一组键值对映射成另一组新的键值对。<br>白话就是对数据按照一定的格式进行归整。<br>举个例子，有一遍文章，需要对文章中出现过的相同的单词进行归类，期望结果如下：<br>将map的输出作为reduce的输入的过程就是shuffle了，这个是mapreduce优化的重点地方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;1&quot;, &quot;are&quot; : 1&#125;</span><br><span class="line">&#123;&quot;1&quot;, &quot;are&quot; : 1&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encodeing=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">        ss = line.strip().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> ss:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">&#x27;\t&#x27;</span>.join([word.strip(), <span class="string">&#x27;1&#x27;</span>])</span><br></pre></td></tr></table></figure><p>测试数据： <code>THE_MAN_OF_PROPERTY.txt</code>，这里存一篇网上随机找的一篇英文长篇文章。</p><p>执行命令，并打印结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#96;THE_MAN_OF_PROPERTY.txt&#96;  | &#96;python map.py&#96; | &#96;sort -k 1  &gt; 1.txt&#96;</span><br></pre></td></tr></table></figure></p><p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">to    1</span><br><span class="line">to    1</span><br><span class="line">to    1</span><br><span class="line">today    1</span><br><span class="line">tool    1</span><br><span class="line">topic    1</span><br><span class="line">two    1</span><br><span class="line">two    1</span><br><span class="line">···</span><br><span class="line">variants    1</span><br><span class="line">variants    1</span><br><span class="line">variants    1</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
          <category> mapreduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> map 任务 </tag>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 添加默认根路径跳转</title>
      <link href="2018/08/15/springboot--%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E6%A0%B9%E8%B7%AF%E5%BE%84/"/>
      <url>2018/08/15/springboot--%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E6%A0%B9%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>同一组数据分组<br>需求：一个 list 里可能会有出现一个用户多条数据的情况。要把多条用户数据合并成一条。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;liu big big&quot;</span>, <span class="string">&quot;123456789&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;liu big big&quot;</span>, <span class="string">&quot;987654321&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;su xiao xiao&quot;</span>, <span class="string">&quot;55555555&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        Map&lt;String, Set&lt;User&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            Set&lt;User&gt; userSet = map.get(user.getName());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == userSet) &#123;</span><br><span class="line">                userSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                userSet.add(user);</span><br><span class="line">                map.put(user.getName(), userSet);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                userSet.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keySet= map.keySet();</span><br><span class="line">        Iterator&lt;String&gt; it = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String key = it.next();</span><br><span class="line">            Set&lt;User&gt; user = map.get(key);</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Reactor模型</title>
      <link href="2018/08/05/architecture--Reactor-%E6%A8%A1%E5%9E%8B/"/>
      <url>2018/08/05/architecture--Reactor-%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>看了一些 Reactor 相关的文章和资料，列举的一些 Reactor 模型的优点，包括极客时间的文章也有讲过在架构中的Reactor中的优点和缺点。<br>但是如果不使用 Reactor 模型的一般方式是什么样子的?会有什么问题？</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
          <category> 概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 概念 </tag>
            
            <tag> Reactor模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot打war包</title>
      <link href="2018/08/04/java-springboot%E6%89%93war%E5%8C%85/"/>
      <url>2018/08/04/java-springboot%E6%89%93war%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>spring boot 在内置了 tomcat，但是会使用到外置 tomcat 的情况。在使用外置 tomcat 时需要让 spring boot 的打包方式打成 war 包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>fund<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">packagingExcludes</span>&gt;</span>**/env/**<span class="tag">&lt;/<span class="name">packagingExcludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/env/$&#123;env&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>WEB-INF/classes<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--打包参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>qa<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>qa<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
            <tag> spring boot </tag>
            
            <tag> jar </tag>
            
            <tag> 打包 </tag>
            
            <tag> war </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 中使用 hibernate validate 校验</title>
      <link href="2018/08/03/java--hibernate-validate%E4%BD%BF%E7%94%A8/"/>
      <url>2018/08/03/java--hibernate-validate%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>spring boot 中使用 Hibernate validate 进行入参字段校验，一般用于web 接口入参校验，用起来非常方便。</p><h3 id="spring-boot-的配置"><a href="#spring-boot-的配置" class="headerlink" title="spring boot 的配置"></a>spring boot 的配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.HibernateValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Validation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ValidatorFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method:  开启快速返回</span></span><br><span class="line"><span class="comment">     * Description: </span></span><br><span class="line"><span class="comment">     *          如果参数校验有异常，直接抛异常，不会进入到 controller，使用全局异常拦截进行拦截</span></span><br><span class="line"><span class="comment">     * Author: liu kai</span></span><br><span class="line"><span class="comment">     * Date: 2018/7/12 17:33</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodValidationPostProcessor <span class="title">methodValidationPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodValidationPostProcessor postProcessor = <span class="keyword">new</span> MethodValidationPostProcessor();</span><br><span class="line">        <span class="comment">/**设置validator模式为快速失败返回*/</span></span><br><span class="line">        postProcessor.setValidator(validator());</span><br><span class="line">        <span class="keyword">return</span> postProcessor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">validator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )</span><br><span class="line">                .configure()</span><br><span class="line">                .addProperty( <span class="string">&quot;hibernate.validator.fail_fast&quot;</span>, <span class="string">&quot;true&quot;</span> )</span><br><span class="line">                .buildValidatorFactory();</span><br><span class="line">        Validator validator = validatorFactory.getValidator();</span><br><span class="line">        <span class="keyword">return</span> validator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller-中使用"><a href="#controller-中使用" class="headerlink" title="controller 中使用"></a>controller 中使用</h3><p>使用步骤:</p><ol><li>在 controller 类上 @Validated</li><li>BindingResult result  这个不能省，必须要有，测试不加不行。</li><li>@Valid    加上这个注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsInfoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Method:  添加新闻</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Author: pan ying</span></span><br><span class="line"><span class="comment"> * Date: 2018/6/13 17:43</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newsRequestVo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.reapal.openapi.web.vo.ResultVo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/save&quot; ,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultVo <span class="title">saveNewsInfo</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> NewsRequestVo newsRequestVo, BindingResult result)</span></span>&#123;</span><br><span class="line">   ResultVo resultVo = <span class="keyword">new</span> ResultVo();</span><br><span class="line">   newsInfoBusiness.insert(newsRequestVo);</span><br><span class="line">   <span class="keyword">return</span>  resultVo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类中使用"><a href="#实体类中使用" class="headerlink" title="实体类中使用"></a>实体类中使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3148176768559230877L</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/** id */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/** 新闻编号 */</span></span><br><span class="line">    <span class="keyword">private</span> String newsNo;</span><br><span class="line">    <span class="comment">/** 标题 */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Length(max=30, message=&quot;长度超过限制&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea 自定义注释</title>
      <link href="2018/07/29/idea--%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/"/>
      <url>2018/07/29/idea--%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>日常开发当中，开发规范要求每个开发人员做到要必要的代码上加上注释。借助IDE可以快速的生成这些注释。</p><h3 id="1-文件头部注释"><a href="#1-文件头部注释" class="headerlink" title="1.文件头部注释"></a>1.文件头部注释</h3><p>次创建新文件时会自动添加到文件头<br><code>Perferences---Editor---&gt;File and Code Templates---&gt;Includes</code><br>即是，不过这里设值类似Eclipse用 ${ }</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $&#123;USER&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $&#123;DATE&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>看效果</p><p><img src="/2018/07/29/idea--%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/File.png" alt=""></p><h3 id="2-方法注释"><a href="#2-方法注释" class="headerlink" title="2.方法注释"></a>2.方法注释</h3><ol><li>创建 Template Group</li><li>创建 Live Template</li></ol><h4 id="创建-Template-Group"><a href="#创建-Template-Group" class="headerlink" title="创建 Template Group"></a>创建 Template Group</h4><p>idea 做的相当不错的，可以根据自定义注释名称来生成自己设定的注释<br><code>Perferences---Editor---&gt;Live Templates</code><br>点 + 创建 <code>Template Group</code> 输入自己的 Template</p><p><img src="/2018/07/29/idea--%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/method.png" alt=""></p><h4 id="创建-Live-Template"><a href="#创建-Live-Template" class="headerlink" title="创建 Live Template"></a>创建 Live Template</h4><p>—&gt;再点 + 创建 Live Temp 剩下的不用看也明白了，这里做一个模板：<br><code>Abbreviation</code> 是自定义快捷语，这里方法我用的是<code>meth</code>，这个很有用。模板是在添加方法时候自动创建的，但是有时候需要手动添加就可以打 <code>meth</code> 创建。<br><code>define</code> 选择注释生效的范围，这里选 <code>java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* method:</span></span><br><span class="line"><span class="comment">* description:</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> $user$</span></span><br><span class="line"><span class="comment">* <span class="doctag">@data</span> $data$ $time$</span></span><br><span class="line"><span class="comment">* $parameter$</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> $return$</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Edit variables 中编辑对应的值多行需要在方法内部就可以实现，方法外部参数就是出不来。好 low</p><p><img src="/2018/07/29/idea--%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/method配置.png" alt=""></p><h3 id="3-添加参数"><a href="#3-添加参数" class="headerlink" title="3.添加参数"></a>3.添加参数</h3><p><code>$parameter$</code>  的变量设置这面这行 groovy 脚本写在 Default Value 里：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(<span class="string">&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#x27;@param &#x27; + params[i] + ((i &lt; params.size() - 1) ? &#x27;\\n\\b&#x27; : &#x27;&#x27;)&#125;; return result&quot;</span>, methodParameters())</span><br></pre></td></tr></table></figure><p><img src="/2018/07/29/idea--%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/EditVar.png" alt=""></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2018/07/29/idea--%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/效果.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
            <tag> 注释 </tag>
            
            <tag> 自定义注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea 设置编译版本无效问题解决</title>
      <link href="2018/07/28/idea--%E8%A7%A3%E5%86%B3idea%E8%AE%BE%E7%BD%AE%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3/"/>
      <url>2018/07/28/idea--%E8%A7%A3%E5%86%B3idea%E8%AE%BE%E7%BD%AE%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>idea 编译总是1.5处理<br>使用 idea 时会碰到在 Project Structure 中设置了编译版本为 1.8 时，重新编译过后查看，还是1.5的问题，怎么都改不过来。<br>这是因为 maven 的 compiler 工具的问题，两种解决方式。</p><p>1.指定 comipler 的编译版本<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.同理，只是在放在 properties 标签当中<br>更简单的解决 idea 编译为 1.5 的问题<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>两种方式都可以解决 idea 设置无效的问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
            <tag> 问题 </tag>
            
            <tag> 解决 </tag>
            
            <tag> 编译 </tag>
            
            <tag> 设置 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Cannot determine embedded database driver class for database type NONE</title>
      <link href="2018/07/26/java--%E8%A7%A3%E5%86%B3database-driver-class-for-database-type-NONE/"/>
      <url>2018/07/26/java--%E8%A7%A3%E5%86%B3database-driver-class-for-database-type-NONE/</url>
      
        <content type="html"><![CDATA[<p>刚搭的新项目一启动就报错，一直就知种起不来。各种搜索以后总结两种解决方式。<br>先看错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Cannot determine embedded database driver class for database type NONE</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">If you want an embedded database please put a supported one on the classpath. If you have database settings to be loaded from a particular profile you may need to active it (no profiles are currently active).</span><br></pre></td></tr></table></figure></p><h4 id="处理方式一："><a href="#处理方式一：" class="headerlink" title="处理方式一："></a>处理方式一：</h4><p>排除两个默认配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(exclude&#x3D;&#123;DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure><br>结论：没用</p><h4 id="处理方式二：-可行"><a href="#处理方式二：-可行" class="headerlink" title="处理方式二： 可行"></a>处理方式二： 可行</h4><p>网上说各种多于的依赖导至的问题，经过排查，确实是由 pagehelper 这个依赖引起的。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;org.hibernate&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;4.2.0.Final&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.1.1&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--pagehelper--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.1.2&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;mysql&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;5.1.21&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure></p><p>总结：程序启动类不需要排除任务一个类，只需要去除引用却可。</p><p>其他思路<br><a href="http://www.cnblogs.com/kmsfan/p/7189626.html">http://www.cnblogs.com/kmsfan/p/7189626.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> 报错 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConfigurationProperties 和 EnableConfigurationProperties 的区别</title>
      <link href="2018/07/26/java--EnableConfigurationProperties%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2018/07/26/java--EnableConfigurationProperties%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><code>@EnableConfigurationProperties</code><br>测试发现 <code>@ConfigurationProperties</code> 与 <code>@EnableConfigurationProperties</code> 关系特别大。</p><p><code>@EnableConfigurationProperties</code> 文档中解释：<br>当<code>@EnableConfigurationProperties</code>注解应用到你的<code>@Configuration</code>时， 任何被<code>@ConfigurationProperties</code>注解的beans将自动被Environment属性配置。 这种风格的配置特别适合与SpringApplication的外部YAML配置进行配合使用。</p><p>测试发现：<br>1.使用 <code>@EnableConfigurationProperties</code> 进行注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;service.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">&quot;test-service&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg = SERVICE_NAME;</span><br><span class="line">       set/get</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloServiceProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(HelloService.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;hello&quot;, value = &quot;enable&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationPropertiesController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloServiceProperties helloServiceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getObjectProperties&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectProperties</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(helloServiceProperties.getMsg());</span><br><span class="line">        <span class="keyword">return</span> myConfigTest.getProperties();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>#自动配置设置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service.properties.name=my-test-name</span><br><span class="line">service.properties.ip=192.168.1.1</span><br><span class="line">service.user=kayle</span><br><span class="line">service.port=8080</span><br></pre></td></tr></table></figure></p><p>一切正常，但是 HelloServiceAutoConfiguration 头部不使用 <code>@EnableConfigurationProperties</code>，测访问报错。</p><p>2.不使用 <code>@EnableConfigurationProperties</code> 进行注册，使用 <code>@Component</code> 注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;service.properties&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">&quot;test-service&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg = SERVICE_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Controller 不变，一切正常，如果注释掉 @Component 测启动报错。<br>由此证明，两种方式都是将被  @ConfigurationProperties 修饰的类，加载到 Spring Env 中。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommandLineRunner 指定启动顺序</title>
      <link href="2018/07/21/springboot--CommandLineRunner%E6%8C%87%E5%AE%9A%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>2018/07/21/springboot--CommandLineRunner%E6%8C%87%E5%AE%9A%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>这个实际是可以用来当用启动时加载某些程序，相当于以前的 <code>static&#123;  &#125;</code> 这种块。这种方式优雅的多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value=1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行顺序 -&gt; 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value=2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner2</span>  <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行顺序 -&gt; 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据控制台结果可判断，@Order 注解的执行优先级是按value值从小到大顺序。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> CommandLineRunner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-344-字符串反转</title>
      <link href="2018/07/19/%E7%AE%97%E6%B3%95--LeetCode-344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2018/07/19/%E7%AE%97%E6%B3%95--LeetCode-344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>LeetCode 的344 题。</p><p>示例1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><br>示例2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure></p><h3 id="思路分解："><a href="#思路分解：" class="headerlink" title="思路分解："></a>思路分解：</h3><p>1.字符串是奇数个，则最后，中间位置的那个是不需要交换的。如果是偶数个，所有位置交换一遍就完成了。<br>2.这个方法的使用的是首尾逐渐向中间位置的元素递增交换的过程。</p><h3 id="分解过程："><a href="#分解过程：" class="headerlink" title="分解过程："></a>分解过程：</h3><p>[<strong>1</strong>][2][3][4][5][6][<strong>7</strong>]<br>[7][<strong>2</strong>][3][4][5][<strong>6</strong>][1]<br>[7][6][<strong>3</strong>][4][<strong>5</strong>][2][1]<br>[7][6][5][<strong>4</strong>][3][2][1]</p><h3 id="解题实现"><a href="#解题实现" class="headerlink" title="解题实现"></a>解题实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/7/18 13:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        reverseString(<span class="string">&quot;abcdefg&quot;</span>.toCharArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = s.length - i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; s.length / <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">char</span> ch = s[i];</span><br><span class="line">            s[i] = s[k];</span><br><span class="line">            s[k] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解过程"><a href="#分解过程" class="headerlink" title="分解过程"></a>分解过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;字符串总长度: &quot;</span> + s.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = s.length - i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; s.length / <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;break---&gt; k: &quot;</span> + k + <span class="string">&quot;, s.length / 2: &quot;</span> + s.length / <span class="number">2</span> + <span class="string">&quot;, i: &quot;</span> + i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素[&quot;</span> + k + <span class="string">&quot;] 和 元素[&quot;</span> + i + <span class="string">&quot;] 交换&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> ch = s[i];</span><br><span class="line">        s[i] = s[k];</span><br><span class="line">        s[k] = ch;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 交换字符串 </tag>
            
            <tag> LeetCode 解题思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop 1.0 和 NameNode 的一些回顾</title>
      <link href="2018/07/14/bigdata--hadoop%201.0%20%E5%92%8C%20NameNode%20%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9B%9E%E9%A1%BE/"/>
      <url>2018/07/14/bigdata--hadoop%201.0%20%E5%92%8C%20NameNode%20%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h2><p>可以理解为主从模式：</p><ol><li>NameNode 是主节点 [Master]<br>SecondaryNameNode[Master]</li><li>DataNode 是从节点 [Worker]</li></ol><h4 id="Hdfs-1-0-回顾"><a href="#Hdfs-1-0-回顾" class="headerlink" title="Hdfs 1.0 回顾"></a>Hdfs 1.0 回顾</h4><p><strong>1.NameNode 两种元数据映射：</strong><br>1.文件名—-&gt;block数据映射<br>2.block 数据块 —&gt; datanode 节点地址的映射</p><p>细节：<br>  1.是持久化到NN的磁盘上的<br>（fsimage\&lt;—edits log\&lt;—NN的内存变化来的）<br>  2.是通过心跳来组织起来的(DN—>NN)</p><p>注意：如果设置的副本数量小于DataNode的节点个数，其实是不会超过DataNode 的个数的。比如副本个数设3,DataNode只有两个，副本只会有两个。</p><p><strong>2.就目前我们的环境（1个master，2个slaves）：虽然默认3个副本，期实是两个。</strong><br><strong>3.NN倾向存储大数据：太小的话，block多，内存放不下，太大的话，MR作务执行慢。</strong><br><strong>4.如果没有SNN，fsimage多久加载一次，只有重启时加载，如果有了SNN呢？SNN存在的意义？备份，数据恢复editlog 什么时候会合并到 fsimage中？（重启、定期）</strong><br><strong>5.为什么在1.0只能有一个NN? (在zookeepeer 之前)</strong><br><strong>6. 数据完整性校验的目的：检测数据是否损坏<br>  用什么校验方法？ （crc32算法产生的校验合和）存在几种校验逻辑（1.client写校验和，DN校验， 2.DabablockScanner 后来进程）</strong></p><p><strong>7.HDFS 可靠性保证有哪些</strong>  </p><ol><li>心跳：DN–&gt;NN</li><li>块报告：检查数据有没有发生异常，存储情况</li><li>数据块完整性</li><li>空间回收</li><li>副本—数据冗余</li><li>SNN</li><li>快照</li><li>同步和异步的区别?<br>以nameNode 写和为例：</li></ol><ul><li>同步写：一个 client 操作 节点写完即可，剩余节点一个一个写完  。</li><li>异步写：写完一个节点后，期余节点同步即可。</li></ul><ol start="9"><li>计算框架和任务调度管理部署同一台机器的好处？本地化，尽量减少数据移动的开销。</li></ol>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> hadoop1.0 </tag>
            
            <tag> NameNode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据常见业务</title>
      <link href="2018/07/14/bigdata--%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B8%B8%E8%A7%81%E4%B8%9A%E5%8A%A1/"/>
      <url>2018/07/14/bigdata--%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B8%B8%E8%A7%81%E4%B8%9A%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="常见业务"><a href="#常见业务" class="headerlink" title="常见业务"></a><strong>常见业务</strong></h3><h4 id="1-搜索引擎"><a href="#1-搜索引擎" class="headerlink" title="1.搜索引擎"></a>1.搜索引擎</h4><p>三段式结构：<br>1.检索系统<br>2.索引系统<br>3.spider爬虫</p><p>1.爬虫：由搜索引擎主动发起，去别人家的网站去爬数据<br>关键是建索引</p><p>快速判重：布隆过滤器。<br>给定数据排序：<br>1.常见排序算法<br>2.BitMap 算法，<br>    数据量小的时间复杂度、空间复杂度比较大如(10、122、10万)。但是适应于密集的情况，有明显优势。</p><h4 id="2-推荐系统"><a href="#2-推荐系统" class="headerlink" title="2.推荐系统"></a>2.推荐系统</h4><p>NetFlix 推荐系统公司，很多公司的标杆，其他公司的系统多少都会抄这家公司。</p><p>推荐系统通常有三个部份：</p><ol><li>offline 部份，离线</li><li>nearline 部分，近线</li><li>online部分，在线</li></ol><p>划分为以上三部分的理由：</p><p>|<strong>___</strong>昨天<strong>__</strong>|<strong>__</strong>今天<strong>___</strong>|</p><p><strong>离线</strong>：<br>当天肯定无法将当天所有用户的行为数据拿到，所以将昨天的数据存储后进行计算。<br>比如，用户9点看了鞋子的广告，但量不能确定10后用户还看了什么。<br>离线挖掘出的数据，应快带提供出去，比如使用NOSQL做为中间介质传递出去。redis、mongo、hbase 等<br>前端从nosql中去取数据。<br>大至是这个流程。</p><p><strong>在线</strong>：<br>处理在线的时时的数据，对数据进行时时产生。如地图。<br>为什么不用时实代替离线？？<br>如果时实时系统做的很完备，可以不要离线。但是实时任务有个特点，时效性要求非常高，为了保证任务快速得到结果，所以必须做出妥协，所以实时任不能有复杂算法，否则一量有一个任务出现非实时性，则整个实时任务线将受到影响。<br>离线不在乎时间，可以做复杂算法任务。所以两种任务，输入一样，输出并不一样。离线更准确，在线可以给一个近似的结果。</p><p><strong>近线</strong>：<br>类似在线，如 storm、spark</p><p>推荐数据放缓存数据库中，如：NOSQL</p><p>数据有两部分：</p><ol><li>用户行为数据</li><li>物品元数据：即名称，描述，标签，颜色等等属性</li></ol>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 业务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 添加自定义 fliter</title>
      <link href="2018/07/11/springboot--%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8fliter/"/>
      <url>2018/07/11/springboot--%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8fliter/</url>
      
        <content type="html"><![CDATA[<p>自定义的 springboot 过滤器要注册到 spring boot中， 首先先添加一个过滤器，然后在spring boot 进行注册即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.reapal.openapi.web.filter.XSSFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title: 注册自定义过滤器</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/26 16:06.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssFilterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">someFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> XSSFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;xssFilter&quot;</span>);</span><br><span class="line">        registration.setOrder(Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> filter </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot + vue 跨域处理</title>
      <link href="2018/07/11/springboot--%E4%BD%BF%E7%94%A8vue%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/"/>
      <url>2018/07/11/springboot--%E4%BD%BF%E7%94%A8vue%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在使用 vue 做前端开发时，碰到 vue 请求接口出现跨域问题。<br>解决的方法，就在后台添加一个跨域请求的过滤器，来添加跨域支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title: 跨域处理</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *          vue 请求服务跨域处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/14 10:38.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;,reqs.getHeader(&quot;Origin&quot;));</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, PATCH, DELETE, PUT&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> srping boot </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pagehelper报错解决方法</title>
      <link href="2018/05/08/springboot--pagehelper%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>2018/05/08/springboot--pagehelper%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h3><p>如果使用的是 springboot 不能使用，4.1.x 和 5.1.x，而需要使用 pagehelper-spring-boot-starter</p><p>同事的新项目使用 Spring boot，之前是 SpringMVC 所以把直 pom.xml 直接复制过来，一跑就报各种错，各种谷歌百度都不管用。<br>查看 pom 依赖的包后，决定对他一顿老拳。</p><h3 id="正确的示例"><a href="#正确的示例" class="headerlink" title="正确的示例"></a>正确的示例</h3><p>而必须使用，否则 yml 配置无效。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="坑一个是一个的示例，谁用谁脱发"><a href="#坑一个是一个的示例，谁用谁脱发" class="headerlink" title="坑一个是一个的示例，谁用谁脱发"></a>坑一个是一个的示例，谁用谁脱发</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageHelper <span class="title">pageHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;MyBatisConfiguration.pageHelper()&quot;</span>);</span><br><span class="line">    PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</span><br><span class="line">    Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">    p.setProperty(<span class="string">&quot;offsetAsPageNum&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    p.setProperty(<span class="string">&quot;rowBoundsWithCount&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    p.setProperty(<span class="string">&quot;reasonable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    pageHelper.setProperties(p);</span><br><span class="line">    <span class="keyword">return</span> pageHelper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最坑爹的不是版本问题，而是大部分的答案都是这个错误的答案。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
            <tag> pagehelper报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>getWriter() has already been called for this response 的解决办法</title>
      <link href="2018/04/28/springboot--getWriter()-has-already-been%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>2018/04/28/springboot--getWriter()-has-already-been%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>注释部份为有问题的写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//有问题的部份</span></span><br><span class="line">    <span class="comment">//PrintWriter out = null;</span></span><br><span class="line">    <span class="comment">//out = response.getWriter();</span></span><br><span class="line">    <span class="comment">// String json = new ObjectMapper().writeValueAsString(map);</span></span><br><span class="line">    <span class="comment">//out.write(json);</span></span><br><span class="line">    <span class="comment">//out.flush();</span></span><br><span class="line">    <span class="comment">//out.close();</span></span><br><span class="line"></span><br><span class="line">    outputStream = response.getOutputStream();</span><br><span class="line">    String json = <span class="keyword">new</span> ObjectMapper().writeValueAsString(map);</span><br><span class="line">    outputStream.write(json.getBytes());</span><br><span class="line">    outputStream.flush();</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    LOGGER.error(e.getMessage(), e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot @Bean源码分析</title>
      <link href="2018/04/15/springboot-@Bean%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2018/04/15/springboot-@Bean%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>1.先看下 Bean 注解的内容<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;name&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="function">Autowire <span class="title">autowire</span><span class="params">()</span> <span class="keyword">default</span> Autowire.NO</span>;</span><br><span class="line">    <span class="function">String <span class="title">initMethod</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function">String <span class="title">destroyMethod</span><span class="params">()</span> <span class="keyword">default</span> AbstractBeanDefinition.INFER_METHOD</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Target 中指定了注解的使用范围是<em>METHON</em> 和 <em>ANNOTATION_TYPE</em>，就是限定方法 和 注解上可以使用。</p><blockquote><p>@Target(ElementType.METHOD) //方法<br>@Target(ElementType.ANNOTATION_TYPE)//注解</p></blockquote><blockquote><p>value – bean别名和name是相互依赖关联的，value,name如果都使用的话值必须要一致<br>name – bean名称，如果不写会默认为注解的方法名称<br>autowire – 自定装配默认是不开启的，建议尽量不要开启，因为自动装配不能装配基本数据类型、字符串、数组等，这是自动装配设计的局限性，以及自动装配不如显示依赖注入精确<br>Spring引入Autowire（自动装配）机制就是为了解决<bean>标签下<property>标签过多的问题，<property>标签过多会引发两个问题：</property></property></bean></p><ul><li>如果一个Bean中要注入的对象过多，比如十几二十个（这是很正常的），那将导致Spring配置文件非常冗长，可读性与维护性差</li><li>如果一个Bean中要注入的对象过多，配置麻烦且一不小心就容易出错<br>default-autowire有四种取值：</li><li>no：默认，即不进行自动装配，每一个对象的注入比如依赖一个<property>标签</property></li><li>byName：按照beanName进行自动装配，使用setter注入</li><li>byType：按照bean类型进行自动装配，使用setter注入</li><li>constructor：与byType差不多，不过最终属性通过构造函数进行注入</li></ul></blockquote><p>通过测试类，可以看到这个注解的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment">* <span class="doctag">@data</span> 2019/4/15 21:53.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;config_test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAuthor(<span class="string">&quot;liu big big&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;刘大大&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        ac.register(ConfigTest.class);</span><br><span class="line">        ac.refresh();</span><br><span class="line">        User user = (User) ac.getBean(<span class="string">&quot;config_test&quot;</span>);</span><br><span class="line">        System.out.println(user.getAuthor());</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>//liu big big<br>//刘大大</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO--02nio和bio的区别</title>
      <link href="2018/02/14/java-nio-2-nio%E5%92%8Cbio%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2018/02/14/java-nio-2-nio%E5%92%8Cbio%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>BIO 和 NIO 的区别<br>BIO 好比是通道传输，一来一回<br>NIO 好比是管道传输，一堆来一堆回。</p><p>BIO 模型</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">________                        _________</span><br><span class="line">|       |-----------------------|       |</span><br><span class="line">|       |-----------输入--------|       |</span><br><span class="line">|       |                       |       |</span><br><span class="line">|       |-----------输出--------|       |</span><br><span class="line">|       |-----------------------|       |</span><br><span class="line">|-------|                       |-------|</span><br></pre></td></tr></table></figure><p>输入和输出都需要建立一条管道。<br>也就是说，数据的传输是单向的，出去从输出流通道走，回来从输入流通道走。<br>面向流，通道传输的是流</p><p>NIO 模型</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_________                       _________</span><br><span class="line">|       |-----------------------|       |</span><br><span class="line">|       |                       |       |</span><br><span class="line">|       |       输入-输出        |       |</span><br><span class="line">|       |                       |       |</span><br><span class="line">|       |-----------------------|       |</span><br><span class="line">|-------|                       |-------|</span><br></pre></td></tr></table></figure><p>NIO 的通道没有传输数据的能力，通道的建立，相当于铺了铁路，而数据的传输需要火车。<br>火车指的就是缓冲区。<br>火车出发前会装一批人，而不会只装一个人。<br>火车来回都只用一条通道。<br>面向缓冲区，将数据装入缓冲区，由缓冲区进行传输。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> nio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO--01概述</title>
      <link href="2018/02/01/java-nio-1-NIO%E6%A6%82%E8%BF%B0/"/>
      <url>2018/02/01/java-nio-1-NIO%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>服务器实现模式为一个请求一个线程，但客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</p><p>Java NIO（Non-blocking / New IO）是从Java 1.4版本开始引入的一个新的IO API，可以替代标准的Java IO API。<br>NIO 和 IO 的区别在于，IO 是面向流，NIO 是面向缓存。<br>是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，<br>成为解决高并发与大量连接、I/O处理问题的有效方式。<br><a id="more"></a></p><h2 id="传统面向流的，单向的"><a href="#传统面向流的，单向的" class="headerlink" title="传统面向流的，单向的"></a>传统面向流的，单向的</h2><p>三个核心组件</p><ol><li>Channels</li><li>Buffers</li><li>Selectors</li></ol><h3 id="1-Channels-负责传输"><a href="#1-Channels-负责传输" class="headerlink" title="1.Channels  负责传输"></a>1.Channels  负责传输</h3><p>白话: 就是数据传输用的通道。作用是打开到IO设备的连接，文件、套接字都行。<br>绕绕话:   标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。</p><h3 id="2-Buffers-负责存储"><a href="#2-Buffers-负责存储" class="headerlink" title="2.Buffers  负责存储"></a>2.Buffers  负责存储</h3><p>缓冲区，用来存放具体要被传输的数据，比如文件、scoket 等。这里将数据装入 Buffers 再通过通道进行传输。</p><h3 id="3-Selector"><a href="#3-Selector" class="headerlink" title="3.Selector"></a>3.Selector</h3><p>负责监听事件和选择对应事件的渠道。</p><p>NIO 主要的编程模型来自 Reactor</p><h2 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h2><p>NIO基于Reactor，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。<br>也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。</p><h3 id="NIO-是一种可以替代-Java-IO-API-的新API，提供了与标准-API-不同的工作方式。"><a href="#NIO-是一种可以替代-Java-IO-API-的新API，提供了与标准-API-不同的工作方式。" class="headerlink" title="NIO 是一种可以替代 Java IO API 的新API，提供了与标准 API 不同的工作方式。"></a>NIO 是一种可以替代 Java IO API 的新API，提供了与标准 API 不同的工作方式。</h3><h3 id="BIO是一个连接一个线程。"><a href="#BIO是一个连接一个线程。" class="headerlink" title="BIO是一个连接一个线程。"></a>BIO是一个连接一个线程。</h3><h3 id="NIO是一个请求一个线程。"><a href="#NIO是一个请求一个线程。" class="headerlink" title="NIO是一个请求一个线程。"></a>NIO是一个请求一个线程。</h3><h3 id="AIO是一个有效请求一个线程。"><a href="#AIO是一个有效请求一个线程。" class="headerlink" title="AIO是一个有效请求一个线程。"></a>AIO是一个有效请求一个线程。</h3><h2 id="三种IO-的区别"><a href="#三种IO-的区别" class="headerlink" title="三种IO 的区别"></a>三种IO 的区别</h2><p>Java BIO:同步并阻塞<br>服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</p><p>Java NIO: 同步非阻塞<br>服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</p><p>Java AIO(NIO.2) :异步非阻塞<br>服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处。</p><h3 id="BIO、NIO、AIO适用场景分析"><a href="#BIO、NIO、AIO适用场景分析" class="headerlink" title="BIO、NIO、AIO适用场景分析"></a>BIO、NIO、AIO适用场景分析</h3><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。<br>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。<br>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> nio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nio </tag>
            
            <tag> 概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 解决生产环境下多线程调用FTP流被关闭问题</title>
      <link href="2017/11/30/springboot--%E8%A7%A3%E5%86%B3%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8FTP%E6%B5%81%E8%A2%AB%E5%85%B3%E9%97%AD%E9%97%AE%E9%A2%98/"/>
      <url>2017/11/30/springboot--%E8%A7%A3%E5%86%B3%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8FTP%E6%B5%81%E8%A2%AB%E5%85%B3%E9%97%AD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在 spring boot 下把 FTP 工具类以类的型式注入到 spring 容器中。FTP 工具类在实际应用过程中，如果是单例的对象会出现问题：当线程 A 调用FTP工具时调用连接，线程B 同时调用FTP并使用完闭关闭流，这时A的连接会就被关闭了。</p><p>解决方案：<br>将 Bean 置为多例对象。这样当线程每次调用该 Bean 就会生成一个新对象，互相之间不影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class FtpUtil &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpUtilConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FtpProperties ftpProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FtpUtil <span class="title">ftpUtil</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        FtpUtil ftpUtil = <span class="keyword">new</span> FtpUtil();</span><br><span class="line">        <span class="keyword">return</span> ftpUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.fund.common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpScope</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> AnnotationConfigApplicationContext(FtpScope.class);</span><br><span class="line">        FtpUtil f1 = context.getBean(FtpUtil.class);</span><br><span class="line">        FtpUtil f2 = context.getBean(FtpUtil.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.fund.common.util.FtpUtil@7dac3fd8</span><br><span class="line">com.fund.common.util.FtpUtil@425357dd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot中的@ConfigurationProperties注解的使用</title>
      <link href="2017/10/20/springboot--springboot%E4%B8%AD%E7%9A%84@ConfigurationProperties%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2017/10/20/springboot--springboot%E4%B8%AD%E7%9A%84@ConfigurationProperties%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="ConfigurationProperties-注解的使用"><a href="#ConfigurationProperties-注解的使用" class="headerlink" title="ConfigurationProperties 注解的使用"></a>ConfigurationProperties 注解的使用</h3><p>将配置文件中的配置，以属性的形式自动注入到 实体中。<br>要特别说明的一个注属性<br><code>ignoreUnknownFields = false</code><br>这个超好用，自动检查配置文件中的属性是否存在，不存在则在启动时就报错。<br>locations 这个注解属性，不知道为什么不可以使用。用来指定其他配置文件名。</p><p>1.application.properties 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#自动配置设置</span><br><span class="line">service.properties.name&#x3D;my-test-name</span><br><span class="line">service.properties.ip&#x3D;192.168.1.1</span><br><span class="line">service.user&#x3D;kayle</span><br><span class="line">service.port&#x3D;8080</span><br></pre></td></tr></table></figure></p><p>2.对应实体<br>Properties 就是对应的配置文件中的 properties，注意也要给 get/set<br>也就是说，配置文件中的前缀是什么， prefix 中就使用什么。成员变量就是对应的配置文件的第二级属性名。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description 测试配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2017/7/23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>      <span class="comment">//不加这个注解的话, 使用@Autowired 就不能注入进去了</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;service&quot;,ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="keyword">private</span> Properties Properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ip;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ip = ip;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyConfigTest.<span class="function">Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(MyConfigTest.Properties properties)</span> </span>&#123;</span><br><span class="line">        Properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationPropertiesController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyConfigTest myConfigTest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getProperties&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProperties</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(myConfigTest.getUser());</span><br><span class="line">        <span class="keyword">return</span> myConfigTest.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getObjectProperties&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectProperties</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(myConfigTest.getUser());</span><br><span class="line">        <span class="keyword">return</span> myConfigTest.getProperties();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>4.结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;my-test-name&quot;,&quot;ip&quot;:&quot;192.168.1.1&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>5.也可修饰配置类方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;foo&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FooComponent <span class="title">fooComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> ConfigurationProperties注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot中的@Import注解</title>
      <link href="2017/10/19/springboot--springboot%E4%B8%AD%E7%9A%84@Import%E6%B3%A8%E8%A7%A3/"/>
      <url>2017/10/19/springboot--springboot%E4%B8%AD%E7%9A%84@Import%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Import注解在4.2之前只支持导入配置类<br>在4.2,@Import注解支持导入普通的java类,并将其声明成一个bean。<br>在 spring boot 的配置类中的使用比较多。</p><h5 id="1-测试-Import-的自动导入功能"><a href="#1-测试-Import-的自动导入功能" class="headerlink" title="1.测试 @Import 的自动导入功能"></a>1.测试 @Import 的自动导入功能</h5><p>1.一个配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ImportDemo.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a id="more"></a><br>2.一个普通没有加任何注解的类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ImportDemo.doSomething()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.springboot.importtest&quot;</span>);</span><br><span class="line">        ImportDemo importDemo = context.getBean(ImportDemo.class);</span><br><span class="line">        importDemo.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-如果注掉配置类的-Import-，再运行测试类，则报错。证明，ImportDemo-是由-Import-动态注入到-spring-容器中的"><a href="#2-如果注掉配置类的-Import-，再运行测试类，则报错。证明，ImportDemo-是由-Import-动态注入到-spring-容器中的" class="headerlink" title="2.如果注掉配置类的 @Import ，再运行测试类，则报错。证明，ImportDemo 是由 @Import 动态注入到 spring 容器中的"></a>2.如果注掉配置类的 @Import ，再运行测试类，则报错。证明，ImportDemo 是由 @Import 动态注入到 spring 容器中的</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> Import注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 非parent方式搭建</title>
      <link href="2017/10/17/springboot--%E9%9D%9Eparent%E6%96%B9%E5%BC%8F%E6%90%AD%E5%BB%BA/"/>
      <url>2017/10/17/springboot--%E9%9D%9Eparent%E6%96%B9%E5%BC%8F%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>非parent 方式<br>推荐使用这种方式。<br>这样就可以使子项目使用 parent 标签了。<br>这种方式需要两次步骤：<br>1.paretn 项目配置<br>2.子项目配置</p><ol><li>parent 项目配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">添加一个 spring boot 依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>type 是 pom，scope 是 import，这种类型的 dependency 只能在 dependencyManagement 标签中声明。<a id="more"></a>2.子项目配置<br>parent 就可以使用普通的父项目了，而只需要进行 spring boot 的普通依赖即可。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>竞态条件 racing condition</title>
      <link href="2017/09/30/java--%E5%A4%9A%E7%BA%BF%E7%A8%8B--%E7%AB%9F%E6%80%81%E6%9D%A1%E4%BB%B6/"/>
      <url>2017/09/30/java--%E5%A4%9A%E7%BA%BF%E7%A8%8B--%E7%AB%9F%E6%80%81%E6%9D%A1%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>多个线程读时，线程是安全的。<br>当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。<br>我的理解，竞态条件就是一种情况。</p><p><strong>代码实现</strong><br>假设有 A、B 两个线程，调用 add 方法分别传入 1 和 2，理想条件下结果应该是 3。<br>现在出现了不安全的情况，有可能结果不对。<br>add 方法就是临界区，count 就是同一资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> count = <span class="number">0</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.count = <span class="keyword">this</span>.count + value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>其实这样一看，说白了，就是要严格控制线程的执行顺序，假设是按A、B的顺序执行来讲，B依赖于A先执行完成，B再执行结果才是正确的，中间不能出现问题，否则如果，中间交叉执行，就有可能发生了竞态条件。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 竞态条件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Parallel Scavenge 新生代收集器</title>
      <link href="2017/06/26/jvm--Parallel-Scavenge-%E6%96%B0%E7%94%9F%E4%BB%A3%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>2017/06/26/jvm--Parallel-Scavenge-%E6%96%B0%E7%94%9F%E4%BB%A3%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>新生代，多线程，使用复制算法，是<strong>多线程</strong>的并行的收集器。<br>目标：达到一个可控的<strong>吞吐量(Throughput)</strong>。<br>吞吐量：CPU用于运行代码时间 与 CPU总消耗时间的 比<br>公式： 吞吐量 = 运行代码时间 / ( 运行代码时间 + GC时间）<br>虚拟机运行 100 分钟，GC用掉1分钟，则吞吐量为99%。  100 /(100 + 1) = 0.99</p><h4 id="1-停顿时间越短越好"><a href="#1-停顿时间越短越好" class="headerlink" title="1.停顿时间越短越好"></a>1.停顿时间越短越好</h4><p><strong>-XX:MaxGCPauseMillis</strong>： 最大GC停顿时间，最小可为0<br><strong>-XX:GCTimeRatio</strong>:   吞吐量大小,1-100<br><a id="more"></a></p><h4 id="2-停顿时间与空间成反比"><a href="#2-停顿时间与空间成反比" class="headerlink" title="2.停顿时间与空间成反比"></a>2.停顿时间与空间成反比</h4><p>停顿时间越短，则新生代的空间就越小。<br>通过减小新生代的空间，让里面的垃圾变少，从而加快了集速度。<br>原来：500MB 垃圾，10秒收集一次，每次停顿100毫秒<br>为了缩短时间，修改<strong> -XX:MaxGCPauseMillis</strong> 参数，使新生代空间变小，产生的垃圾就少了，停顿时间短了：<br>现在：300MB 垃圾，5秒收集一次， 每次停顿70毫秒。</p><p>那时问题来了，停顿时间下降了，但是频率高了，则吞吐量也跟着降下来了。</p><h4 id="3-GC-时间占总时间的比例"><a href="#3-GC-时间占总时间的比例" class="headerlink" title="3.GC 时间占总时间的比例"></a>3.GC 时间占总时间的比例</h4><p>GCTimeRatio 进行这个设置1-100之间，相当于吞量的倒数。<br>计算方法:<br>1.设置为 19 则： 1 / (1 + 19) = 5%，即最大 5% 的收集时间<br>2.设置为 99 则:  1 / (1 + 99) = 1%，即最大 1% 的收集时间</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> 收集器 </tag>
            
            <tag> GC </tag>
            
            <tag> 垃圾回收 </tag>
            
            <tag> Parallel Scavenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 取消跟踪</title>
      <link href="2017/06/25/git-%E5%8F%96%E6%B6%88%E8%B7%9F%E8%B8%AA/"/>
      <url>2017/06/25/git-%E5%8F%96%E6%B6%88%E8%B7%9F%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<p>取消跟踪</p><ol><li>未提交文件忽略<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached FILENAME</span><br></pre></td></tr></table></figure></li></ol><p>这样就可以了，如果后面跟的是目录就加上个 -r  就行了<br>（这个操作不会删除这个文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached DIR</span><br></pre></td></tr></table></figure></p><ol start="2"><li>已提交文件忽略<br>已经维护起来的文件即已经 commit 后的文件，即使加上了gitignore，也无济于事。<br>用下面这个命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged logs&#x2F;*.log</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> git </tag>
            
            <tag> 取消跟踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git制造冲突</title>
      <link href="2017/06/24/git-%E5%88%B6%E9%80%A0%E5%86%B2%E7%AA%81/"/>
      <url>2017/06/24/git-%E5%88%B6%E9%80%A0%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<h3 id="冲突来源于合并"><a href="#冲突来源于合并" class="headerlink" title="冲突来源于合并"></a>冲突来源于合并</h3><p>不同分支的 commit 是不会产生冲突的，因为 commit 提交到的是当前分支的 本地库。<br>只有将分不同分支的本地库进行合并才会产生冲突。所以：</p><ol><li>合并本地库会产生冲突</li><li>拉远程分支的代码也会产生冲突</li></ol><h3 id="通常产生的情况："><a href="#通常产生的情况：" class="headerlink" title="通常产生的情况："></a>通常产生的情况：</h3><ol><li>两个人写同一个文件就可以<br>先提交的不会有冲突，后拉取的会有冲突</li><li>同一个机器，不同分支，写同一个文件，也可以产生冲突<a id="more"></a></li></ol><h3 id="制造方法："><a href="#制造方法：" class="headerlink" title="制造方法："></a>制造方法：</h3><p>A 、B 两分支操作同一个文件的同一行代码。<br>A 分支 commit<br>B 分支 commit</p><p>B 合并 A，就会产生冲突</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> git </tag>
            
            <tag> 分支 </tag>
            
            <tag> 冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是线程安全?举例说明，区别。</title>
      <link href="2017/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98--%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
      <url>2017/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98--%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全:"></a>线程安全:</h2><p>当多个线程访问某个方法时，不管你通过怎样的调用方式或者说这些线程如何交替的执行，我们在主程序中不需要去做任何的同步，这个类的结果行为都是我们设想的正确行为，那么我们就可以说这个类时线程安全的。</p><h2 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全:"></a>线程不安全:</h2><p>在多核CPU的环境下，当多个线程访问同一个共享变量时，这个变量没有使用任务同步机制，会出现CPU 缓存同步内存不及时，导致出现数据不同步的情况，这就是所谓的线程不安全。单核CPU没有这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashcode用在哪？或者说什么时候用</title>
      <link href="2017/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98--hashcode%E7%94%A8%E5%9C%A8%E5%93%AA/"/>
      <url>2017/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98--hashcode%E7%94%A8%E5%9C%A8%E5%93%AA/</url>
      
        <content type="html"><![CDATA[<p>hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；<br>如果两个对象相同，就是适用于equals方法进行比较，那么这两个对象的hashCode一定要相同；</p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> hashcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashcode 相等两个类一定相等吗? equals呢? 相反呢?</title>
      <link href="2017/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98--hashcode%E7%9B%B8%E7%AD%89%E4%B8%A4%E4%B8%AA%E7%B1%BB%E4%B8%80%E5%AE%9A%E7%9B%B8%E7%AD%89%E5%90%97/"/>
      <url>2017/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98--hashcode%E7%9B%B8%E7%AD%89%E4%B8%A4%E4%B8%AA%E7%B1%BB%E4%B8%80%E5%AE%9A%E7%9B%B8%E7%AD%89%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h4 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h4><p>不一定相等。  </p><h4 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h4><p>hashCode 算法有一定概率产生相同的 hashCode，即 hash 碰撞。<br><a id="more"></a><br>分重写 和 未重写 hashcode、equals 方法两种场景：</p><h4 id="一、hashcode-方法-和-equals-方法没有重写时"><a href="#一、hashcode-方法-和-equals-方法没有重写时" class="headerlink" title="一、hashcode 方法 和 equals 方法没有重写时"></a>一、hashcode 方法 和 equals 方法没有重写时</h4><ol><li>hashcode相等两个类不一定相等</li><li>equals返回true的两个类一定相等（为同一个对象）</li><li>两个类相等hashcode不一定相等</li><li>两个类相等equals不一定返回true</li></ol><h4 id="二、hashcode-方法和-equals-方法均已按规范重写时"><a href="#二、hashcode-方法和-equals-方法均已按规范重写时" class="headerlink" title="二、hashcode 方法和 equals 方法均已按规范重写时"></a>二、hashcode 方法和 equals 方法均已按规范重写时</h4><ol><li>hashcode相等，两个类不一定相等（存在哈希冲突）</li><li>equals返回true的两个类一定相等</li><li>两个类相等hashcode一定相等</li><li>两个类相等equals一定返回true</li></ol>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> hashcode </tag>
            
            <tag> equals </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何停止一个线程</title>
      <link href="2017/04/09/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E7%BA%BF%E7%A8%8B/"/>
      <url>2017/04/09/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ol><li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。</li><li>使用interrupt方法中断线程。</li><li>不推荐使用 stop、suspend及resume 方法。相当于电脑断电关机一样，是不安全的方法。</li></ol><a id="more"></a><h3 id="使用退出标志"><a href="#使用退出标志" class="headerlink" title="使用退出标志"></a>使用退出标志</h3><p>线程当中一般都会写循环，如果不写循环，一句话能搞定的事，就没必要再开线程来处理。<br>stop方法已经过时， run方法结束。<br>开启多线程时，运行代码通常是循环结构，只要控制住循环，就可以让run方法结束，也就是线程结束。<br>原理：只要循环终止了，线程也就终止了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;...run&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;...stop&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了一个关键字 volatile，保证当前 flag 在多核CPU 下的可见性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.thread.stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5000</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;主动中断线程&quot;</span>);</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;i=&quot;</span>+(i+<span class="number">1</span>));</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA 证书加解密通信</title>
      <link href="2017/04/09/architecture-%E8%AF%81%E4%B9%A6%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%80%9A%E4%BF%A1/"/>
      <url>2017/04/09/architecture-%E8%AF%81%E4%B9%A6%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>经常有需要使用安全传输的场景，犹其是在一些泛及资金安全的行业，对数据的传输犹为重视安全性。<br>一般常用的就是对前参的数据进行加密，再到后台进行解密。<br>接口和接口之前的数据也用一样的方式进行加密和解密。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>生成公私钥证书</li><li>公钥对接口参数明文加密</li><li>私钥对接口参数明文解密</li><li>通信双方互相持有对方公私钥</li></ol><p>如果所有的接口都需要加解密，可以放到拦截器中去统一处理，也可以用注解的方式，控制哪些接口需要加密，哪些接口不需要加密。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
          <category> safe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> 安全通信 </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm--对象的创建</title>
      <link href="2017/03/12/jvm--%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>2017/03/12/jvm--%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>这里指普通 Java 对象，而非数组 和 Class对象等。</p><h2 id="1-创建对象的过程："><a href="#1-创建对象的过程：" class="headerlink" title="1.创建对象的过程："></a>1.创建对象的过程：</h2><p>new —&gt; 到常量池中检查是否存在一个类的符号引用 —&gt; 如果有，检查这个符号引用代表的类是否已被加载、解析、初始化 —&gt; 没有，则执行类加载过程。</p><h2 id="2-分配对象"><a href="#2-分配对象" class="headerlink" title="2.分配对象"></a>2.分配对象</h2><p>类加载完毕后，为新生对象分配内存。<br>对象所需内存大小在类加载完成后便完全确定。分配空间。即，从JVM堆中划出一块确定大小的内存空间。</p><h2 id="3-分配方法"><a href="#3-分配方法" class="headerlink" title="3.分配方法"></a>3.分配方法</h2><p>有两种分配方法：</p><ol><li>指针碰撞：<br>使用这种方式的前提是，内存是规整的。<br>左边是空闲的空间，右边是已使用的内存空间，用一块，就往左边移一块，就像秤砣在称中间移动一样。</li><li>空闲列表<br>内存不规整，此时不能使用指针碰撞。JVM 就需要维护一个列表，记录哪些空间可用并给对象。</li></ol><p>堆内存是否规整决定了使用哪种分配方法。<br>而堆是否会规整则由GC是否带有压缩整理功能决定。<br><a id="more"></a></p><h2 id="4-避免并发操作同一片内存的问题"><a href="#4-避免并发操作同一片内存的问题" class="headerlink" title="4.避免并发操作同一片内存的问题"></a>4.避免并发操作同一片内存的问题</h2><p>并发时，A线程 拿着指针在为对象分配 0x111111 这片空间，分配动作执行到一半，B线程 也进来了拿着同一个指针在同一个地址上分配空间。这就出现了问题。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ol><li>CAS 配置失败重试的方式保证更新操作的原子性。</li><li>为每个线程开一小块内存空间，称为本地内存分配缓冲(TLAB)。线程在自己的TLAB是分配。</li></ol><h2 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5.初始化"></a>5.初始化</h2><p>当分配完成后，JVM将分配到的内存空间开始进行初始化为 0 值(不包括对象头)，0值就是数学中的0。如果是TLAB方式，提前到TLAB中分配时进行。<br>这就是使用对象时，程序访问某些字段的数据类型默认有0的原因。就可以不用赋值也可以使用。</p><h2 id="6-必要设置"><a href="#6-必要设置" class="headerlink" title="6.必要设置"></a>6.必要设置</h2><p>接下来JVM对对象进行必要设置。<br>设置如：对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、GC分代年龄等。<br>这些信息存放在对象头中。<br>对JVM来说，对象已分配完成，一个新对象就此产生。<br>但从 java 程序的角度来说对象创建才刚开始。调用 init 方法前，所有字段都是默认的0。执行init方法，对象进行初始化，这样一个真正可用的对象才算完全产生。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 对象的创建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用级别</title>
      <link href="2017/03/04/java--%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%95%E7%94%A8%E7%BA%A7%E5%88%AB/"/>
      <url>2017/03/04/java--%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%95%E7%94%A8%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>引用级别<br>意义：用来标记对角是否可以被回收<br>级别：<br>强 &gt; 软 &gt; 弱 &gt; 虚</p><h3 id="1-强引用"><a href="#1-强引用" class="headerlink" title="1.强引用"></a>1.强引用</h3><p>即一般普通的引用。<br>如果一个对象是强引用，绝对不会被回收，即使内存空间不足也不会被回收，而是抛 OutOfMemoryError 异常使程序终止。<br>例1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> Arraylist&lt;String&gt;();</span><br><span class="line">list.add(str);</span><br></pre></td></tr></table></figure><br>在list集合里的数据不会释放，即使内存不足也不会</p><p>例2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();  </span><br></pre></td></tr></table></figure><br><a id="more"></a><br>//可直接通过obj取得对应的对象 如obj.equels(new Object());<br>而这样 obj对象对后面new Object的一个强引用，只有当obj这个引用被释放之后，对象才会被释放掉，这是经常用到的编码形式。</p><h3 id="2-软引用"><a href="#2-软引用" class="headerlink" title="2.软引用"></a>2.软引用</h3><p>非必须引用，如果空间不足就会被GC回收。换句话说，在内存溢出之前进行回收。<br>只要没有被回收，该对象就可能被程序使用。软引用可用来实现内存敏感的高速缓存。<br>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSofeReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object obj= <span class="keyword">new</span> Object();</span><br><span class="line">    SoftReference&lt;Object&gt; softReference = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(softReference.get());        <span class="comment">//有时候会返回 null</span></span><br><span class="line">    System.out.println(softReference.isEnqueued()); <span class="comment">//返回时否被 GC 回收的标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时候 softReference 是对obj的一个软引用，通过sf.get()方法可以取到这个对象，当然，当这个对象被标记为需要回收的对象时，则返回null；<br>软引用主要用户实现类似缓存的功能，在内存足够的情况下直接通过软引用取值，无需从繁忙的真实来源查询数据，提升速度；当内存不足时，自动删除这部分缓存数据，从真正的来源查询这些数据。</p><h3 id="3-弱引用"><a href="#3-弱引用" class="headerlink" title="3.弱引用"></a>3.弱引用</h3><p>第二次圾垃回收时，被回收</p><h3 id="4-虚引用"><a href="#4-虚引用" class="headerlink" title="4.虚引用"></a>4.虚引用</h3><p>垃圾回收时回收，无法通过引用取到对象值</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 对象 </tag>
            
            <tag> 引用级别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 堆内存简介</title>
      <link href="2017/03/02/jvm--%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%80%E4%BB%8B/"/>
      <url>2017/03/02/jvm--%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Java 堆 是虚拟机管理的最大的一块内存。是被所有线程所共享的一块内存区域，在虚拟机启动时创建。</p><h3 id="1-分配内存方式："><a href="#1-分配内存方式：" class="headerlink" title="1.分配内存方式："></a>1.分配内存方式：</h3><p>所有的实例和数组都在要堆上分配，但是随着JIT编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导至一些变化，所有的对象都分配在堆上也变得不那么绝对。</p><p>Java 堆是垃圾收集器管理的主要区域，也叫CG堆。由于现在收集器基本都爱用分代收集算法，<br>所以Java堆中还可以细分为：<br><code>新生代</code> 和 <code>老年代</code>。再细致一点的有 : <code>Eden 空间</code>、<code>From Survivor 空间</code>、<code>To Survivor 空间</code>等。从内存分配的角度来看，线程共享的Java堆中可能划多个线程私有的分配缓存区。</p><p>如何划分与存放内容无关，无论哪个区域，存储的都仍然是对象实例。进一步划分的目的是为了更好的回收内存、或都更快的分配内存。</p><h3 id="2-存放特点："><a href="#2-存放特点：" class="headerlink" title="2.存放特点："></a>2.存放特点：</h3><p>Java 堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间。<br>堆的实现，即可固定大小，也可以扩展，通过 -Xms 和 -Xmx 控制。<br>如果堆中没有内存实例分配，并助理堆无法再扩展时，抛出 OutOfMemoryError</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
            <tag> jvm </tag>
            
            <tag> 堆 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环引用示例</title>
      <link href="2017/03/02/jvm--%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
      <url>2017/03/02/jvm--%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>见过一个问题说，如果java里的对象出现了循环引用，对象会不会被回收。<br>结论是：会。<br>因为 java 的对象存活算法，使用的是可达性分析算法，而不是引用计算法，java中任务一款GC都没有使用过引用计算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line">    a.bb = b;</span><br><span class="line">    b.aa = a;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//a = null;</span></span><br><span class="line">    <span class="comment">//b = null;</span></span><br><span class="line">    System.in.read();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 循环引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 虚拟机简单理解</title>
      <link href="2017/03/02/jvm--%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
      <url>2017/03/02/jvm--%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>与PC寄存器一样，Java虚拟机栈也是线程私有的。每一个JVM线程都有自己的java虚拟机栈，这个栈与线程同时创建，它的生命周期与线程相同。</p><h3 id="1-虚拟机栈的特点："><a href="#1-虚拟机栈的特点：" class="headerlink" title="1.虚拟机栈的特点："></a>1.虚拟机栈的特点：</h3><p>“虚拟机栈”描述的是Java方法执行的内存模型：  </p><ol><li>每个方法被执行的时候都会同时创建一个<code>栈帧（Stack Frame）</code>用于存储:<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>等信息。(栈帧我的理解就是一个对象，用来存储信息用)</li><li>每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</li></ol><h3 id="2-局部变量表："><a href="#2-局部变量表：" class="headerlink" title="2.局部变量表："></a>2.局部变量表：</h3><ol><li>存放了8种基本数据 类型</li><li>对象引用 类型</li><li>returnAddress 类型</li></ol><a id="more"></a><p>除64位 long 和 duble 占2个局部空间外，其余的数据类型只占1个。<br>注意，局部变量表所需的内存空间在编译期间完成分配，所以进入某个方法时，这个方法需要在栈桢中分配多大的空间完全是确定的，在方法运行时是不会改变局部变量表的大小的。</p><h3 id="3-虚拟机栈出现异常两种情况："><a href="#3-虚拟机栈出现异常两种情况：" class="headerlink" title="3.虚拟机栈出现异常两种情况："></a>3.虚拟机栈出现异常两种情况：</h3><ol><li>如果线程请求的深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常;</li><li>如果虚拟机进行动态扩展，而扩展时无法申请到足够的内存，则抛出 OutOfMemoryError 异常。</li></ol><p>注，大部分 Java 虚拟机分为：<code>固定长度</code> 和 <code>动态扩展</code> 两种</p><h3 id="4-关于动态扩展："><a href="#4-关于动态扩展：" class="headerlink" title="4.关于动态扩展：　　"></a>4.关于动态扩展：　　</h3><p>JVM stack 可以被实现成固定大小，也可以根据计算动态扩展。<br>如果采用固定大小的JVM stack设计，那么每一条线程的JVM Stack容量应该在线程创建时独立地选定。JVM实现应该提供调节JVM Stack初始容量的手段；如果采用动态扩展和收缩的JVM Stack方式，应该提供调节最大、最小容量的手段。</p><p>如果线程请求的栈深度大于虚拟机所允许的深度将抛出StackOverflowError；<br>如果JVM Stack可以动态扩展，但是在尝试扩展时无法申请到足够的内存时抛出<code>OutOfMemoryError</code>。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
            <tag> jvm </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空类型指针</title>
      <link href="2017/01/21/c-%E7%A9%BA%E7%B1%BB%E5%9E%8B%E6%8C%87%E9%92%88/"/>
      <url>2017/01/21/c-%E7%A9%BA%E7%B1%BB%E5%9E%8B%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h3 id="空类型指针"><a href="#空类型指针" class="headerlink" title="空类型指针"></a>空类型指针</h3><p>malloc 查看底层源码中发现是空类型的指针，空类型的指针可以接收任意类型的指针，但是不能取出指针里的内容，如果要取出内容必须要强转。</p><h5 id="1-验证空类型指针，可以接收任意类型指针，但不可以取值"><a href="#1-验证空类型指针，可以接收任意类型指针，但不可以取值" class="headerlink" title="1.验证空类型指针，可以接收任意类型指针，但不可以取值"></a>1.验证空类型指针，可以接收任意类型指针，但不可以取值</h5><pre><code class="c"><span class="function"><span class="keyword">void</span> <span class="title">testVoidPoint</span><span class="params">()</span> </span>&#123;    <span class="keyword">int</span> a = <span class="number">100</span>;    <span class="keyword">void</span> *p = &amp;a;    <span class="built_in">printf</span>(<span class="string">"%x, %x"</span>, &amp;a, p);    <span class="built_in">printf</span>(<span class="string">"%d"</span>, *p);   <span class="comment">//error: invalid use of void expression</span>    getchar();&#125;</code></pre><h5 id="2-通过强转取值"><a href="#2-通过强转取值" class="headerlink" title="2.通过强转取值"></a>2.通过强转取值</h5><p>将值强转成对应的指针类型取出</p><pre><code class="c"><span class="function"><span class="keyword">void</span> <span class="title">testVoidPoint2</span><span class="params">()</span> </span>&#123;    <span class="keyword">int</span> a = <span class="number">100</span>;    <span class="keyword">void</span> *p = &amp;a;    <span class="built_in">printf</span>(<span class="string">"%d"</span>, *((<span class="keyword">int</span>*)(p)));&#125;</code></pre><h5 id="3-开辟空间，证明指针即是动态数组。"><a href="#3-开辟空间，证明指针即是动态数组。" class="headerlink" title="3.开辟空间，证明指针即是动态数组。"></a>3.开辟空间，证明指针即是动态数组。</h5><pre><code class="C"><span class="function"><span class="keyword">void</span> <span class="title">testVoidPoint3</span><span class="params">()</span> </span>&#123;    <span class="keyword">int</span> intSize = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);  <span class="comment">//得到4，证明 int 是 4 个字节</span>    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, intSize);    <span class="keyword">int</span> *p = (<span class="keyword">int</span>*) <span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));   <span class="comment">//一开始就使用强转，开辟 20个4字节的空间，80个字节内存</span>    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)&#123;        p[i] = i;                           <span class="comment">//注意，指针本质上也可看成数组。指针的数组下标是可以动态分配的，数组不可以。</span>        <span class="built_in">printf</span>(<span class="string">"%d,%x\n"</span>, &amp;p[i], i);    &#125;&#125;</code></pre><h5 id="4-指针与动态数组的等价比较"><a href="#4-指针与动态数组的等价比较" class="headerlink" title="4.指针与动态数组的等价比较"></a>4.指针与动态数组的等价比较</h5><pre><code class="C"><span class="function"><span class="keyword">void</span> <span class="title">testVoidPoint4</span><span class="params">()</span> </span>&#123;    <span class="keyword">int</span> intSize = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, intSize);    <span class="keyword">int</span> *p = (<span class="keyword">int</span>*) <span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)&#123;        p[i] = i;        <span class="built_in">printf</span>(<span class="string">"%d,%x\n"</span>, p[i], &amp;p[i]);        <span class="built_in">printf</span>(<span class="string">"%d,%x\n"</span>, *(p + i), p + i);    &#125;&#125;</code></pre><p>p[i] 等价于 *(p + i)<br>&amp;p[i] 等价于 p + i</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
            <tag> 空类型指针 </tag>
            
            <tag> 数组 </tag>
            
            <tag> malloc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 molloc 手动开辟内存</title>
      <link href="2017/01/20/c-%E6%89%8B%E5%8A%A8%E5%BC%80%E8%BE%9F%E5%86%85%E5%AD%98/"/>
      <url>2017/01/20/c-%E6%89%8B%E5%8A%A8%E5%BC%80%E8%BE%9F%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>手动开辟内存 主要使用的函数 <code>molloc</code> 进行操作。开启指定的内存空间。</p><pre><code class="CPP"><span class="keyword">while</span> (<span class="number">1</span>) &#123;    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"自增内存"</span>);    <span class="keyword">int</span> *p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="number">1024</span> *<span class="number">10</span> );        <span class="comment">//开10兆内存，并地址给一个指针。</span>    Sleep(<span class="number">2000</span>);&#125;</code></pre><p>malloc 无效可能是杀毒软件拦截的原因。  </p><p>malloc 用来创建动态的数组也是数组，跟普通的数组有什么区别呢：<br>普通的数组是已知大小的情况下使用，malloc 的数组是在大小不确定的情况下使用，可以动态的分配指定大小，灵活度大。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> molloc </tag>
            
            <tag> 内存 </tag>
            
            <tag> 开辟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是幂等</title>
      <link href="2017/01/15/architecture--%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%82%E7%AD%89/"/>
      <url>2017/01/15/architecture--%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%82%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h1 id="幂等（idempotent、idempotence）"><a href="#幂等（idempotent、idempotence）" class="headerlink" title="幂等（idempotent、idempotence）"></a>幂等（idempotent、idempotence）</h1><p>是一个数学与计算机学概念，常见于抽象代数中。</p><p>在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。</p><p>幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。</p><p>这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，”setTrue()”函数就是一个幂等函数,无论多次执行，其结果都是一样的.更复杂的操作幂等保证是利用唯一交易号(流水号)实现.</p><h1 id="编程中的幂等"><a href="#编程中的幂等" class="headerlink" title="编程中的幂等"></a>编程中的幂等</h1><a id="more"></a><p>编程中.一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，”setTrue()”函数就是一个幂等函数,无论多次执行，其结果都是一样的.更复杂的操作幂等保证是利用唯一交易号(流水号)实现.</p><p>白话：操作几次，结果都是一样。<br>幂等与操作有关</p><p>幂等与你是不是分布式高并发还有JavaEE都没有关系。关键是你的操作是不是幂等的。<br>一个幂等的操作典型如：把编号为5的记录的A字段设置为0这种操作不管执行多少次都是幂等的。<br>一个非幂等的操作典型如：把编号为5的记录的A字段增加1这种操作显然就不是幂等的。<br>要做到幂等性，从接口设计上来说不设计任何非幂等的操作即可。<br>譬如说需求是：当用户点击赞同时，将答案的赞同数量+1。<br>改为：当用户点击赞同时，确保答案赞同表中存在一条记录，用户、答案。<br>赞同数量由答案赞同表统计出来。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
          <category> 概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 概念 </tag>
            
            <tag> 幂等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个原素交换位置</title>
      <link href="2016/12/15/%E7%AE%97%E6%B3%95--%E4%B8%A4%E4%B8%AA%E5%8E%9F%E7%B4%A0%E4%BA%A4%E6%8D%A2%E4%BD%8D%E7%BD%AE/"/>
      <url>2016/12/15/%E7%AE%97%E6%B3%95--%E4%B8%A4%E4%B8%AA%E5%8E%9F%E7%B4%A0%E4%BA%A4%E6%8D%A2%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miya.algorithm.sort;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liu kai on 16/9/8.</span></span><br><span class="line"><span class="comment"> * 交换数组两个元素位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Change</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>, y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">        test(arr, x, y);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = arr[x];</span><br><span class="line">        <span class="keyword">int</span> b = arr[y];</span><br><span class="line">        a = a+b;</span><br><span class="line">        b = a-b;</span><br><span class="line">        a = a-b;</span><br><span class="line">        arr[x] = a;</span><br><span class="line">        arr[y] = b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 交换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一维数组去重</title>
      <link href="2016/12/15/%E7%AE%97%E6%B3%95--%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
      <url>2016/12/15/%E7%AE%97%E6%B3%95--%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[ <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 一维数组去重</span></span><br><span class="line"><span class="comment"> * Author liu kai</span></span><br><span class="line"><span class="comment"> * Data 2016/7/25 14:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;        <span class="comment">//标记去重的次数</span></span><br><span class="line">    <span class="keyword">int</span> newLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] newArray;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] == arr[j]) &#123;</span><br><span class="line">                    arr[j] = -<span class="number">1</span>;</span><br><span class="line">                    len++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不使用 list 的情况下，用数组重新封装结果</span></span><br><span class="line">    newArray = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length - len];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] != -<span class="number">1</span>) &#123;</span><br><span class="line">            newArray[newLen] = arr[i];</span><br><span class="line">            newLen++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printResult (newArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printResult</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 去重 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 反射获取方法调用栈</title>
      <link href="2016/10/31/java-%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%A0%88/"/>
      <url>2016/10/31/java-%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>实际开发中，有多个接个有多个实现类时，搞不清调用栈，可以用这个方法来查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印所有调用栈</span></span><br><span class="line">    testInvoke();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInvoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    defaultTag();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">defaultTag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();</span><br><span class="line">    <span class="keyword">for</span> (StackTraceElement e : stackTrace) &#123;</span><br><span class="line">      System.out.println(e.getClassName() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">              + e.getMethodName() + <span class="string">&quot;\t行号: &quot;</span> + e.getLineNumber());</span><br><span class="line">    &#125;</span><br><span class="line">    StackTraceElement log = stackTrace[<span class="number">1</span>];</span><br><span class="line">    String tag = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; stackTrace.length; i++) &#123;</span><br><span class="line">      StackTraceElement e = stackTrace[i];</span><br><span class="line">      <span class="keyword">if</span> (!e.getClassName().equals(log.getClassName())) &#123;</span><br><span class="line">        tag = e.getClassName() + <span class="string">&quot;.&quot;</span> + e.getMethodName();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="keyword">null</span>) &#123;</span><br><span class="line">      tag = log.getClassName() + <span class="string">&quot;.&quot;</span> + log.getMethodName();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前方法: &quot;</span> + tag);</span><br><span class="line">    <span class="keyword">return</span> tag;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Thread    getStackTrace    行号: 1559</span><br><span class="line">Test    defaultTag    行号: 17</span><br><span class="line">Test    testInvoke    行号: 13</span><br><span class="line">Test    main    行号: 8</span><br><span class="line">当前方法: Test.defaultTag</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针的初始化</title>
      <link href="2016/10/12/c-%E6%8C%87%E9%92%88%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>2016/10/12/c-%E6%8C%87%E9%92%88%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>必须初始化才可以使用，未经初始化的指针会产生一个垃圾数据，这个数据是胡乱读取到的。不初始化先危险<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">*p = <span class="number">5</span>;    <span class="comment">//错误，必须先初始化</span></span><br></pre></td></tr></table></figure><br>NULL 空指针<br>在 <code>stdio.h</code> 头文件中 NULL 是常量，表示不指向任何地址。<br>if point == NULL 判断指针有没有被使用过。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;    <span class="comment">//表示内存为 Ox000000;</span></span><br><span class="line">*p = <span class="number">5</span>;              <span class="comment">//访问冲突，0x000000 是操作系统使用的。</span></span><br></pre></td></tr></table></figure><br>VS 会报错，未经初始化的变量，但是有的IDE是不会报错的。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针类型不兼容</title>
      <link href="2016/10/12/c-%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%85%BC%E5%AE%B9/"/>
      <url>2016/10/12/c-%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%85%BC%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="类型不兼容"><a href="#类型不兼容" class="headerlink" title="类型不兼容"></a>类型不兼容</h3><p>不同类型的指针不可以赋值。否则赋值后，编译可以通过，但是执行后数据会变量错误数据。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">32138</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;        <span class="comment">//合法</span></span><br><span class="line"><span class="keyword">char</span> *p1 = p;        <span class="comment">//合法，但是问题就在这里</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *p, *p1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n%d,%d&quot;</span>, <span class="keyword">sizeof</span>(*p), <span class="keyword">sizeof</span>(*p1));</span><br></pre></td></tr></table></figure><br>指针都是4个字节存，这个没问题，问题在取，取的时候根据什么类型，就会读多大的长度，如果是 int <em> 则会读4个字节，如果是 char </em>类型，则只会读一个字节，数据错误。</p><p>在 vs 上重现不出来，vs 直接报 类型不兼容。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一级指针简单理解</title>
      <link href="2016/10/12/c-%E4%B8%80%E7%BA%A7%E6%8C%87%E9%92%88%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
      <url>2016/10/12/c-%E4%B8%80%E7%BA%A7%E6%8C%87%E9%92%88%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="两个关键符号："><a href="#两个关键符号：" class="headerlink" title="两个关键符号："></a>两个关键符号：</h4><p><strong> &amp; </strong>: 取内存地址符<br><strong> * </strong>: 取内存值符</p><h4 id="指针的操作规律："><a href="#指针的操作规律：" class="headerlink" title="指针的操作规律："></a>指针的操作规律：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.声明的时候是往里放地址 int *p &#x3D; &amp;num，</span><br><span class="line">2.直接拿的时候就是直接操作地址内的值 *p &#x3D; 10;</span><br></pre></td></tr></table></figure><p>在 C 中操作地址就可以操作值，就跟 java 中两个引用类型拿到引用可以操作内一个对象一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名    内存地址       值</span><br><span class="line">a        [0x23fa32]    100</span><br><span class="line">*p       [0x24aa34]    [0x23fa32]</span><br></pre></td></tr></table></figure><br>指针存放的是 a 的内存地址，&amp;p则是自己的内存地址 [0x24aa34]</p><h4 id="1-创建一个针指并使用"><a href="#1-创建一个针指并使用" class="headerlink" title="1.创建一个针指并使用"></a>1.创建一个针指并使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;num;        <span class="comment">//将内存地址给 *p</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x, %x&quot;</span>,&amp;num, &amp;p);</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num);    <span class="comment">//10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析过程：<br>根据拿到的直址 分别查看 &amp;num，和 &amp;p。&amp;num 的地址以 带符号 4字节查看是100。<br>查看&amp;p 的地址，以十六进制查看，因为存的是 &amp;num 的地址。并不是实际的值。这就证明了指针变量存的是地址。<br>当程序再往下走 *p = 10 时，再回头看 &amp;num 的值，已经变红，修改成了10。</p><h4 id="2-传递指针"><a href="#2-传递指针" class="headerlink" title="2.传递指针"></a>2.传递指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    change(&amp;num);    <span class="comment">//形参是指针类型，就可以将地址传递过去。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> *p)</span> </span>&#123;        <span class="comment">//创建一个指针用来接收地址</span></span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是C当中的方法形参使用的是变量副本机制，也就是说，方法形参也是有个自己的内存地址。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>竟态条件 racing condition</title>
      <link href="2016/10/02/jvm--%E7%AB%9F%E6%80%81%E6%9D%A1%E4%BB%B6%20racing%20condition/"/>
      <url>2016/10/02/jvm--%E7%AB%9F%E6%80%81%E6%9D%A1%E4%BB%B6%20racing%20condition/</url>
      
        <content type="html"><![CDATA[<h3 id="竟态条件-racing-condition"><a href="#竟态条件-racing-condition" class="headerlink" title="竟态条件 racing condition"></a>竟态条件 racing condition</h3><p>多个线程读时，线程是安全的。<br>当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。<br>我的理解，竞态条件就是一种情况。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>假设有 A、B 两个线程，调用 add 方法分别传入 1 和 2，理想条件下结果应该是 3。<br>现在出现了不安全的情况，有可能结果不对。<br>add 方法就是<code>临界区</code>，<code>count</code> 就是同一资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> count = <span class="number">0</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.count = <span class="keyword">this</span>.count + value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>其实这样一看，说白了，就是要严格控制线程的执行顺序，假设是按A、B的顺序执行来讲，B依赖于A先执行完成，B再执行结果才是正确的，中间不能出现问题，否则如果，中间交叉执行，就有可能发生了竞态条件。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>checkout 检出和切换</title>
      <link href="2016/09/06/git--checkout%E6%A3%80%E5%87%BA%E5%92%8C%E5%88%87%E6%8D%A2/"/>
      <url>2016/09/06/git--checkout%E6%A3%80%E5%87%BA%E5%92%8C%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>这个命令是个多功能的命令用法很灵活。<br>切换分支、撤消修改<br>下面文中是 <code>--</code> 两个杠框是连在一起，中间没有空格，因为字体太小，所说中间给个空格看着明显一些。</p><h3 id="1-切换分支"><a href="#1-切换分支" class="headerlink" title="1.切换分支"></a>1.切换分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="2-创建并切换分支"><a href="#2-创建并切换分支" class="headerlink" title="2.创建并切换分支"></a>2.创建并切换分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;name&gt;</span><br><span class="line">这其实可以拆解成两步操作 -b 应该就是branch</span><br></pre></td></tr></table></figure><h3 id="3-撤销工作区修改"><a href="#3-撤销工作区修改" class="headerlink" title="3.撤销工作区修改"></a>3.撤销工作区修改</h3><p>实际就是“以旧换新”的操作<br>有两种情况：<br>1.如果未添加到暂存区，则把版本库中的最新版本覆盖<br>2.如果已添加到暂存区，则把暂存区中的修改拿出覆盖</p><p>撤销工作区修改:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout - - &lt;file&gt;</span><br></pre></td></tr></table></figure><br>清除全部 - - 不能丢，不然就成了上面的切换切支命令了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout - - .</span><br></pre></td></tr></table></figure></p><h3 id="4-连招"><a href="#4-连招" class="headerlink" title="4.连招"></a>4.连招</h3><p>假如有一个文件，做了修改，但是不确定后面的修改是不是想要的。先添加到暂存区中，过了一会这个修改是不想要的，想要把工作区的文件从暂存区撤回覆盖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add                   &#x2F;&#x2F;放一份当前写到一半觉得没问题的放到暂存区中</span><br><span class="line">git checkout - - file     &#x2F;&#x2F;将 版本库 中的修改替换到 工作区中</span><br></pre></td></tr></table></figure><br>没有 add 的情况下，直接拿版本来覆盖本地，这样搞的话，之前工作区的文件的修改就没了。用这招就看之前修改要不要了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout - - file</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> git </tag>
            
            <tag> checkout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-注解</title>
      <link href="2016/08/31/java-%E6%B3%A8%E8%A7%A3/"/>
      <url>2016/08/31/java-%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>注解相当于一个运行于内存当中的自定义类型的数据存储区域，理解以后才发现它的好用，就是数据存储区，相当于一个运行在内存当中的XML，所有的注解数据在JDK加载完类以后，就可以被使用。</p><h2 id="JDK内置注解"><a href="#JDK内置注解" class="headerlink" title="JDK内置注解"></a>JDK内置注解</h2><p>三个基本内置注解：<br>1.@override<br>2.@Deprecated       //加在类或方法上，标注为过时<br>3.@SuppressWarnings //制编译器</p><h2 id="元注解-MetaData"><a href="#元注解-MetaData" class="headerlink" title="元注解 MetaData"></a>元注解 MetaData</h2><p>元注解使用和创建注解的方式，让自己可以创建自己的注解。<br>元数据/元注解<br>作用：就是负责注解其他注解。<br>Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation 类型作说明。</p><p>Java5.0定义的元注解：<br><code>@Documented</code> 标记生成javadoc<br><code>@Inherited</code> 标记继承关系<br><code>@Retention</code> 注解的生存期<br><code>@Target</code> 标注的目标</p><h3 id="Target-注解"><a href="#Target-注解" class="headerlink" title="@Target 注解"></a>@Target 注解</h3><p>说明了Annotation所修饰的对象范围：</p><ol><li>Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）</li><li>类型成员（方法、构造方法、成员变量、枚举值）</li><li>方法参数和本地变量（如循环变量、catch参数）</li></ol><p>在Annotation类型的声明中使用了target可更加明晰其修饰的目标。<br>取值(ElementType)有：</p><p>1.CONSTRUCTOR:用于描述构造器<br>2.FIELD:用于描述域<br>3.LOCAL_VARIABLE:用于描述局部变量<br>4.METHOD:用于描述方法<br>5.PACKAGE:用于描述包<br>6.PARAMETER:用于描述参数<br>7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 数据表名称注解，默认值为类名称</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">tableName</span><span class="params">()</span> <span class="keyword">default</span> &quot;className&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；<br>而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。<br>使用这个meta-Annotation可以对 Annotation的”生命周期”限制。</p><p>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</p><p>取值（RetentionPoicy）有：<br>1.SOURCE:在源文件中有效（即源文件保留）<br>2.CLASS:在class文件中有效（即class保留）<br>3.RUNTIME:在运行时有效（即运行时保留）</p><p>Retention meta-annotation类型有唯一的value作为成员，它的取值来自<code>java.lang.annotation.RetentionPolicy</code>的枚举类型值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试时不能自动引入，所以放在这里</span></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;fieldName&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">setFuncName</span><span class="params">()</span> <span class="keyword">default</span> &quot;setField&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFuncName</span><span class="params">()</span> <span class="keyword">default</span> &quot;getField&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">defaultDBValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里RetentionPolicy的属性值是RUTIME，这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理。</p><p>注意，不可以省略不写 Retention，否则会出现拿不到注解的情况，测试中，忘了写 RUNTIME 结果怎么都是 null。所以如果默认不写应该不是 RUNTIME 的。下次再写时可以测试一下不写的情况。</p><p>测试代码</p><p>测试只测试了 成员变量 的测解，还城需要对参数，方法进行测试。</p><p>添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liukai on 2016/7/12.</span></span><br><span class="line"><span class="comment"> * 用于 成员属性中的注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//测试中忘了添加这 RUNTIME，默认是public</span></span><br><span class="line"><span class="meta">@interface</span> FieldAnnotion &#123;</span><br><span class="line">  <span class="function">String <span class="title">fileName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class&lt;User&gt; userClass = User.class;</span><br><span class="line">  Field[] fields = userClass.getDeclaredFields();</span><br><span class="line">  System.out.println(fields.length);</span><br><span class="line">  <span class="keyword">if</span> (fields != <span class="keyword">null</span> &amp;&amp; fields.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">      FieldAnnotion annotation = field.getAnnotation(FieldAnnotion.class);</span><br><span class="line">      System.out.println(annotation.fileName());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@FieldAnnotion(fileName = &quot;user_name&quot;)</span>      <span class="comment">//通过注解设置</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@FieldAnnotion(fileName = &quot;age&quot;)</span>      <span class="comment">//通过注解设置</span></span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@FieldAnnotion(fileName = &quot;address&quot;)</span>      <span class="comment">//通过注解设置</span></span><br><span class="line">  <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">  setter/getter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p>添加这个注解后，用到这个注解的程序可以被添加到javadoc中成为公共API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p>是一种标记注解。阐述了某个被注解的类型是被继承的。<br>如果使用了@Inherited的注解类型被用于一个类，则这个注解将被用于该类的子类。<br>条件：<br>1.注解于接口中，无效。<br>2.只能放在父类的类头中，放在父类的方法中无效，子类无法继承。</p><h2 id="自定义注解-interface"><a href="#自定义注解-interface" class="headerlink" title="自定义注解 @interface"></a>自定义注解 @interface</h2><p>注解的作用是可以利用反射来获取数据</p><p>使用<code>@interface</code>自定义注解时，自动继承了<code>java.lang.annotation.Annotation接口</code>，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p><p>定义注解格式：<br>public @interface 注解名 {定义体}</p><p>注解参数的可支持数据类型：</p><p>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)<br>2.String类型<br>3.Class类型<br>4.enum类型<br>5.Annotation类型<br>6.以上所有类型的数组</p><p>Annotation类型里面的参数该怎么设定:<br>第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　<br>第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　<br>第三,如果只有一个参数成员,最好把参数名称设为”value”,后加小括号.例:下面的例子FruitName注解就只有一个参数成员。</p><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>通过反射获取注解中的值<br>特别注意：每个注解，可以设置给不给默认值，如果注解中有 <code>default</code> 值的话，则在使用时可以不需要给注解赋;如果没有设置默认值，则一定要在对象是设置注解的值，否则一运行就报错。</p><h4 id="1-定义一个自定义注解"><a href="#1-定义一个自定义注解" class="headerlink" title="1.定义一个自定义注解"></a>1.定义一个自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;testing...&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;                <span class="comment">//default 可以不写修饰符</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>解释：<br>ElemengType.TYPE  元素类型，其实就是成员变量，JDK 的API中也称做元素注意。<br>特别注意 id 这个注解在对象的成员变量上使用的时候，一定要设置值，因为，上面代码中没有设置默认值，运行会报错。<br>可以通过设置默认值来避免。</p><p>2.反射来获取注解的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(id = 22)</span></span><br><span class="line"><span class="comment">//name有默认值，可写可不写，id没有默认值，一定要赋值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;TestMain&gt; clazz = TestMain.class;</span><br><span class="line">    MyAnnotation ma = clazz.getAnnotation(MyAnnotation.class);</span><br><span class="line">    System.out.println(ma.name());</span><br><span class="line">    System.out.println(ma.id());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>testing…<br>22</p><p>注意，如果不在TestMain中设值id=22 直接在注解接口中给id一个默认也是一样可以的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>注解一般使用在，不需要修改原代码的基本上，添加一些切面的功能，如，为方法添加切面日志、频次拦截等。可以不需要修改代码通过添加注解即可实现，从扩展的角度去解决代码的问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 注解 </tag>
            
            <tag> 元注解 </tag>
            
            <tag> 内置注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单说明 lock 锁和 Condition 的操作</title>
      <link href="2016/08/09/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8Elock%E9%94%81%E5%92%8CCondition%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>2016/08/09/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8Elock%E9%94%81%E5%92%8CCondition%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>作用：使当前线程进入等待状，并交换执行执，等待被交换的当前执行线程唤醒，才可以继续执行，如果不被唤醒？<br>场景：多个线程操作同一个共享资源时使用。</p><p>Condition 是执行条件。类似传统技术中的 wait 的 notify 功能。<br>Condition 是基于一个 lock 而存在。<br>注意的是，Condition 的创建来自同一个 lock 对象，</p><p>Condition 也行 wait 也好，套路就是使用三个工具来完成三步套路。即，用两个线程，同时跑两个代码，并且用 while 不段的去读取一个条件，来判断自己是否应该唤醒对方。</p><p>步骤：<br>1.先lock住<br>2.通过 lock 拿到 condition。再进行操作如 await<br>3.然后多个线程开始 await、single<br>注意 await 会释放锁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await()的作用是能够让其他线程访问竞争资源，所以挂起状态就是要释放竞争资源的锁。</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.thread.lock.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liukai on 2016/2/25.</span></span><br><span class="line"><span class="comment"> * 测试 Lock、Condition 代替 synchronized、wait</span></span><br><span class="line"><span class="comment"> * 例子来自 JDK Condition API 中的示例代码，阻塞队列的原理。</span></span><br><span class="line"><span class="comment"> * 注间的是，两个不同的方法里面的 等待 和 唤醒 是不同的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition full = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> takeptr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> putptr = <span class="number">0</span>;</span><br><span class="line">    Object [] blockArray = <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> TestCondition condition = <span class="keyword">new</span> TestCondition();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.put(<span class="keyword">new</span> Object());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.take();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span> <span class="params">(Object element)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (count == blockArray.length) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;put: putptr = &quot;</span> + putptr + <span class="string">&quot;, await&quot;</span>);</span><br><span class="line">                full.await();       <span class="comment">//等待和唤醒用的不是同一个对象</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;put: putptr = &quot;</span> + putptr + <span class="string">&quot;, 执行 put&quot;</span>);</span><br><span class="line">            blockArray[putptr] = element;</span><br><span class="line">            <span class="keyword">if</span> (++putptr == blockArray.length) &#123;</span><br><span class="line">                putptr = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">            notFull.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        Object data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">0</span> == count) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;take: takeptr == &quot;</span> + takeptr + <span class="string">&quot;，await&quot;</span>);</span><br><span class="line">                notFull.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;take: takeptr = &quot;</span> + takeptr + <span class="string">&quot;, 执行 take&quot;</span>);</span><br><span class="line">            data = blockArray[takeptr];</span><br><span class="line">            <span class="keyword">if</span> (++takeptr == blockArray.length) &#123;</span><br><span class="line">                takeptr = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            --count;</span><br><span class="line">            full.signal();</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 进程 </tag>
            
            <tag> lock锁 </tag>
            
            <tag> Condition 操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git push的一些总结</title>
      <link href="2016/08/07/git-push%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
      <url>2016/08/07/git-push%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>拉取并合并远程代码<br>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p><h3 id="1-拉取"><a href="#1-拉取" class="headerlink" title="1.拉取"></a>1.拉取</h3><p>git pull origin fast:master把远程的<br>next 分支 拉到 本 master。</p><h3 id="2-拉取到当前分支"><a href="#2-拉取到当前分支" class="headerlink" title="2.拉取到当前分支"></a>2.拉取到当前分支</h3><p>git pull origin fast<br>省略定法，表示拉取并合并自当前分支</p><h3 id="3-等价上面的操作"><a href="#3-等价上面的操作" class="headerlink" title="3.等价上面的操作"></a>3.等价上面的操作</h3><p>git fetch origin<br>git merge origin/fast</p><h3 id="4-手动建立跟踪"><a href="#4-手动建立跟踪" class="headerlink" title="4.手动建立跟踪"></a>4.手动建立跟踪</h3><p>跟踪不是只能跟踪 master，可以指定本地和远程不同的分支。<br>意义在于可以使用简化命令 git push/pull，而不需要显示指定的版本库。<br>git branch –set-upstream master origin/fast<br>git branch –set-upstream develop origin/develop</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git pull </tag>
            
            <tag> 用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对 list 中的相同数据进行分组</title>
      <link href="2016/07/09/%E7%AE%97%E6%B3%95-%E5%AF%B9%E5%90%8C%E4%B8%80%E7%BB%84list%E4%B8%AD%E7%9B%B8%E5%90%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84/"/>
      <url>2016/07/09/%E7%AE%97%E6%B3%95-%E5%AF%B9%E5%90%8C%E4%B8%80%E7%BB%84list%E4%B8%AD%E7%9B%B8%E5%90%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>同一组数据分组<br>需求：一个 list 里可能会有出现一个用户多条数据的情况。要把多条用户数据合并成一条。<br>思路：将相同的数据中可以进行确认是相同的数据，拿来做分组的 key，这样保证不会重。<br>实际中使用，以用户数据为例，可能用户名和身份证号是不会变的，用这两个条件拼接起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;liu big big&quot;</span>, <span class="string">&quot;123456789&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;liu big big&quot;</span>, <span class="string">&quot;987654321&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;su xiao xiao&quot;</span>, <span class="string">&quot;55555555&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        Map&lt;String, Set&lt;User&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            Set&lt;User&gt; userSet = map.get(user.getName());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == userSet) &#123;</span><br><span class="line">                userSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                userSet.add(user);</span><br><span class="line">                map.put(user.getName(), userSet);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                userSet.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keySet= map.keySet();</span><br><span class="line">        Iterator&lt;String&gt; it = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String key = it.next();</span><br><span class="line">            Set&lt;User&gt; user = map.get(key);</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[com.liukai.User@2dda6444]</span><br><span class="line">[com.liukai.User@79fc0f2f, com.liukai.User@50040f0c]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 分代的概念</title>
      <link href="2016/07/02/jvm--%E5%88%86%E4%BB%A3%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
      <url>2016/07/02/jvm--%E5%88%86%E4%BB%A3%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>堆，才有分代的概念。<br>堆，才有分代的概念。<br>堆，才有分代的概念。</p></blockquote><h2 id="分代"><a href="#分代" class="headerlink" title="分代"></a>分代</h2><p>JVM 将内存分为大致分为三个区域，1.8 前后有区别</p><p><img src="/2016/07/02/jvm--%E5%88%86%E4%BB%A3%E7%9A%84%E6%A6%82%E5%BF%B5/1.jpeg" alt="jvm"></p><h3 id="为什么要分代"><a href="#为什么要分代" class="headerlink" title="为什么要分代"></a>为什么要分代</h3><blockquote><p>不分代行不行</p></blockquote><p>不分代完全可以，但是分代的唯一理由是为了优化GC性能。<br>怎么优化？<br>如果不进行分代，每次GC都要把整片堆扫一遍来寻找垃圾对象，太慢。分代直接把对象创建到某一个分代区，这样GC就可以针对这一分代区域就行优化，就不费劲了。</p><h3 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代"></a>年轻代</h3><blockquote><p>eden、survivor、from、to</p></blockquote><p>年轻代分三个部分：</p><ol><li>Eden 区，即新生对象区，除大对象以外，新生对象都创建在这里。</li><li>Survivor 区，即幸存区，该区域又分两个空间<br>s0 和 s1 分别也叫 from 和 to，默认比例8:1。</li></ol><p><img src="/2016/07/02/jvm--%E5%88%86%E4%BB%A3%E7%9A%84%E6%A6%82%E5%BF%B5/2.png" alt="young"></p><h4 id="对象经历的过程"><a href="#对象经历的过程" class="headerlink" title="对象经历的过程"></a>对象经历的过程</h4><ol><li>新创建对象，分配到Eden区，除大对象特殊处理。</li><li>在 Eden 区经过一次GC后，如果仍存活，移到 Survivor。</li><li>在 Survivor 中又经历一次 GC，年龄会增加一岁。</li><li>年龄到一定程度，移到老年代。</li></ol><a id="more"></a><h4 id="年轻代使用什么GC算法"><a href="#年轻代使用什么GC算法" class="headerlink" title="年轻代使用什么GC算法"></a>年轻代使用什么GC算法</h4><blockquote><p>是复制算法。</p></blockquote><p>为什么选复制算法？<br>因为：年轻代中的80%以上的对象很快就死亡。<br>所以，在年轻代的垃圾回收算法使用的是复制算法。即，将内存分为两块，每次中使用其中一块（Eden 和 From），当一块使用完，则将还存活的对象复制到别一块上。复制算法不会产生碎片。</p><p><img src="/2016/07/02/jvm--%E5%88%86%E4%BB%A3%E7%9A%84%E6%A6%82%E5%BF%B5/3.jpeg" alt="复制算法"></p><h4 id="From-和-to-区的复制过程"><a href="#From-和-to-区的复制过程" class="headerlink" title="From 和 to 区的复制过程"></a>From 和 to 区的复制过程</h4><p>对上一节的说明，演示复制的过程：</p><ol><li>在 GC 开始的前，对象只会存在于 Eden区 和 From 区。为什么 From 区会有对象？</li><li>From区有对象很容易理解，开始发生 GC ,Eden 中的对象被复制到了 To 区中。</li></ol><p>而 From 中的对象只有两个结果：</p><ol><li>年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中。</li><li>没有到达的复制到 To 区中</li><li>这次 GC 后，Eden 和 From 被清空。此时，To 和 From 互相交换换角色，也就是说 To 变成 GC 前的 From，类推。</li></ol><p>到现在清楚了，为什么 From 中也会有对象，因为第一次发生GC时复制过到 To 区后，交换角色而来的。</p><h3 id="年轻代相关的JVM参数"><a href="#年轻代相关的JVM参数" class="headerlink" title="年轻代相关的JVM参数"></a>年轻代相关的JVM参数</h3><ol><li><code>-XX:NewSize和-XX:MaxNewSize</code>  用于设置年轻代的大小，建议设为整个堆大小的1/3或者1/4,两个值设为一样大。</li><li><code>-XX:SurvivorRatio</code><br>用于设置Eden和其中一个Survivor的比值，这个值也比较重要。</li><li><code>-XX:+PrintTenuringDistribution</code><br>这个参数用于显示每次Minor GC时Survivor区中各个年龄段的对象的大小。</li><li><code>-XX:InitialTenuringThreshol</code>和<code>-XX:MaxTenuringThreshold</code><br>用于设置晋升到老年代的对象年龄的最小值和最大值，每个对象在坚持过一次Minor GC之后，年龄就加1。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> 分代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wait-notify 实现生产者消费者模式</title>
      <link href="2016/06/11/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%BD%BF%E7%94%A8wait-notify%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/"/>
      <url>2016/06/11/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%BD%BF%E7%94%A8wait-notify%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>wait 和 nofity 在线程中的搭配使用，其实就是生产者消费者的一种应用。</p></blockquote><h2 id="一、为什么要有生产者消费者模式"><a href="#一、为什么要有生产者消费者模式" class="headerlink" title="一、为什么要有生产者消费者模式"></a>一、为什么要有生产者消费者模式</h2><p>在实际应使用多线程时，线程间的角色并不一完全一样的，有的线程负责生产数据，有的线程负责消费数据。所在就会有一种情况，就是： 生产者生产数据太快，消费者消费能力跟不上。</p><p>比较线程A 不断的new 对象，并将对象放到一个队列里，而线程B，不断的从队列里拿出数据进行逻辑操作。显然线程A new 对象这一操作会更快，如果一直持续下去内存有可能会被撑暴。</p><p>解决这个问题的思路之一就是：生产者-消费者模式</p><a id="more"></a><h2 id="二、wait、notify-简单应用示例"><a href="#二、wait、notify-简单应用示例" class="headerlink" title="二、wait、notify 简单应用示例"></a>二、wait、notify 简单应用示例</h2><h3 id="Wait-类"><a href="#Wait-类" class="headerlink" title="Wait 类"></a>Wait 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWaitTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleWaitTest</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        testMethod(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;testMethod begin &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">//1. 锁住自己</span></span><br><span class="line">                lock.wait();</span><br><span class="line">                System.out.println(<span class="string">&quot;testMethod be notify &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">//4.唤醒 wait 线程</span></span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="notify-类"><a href="#notify-类" class="headerlink" title="notify 类"></a>notify 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleNotifyTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleNotifyTest</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        syncMethod(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncMethod</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;syncMethod begin &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">//2.唤醒 wait 线程后 wait</span></span><br><span class="line">                lock.notify();</span><br><span class="line">                <span class="comment">//3.wait 住，等待唤醒</span></span><br><span class="line">                lock.wait();</span><br><span class="line">                System.out.println(<span class="string">&quot;syncMethod be notify &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-wait、notify"><a href="#测试-wait、notify" class="headerlink" title="测试 wait、notify"></a>测试 wait、notify</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by kayle on 2016/12/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SimpleWaitTest simpleWaitTest = <span class="keyword">new</span> SimpleWaitTest(object);</span><br><span class="line">        SimpleNotifyTest simpleNotifyTest = <span class="keyword">new</span> SimpleNotifyTest(object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(simpleWaitTest).start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(simpleNotifyTest).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、生产者消费者模式"><a href="#三、生产者消费者模式" class="headerlink" title="三、生产者消费者模式"></a>三、生产者消费者模式</h2><p>做用在于生产者执行完生产任务后，阻塞自己再唤醒消费者进行消费。是一种线程间的协作。<br>下面通过一个例子，打印奇偶数来看这一过程。</p><p>效果：交替打印奇数 和 偶数</p><p>1.设计</p><ol><li>生产类</li><li>消费类</li><li>公共标识符，独立于生产为 和 消费类</li></ol><p>为什么要分开生产类 和 消费类，因为如果业务相同的线程，使用线程池就可以完成，不需要这么麻烦，控制两个线程的频率。<br>两边代码几乎相同，不同的就是 flag 的初始值不相同，为了在程序启动时，一个线程先执行，别一个线程直接进行 wait 状态，等待唤醒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoThreadWaitNotify</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TwoThreadWaitNotify twoThread = <span class="keyword">new</span> TwoThreadWaitNotify();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> OuNum(twoThread));</span><br><span class="line">        t1.setName(<span class="string">&quot;线程-A&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> JiNum(twoThread));</span><br><span class="line">        t2.setName(<span class="string">&quot;线程-B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 偶数线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OuNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TwoThreadWaitNotify number;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OuNum</span><span class="params">(TwoThreadWaitNotify number)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (number.start &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TwoThreadWaitNotify.class) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;偶数线程抢到锁了&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (number.flag) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;偶数&quot;</span> + number.start);</span><br><span class="line">                        number.start++;</span><br><span class="line">                        number.flag = <span class="keyword">false</span>;</span><br><span class="line">                        TwoThreadWaitNotify.class.notify();</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            TwoThreadWaitNotify.class.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 奇数线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JiNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TwoThreadWaitNotify number;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JiNum</span><span class="params">(TwoThreadWaitNotify number)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (number.start &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TwoThreadWaitNotify.class) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;奇数线程抢到锁了&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!number.flag) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;奇数&quot;</span> + number.start);</span><br><span class="line">                        number.start++;</span><br><span class="line">                        number.flag = <span class="keyword">true</span>;</span><br><span class="line">                        TwoThreadWaitNotify.class.notify();</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            TwoThreadWaitNotify.class.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final 的一些总结</title>
      <link href="2016/06/02/java-final%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
      <url>2016/06/02/java-final%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>final 的含义是最终的、不可改变的。总结了一下 final 的一些规则。</p><ol><li>修饰”类”则类不能被继承，所以没有子类，final类中的方法默认是final的。可以提高效率。JDK中很多加final是这个原因的。编译期确认调哪个方法，所以更快。1.5以后这样做没有效果。</li><li>修饰”方法”则方法不能被重写,</li><li>修饰”成员变量”则变量不以被改变，即被修饰成了常量。只能被赋值一次。</li><li>不能修饰构造方法</li><li>父类中的private成员方法是不能被子类覆盖的，因为private类型的方法默认是隐式final类型的</li><li>final 的引用不能指向新的对象。</li><li>形参声明为 final，则方法内不能再改变其：<ol><li>基础数据类型值不可被修改</li><li>传入对象不能再被 new</li></ol></li><li>继承关系时，final 的方法将不会被子类重写。所以父类使用的仍是本类自己的方法。</li><li>final 类不可被继承。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> java </tag>
            
            <tag> final </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm 的局部变量表</title>
      <link href="2016/05/13/jvm-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8/"/>
      <url>2016/05/13/jvm-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。<br>Java中方法的局部变量是放在虚拟机栈的局部变量表里面，形参也算一个。本地变量表，就是局部变量表，只是翻译不同。代码说明</p></blockquote><p>运行时栈帧中存储了以下内容</p><ul><li>局部变量</li><li>操作数栈</li><li>动态链接</li><li>返回地址</li><li>附加信息</li></ul><p><img src="/2016/05/13/jvm-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8/局部变量表.jpg" alt="局部变量表"></p><p>每一个方法的调用开始和结束都是栈的压入(入栈)和弹出(出栈)的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] waste = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> new_var = <span class="number">0</span>;  </span><br><span class="line">    System.gc();  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>反编译得到：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;  </span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC      </span><br><span class="line">    Code:</span><br><span class="line">        stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span>  </span><br><span class="line">            0: ldc           #2                  // int 6291456   </span><br><span class="line">            <span class="number">2</span>: newarray       <span class="keyword">byte</span>  </span><br><span class="line">            <span class="number">4</span>: astore_1   </span><br><span class="line">            <span class="number">5</span>: iconst_0   </span><br><span class="line">            <span class="number">6</span>: istore_2   </span><br><span class="line">            7: invokestatic  #3                  // Method java/lang/System.gc:()V   </span><br><span class="line">            <span class="number">10</span>: <span class="keyword">return</span> </span><br></pre></td></tr></table></figure><br>结果：<code>locals=3</code><br>也就是说局部变量表长度是3.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 局部变量表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有状态和无状态对象</title>
      <link href="2016/04/02/java--%E6%9C%89%E7%8A%B6%E6%80%81%E5%92%8C%E6%97%A0%E7%8A%B6%E6%80%81%E5%AF%B9%E8%B1%A1/"/>
      <url>2016/04/02/java--%E6%9C%89%E7%8A%B6%E6%80%81%E5%92%8C%E6%97%A0%E7%8A%B6%E6%80%81%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>这个概念在多线程中一直被提及，实际上很简单。<br>1.有状态就是有<code>数据存储功能</code>。<code>有状态对象(Stateful Bean)</code>，就是有实例变量的对象，可以保存数据，是<code>非线程安全</code>的。在不同方法调用间不保留任何状态。</p><p>2.无状态就是一次操作，<code>不能保存数据</code>。<code>无状态对象(Stateless Bean)</code>，就是<code>没有实例变量的对象</code>，不能保存数据，是不变类，是线程安全的。</p><p>3.引用无状态的对象，则自己也可以是线程安全的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class StatelessBeanService &#123;   </span><br><span class="line">    &#x2F;&#x2F; 虽然有billDao属性，但billDao是没有状态信息的，是Stateless Bean.  </span><br><span class="line">    BillDao billDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 对象 </tag>
            
            <tag> 有状态 </tag>
            
            <tag> 无状态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式--静态代理模式</title>
      <link href="2015/11/13/design--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>2015/11/13/design--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><h4 id="静态代理的条件至少有三个角色："><a href="#静态代理的条件至少有三个角色：" class="headerlink" title="静态代理的条件至少有三个角色："></a>静态代理的条件至少有三个角色：</h4><ol><li>真实角色(RealObject)</li><li>代理角色(ProxyObject)</li><li>接口这三个(AbstractObject)</li></ol><h3 id="要求"><a href="#要求" class="headerlink" title="要求:"></a>要求:</h3><ol><li>真实角色与代理角色实现相同的接口。</li><li>代理类要持有真实角色的引用。<br>重点：真实角色、代理角色、接口的关系。代理接口实际上是抽象出所有真实角色的共有方法。</li></ol><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><p>1.创建真实角色<br>2.创建代理角色<br>3.代理角色.方法()。</p><p>注意：代理模式是要让代理类来使用委托类，所以是通过 new 代理类，在代理类中使用委托类，有点像回调函数的用法。</p><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述：测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015年11月13日 下午3:47:33 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServiceImpl serviceImpl = <span class="keyword">new</span> ServiceImpl();</span><br><span class="line">        IService iService = (IService) Proxy.getInstance(serviceImpl);</span><br><span class="line">        iService.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述：代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015年11月13日 下午3:47:19 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IService iService;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(IService iService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iService = iService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy.say()&quot;</span>);</span><br><span class="line">        iService.say();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IService <span class="title">getInstance</span><span class="params">(ServiceImpl object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Proxy(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述：实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015年11月13日 下午3:47:27 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">IService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServiceImpl.say()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述：接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015年11月13日 下午3:47:06 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态代理类优缺点"><a href="#静态代理类优缺点" class="headerlink" title="静态代理类优缺点"></a>静态代理类优缺点</h3><h4 id="优点：业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。"><a href="#优点：业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。" class="headerlink" title="优点：业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。"></a>优点：业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。</h4><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>1）代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。<br>2）如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。 </p>]]></content>
      
      
      <categories>
          
          <category> design </category>
          
          <category> proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 代理模式 </tag>
            
            <tag> 静态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-启动Nameserver</title>
      <link href="2015/10/29/RocketMQ-%E5%90%AF%E5%8A%A8Nameserver/"/>
      <url>2015/10/29/RocketMQ-%E5%90%AF%E5%8A%A8Nameserver/</url>
      
        <content type="html"><![CDATA[<p>1.启动 nameserver<br>指定输出日志位置，未指定则目志在当前目录下：<br>nohup sh mqnamesrv &gt; ~/logs/rocketmqlogs/namesrv.log 2&gt;&amp;1 &amp;</p><p>//ubuntu 下加 sudo 反而报错。最简单的命令：<br>nohup sh mqnamesrv &amp;</p><p>内存不足处理：<br>nameserver 内存不足时修改 runserver.sh，测试管用<br>JAVA_OPT=”${JAVA_iOPT} -server -Xms512m -Xmx512m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=256m”</p><p>3.验证启动成功<br>jobs 或 jps            //查看启动情况<br>NamesrvStartup           //nameserver 启动<br>BrokerStartup          //broker 启动<br>nohup.out        //未指定日志文件输出位置，则生成到执行 nohup 的当前目录下</p>]]></content>
      
      
      <categories>
          
          <category> rocketMQ </category>
          
          <category> nameserver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> Nameserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse+tomcat的问题能启动，但量不能访问</title>
      <link href="2015/10/06/eclipse-tomcat-start-question/"/>
      <url>2015/10/06/eclipse-tomcat-start-question/</url>
      
        <content type="html"><![CDATA[<p>今天还发现了一种情况tomcat起不来，配置是默认的，就是下面两张图的第一张图的配置。但是就是起不来，原因是web.xml配置有问题也会出现这种情况。</p><p>如果，按钮是灰的不能选择，那就把包含的项目先删掉，再clean一下就可以。</p><p>原来的解决方法：<br>tomcat启动了但是却访问不了是因为：<br><img src="/2015/10/06/eclipse-tomcat-start-question/1.png" alt="原来配置"><br>改成以下即可：<br><img src="/2015/10/06/eclipse-tomcat-start-question/2.png" alt="原来配置"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法--学习算法很简单</title>
      <link href="2015/08/23/%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
      <url>2015/08/23/%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>很多非科班和科班的朋友看到算法就头疼，因为这东西学起来困难，也不常用，唯二的两个做用，面试和装B，一个能赚钱，一个能爽，但是学习路线太过陡峭，不是不想学，而是感觉入地无门。<br>其实凡事都有技巧，难是因为不够了解它，就好像追不到女孩子其实不是你不够好，而是你不够了解对方。<br>当然，开篇严肃一些，后面会慢慢把一些不容易理解的，化繁为简，包教包会，不会不退学费，本来也没人给我钱^.^。</p><h2 id="一、数据结构和算法"><a href="#一、数据结构和算法" class="headerlink" title="一、数据结构和算法"></a>一、数据结构和算法</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>是计算机存储、组织数据的方式。<br>数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。<br>通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。<br>数据结构往往同高效的检索算法和索引技术有关。<br><a id="more"></a></p><p>数据结构在计算机科学界至今没有标准的定义。<br>个人根据各自的理解的不同而有不同的表述方法：<br>Sartaj Sahni在他的《数据结构、算法与应用》一书中称：<br>“数据结构是数据对象，以及存在于该对象的实例合组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。”<br>他将数据对象（data object）定义为”一个数据对象是实例或值的集合”。<br>Clifford A.Shaffer在《数据结构与算法分析》一书中的定义是：”数据结构是 ADT（抽象数据类型Abstract Data Type） 的物理实现。”<br>例如数组、集合、栈、队列、树、图都是数据结构。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>是在有限步骤内求解某一问题所使用的一组定义明确的规则。<br>通俗点说，就是计算机解题的过程。在这个过程中，无论是形成解题思路还是编写程序，都是在实施某种算法。前者是推理实现的算法，后者是操作实现的算法。<br>一个算法应该具有以下五个重要的特征：</p><ol><li>有穷性： 一个算法必须保证执行有限步之后结束；</li><li>确切性： 算法的每一步骤必须有确切的定义；</li><li>输入：一个算法有0个或多个输入，以刻画运算对象的初始情况，所谓0个输入是指算法本身定除了初始条件；</li><li>输出：一个算法有一个或多个输出，以反映对输入数据加工后的结果。没有输出的算法是毫无意义的；</li><li>可行性： 算法原则上能够精确地运行，而且人们用笔和纸做有限次运算后即可完成。</li></ol><h2 id="二、问题规模"><a href="#二、问题规模" class="headerlink" title="二、问题规模"></a>二、问题规模</h2><p>就是所要解决的问题，它的规模。<br>1+2+3 是一个规模<br>1+2+3…+10 是一个规模<br>问题规模与核心操作次数，决定了这个算法的复杂度。</p><h2 id="三、时间复杂度-和-空间复杂度"><a href="#三、时间复杂度-和-空间复杂度" class="headerlink" title="三、时间复杂度 和 空间复杂度"></a>三、时间复杂度 和 空间复杂度</h2><p>这两个概念应该是很多非科班出身的程序员最难理解的，网上很多文章都讲的太云里雾里，其实没有那么难，化繁为简的讲明白才有用。<br>这两个概念就是的意义是什么才是关键，后面专门去说这两个概念。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List分组</title>
      <link href="2015/07/22/java--List%E5%88%86%E7%B1%BB%E7%AE%97/"/>
      <url>2015/07/22/java--List%E5%88%86%E7%B1%BB%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>对一个 List 里面相同属性的内容进行分类，如：对相同部门的员工进行分类。<br>思路是使可以区分类型的属性进行分类，以部门类型为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Devloper&gt; devlopers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">1</span>, <span class="string">&quot;嗯哼&quot;</span>, <span class="number">1</span>));</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">2</span>, <span class="string">&quot;啊哈&quot;</span>, <span class="number">1</span>));</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">3</span>, <span class="string">&quot;哦吼&quot;</span>, <span class="number">1</span>));</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">4</span>, <span class="string">&quot;呃呵&quot;</span>, <span class="number">2</span>));</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">5</span>, <span class="string">&quot;呜唿&quot;</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, List&lt;Devloper&gt;&gt; devloperMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Devloper devloper: devlopers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (devloperMap.containsKey(devloper.getDept())) &#123;</span><br><span class="line">        devloperMap.get(devloper.getDept()).add(devloper);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        List&lt;Devloper&gt; devs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        devs.add(devloper);</span><br><span class="line">        devloperMap.put(devloper.getDept(), devs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a><strong>结果：</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">1=[</span><br><span class="line">    Devloper&#123;id=1, name=&#x27;嗯哼&#x27;, dept=1&#125;, </span><br><span class="line">    Devloper&#123;id=2, name=&#x27;啊哈&#x27;, dept=1&#125;, </span><br><span class="line">    Devloper&#123;id=3, name=&#x27;哦吼&#x27;, dept=1&#125;</span><br><span class="line">    ], </span><br><span class="line">2=[</span><br><span class="line">    Devloper&#123;id=4, name=&#x27;呃呵&#x27;, dept=2&#125;, </span><br><span class="line">    Devloper&#123;id=5, name=&#x27;呜唿&#x27;, dept=2&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>console 的一些常用命令</title>
      <link href="2015/06/14/linux-console%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2015/06/14/linux-console%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>linux 的命令行用了这么久的 linux 才开始整理这部分的内容，该罚站</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctrl + w    #往回删除一个单词，光标放在最末尾</span><br><span class="line"></span><br><span class="line">ctl + u     #删除光标以前的字符，其实这个是剪切</span><br><span class="line">ctl + k     #删除光标以后的字符</span><br><span class="line"></span><br><span class="line">ctrl + y    #粘贴由 ctrl+u 和 ctrl+w 剪走的单词</span><br><span class="line">ctrl + d    #从当前位置开始，向右边删除字符</span><br></pre></td></tr></table></figure><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl + l    #清屏</span><br><span class="line">ctrl + c    #另起一行</span><br></pre></td></tr></table></figure><h3 id="光标位置"><a href="#光标位置" class="headerlink" title="光标位置"></a>光标位置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctl + a     #移动光标至的字符头</span><br><span class="line">ctl + e     #移动光标至的字符尾</span><br><span class="line">ctrl + ?    #撤消前一次输入</span><br><span class="line"></span><br><span class="line">ctrl + s 锁住终端    #实际上只是不显示字符而已，命令照样执行。</span><br><span class="line">ctrl + q 解锁终端</span><br></pre></td></tr></table></figure><h3 id="历史和命令"><a href="#历史和命令" class="headerlink" title="历史和命令"></a>历史和命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl + r    #输入单词搜索历史命令，超好用</span><br><span class="line">ctrl + o    #重复执行命令</span><br></pre></td></tr></table></figure><h3 id="屏幕输出"><a href="#屏幕输出" class="headerlink" title="屏幕输出"></a>屏幕输出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+S      #暂停屏幕输出</span><br><span class="line">Ctrl+Q      #继续屏幕输出</span><br></pre></td></tr></table></figure><h3 id="上下翻屏"><a href="#上下翻屏" class="headerlink" title="上下翻屏"></a>上下翻屏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个是找了N久才查到的命令</span><br><span class="line">shift + pageUp/pageDown        #纯linux console 下测试有效，但不能一翻到顶，网上说只能翻最近15页</span><br><span class="line">shift + home/end               #只有 xshell 下可用</span><br><span class="line">shift + 上/下                  #xshell 下可用</span><br></pre></td></tr></table></figure><h3 id="连续执行命令"><a href="#连续执行命令" class="headerlink" title="连续执行命令"></a>连续执行命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo commond 1 ; echo commond 1   #用 ; 分隔,不论前面成功失败，每条都会执行</span><br><span class="line">commond 1 &amp;&amp; commond 1        #第一条成功则后面执行</span><br><span class="line">commond 1 || commond 1        #第一条失败，才执行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
          <category> console </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> console </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>network--网络概念--冲突域</title>
      <link href="2015/05/31/network-%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5-%E5%86%B2%E7%AA%81%E5%9F%9F/"/>
      <url>2015/05/31/network-%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5-%E5%86%B2%E7%AA%81%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="冲突域-collision-domain"><a href="#冲突域-collision-domain" class="headerlink" title="冲突域 collision domain"></a>冲突域 collision domain</h3><blockquote><p>核心：冲突域是在同一个网络上两个比特同时进行传输则会产生冲突；</p></blockquote><p>先说人话：多N台计算机使连接在同一个集线器设备中，并同时往集线器发送数据要通过这个设备出去，但是这个设备同一时间内只能发送一个计算机的数据，所以会产生冲突。(便宜货就是问题多)</p><h4 id="1-简述"><a href="#1-简述" class="headerlink" title="1.简述"></a>1.简述</h4><p>冲突域是在同一个网络上两个比特同时进行传输则会产生冲突；在网路内部数据分组所产生与发生冲突的这样一个区域称为冲突域，</p><p>所有的共享介质环境都是一个冲突域，在共享介质环境中一定类型的冲突域是正常行为。总的来说,冲突域就是连接在同一导线上的所有工作站的集合,或者说是同一物理网段上所有节点的集合,或以太网上竞争同一带宽的节点集合.<br>一个交换机的端口就是一个冲突域。交换机本身就是一个冲突域，只不过，能隔离广播包。<br>物理原因：因为集线器这种设备比较低端，在交互机还没有出现的时候，使用集线器，集线器不具有路由选择功能，只是将接收到的数据以广播的形工发出，会产生广播风暴。</p><h4 id="2-为什么会有冲突"><a href="#2-为什么会有冲突" class="headerlink" title="2.为什么会有冲突"></a>2.为什么会有冲突</h4><p>如果同一时刻有两台设备试图传输数据，将导致冲突，而这两台设备必须分别重传数据，因此效率不高!这种情形通常出现在使用集线器的网络环境中一一与某个集线器相连的所有主机都属于同一个冲突域，且属于同一个广播域。与此相反，交换机的每个端口都是一个独立的冲突域。(也就是说，一个端口一个冲突域，这样就隔离了冲突域？)</p><p>集线器连接的计算机设备是冲突域，集线只能做连接，没有罗辑分段的功能。</p><p>一个使用集线器连接的基本 LAN 网络，它实际上只有一个冲突域和一个广播域。</p><p>所以，如果一个交换机的端口上没有连接使用了集线器的网络，那么一个端口一般只连接一台主机，那就没有冲突的可能了，就算使用了集线器的网络也没关系，如果发生了冲突，则不往外广播冲突包，冲突就在冲突域端口内部自行转发就完事了。</p>]]></content>
      
      
      <categories>
          
          <category> network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-NameServer原理</title>
      <link href="2015/04/17/RocketMQ-%E4%B8%BB%E8%A6%81%E8%A7%92%E8%89%B22-NameServer/"/>
      <url>2015/04/17/RocketMQ-%E4%B8%BB%E8%A6%81%E8%A7%92%E8%89%B22-NameServer/</url>
      
        <content type="html"><![CDATA[<h2 id="NameServer-名字服务"><a href="#NameServer-名字服务" class="headerlink" title="NameServer 名字服务"></a>NameServer 名字服务</h2><blockquote><p>实际作就是就一个注册中心</p></blockquote><h3 id="NameServer-作用"><a href="#NameServer-作用" class="headerlink" title="NameServer 作用"></a>NameServer 作用</h3><p>在系统中肯定是做命名服务，服务治理方面的工作，功能应该是和zookeeper差不多<br>早期的版本中，使用的是 Zookeeper 做为配置中心，改名 RocketMQ 后使用了自己开发的 NameServer。<br>是一个几乎无状态的节点，可集群部署，节点之间无任何信息同步</p><p>两个主要做用</p><ol><li><strong>NameServer维护Broker</strong><br>NameServer 维护了一份 Broker 的地址列表和 Broker 在启动的时候会去 NameServer 进行注册，会维护 Broker 的存活状态。</li><li><p><strong>NameServer 维护Topic</strong><br>NameServer 维护了一份 Topic 和 Topic 对应队列的地址列表，Broker 每次发送的心跳过来的时候会把 Topic 信息带上。</p><p>producer、consumer 发送消息会去 NameServer 去拉取路由信息</p></li></ol><p><img src="/2015/04/17/RocketMQ-%E4%B8%BB%E8%A6%81%E8%A7%92%E8%89%B22-NameServer/nameserver结构.png" alt="nameserver结构"></p><h3 id="NameServer-维护-Broker"><a href="#NameServer-维护-Broker" class="headerlink" title="NameServer 维护 Broker"></a>NameServer 维护 Broker</h3><p><strong>1.维护 Broker 信息</strong><br>broker 启动后，会连接到 NameServer，定期上报自身信息，NameServer 收到消息后会每 30秒 扫描一次所有已上报的 Broker 信息的心跳。<br>NameServer与每台Broker保持长连接，并间隔30S检测Broker是否存活，如果检测到Broker宕机，则从路由注册表中删除。<br>注意：<br>但是路由变化不会马上通知消息生产者Producer。<br>这样设计的目的是为了降低 NameServer 实现的复杂度，在消息发送端提供容错机制保证消息发送的可用性。</p><p><strong>2.判断 broker 失效</strong><br>以 NameServer自身 broker列表中的broker的更新时间，当前时间与最后更新时间差值超过2分钟，就判定为失效，移除失效 broker。这个后面带上源码分析。</p><p><strong>3.无状态性</strong><br>NameServer本身的高可用是通过部署多台NameServer来实现，但彼此之间不通讯，也就是NameServer服务器之间在某一个时刻的数据并不完全相同，但这对消息发送并不会造成任何影响，这也是NameServer设计的一个亮点</p><p>特点：</p><ol><li>互相独立，彼此没有通信关系，单台nameserver挂掉，不影响其他nameserver，即使全部挂掉，也不影响业务系统使用，这点类似于dubbo的zookeeper。</li><li>nameserver不会有频繁的读写，所以性能开销非常小，稳定性很高。</li></ol><p><strong>Broker</strong> 启动的时候会将自己注册到 NameServer 中，注册的同时还会将 Broker 的 IP 地址、端口相关的数据，以及保存在 Broker 中的 RocketMQ 集群路由的数据一并跟随<strong>心跳</strong>发送到 NameServer。这里的<strong>路由信息</strong>是指 Topic 下的 MessageQueue 分别都在哪台 Broker 上。</p><p>从代码是了解这一过程</p><p><strong>registerBroker</strong> 是<code>broker</code>注册、维护的主要逻辑，主要的几个集合：</p><ul><li><code>topicQueueTable</code> topic和broker对应关系</li><li><code>brokerAddrTable</code> broker信息</li><li><code>clusterAddrTable</code> 集群信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理 broker 相关事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteInfoManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);</span><br><span class="line">    <span class="comment">//broker 超时时间设置 120 秒，就是这个指定的，没有发现有给api修改</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> BROKER_CHANNEL_EXPIRED_TIME = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="comment">// topic 路由表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String<span class="comment">/* topic */</span>, List&lt;QueueData&gt;&gt; topicQueueTable;</span><br><span class="line">    <span class="comment">// broker 信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String<span class="comment">/* brokerName */</span>, BrokerData&gt; brokerAddrTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册 broker</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RegisterBrokerResult <span class="title">registerBroker</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String clusterName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String brokerAddr,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String brokerName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">long</span> brokerId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String haServerAddr,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> TopicConfigSerializeWrapper topicConfigWrapper,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> List&lt;String&gt; filterServerList,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> Channel channel)</span> </span>&#123;</span><br><span class="line">        RegisterBrokerResult result = <span class="keyword">new</span> RegisterBrokerResult();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.lock.writeLock().lockInterruptibly();</span><br><span class="line">                <span class="comment">//集群名称</span></span><br><span class="line">                Set&lt;String&gt; brokerNames = <span class="keyword">this</span>.clusterAddrTable.get(clusterName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == brokerNames) &#123;</span><br><span class="line">                    <span class="comment">//如果没有拿到 broker名，broker就用 clusterName</span></span><br><span class="line">                    brokerNames = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">                    <span class="keyword">this</span>.clusterAddrTable.put(clusterName, brokerNames);</span><br><span class="line">                &#125;</span><br><span class="line">                brokerNames.add(brokerName);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> registerFirst = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//brokerData 数据，第一次注册，并没有数据</span></span><br><span class="line">                BrokerData brokerData = <span class="keyword">this</span>.brokerAddrTable.get(brokerName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == brokerData) &#123;</span><br><span class="line">                    registerFirst = <span class="keyword">true</span>;</span><br><span class="line">                    brokerData = <span class="keyword">new</span> BrokerData(clusterName, brokerName, <span class="keyword">new</span> HashMap&lt;Long, String&gt;());</span><br><span class="line">                    <span class="keyword">this</span>.brokerAddrTable.put(brokerName, brokerData);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//key 是 0-n</span></span><br><span class="line">                Map&lt;Long, String&gt; brokerAddrsMap = brokerData.getBrokerAddrs();</span><br><span class="line">                <span class="comment">//Switch slave to master: first remove &lt;1, IP:PORT&gt; in namesrv, then add &lt;0, IP:PORT&gt;</span></span><br><span class="line">                <span class="comment">//The same IP:PORT must only have one record in brokerAddrTable</span></span><br><span class="line">                <span class="comment">//slave 切换到 master：删除1，再将slave改为0，add到brokerAddrTable</span></span><br><span class="line">                Iterator&lt;Entry&lt;Long, String&gt;&gt; it = brokerAddrsMap.entrySet().iterator();</span><br><span class="line">                <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                    Entry&lt;Long, String&gt; item = it.next();</span><br><span class="line">                    <span class="comment">//brokerAddr 申请注册的 broker</span></span><br><span class="line">                    <span class="comment">//去重，找到 IP:PORT 只允许一条存在，如果 IP:PORT 存在，ID不同，删除这一条</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != brokerAddr &amp;&amp; brokerAddr.equals(item.getValue()) &amp;&amp; brokerId != item.getKey()) &#123;</span><br><span class="line">                        it.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//上面删完，这里add进去，可以理解成更新操作</span></span><br><span class="line">                String oldAddr = brokerData.getBrokerAddrs().put(brokerId, brokerAddr);</span><br><span class="line">                registerFirst = registerFirst || (<span class="keyword">null</span> == oldAddr);<span class="comment">//返回旧值</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//处理 topic 的配置修改，如果是master，开发中topic经常会调整</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != topicConfigWrapper</span><br><span class="line">                    &amp;&amp; MixAll.MASTER_ID == brokerId) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.isBrokerTopicConfigChanged(brokerAddr, topicConfigWrapper.getDataVersion())</span><br><span class="line">                        || registerFirst) &#123;</span><br><span class="line">                        ConcurrentMap&lt;String, TopicConfig&gt; tcTable =</span><br><span class="line">                            topicConfigWrapper.getTopicConfigTable();</span><br><span class="line">                        <span class="keyword">if</span> (tcTable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (Map.Entry&lt;String, TopicConfig&gt; entry : tcTable.entrySet()) &#123;</span><br><span class="line">                                <span class="keyword">this</span>.createAndUpdateQueueData(brokerName, entry.getValue());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 省略部分代码</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.lock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;registerBroker Exception&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>topic 队列和 broker 的对应关系</strong></p><p>一个topic默认会有<code>16个队列(queue)</code>，队列(queue)会分布在<code>不同的broker</code> 上</p><p><img src="/2015/04/17/RocketMQ-%E4%B8%BB%E8%A6%81%E8%A7%92%E8%89%B22-NameServer/topic-queue分布.png" alt="topic-queue分布"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建、更新队列 brokerName 和 queue 的对应关系</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createAndUpdateQueueData</span><span class="params">(<span class="keyword">final</span> String brokerName, <span class="keyword">final</span> TopicConfig topicConfig)</span> </span>&#123;</span><br><span class="line">    QueueData queueData = <span class="keyword">new</span> QueueData();</span><br><span class="line">    queueData.setBrokerName(brokerName);</span><br><span class="line">    <span class="comment">//默认16</span></span><br><span class="line">    queueData.setWriteQueueNums(topicConfig.getWriteQueueNums());</span><br><span class="line">    <span class="comment">//默认16</span></span><br><span class="line">    queueData.setReadQueueNums(topicConfig.getReadQueueNums());</span><br><span class="line">    queueData.setPerm(topicConfig.getPerm());</span><br><span class="line">    queueData.setTopicSynFlag(topicConfig.getTopicSysFlag());</span><br><span class="line"></span><br><span class="line">    List&lt;QueueData&gt; queueDataList = <span class="keyword">this</span>.topicQueueTable.get(topicConfig.getTopicName());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == queueDataList) &#123;</span><br><span class="line">        queueDataList = <span class="keyword">new</span> LinkedList&lt;QueueData&gt;();</span><br><span class="line">        queueDataList.add(queueData);</span><br><span class="line">        <span class="keyword">this</span>.topicQueueTable.put(topicConfig.getTopicName(), queueDataList);</span><br><span class="line">        log.info(<span class="string">&quot;new topic registered, &#123;&#125; &#123;&#125;&quot;</span>, topicConfig.getTopicName(), queueData);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> addNewOne = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;QueueData&gt; it = queueDataList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            QueueData qd = it.next();</span><br><span class="line">            <span class="comment">//绑定队列对应的 brokerName</span></span><br><span class="line">            <span class="comment">//比如 broker1  TopicA---queue1</span></span><br><span class="line">            <span class="comment">//                      queue2</span></span><br><span class="line">            <span class="comment">//                      queue3</span></span><br><span class="line">            <span class="comment">//                      queue4</span></span><br><span class="line">            <span class="keyword">if</span> (qd.getBrokerName().equals(brokerName)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (qd.equals(queueData)) &#123;</span><br><span class="line">                    addNewOne = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic changed, &#123;&#125; OLD: &#123;&#125; NEW: &#123;&#125;&quot;</span>, topicConfig.getTopicName(), qd,</span><br><span class="line">                        queueData);</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (addNewOne) &#123;</span><br><span class="line">            queueDataList.add(queueData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rocketMQ </category>
          
          <category> nameserver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NameServer原理 </tag>
            
            <tag> RocketMQ原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-Broker</title>
      <link href="2015/04/16/RocketMQ-%E4%B8%BB%E8%A6%81%E8%A7%92%E8%89%B21-Broker/"/>
      <url>2015/04/16/RocketMQ-%E4%B8%BB%E8%A6%81%E8%A7%92%E8%89%B21-Broker/</url>
      
        <content type="html"><![CDATA[<p>消息中转角色。<br>负责存储消息，转发消息。<br>一般也称为 Server。在JMS规范中称为 Provider。<br>两两一组，四个，两主两从。<br>Master 才是干活的</p><p>Broker 几个关键点：</p><ol><li>负载均衡</li><li>可用性</li></ol><h2 id="1-负载均衡"><a href="#1-负载均衡" class="headerlink" title="1.负载均衡"></a>1.负载均衡</h2><ol><li>一个topic分布在多个broker上，一个broker可以配置多个topic，它们是多对多的关系。</li><li>如果某个topic消息量很大，应该给它多配置几个队列，并且尽量多分布在不同broker上，减轻某个broker的压力。</li><li>topic消息量都比较均匀的情况下，如果某个broker上的队列越多，则该broker压力越大。</li></ol><h2 id="2-可用性"><a href="#2-可用性" class="headerlink" title="2.可用性"></a>2.可用性</h2><p>由于消息分布在各个broker上，一旦某个broker宕机，则该broker上的消息读写都会受到影响。所以rocketmq提供了master/slave的结构，salve定时从master同步数据，如果master宕机，则slave提供消费服务，但是不能写入消息，此过程对应用透明，由rocketmq内部解决。</p>]]></content>
      
      
      <categories>
          
          <category> rocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rocketmq </tag>
            
            <tag> broker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ安装</title>
      <link href="2015/04/09/RocketMQ-RocketMQ%E5%AE%89%E8%A3%85/"/>
      <url>2015/04/09/RocketMQ-RocketMQ%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>包推荐使用 git 直接拉下来。没装 git 就 wget 去拉。需要 maven 来编译 rocketmq，实际上只要装好 maven 即可，其他不用操作 maven。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>安装 JDK，配置 JAVA_HOME，yum 方式安装的JDK也要配轩JAVA_HOME。</li><li>安装 maven。因为编译需要 maven，先配置MAVEN_HOME，否则执行 sh install.sh 不起作用</li><li>默认最少4G内存，需要最少2G SWAP 内存，内存不够则修改默认内存小于本机内存，不然一直报错</li><li>内存不够的话，直接看下面的修改内存</li></ol><h4 id="测试安装环境"><a href="#测试安装环境" class="headerlink" title="测试安装环境"></a>测试安装环境</h4><ol><li>centOS 6.5</li><li>1G 内存</li><li>RocketMQ 3.4.6</li></ol><p>编译和安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install.sh &#x2F;&#x2F;在 mq 的根目录 下</span><br></pre></td></tr></table></figure><p>说明：<br>安装完成后，因为 install.sh  脚本中创建 devenv 符号链接写错了目录，需要在RocketMQ目录下执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf devenv</span><br><span class="line">&#x2F;&#x2F;删除错误的 devenv 目录ln -s target&#x2F;alibaba-rocketmq-broker&#x2F;alibaba-rocketmq devenv  &#x2F;&#x2F;搞了两天问题就在这里，坑坑坑坑</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rocketmq </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-架构设计</title>
      <link href="2015/04/01/RocketMQ-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
      <url>2015/04/01/RocketMQ-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>架构设计分为：1.技术架构，2.部署架构</p></blockquote><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><ol><li><strong>技术架构</strong></li><li><strong>部署架构</strong></li></ol><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><p>学习一个技术，从最开始建立概念开始，先看架构图<br>怎么理解这个图？<br>这个图画出4个重要解色 和 消息的发送、保存、消费的大流程。</p><p>整个消息流转的过程中，有4个重要的角色负责：</p><ol><li>Producer</li><li>NameServer</li><li>BrokerServer</li><li>Consumer</li></ol><p><img src="/2015/04/01/RocketMQ-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/rocketmq_architecture_1.png" alt="rocketmq_architecture"></p><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>消息发布的角色，支持分布式集群方式部署。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>消息消费的角色，支持分布式集群方式部署。支持以push推，pull拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。</p><h3 id="NameServer"><a href="#NameServer" class="headerlink" title="NameServer"></a>NameServer</h3><p>NameServer是一个非常简单的Topic路由注册中心，其角色类似Dubbo中的zookeeper，支持Broker的动态注册与发现。主要包括两个功能：Broker管理，NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活；路由信息管理，每个NameServer将保存关于Broker集群的整个路由信息和用于客户端查询的队列信息。然后Producer和Conumser通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费。NameServer通常也是集群的方式部署，各实例间相互不进行信息通讯。Broker是向每一台NameServer注册自己的路由信息，所以每一个NameServer实例上面都保存一份完整的路由信息。当某个NameServer因某种原因下线了，Broker仍然可以向其它NameServer同步其路由信息，Producer,Consumer仍然可以动态感知Broker的路由的信息。</p><h3 id="BrokerServer"><a href="#BrokerServer" class="headerlink" title="BrokerServer"></a>BrokerServer</h3><p>Broker是一个非常重要组件，在实际应用当中是调优的重点。<br>Broker主要负责消息的存储、投递和查询以及服务高可用保证，为了实现这些功能，Broker包含了以下几个重要子模块。</p><ul><li><strong>Remoting Module</strong>：整个Broker的实体，负责处理来自clients端的请求。</li><li><strong>Client Manager</strong>：负责管理客户端(Producer/Consumer)和维护Consumer的Topic订阅信息</li><li><strong>Store Service</strong>：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。</li><li><strong>HA Service</strong>：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。</li><li><strong>Index Service</strong>：根据特定的Message key对投递到Broker的消息进行索引服务，以提供消息的快速查询。</li></ul><h4 id="BrokerServer-消息处理"><a href="#BrokerServer-消息处理" class="headerlink" title="BrokerServer 消息处理"></a>BrokerServer 消息处理</h4><p>Producer–&gt;BrokerServer–&gt;Consumer</p><p><img src="/2015/04/01/RocketMQ-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/rocketmq_architecture_2.png" alt="borker消息请求"></p><p>理解这几个角色，在后续学习中有重要帮助。</p><h2 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h2><p>部署架构的重点在重要组件的部署流程和细节</p><h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><p>从部署的架构出发，看整体部署流程</p><ol><li>NameServer启动</li><li>Broker启动</li><li>Producer发送消息</li><li>Consumer消费消息</li></ol><p><img src="/2015/04/01/RocketMQ-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/rocketmq_architecture_3.png" alt="borker消息请求"></p><p>结合部署架构图，描述集群工作流程：</p><ul><li><strong>启动NameServer</strong>，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。</li><li><strong>启动Broker</strong>，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。<br>收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。</li><li><strong>Producer发送消息</strong>，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。</li><li><strong>Consumer消费消息</strong>，跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息。</li></ul><h3 id="部署特点"><a href="#部署特点" class="headerlink" title="部署特点"></a>部署特点</h3><ul><li><p><strong>NameServer: </strong>是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。</p></li><li><p><strong>Broker</strong>: 部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave 的对应关系通过指定相同的BrokerName，不同的BrokerId 来定义，BrokerId为0表示Master，非0表示Slave。<br>Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。<br>注意：当前RocketMQ版本在部署架构上支持一Master多Slave，但只有BrokerId=1的从服务器才会参与消息的读负载。</p></li><li><p><strong>Producer</strong>: 与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic 服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署。</p></li><li><p><strong>Consumer</strong>: 与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，消费者在向Master拉取消息时，Master服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读I/O），以及从服务器是否可读等因素建议下一次是从Master还是Slave拉取。</p></li></ul><h2 id="官方地址"><a href="#官方地址" class="headerlink" title="官方地址"></a>官方地址</h2><p>Github: <a href="https://github.com/apache/rocketmq">https://github.com/apache/rocketmq</a><br>Apache RocketMQ: <a href="https://rocketmq.apache.org/">https://rocketmq.apache.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> rocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NameServer </tag>
            
            <tag> 架构设计 </tag>
            
            <tag> Broker </tag>
            
            <tag> Producer </tag>
            
            <tag> Consumer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-消息存储设计</title>
      <link href="2015/03/30/RocketMQ-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/"/>
      <url>2015/03/30/RocketMQ-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>消息存储是RocketMQ中最为复杂和最为重要的一部分</p></blockquote><h2 id="消息存储整体架构"><a href="#消息存储整体架构" class="headerlink" title="消息存储整体架构"></a>消息存储整体架构</h2><p>消息存储是RocketMQ中最为复杂和最为重要的一部分，将分别从RocketMQ的消息<strong>存储整体架构</strong>、<strong>PageCache</strong>与<strong>Mmap内存映射</strong>以及RocketMQ中<strong>两种不同的刷盘方式</strong>三方面来分别展开叙述。</p><p>先看这个图，这个图看着复杂，但是多理解几遍历，不要着急跳过去</p><p><img src="/2015/03/30/RocketMQ-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/rocketmq_design_1-2.png" alt="存储设计"></p><p>从这个图理梳理出几个关键词</p><ol><li>CommitLog</li><li>ConsumeQueue</li><li>CommitLogOffset</li><li>IndexFile</li><li>producer send</li></ol><p>CommitLog和producer发送消息有关，ConsumeQueue和consumer消费端有关。</p><h2 id="消息存储相关的文件"><a href="#消息存储相关的文件" class="headerlink" title="消息存储相关的文件"></a>消息存储相关的文件</h2><p>消息都是存储在 <strong>Broker服务器</strong>上的以文件形式存储分：Producer端和Consumer端，消息查询也是通过Broker节点查询。</p><h3 id="CommitLog-发送端消息主体—Producer端"><a href="#CommitLog-发送端消息主体—Producer端" class="headerlink" title="CommitLog 发送端消息主体—Producer端"></a>CommitLog 发送端消息主体—Producer端</h3><blockquote><p>CommitLog：消息真正的存储文件，所有消息都存储在 CommitLog 文件中。</p></blockquote><p><img src="/2015/03/30/RocketMQ-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/commitLog结构.jpeg" alt="commitLog结构"></p><p>CommitLog 文件是存放消息数据的地方，所有的消息都将存入到 CommitLog 文件中。<br>生产者将消息发送到 RocketMQ 的 Broker 后，Broker 服务器会将消息<code>顺序</code>写入到 CommitLog 文件中，这也就是 RocketMQ 高性能的原因，因为我们知道磁盘顺序写特别快，RocketMQ 充分利用了这一点，极大的提高消息写入效率。</p><p>CommitLog: 消息主体以及元数据的存储主体，存储Producer端写入的消息主体内容,消息内容不是定长的。单个文件大小默认<code>1G</code>， 文件名长度为20位，左边补零，剩余为起始偏移量，比如:<br><code>00000000000000000000</code>代表了第一个文件，起始偏移量为0，文件大小为<code>1G=1073741824</code>；当第一个文件写满了，第二个文件为00000000001073741824，起始偏移量为1073741824，以此类推。消息主要是顺序写入日志文件，当文件满了，写入下一个文件；</p><p><img src="/2015/03/30/RocketMQ-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/commitLog.jpeg" alt="commitLog"></p><h3 id="ConsumeQueue-消息消费队列—Consume端"><a href="#ConsumeQueue-消息消费队列—Consume端" class="headerlink" title="ConsumeQueue 消息消费队列—Consume端"></a>ConsumeQueue 消息消费队列—Consume端</h3><blockquote><p>consumequeue文件可以看成是基于topic的commitlog索引文件</p></blockquote><p>ConsumeQueue 引入的目的主要是提高消息消费的性能，由于RocketMQ是基于主题<code>topic</code>的订阅模式，消息消费是针对主题进行的，如果要遍历commitlog文件中根据topic检索消息是非常低效的。</p><p>Consumer即可根据<code>ConsumeQueue</code>来查找待消费的消息。其中，ConsumeQueue（逻辑消费队列）作为消费消息的索引，保存了指定Topic下的队列消息在CommitLog中的:</p><ol><li>起始物理偏移量offset</li><li>消息大小size</li><li>消息Tag的HashCode值</li></ol><p>CommitLog 文件是存放消息数据的地方，所有的消息都将存入到 CommitLog 文件中。</p><p>但是消费者消费消息的时候，可能就会遇到麻烦，每一个消费者只能订阅一个主题，消费者关心的是订阅主题下的所有消息，但是同一主题的消息在 CommitLog 文件中可能是不连续的，那么消费者消费消息的时候，需要将 CommitLog 文件加载到内存中遍历查找订阅主题下的消息，频繁的 IO 操作，性能就会急速下降。</p><p>为了解决这个问题，RocketMQ 引入了 Consumequeue 文件。Consumequeue 文件可以看作是索引文件，类似于 MySQL 中的二级索引。在存放了同一主题下的所有消息，消费者消费的时候只需要去对应的 Consumequeue 组中取消息即可。Consumequeue 文件不会存储消息的全量信息，了解 MySQL 索引的话，应该好理解这里，具体存储的字段，我在上图已经标注。这样做可以带来以下两个好处：</p><p>由于 Consumequeue 文件内容小，可以尽可能的保证 Consumequeue 文件全部读入到内存，提高消费效率。<br>Consumequeue 文件也是会持久化的，不存全量信息可以节约磁盘空间。</p><p><img src="/2015/03/30/RocketMQ-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/commitLog和Topic+queue.jpeg" alt="commitLog和Topic+queue"></p><p>consumequeue文件可以看成是基于topic的commitlog索引文件，故consumequeue文件夹的组织方式如下：<code>topic/queue/file</code>三层组织结构，<br>具体存储路径为：<code>$HOME/store/consumequeue/&#123;topic&#125;/&#123;queueId&#125;/&#123;fileName&#125;</code>。<br>同样consumequeue文件采取定长设计，每一个条目共<code>20个字节</code>，分别为<code>8字节的commitlog物理偏移量</code>、<code>4字节的消息长度</code>、<code>8字节tag hashcode</code>，单个文件由30W个条目组成，可以像数组一样随机访问每一个条，每个ConsumeQueue文件大小约<code>5.72M</code>；</p><h3 id="IndexFile"><a href="#IndexFile" class="headerlink" title="IndexFile"></a>IndexFile</h3><p>IndexFile（索引文件）提供了一种可以通过key或时间区间在CommitLog中查询消息，找到offset结的方法。<br><strong>Index文件的存储位置是</strong>：<code>$HOME\store\index$&#123;fileName&#125;</code>，文件名fileName是以创建时的<code>时间戳</code>命名的。<br>固定的单个IndexFile文件大小约为400M，一个IndexFile可以保存 2000W个索引，IndexFile的底层存储设计为在文件系统中实现HashMap结构，故rocketmq的索引文件其底层实现为hash索引。</p><p><img src="/2015/03/30/RocketMQ-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/rocketmq_design_13.jpg" alt="IndexFile位置"></p><p>在上面的RocketMQ的消息存储整体架构图中可以看出，RocketMQ采用的是混合型的存储结构，即为Broker单个实例下所有的队列共用一个日志数据文件（即为CommitLog）来存储。</p><p><strong>RocketMQ的混合型存储结构</strong>(多个Topic的消息实体内容都存储于一个CommitLog中)针对Producer和Consumer分别采用了数据和索引部分相分离的存储结构。</p><p><strong>Producer发送消息至Broker端</strong>，然后Broker端使用同步或者异步的方式对消息刷盘持久化，保存至CommitLog中。只要消息被刷盘持久化至磁盘文件CommitLog中，那么Producer发送的消息就不会丢失。即使ConsumeQueue中的数据丢失，也可以通过CommitLog来恢复。正因为如此，Consumer也就肯定有机会去消费这条消息。</p><p><strong>Consume端当无法拉取到消息后</strong>，可以等下一次消息拉取，同时服务端也支持长轮询模式，如果一个消息拉取请求未拉取到消息，Broker允许等待30s的时间，只要这段时间内有新消息到达，将直接返回给消费端。这里，RocketMQ的具体做法是，使用Broker端的后台服务线程—ReputMessageService不停地分发请求并异步构建ConsumeQueue（逻辑消费队列）和IndexFile（索引文件）数据。</p><h2 id="页缓存-page-cache-与内存映射-mmap"><a href="#页缓存-page-cache-与内存映射-mmap" class="headerlink" title="页缓存(page cache)与内存映射(mmap)"></a>页缓存(page cache)与内存映射(mmap)</h2><blockquote><p>用于加速对文件的读写。</p></blockquote><p><strong>页缓存（PageCache)是OS对文件的缓存</strong>，用于加速对文件的读写。<br>一般来说，程序对文件进行顺序读写的速度几乎接近于内存的读写速度，主要原因就是由于OS使用PageCache机制对读写访问操作进行了性能优化，将一部分的内存用作PageCache。<br>对于数据的写入，OS会先写入至Cache内，随后通过异步的方式由<code>pdflush内核线程</code>将Cache内的数据刷盘至物理磁盘上。对于数据的读取，如果一次读取文件时出现未命中PageCache的情况，OS从物理磁盘上访问读取文件的同时，会顺序对其他相邻块的数据文件进行预读取。</p><p>在RocketMQ中，ConsumeQueue逻辑消费队列存储的数据较少，并且是顺序读取，在page cache机制的预读取作用下，Consume Queue文件的读性能几乎接近读内存，即使在有消息堆积情况下也不会影响性能。而对于CommitLog消息存储的日志数据文件来说，读取消息内容时候会产生较多的随机访问读取，严重影响性能。如果选择合适的系统IO调度算法，比如设置调度算法为“Deadline”（此时块存储采用SSD的话），随机读的性能也会有所提升。</p><p><strong>内存映射 (mmap)</strong><br>另外，RocketMQ主要通过MappedByteBuffer对文件进行读写操作。其中，利用了NIO中的FileChannel模型将磁盘上的物理文件直接映射到用户态的内存地址中（这种Mmap的方式减少了传统IO将磁盘文件数据在操作系统内核地址空间的缓冲区和用户应用程序地址空间的缓冲区之间来回进行拷贝的性能开销），将对文件的操作转化为直接对内存地址进行操作，从而极大地提高了文件的读写效率（正因为需要使用内存映射机制，故RocketMQ的文件存储都使用定长结构来存储，方便一次将整个文件映射至内存）。</p><p><img src="/2015/03/30/RocketMQ-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/pagecache.webp" alt="pagecache"></p><h2 id="消息刷盘"><a href="#消息刷盘" class="headerlink" title="消息刷盘"></a>消息刷盘</h2><p>分两种刷盘模式，没有好坏之分，实际应用中根据业务进行调整：</p><ol><li>同步刷盘</li><li>异步刷盘</li></ol><p><img src="/2015/03/30/RocketMQ-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/rocketmq_design_2.png" alt="刷盘"></p><p>(1) 同步刷盘：如上图所示，只有在消息真正持久化至磁盘后RocketMQ的Broker端才会真正返回给Producer端一个成功的ACK响应。同步刷盘对MQ消息可靠性来说是一种不错的保障，但是性能上会有较大影响，一般适用于金融业务应用该模式较多。</p><p>(2) 异步刷盘：能够充分利用OS的PageCache的优势，只要消息写入PageCache即可将成功的ACK返回给Producer端。消息刷盘采用后台异步线程提交的方式进行，降低了读写延迟，提高了MQ的性能和吞吐量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RocketMQ 在存储设计的一概念性的东西，熟练应用，并了解这些概念，对后续深入学习RocketMQ和排查问题很有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
          <category> rocketMQ </category>
          
          <category> rocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> architecture </tag>
            
            <tag> 存储设计 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket03-Socket 客户端</title>
      <link href="2015/01/17/java-socket03-Socket%20%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>2015/01/17/java-socket03-Socket%20%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="Soket客户端"><a href="#Soket客户端" class="headerlink" title="Soket客户端"></a>Soket客户端</h3><p>可以用来连接服务器</p><h4 id="1-连接步骤："><a href="#1-连接步骤：" class="headerlink" title="1.连接步骤："></a>1.连接步骤：</h4><ol><li>建立连接</li><li>使用I/O 学节流进行交互</li></ol><h4 id="2-代码实现："><a href="#2-代码实现：" class="headerlink" title="2.代码实现："></a>2.代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.建立服务器连接</span></span><br><span class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取服务器传来的数据</span></span><br><span class="line">        BufferedReader bf = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                            <span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                            client.getInputStream()</span><br><span class="line">                        ));</span><br><span class="line"></span><br><span class="line">        String getMessage = bf.readLine();    <span class="comment">//阻塞式</span></span><br><span class="line">        System.out.println(getMessage);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.客户端向服务器发送</span></span><br><span class="line">        DataOutputStream ds = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</span><br><span class="line">        ds.writeUTF(<span class="string">&quot;client: 获取到了服务器连接&quot;</span>);</span><br><span class="line">        ds.flush();</span><br><span class="line">        ds.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> scoket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> socket </tag>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket02-ServerSocket 服务端</title>
      <link href="2015/01/15/java-socket02-ServerSocket%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>2015/01/15/java-socket02-ServerSocket%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="ServerSocket"><a href="#ServerSocket" class="headerlink" title="ServerSocket"></a>ServerSocket</h3><p>是运行的服务端的ServerSocket。socket方式是点对点的属于TCP。</p><ol><li><p>建立服务端频骤：</p><ol><li>建立端口并指定服务器IP</li><li>使用 accpet 方法接收连接，阻塞式方法</li><li>使用流通信</li></ol></li><li><p>代码实现：</p><ol><li>建立服务器，建立通道对象</li><li>接收数据</li><li>发送数据</li></ol></li><li><p>阻塞式的意思是，如果没有连接，就会一直等待。所以在while里面是一直处于等待状态。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建服务器套接字</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        BufferedWriter bf = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        DataInputStream date = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String welcom = <span class="string">&quot;欢迎使用我的宇宙无敌服务器&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//2.建立连接，这只是建立连接，并不是接收客户端发来的信息，就像按电话的接听键</span></span><br><span class="line">            socket = serverSocket.accept();        <span class="comment">// 阻塞式的接收方式</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Server: &quot;</span> + welcom);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.逐行写出给客户端</span></span><br><span class="line">            bf = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">                    socket.getOutputStream() <span class="comment">// 从socket中获取数据</span></span><br><span class="line">                    ));</span><br><span class="line">            bf.append(welcom);</span><br><span class="line">            bf.newLine(); <span class="comment">// 一定要换行，相当于\r\n</span></span><br><span class="line">            bf.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.接收客户端发来的信息</span></span><br><span class="line">            date = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line">            String message = date.readUTF();</span><br><span class="line">            System.out.println(message);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> socket </tag>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket01-原理</title>
      <link href="2015/01/11/java-socket01-%E5%8E%9F%E7%90%86/"/>
      <url>2015/01/11/java-socket01-%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>网络之间的通信，说穿了还是流在通信。<br>客户端跟服务器之间建立的管道，就叫scoket。<br>网络通信的三要素：<br>1.IP<br>2.端口<br>3.协议</p><p>网络编程也需要输入流和输出流进行交互，交互步骤：<br>1.使用ServerSocket 指定端口，地址为本机。<br>2.使用accept 接收客户端连接。<br>3.发送数据（流）。</p><p>注意：1024以下端口保留给系统。</p><p>TCP/UDP<br>1.TCP:像打电话，双向的，建产连接的。数据安全，不易丢失。点对点。<br>2.UDP:像发知信，单向的，非面向连接。数据不安全，易丢失。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程05--线程通信</title>
      <link href="2014/09/24/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
      <url>2014/09/24/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目的：就是让线程间具有互相发送信号通信的能力。</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>核心：利用共享对象实现通信，这里的通信不是指传值，而是发送信号。<br>目的：就是让线程间具有互相发送信号通信的能力。<br>而且，线程通信可以实现，一个线程可以等待来自其他线程的信号。<br>举个例子，一个线程B可能正在等待来自线程A的信号，这个信号告诉线程B数据已经处理好了。</p><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>开发中不免会遇到，需要所有子线程执行完毕通知主线程处理某些逻辑的场景。<br>或者是 线程A 在执行到某个条件通知 线程B 执行某个操作。<br>在java中，比较典型的就是：等待通知机制。</p><h3 id="等待通知机制"><a href="#等待通知机制" class="headerlink" title="等待通知机制"></a>等待通知机制</h3><p>等待通知模式是 Java 中比较经典的线程通信方式。<br>两个线程通过对同一对象调用等待 wait() 和通知 notify() 方法来进行通讯。<br>这种方式，有三个参与者：</p><ol><li>阻塞线程 wait()</li><li>唤醒线程 notify()</li><li>monitor锁</li></ol><p>看个最简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWaitNotify4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A 1, B 1, B 2, B 3, A 2, A 3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        Thread A = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;A 1&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;A 2&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;A 3&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread B = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;B 1&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;B 2&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;B 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    lock.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A 1</span><br><span class="line">B 1</span><br><span class="line">B 2</span><br><span class="line">B 3</span><br><span class="line">A 2</span><br><span class="line">A 3</span><br></pre></td></tr></table></figure><p>这个例子很简单，<code>线程A</code> 启动后，wait 自己，等待 <code>线程B</code> 唤醒自己。<br>这里 <code>lock</code>，就是一个 monitor锁，是不是奇怪，为什么需要一个 monitor锁，因为等待和唤醒必须是同一个锁，后面说。</p><h3 id="线程通信方式"><a href="#线程通信方式" class="headerlink" title="线程通信方式"></a>线程通信方式</h3><p>不同线程之间通过使用以下方法进行通信：</p><ol><li>wait();        等待，该线程等待，并放弃执行权。</li><li>notify();        唤醒，唤醒正在等待中的其他线程。</li><li>notifyAll();        唤醒全部，推荐用这种<br>以上三个方法必须是同步线程中才能使用，锁对象才能使用。<br>只有同步才有锁的概念。</li></ol><p>而上面三个方法是属于 Object 的方法，理由是：<br>因为这些方法在操作同步中线程时，都必须要标识它们所操作线程持有的锁，只有同一个锁上的被等待线程可以被同一个锁上的notify唤醒。<br>不可以对不同的锁中的线程进行唤醒。<br>也就是说<code>等待</code>和<code>唤醒</code>必须是同一个锁，而锁可以是任意对象，所以可以被任意对象调用的方法定义Object类中。</p><h2 id="监视器对象"><a href="#监视器对象" class="headerlink" title="监视器对象"></a>监视器对象</h2><blockquote><p>监视器对象，实际使用中，不止一种，不同场景有不同使用方式。<br><code>monitor锁</code>是利用的对象的 monitor机制实现的，简单的说，对象的对象头存在隐藏字段，用来存储线程ID、锁标识、分代信息等，jvm 可以利用这个小存储进行线程状态的存储。</p></blockquote><h3 id="synchronized-方式"><a href="#synchronized-方式" class="headerlink" title="synchronized 方式"></a>synchronized 方式</h3><p>对象锁，就是创建一个中间对象，用来存储线程状态。<br>注间，这里方法使用 synchronized 进行修饰，synchronized 底层为 monitor锁。<br>使用 synchronized 和 synchronized(lock)，这两个是等价的，锁的都是同一个 monitor锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait 和 notify 使用的是同一把锁</span></span><br><span class="line"><span class="keyword">public</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifySlef</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">    lock.notify();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> waitSlef（）&#123;</span><br><span class="line">  <span class="comment">//注意，用的是 lock 这个对象来操作 wait</span></span><br><span class="line">  <span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">    lock.wait();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this-方式"><a href="#this-方式" class="headerlink" title="this 方式"></a>this 方式</h3><p>this 锁，锁的当前线程自己，所以只会等到自己执行完成才会出这个方法。<br>这里就有个问题，如果 this.wait()，谁来唤醒自己，因为 this 只能是自己持有，别的线程根本不可能拿到这个锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test2 testWait = <span class="keyword">new</span> Test2();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(testWait);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifySelf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;notify，thread: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    <span class="keyword">this</span>.notify();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitSelf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;wait，thread: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">      <span class="keyword">this</span>.wait();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;current thread: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    waitSelf();</span><br><span class="line">    notifySelf();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>只 wait 住自己，没有办法再唤醒自己，卡在 wait 这一步，程序也不会退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">current thread: Thread-0</span><br><span class="line">wait，thread: Thread-0</span><br></pre></td></tr></table></figure><p>在线程通信中，使用 this.wait() 如果没有设置超时时间，就会一直被阻塞，因为没有线程可以拿到 this 锁。</p><h3 id="类锁方式"><a href="#类锁方式" class="headerlink" title="类锁方式"></a>类锁方式</h3><p>这种方式也是对象没，每个类都会对就有一个 Class 对象，实际上就是锁的该类的 Class 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifyClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Test.class.notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (Test.class) &#123;</span><br><span class="line">    Test.class.wait();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="IllegalMonitorStateException-异常"><a href="#IllegalMonitorStateException-异常" class="headerlink" title="IllegalMonitorStateException 异常"></a>IllegalMonitorStateException 异常</h2><h3 id="异常代码演示"><a href="#异常代码演示" class="headerlink" title="异常代码演示"></a>异常代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWait</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Start-----&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait(<span class="number">1000</span>);  <span class="comment">//没有一个锁对象，所以报错！！！</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End-------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> WaitTest test = <span class="keyword">new</span> WaitTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.testWait();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;Thread-0&quot; Exception in thread &quot;Thread-1&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">Thread-1</span><br><span class="line">    at java.lang.Object.wait(Native Method)</span><br></pre></td></tr></table></figure><blockquote><p>错误的主要原因为：<br>违法的监控状态异常。当某个线程试图等待一个自己并不拥有的对象（O）的监控器或者通知其他线程等待该对象（O）的监控器时，抛出该异常。</p></blockquote><h3 id="大白话就是"><a href="#大白话就是" class="headerlink" title="大白话就是"></a>大白话就是</h3><p>当前线程必须持有一个当前线程的锁，才能使用 wait。<br>当前线程并没有持有一个锁，就来调 wait 方法，直接抛异常。<br>要使用 wait 必须拥有该对象的锁！！！<br>详细说明在 wait() 方法的<code>JDK</code>注释中有详细说明。</p><h3 id="正确写法"><a href="#正确写法" class="headerlink" title="正确写法"></a>正确写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> WaitTest test = <span class="keyword">new</span> WaitTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.testWait();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testWait</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//增加Synchronized关键字</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Start-----&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End-------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>wait</code> 和 <code>notify</code> 一般在使用时，容易搞混的就是 <code>IllegalMonitorStateException</code> 异常。<br>主要是容易忽略需要加锁这件事，因为 <code>wait</code> 和 <code>notify</code> 是对象的自有方法，一般在使用时会想当然的就调用，而忽略了要先拿到锁的前提。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 通信 </tag>
            
            <tag> 线程通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程--04验证线程处于临时状态</title>
      <link href="2014/09/17/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E9%AA%8C%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%A4%84%E4%BA%8E%E4%B8%B4%E6%97%B6%E7%8A%B6%E6%80%81/"/>
      <url>2014/09/17/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E9%AA%8C%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%A4%84%E4%BA%8E%E4%B8%B4%E6%97%B6%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="临时状态"><a href="#临时状态" class="headerlink" title="临时状态"></a>临时状态</h2><p>当一个线程被启动时，并不代表线程就有了执行权。<br>线程处于临就绪状态并没有执行权，这个时候 main 线程继续往下执行，有可能是别的线程先开始执行。</p><h3 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test test = <span class="keyword">new</span> Test();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    t1.start();</span><br><span class="line">    test.flag = <span class="keyword">true</span>;</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">            Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + flag);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>1.期望结果</p><blockquote><p>Thread-0—&gt;false<br>Thread-1—&gt;true</p></blockquote><p>2.实际结果</p><blockquote><p>Thread-1—&gt;true<br>Thread-0—&gt;true</p></blockquote><p>结果说明了，如果是按照顺序执行，那么，应该是先 T0—&gt;false 再 T1—&gt;true。<br>但是结果确是上面的结果。说明: 当 main 线程开启后执行了t1，但是 t1 并没有马上执行，而是处于就绪状态。</p><h3 id="代码验证-1"><a href="#代码验证-1" class="headerlink" title="代码验证"></a>代码验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test test = <span class="keyword">new</span> Test();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">// 开启注释就可以按顺序执行，结果就是 false true了。</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   test.flag = <span class="keyword">true</span>;</span><br><span class="line">   t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">            Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + flag);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> concurrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程--模拟线程不安全</title>
      <link href="2014/09/16/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E6%A8%A1%E6%8B%9F%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/"/>
      <url>2014/09/16/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E6%A8%A1%E6%8B%9F%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>由于线程在执行的时候是异步的，当所有线程操作共享数据时，有可以能出现都已经进入判断的情况下，共享数据已被改变，但是其后线程不知道，当线程醒来的时候，直接开始运行，这样就会出现数据不全安的问题。<br>错误原因：<br>多条语句操作一个共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导到共享数据的错误。</p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DemoRunnable run = <span class="keyword">new</span> DemoRunnable();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">  </span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">          <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">//线程进入判断后睡10豪秒</span></span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                 Thread.sleep(<span class="number">10</span>);      <span class="comment">//让每一条进入的线程都sleep 10豪秒</span></span><br><span class="line">                 ticket--;           <span class="comment">//ticket也可以放到sleep上面，结果也是错的。</span></span><br><span class="line">                 System.out.println(ticket);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              flag = <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次结果都是不一样的！！！切记。<br><strong>结果</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">-1</span><br><span class="line">-2</span><br><span class="line">-3</span><br></pre></td></tr></table></figure><p>分析：上面的例子中有4条线程，4条进程都是在 ticket&gt;0 时进入。假设此时ticket为1，按1、2、3、4顺序执行的。<br>线程1先 sleep 10豪秒，然后 ticket–后此时为0。<br>线程2先sleep 10豪秒，然后 ticket–后此时为-1。<br>线程3先sleep 10豪秒，然后 ticket–后此时为-2。<br>线程4先sleep 10豪秒，然后 ticket–后此时为-3。<br>由于是异步的，所以每次的错误并不一定是相同的。<br>由于每次，线程都已进入了判断，而每次sleep异至线程在执行上，都走到了一起，然后配来后分别各自执行各自的代码，此时所有线程都已绕过了if的判断，所以出现了问题。一般CPU是交替执行线程的，但是每个线程被sleep后CPU就交换了执行权，当CPU再切换过来时，实际上次代码并没有执行完。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 进程线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程02--什么是上下文切换</title>
      <link href="2014/09/03/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
      <url>2014/09/03/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>即，不同线程之间的切换。<br>是存储和恢愎CPU 状态的过程，它使得线程执行能够从中断恢愎执行。<br>上下文切换是需要开销的。</p><h3 id="线程切点只在多核-CPU-中才有"><a href="#线程切点只在多核-CPU-中才有" class="headerlink" title="线程切点只在多核 CPU 中才有"></a>线程切点只在多核 CPU 中才有</h3><p>并不是，线程切换是CPU的功能，单核 CPU 也可以进行上下文切换。<br>CPU 执行线程的粒度是通过给分个线程分配时间切片来实现的。在单核时代，一个系统也会开很多程序，每个程序都会等待CPU来执行并不会等会某一个线程执行完毕。<br>比如单核时代玩 CS，可以边玩游戏边听千千静听。</p><p>CPU 通过切换时间分片来执行任务，切换前都会保存上一次任务的状态，这样下次再切回来的时候，可以继续执行当前这个状态。<br>这种保存再切换回来的操作，就是<strong>一次上下文切换</strong>。</p><h3 id="查看上下文切换"><a href="#查看上下文切换" class="headerlink" title="查看上下文切换"></a>查看上下文切换</h3><h3 id="如何减少上下文切换"><a href="#如何减少上下文切换" class="headerlink" title="如何减少上下文切换"></a>如何减少上下文切换</h3><p>既然上下文切换会导致额外的开销，因此减少上下文切换次数便可以提高多线程程序的运行效率。</p><p>减少上下文切换的方法有：</p><ol><li>无锁并发编程</li><li>CAS算法</li><li>使用最少线程和使用协程</li><li>协程，go 当中使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
            <tag> concurrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程01--线程、进程概念</title>
      <link href="2014/08/09/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B01-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5/"/>
      <url>2014/08/09/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B01-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>正在进行中的程序。每一个进程至少有一个线程。当程序运行时在内存空间中开辟一片独立空间。每一个进程都有一个执行顺序。<br>一个进程更象一个任务。<br>进程的内存原理：</p><ul><li>应用程序在执行时都会在内存中开辟一片内存空间并分配地址。进程用于标识这片空间，封装里面的控制单元。</li><li>而线程就是进程中的控制单元。线程在控制着进程的执行。</li></ul><a id="more"></a><h3 id="进程创建："><a href="#进程创建：" class="headerlink" title="进程创建："></a>进程创建：</h3><p>进程和线程都是由系统来进行创建，JVM通过调用当前系进行开辟进行和线程的操作。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程是进程中的内容。他是程序中的控制单元或叫执行路径。线程才是真正去执行的。一个进程可以有多个线程组成，他们分别执行不同的任务。一个进程至少有一条线程，当线程内有多个进程同时运行时，这种方式 称为并发运行。如：web服务器。线程控制着进程的执行。<br>执行路径：一个程序从头走到尾就是一个执行路径</p><p>线程执行原理：以主线程为例，当执行进程时，进程内的线程开始执行代码。在程序中，内存中的代码都是由线程在执行的。java中的主线程就是main。</p><h3 id="总结：一进程可以同时执行个线程，称多线程。"><a href="#总结：一进程可以同时执行个线程，称多线程。" class="headerlink" title="总结：一进程可以同时执行个线程，称多线程。"></a>总结：一进程可以同时执行个线程，称多线程。</h3><p>理解方式：windows系统的理解方式。</p><h3 id="同步：排队一前一后执行"><a href="#同步：排队一前一后执行" class="headerlink" title="同步：排队一前一后执行"></a>同步：排队一前一后执行</h3><h3 id="异步：并列各走个的"><a href="#异步：并列各走个的" class="headerlink" title="异步：并列各走个的"></a>异步：并列各走个的</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
