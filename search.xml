<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>以太坊 EIP-4844 简述</title>
      <link href="posts/e5fa7f4c.html"/>
      <url>posts/e5fa7f4c.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>是由Vitalik Buterin和其他来自以太坊生态系统的程序员共同创建的，它关注的是分片技术。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>EIP-4844的主要目的是在不牺牲去中心化的情况下，降低网络上的gas费用，特别是对rollup解决方案。<br><strong>Arbitrum</strong>和<strong>Optimism</strong>等rollup解决方案可以将gas费用降低100到1000倍。</p><p>EIP-4844 提案是作为以太坊2.0更新完成之前的<strong>临时</strong>解决方案。该提案解释了一种新方法，以帮助划分交易中所需的信息，如验证规则和交易格式，而无需实际实现任何分片。</p><p><strong>这是一个很大的EIP，细分下来，需要用很多篇文章才能讲完整个EIP的细节经及EIP-4844要做的事</strong>。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>每个区块 12 秒的出块时间 TPS 大概为 13~30 笔交易左右，但根据目前已知以太坊的 TPS 最高可以达到每秒 45 笔交易。<br>以太坊做为最主流的区块链，这个TPS就非常拉夸，还要号称世界计算机。</p><p>所以想要成为 “世界计算机” 的以太坊每秒最多处理 45 笔交易的性能实在是太弱了。所以以太坊迫切需要扩容来解决性能问题。</p><p>以太坊由于智能合约的存在，每个交易的内容各不相同，所以每个区块可以处理多少笔交易（TPS）取决于一个区块中包含的交易的数据量大小，每个交易的数据量大小都是根据实时需求决定的。<br>下图为以太坊交易TPS表：</p><h3 id="区块链不可能三角"><a href="#区块链不可能三角" class="headerlink" title="区块链不可能三角"></a>区块链不可能三角</h3><p>&quot;区块链不可能三角&quot; 指的是一个公共区块链无法同时满足三个特性：</p><ul><li>去中心化</li><li>安全性</li><li>可扩展性</li></ul><p>去中心化：指的是节点的去中心化程度，节点越多越分散越去中心化<br>安全性：指的是整个区块链网络的安全，攻击成本越高越安全<br>可扩展性：指的是区块链的处理交易性能，每秒可处理交易越多越具备可扩展性</p><p>从这三点的重要性来看的话，会发现去中心化和安全性是权重最高的。<br>以太坊的愿景是在去中心化并且安全的前提下实现可扩展性。</p><h2 id="技术方向"><a href="#技术方向" class="headerlink" title="技术方向"></a>技术方向</h2><p>针对以上三个问题，以太坊也进行了各种偿试，目前大方向就是<strong>扩容</strong>，扩容方案有以下几种：<br>以太坊主流扩容方案</p><ol><li>rollup</li><li>分片</li><li>sharding<ol><li>sharding 1.0</li><li>sharding 2.0</li></ol></li></ol><h3 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h3><p>Rollup 原理是将数百笔交易在链下像摊煎饼一样打包成一笔交易发送给以太坊来实现扩容，这样每个人平摊下来上传以太坊的费用就会很便宜，同时还可以继承以太坊的安全性。</p><p>Rollup 目前分为两种类型：</p><ul><li>Optimism Rollup（乐观 Rollup)</li><li>ZK Rollup（零知识证明 Rollup）</li></ul><p>Optimism Rollup: 假设所有交易都是诚实可信的，把许多笔交易压缩成一笔交易提交给以太坊，在提交后会有一段时间窗口（挑战期-目前是一周），任何人都可以质疑发起挑战来验证交易的真实性，但用户如果要将 OP Rollup 上的 ETH 转到以太坊上则需要等待挑战期结束后才可以得到最终确认。</p><p>ZK Rollup: 则是通过生成一个零知识证明来证明所有交易都是有效的，并将所有交易执行后的最终状态变化上传至以太坊。</p><p>相比 Optimism Rollup 来说 ZK Rollup 更有前景，ZK Rollup 不需要像 Optimism Rollup 那样上传压缩后的所有交易细节，只需要上传一个零知识证明和最终的状态变化的数据即可，意味着在可扩展性上可以比 OP Rollup 压缩更多的数据，并且也不需要像 OP Rollup 那样等待长达一周的挑战期，但 ZK Rollup 最大的缺点就是开发难度极大。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md">eip-4844.md</a></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> eip </category>
          
          <category> ethereum </category>
          
          <category> eip </category>
          
          <category> 4844 </category>
          
          <category> eth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> ethereum </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> blockchain </tag>
            
            <tag> eip </tag>
            
            <tag> eip4844 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-生命周期</title>
      <link href="posts/49b9d1d2.html"/>
      <url>posts/49b9d1d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先说大白话，rust 的生命周期标注，是为了明确多个变量的生命周期是否一致，仅此而已，因为如果rust不知道多个变量的生命周期是否一致，它无法确的知道这个变量是否已经被释放。这个下面再细说，先说有什么用。</p><p>rust当中，的两个重要概念：<strong>借用</strong>和<strong>生命周期</strong>分别代是在:</p><ol><li>栈变量，需要关注【所有权】</li><li>引用(指针)，需要关注【生命周期】</li></ol><p>Rust 的每个引用都有自己的生命周期，生命周期指的是引用保持有效的作用域。<br>大多数情况下，引用是隐式的、可以被推断出来的，但当引用可能以不同的方式互相关联时，则需要手动标注生命周期。<br>这里重点就是<strong>以不同的方式互相关联时</strong>。</p><p>大多数情况下，rust 可以自己推断出引用的生拿周期，也就是只有在一些rust无法自行推断的情况下，才需要手动<strong>标注</strong>生命周期。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>Rust 中的每一个引用都有其<strong>生命周期（lifetime）</strong>，也就是引用保持有效的作用域。<br>大部分时候生命周期是隐含并可以推断的，正如大部分时候类型也是可以推断的一样。<br>类似于当因为有多种可能类型的时候必须注明类型，也会出现引用的生命周期以一些不同方式相关联的情况，所以 Rust 需要我们使用泛型生命周期参数来注明他们的关系，这样就能确保运行时实际使用的引用绝对是有效的。</p><p>这里还有一个需要关注的点就是<strong>关系</strong>，也就多个引用之前的关系，才是导致rust无法明确推断出引用生命周期的最根本原因。</p><h2 id="反例"><a href="#反例" class="headerlink" title="反例"></a>反例</h2><p>这段代码看着很正常，但是实际上，编译会报错，类为这里调用<code>longest</code>时，<code>longest</code>无法确认<code>x</code>、<code>y</code>的生命周期。<br>为什么无法确认？<br>因为<code>longest</code>是被调用的方法，它肯定没法知道，这两个传入在<code>main</code>方法的中的生命周期。<br>好比，你写一个接口给外部调用，你也无法知道调你的服务，传入的两个变量，在那个服务中的生命周期。<br>但是在rust中，又非常强调安全性，它必须清楚每个引用的明确的生命周期。<br>所以这个活，就落在了开发者身上，必须明确告诉rust，每个引用的生命周期。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> string1 = <span class="built_in">String</span>::from(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> string2 = <span class="string">&quot;xyz&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = longest(string1.as_str(), string2);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The longest string is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// longest函数 无法确认 x、y  在 mian 函数中的生命周期</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">longest</span></span>(x: &amp;<span class="built_in">str</span>, y: &amp;<span class="built_in">str</span>) -&gt; &amp;<span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x.len() &gt; y.len() &#123;</span><br><span class="line">        x</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下：missing lifetime specifier</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">error[E0106]: missing lifetime specifier</span><br><span class="line"><span class="meta"> --&gt;</span><span class="bash"> src/main.rs:9:33</span></span><br><span class="line">  |</span><br><span class="line">9 | fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str &#123;</span><br><span class="line">  |               ----     ----     ^ expected named lifetime parameter</span><br><span class="line">  |</span><br><span class="line">  = help: this function&#x27;s return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`</span><br><span class="line">help: consider introducing a named lifetime parameter</span><br><span class="line">  |</span><br><span class="line">9 | fn longest&lt;&#x27;a&gt;(x: &amp;&#x27;a str, y: &amp;&#x27;a str) -&gt; &amp;&#x27;a str &#123;</span><br><span class="line">  |           ++++     ++          ++          ++</span><br><span class="line"></span><br><span class="line">For more information about this error, try `rustc --explain E0106`.</span><br><span class="line">error: could not compile `playground` due to previous error</span><br></pre></td></tr></table></figure><p>上面看着很正常呀，哪里有问题？</p><h2 id="生命周期标注"><a href="#生命周期标注" class="headerlink" title="生命周期标注"></a>生命周期标注</h2><p>即然<code>rust</code>不智能，那只能开发者辛苦一点，手动来标注了。<br><code>rust</code>的生命周期标注语法，只能表示引用的生命周期，而不能、不会改会引用的生命周期。</p><p>命名规则:</p><ol><li><code>&#39;a</code> 以 &#39; 开头</li><li>全小写</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="built_in">i32</span>        <span class="comment">// 引用</span></span><br><span class="line">&amp;<span class="symbol">&#x27;a</span> <span class="built_in">i32</span>     <span class="comment">// 带有显式生命周期的引用</span></span><br><span class="line">&amp;<span class="symbol">&#x27;a</span> <span class="keyword">mut</span> <span class="built_in">i32</span> <span class="comment">// 带有显式生命周期的可变引用</span></span><br></pre></td></tr></table></figure><p>单个的生命周期注解本身没有多少意义，因为生命周期注解告诉 Rust 多个引用的泛型生命周期参数如何相互联系的。</p><h2 id="函数签名中的生命周期注解"><a href="#函数签名中的生命周期注解" class="headerlink" title="函数签名中的生命周期注解"></a>函数签名中的生命周期注解</h2><p>描述了 x、y 之间的关系。<br>longest 函数定义指定了签名中所有的引用必须有相同的生命周期<code>&#39;a</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> string1 = <span class="built_in">String</span>::from(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> string2 = <span class="string">&quot;xyz&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = longest(string1.as_str(), string2);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The longest string is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">longest</span></span>&lt;<span class="symbol">&#x27;a</span>&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="built_in">str</span>, y: &amp;<span class="symbol">&#x27;a</span> <span class="built_in">str</span>) -&gt; &amp;<span class="symbol">&#x27;a</span> <span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x.len() &gt; y.len() &#123;</span><br><span class="line">        x</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="只有一个参数，要不要标注"><a href="#只有一个参数，要不要标注" class="headerlink" title="只有一个参数，要不要标注"></a>只有一个参数，要不要标注</h2><p>那当然是不要啦！！<br>生命周期注解告诉编译器引用参数的有效范围，以便编译器可以检查代码是否合法。<br>但是，在某些情况下，编译器可以自动推断出引用参数的生命周期，因此不需要显式注解。</p><p>当一个函数或方法需要<strong>一个</strong>借用参数时，如果该参数的生命周期与函数或方法的生命周期相同，则可以省略生命周期注解。例如：<br>这个例子，标不标注都是成立的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>&lt;<span class="symbol">&#x27;a</span>&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="built_in">i32</span>) -&gt; &amp;<span class="symbol">&#x27;a</span> <span class="built_in">i32</span> &#123;</span><br><span class="line">    x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> y = foo(&amp;x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果函数或方法需要一个借用参数，并且该参数的生命周期与函数或方法的生命周期不同，则必须显式注解参数的生命周期。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    x: &amp;<span class="symbol">&#x27;a</span> <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>&gt; Foo&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">bar</span></span>(&amp;<span class="keyword">self</span>, y: &amp;<span class="symbol">&#x27;a</span> <span class="built_in">i32</span>) -&gt; &amp;<span class="symbol">&#x27;a</span> <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> *y &gt; <span class="number">0</span> &#123;</span><br><span class="line">            y</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.x</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">let</span> foo = Foo &#123; x: &amp;x &#125;;</span><br><span class="line">    <span class="keyword">let</span> z = foo.bar(&amp;y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，方法 bar 的第二个参数 y 的生命周期不同于 Foo 结构体中的引用 x 的生命周期，所以嘛必须显式注解参数的生命周期。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>人多了，就容易产生纠分，变量形参多了，也是这样，所以才需要标注，分个明白。</p>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-vim 整合基于vimspector的debug调试环境</title>
      <link href="posts/3e7235c0.html"/>
      <url>posts/3e7235c0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面配置好<code>rust</code>开发环境后，还需要一个调试功能就能用了。<br>不清楚的可以回看我的<a href="https://liukai.net/posts/69325553.html">rust-vim安装记录</a><br>调试器，找了几款，最后还是觉得还是使用<code>vimspector</code>这个用的习惯，捣鼓两个整合了一下基于<code>vimspector</code>的调试环境，快捷键不用重新再配置。</p><p>效果图：</p><p><img src="/posts/3e7235c0/rust-vimspector-debug%E6%95%88%E6%9E%9C%E5%9B%BE.jpg" alt="rust-vimspector-debug效果图.jpg"></p><p>这几天换了mac M2，把功能都迁移过来，完可用，这图就是M2上载图的。<br>另外补全相关的配置，需要coc的一些额外配置。<br><a href="https://liukai.net/posts/1ca1b354.html">vim CocConfig参数设置说明</a></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>安装<strong>vimspector插件</strong>: <code>puremourning/vimspector</code></li><li>添加配置文件:<ul><li><code>lldb-vscode.json</code></li><li><code>.vimspector.json</code></li></ul></li></ul><h2 id="安装vimspector插件"><a href="#安装vimspector插件" class="headerlink" title="安装vimspector插件"></a>安装vimspector插件</h2><p>添加插件，然后执行<code>PlugInstall</code>，路径：</p><blockquote><p>~/.config/nvim/init.vim</p></blockquote><p><code>--enable-rust</code> 表示要启用的语言支持，可以从官网查看支持的语言。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;puremourning/vimspector&#x27;</span>, &#123;<span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;./install_gadget.py --enable-rust&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>在vim中执行:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:PlugInstall</span><br></pre></td></tr></table></figure><p>添加配置到<code>init.vim</code>中</p><blockquote><p>~/.config/nvim/init.vim</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;==============================================================================</span></span><br><span class="line"><span class="comment">&quot; rust</span></span><br><span class="line"><span class="comment">&quot;==============================================================================</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>rr :CocCommand rust-analyzer.run<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;==============================================================================</span></span><br><span class="line"><span class="comment">&quot; vimspector 调式配置</span></span><br><span class="line"><span class="comment">&quot;==============================================================================</span></span><br><span class="line"># 指定快捷键影射为 HUMAN 模式，还有 VISUAL_STUDIO 模式</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:vimspector_enable_mappings</span> = <span class="string">&#x27;HUMAN&#x27;</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>dd :<span class="keyword">call</span> vimspector#Launch()<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>dx :VimspectorReset<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>de :VimspectorEval</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>dw :VimspectorWatch</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">do</span> :VimspectorShowOutput</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:vimspector_install_gadgets</span> = [ <span class="string">&#x27;debugpy&#x27;</span>, <span class="string">&#x27;vscode-go&#x27;</span>, <span class="string">&#x27;CodeLLDB&#x27;</span> ]</span><br></pre></td></tr></table></figure><p>其它建议的配置项：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; mnemonic &#x27;di&#x27; = &#x27;debug inspect&#x27; (pick your own, if you prefer!)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; for normal mode - the word under the cursor</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">di</span> <span class="symbol">&lt;Plug&gt;</span>VimspectorBalloonEval</span><br><span class="line"><span class="comment">&quot; for visual mode, the visually selected text</span></span><br><span class="line"><span class="keyword">xmap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">di</span> <span class="symbol">&lt;Plug&gt;</span>VimspectorBalloonEval</span><br></pre></td></tr></table></figure><p>您可能还希望添加用于向上/向下导航堆栈、切换断点窗口和显示反汇编的映射，例如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;LocalLeader&gt;</span><span class="symbol">&lt;F11&gt;</span> <span class="symbol">&lt;Plug&gt;</span>VimspectorUpFrame</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;LocalLeader&gt;</span><span class="symbol">&lt;F12&gt;</span> <span class="symbol">&lt;Plug&gt;</span>VimspectorDownFrame</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;LocalLeader&gt;</span>B     <span class="symbol">&lt;Plug&gt;</span>VimspectorBreakpoints</span><br><span class="line"><span class="comment">&quot; 反汇编的映射</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;LocalLeader&gt;</span>D     <span class="symbol">&lt;Plug&gt;</span>VimspectorDisassemble</span><br></pre></td></tr></table></figure><h2 id="vimspector-配置"><a href="#vimspector-配置" class="headerlink" title="vimspector 配置"></a>vimspector 配置</h2><p>需要添加两个配置文件:</p><ol><li><code>lldb-vscode.json</code></li><li><code>.vimspector.json</code></li></ol><h3 id="1-添加-lldb-vscode-json"><a href="#1-添加-lldb-vscode-json" class="headerlink" title="1.添加 lldb-vscode.json"></a>1.添加 lldb-vscode.json</h3><p><code>lldb-vscode.json</code>文件所以在这个路径，如果没有<code>.gadgets.d</code>需要创建一个，我的 路径:<br><code>~/.vim/plugged/vimspector/gadgets/macos/.gadgets.d/lldb-vscode.json</code><br>这里说明一个，这个路径是<code>.vim</code>，我用的是<code>nvim</code>没错，只是我把插件路径都统一到了<code>.vim</code>这个目录下了。<br>最开还没有使用<code>nvim</code>，用的是<code>vim</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;adapters&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lldb-vscode&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;variables&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;LLVM&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;shell&quot;</span>: <span class="string">&quot;brew --prefix llvm&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;attach&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;pidProperty&quot;</span>: <span class="string">&quot;pid&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;pidSelect&quot;</span>: <span class="string">&quot;none&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;command&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;$&#123;LLVM&#125;/bin/lldb-vscode&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;LLDB_LAUNCH_FLAG_LAUNCH_IN_TTY&quot;</span>: <span class="string">&quot;YES&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lldb&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-添加-vimspector-文件"><a href="#2-添加-vimspector-文件" class="headerlink" title="2.添加 .vimspector 文件"></a>2.添加 .vimspector 文件</h3><p>这个文件添加到子项目下，比如下面是我的项目结构，<br>添加到 <code>vector_test</code> 这个项目下，偿试在<code>rust-learning</code>上添加，子项无法启动<code>vimspector</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rust-learning/</span><br><span class="line">\--src/</span><br><span class="line">\--target/</span><br><span class="line">\--string_test/</span><br><span class="line">\--struct_test/</span><br><span class="line">\--vector_test/</span><br><span class="line">    \--.vimspector</span><br></pre></td></tr></table></figure><h2 id="调试操作"><a href="#调试操作" class="headerlink" title="调试操作"></a>调试操作</h2><p>对应<code>HUMAN</code>模式的快捷键：</p><table><thead><tr><th>按键</th><th>映射</th><th>功能</th></tr></thead><tbody><tr><td><code>F5</code></td><td><code>&lt;Plug&gt;VimspectorContinue</code></td><td>开始调试、下一个断点</td></tr><tr><td><code>F3</code></td><td><code>&lt;Plug&gt;VimspectorStop</code></td><td>停止调试</td></tr><tr><td><code>F4</code></td><td><code>&lt;Plug&gt;VimspectorRestart</code></td><td>使用相同的配置，重启debug</td></tr><tr><td><code>F6</code></td><td><code>&lt;Plug&gt;VimspectorPause</code></td><td>暂停调试对象</td></tr><tr><td><code>F9</code></td><td><code>&lt;Plug&gt;VimspectorToggleBreakpoint</code></td><td>添加、取消断点</td></tr><tr><td><code>&lt;leader&gt;F9</code></td><td><code>&lt;Plug&gt;VimspectorToggleConditionalBreakpoint</code></td><td>添加条件断点或日志点</td></tr><tr><td><code>F8</code></td><td><code>&lt;Plug&gt;VimspectorAddFunctionBreakpoint</code></td><td>为光标下的表达式添加函数断点</td></tr><tr><td><code>&lt;leader&gt;F8</code></td><td><code>&lt;Plug&gt;VimspectorRunToCursor</code></td><td>运行到光标处</td></tr><tr><td><code>F10</code></td><td><code>&lt;Plug&gt;VimspectorStepOver</code></td><td>单步跳过</td></tr><tr><td><code>F11</code></td><td><code>&lt;Plug&gt;VimspectorStepInto</code></td><td>单步进入</td></tr><tr><td><code>F12</code></td><td><code>&lt;Plug&gt;VimspectorStepOut</code></td><td>单步跳出</td></tr></tbody></table><p>如果跑完一圈断点要重开，就按<code>F4</code>，其它的跟常用IDE差不多。<br>还有就是各个窗口，也和IDE差不多的功能，线程栈可以跳对应的线程和执行的代码位置。<br>变量监视窗口支持表达式，到窗口按<code>i</code>，就可以输入表达式如：<code>i==50</code>。</p><p><img src="/posts/3e7235c0/rust-vimspector-debug%E7%AA%97%E5%8F%A3%E8%AF%B4%E6%98%8E.jpg" alt="rust-vimspector-debug窗口说明.jpg"></p><p>差不多就能用了，有问题留言。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/puremourning/vimspector">https://github.com/puremourning/vimspector</a></p>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
          <category> vim </category>
          
          <category> ide </category>
          
          <category> ide </category>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> ide </tag>
            
            <tag> vim </tag>
            
            <tag> debug </tag>
            
            <tag> vim-ide </tag>
            
            <tag> vimspector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>coc-java无法启动和lombok报错解决</title>
      <link href="posts/2fd8d4c0.html"/>
      <url>posts/2fd8d4c0.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一问时间不写java，这两天写java程序发现<code>vim-java</code>相关配置失效了，症状就是：</p><ol><li>语法提示服务<code>jdt</code>不启动</li><li>lombok 失效</li></ol><p>排查了一圈发现启动后官方的插件配置名都变了，改用合结<code>vs-code</code>的配置，又折腾了好一会。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="更新jdt"><a href="#更新jdt" class="headerlink" title="更新jdt"></a>更新jdt</h3><p>从官方jdt下载一个新包：<a href="https://github.com/eclipse/eclipse.jdt.ls">https://github.com/eclipse/eclipse.jdt.ls</a><br>备分：~/.config/coc/extensions/coc-java-data/server/ 目录，把下载的新包，内容放到 server下。</p><h3 id="解决-lombok-报错问题"><a href="#解决-lombok-报错问题" class="headerlink" title="解决 lombok 报错问题"></a>解决 lombok 报错问题</h3><p>还没完，启动后发现<code>lombok</code>报错，首先<code>coc-java-lombok</code>必须安装，没装的可以装一下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CocInstall coc-java-lombok</span><br></pre></td></tr></table></figure><p>然后安装<code>OpenJDK</code>，这个已验证必须使用<code>OpenJDK</code>才能解决这个问题。<br>最后清理一下项目，很多人发现改完也没有效果，就是因为没有清理：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CocCommand java.clean.workspace</span><br></pre></td></tr></table></figure><p><img src="/posts/2fd8d4c0/coc-java%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C.jpg" alt=" coc-java最终效果"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> vim </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> vim </tag>
            
            <tag> coc </tag>
            
            <tag> coc-java </tag>
            
            <tag> lombok </tag>
            
            <tag> coc-java-lombok </tag>
            
            <tag> 问題解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-泛型generics</title>
      <link href="posts/4fcae1e5.html"/>
      <url>posts/4fcae1e5.html</url>
      
        <content type="html"><![CDATA[<h2 id="泛型（generics"><a href="#泛型（generics" class="headerlink" title="泛型（generics)"></a>泛型（generics)</h2><p>rust 也有泛型，这种最早出现1970年代的<code>Ada</code>语言中，后来被许多基于对象和面向对象的语言所采用，包括BETA、 C++、java。<br>rust 也借鉴了这一特性。<br>这种特性让程序有更好的通用性。</p><h3 id="1-简单示例-结构体泛型"><a href="#1-简单示例-结构体泛型" class="headerlink" title="1.简单示例-结构体泛型"></a>1.简单示例-结构体泛型</h3><p>给结构体 <code>Point</code> 定义一个泛型 <code>T</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> integer = Point &#123; x: <span class="number">5</span>, y: <span class="number">10</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> float = Point &#123; x: <span class="number">1.0</span>, y: <span class="number">4.0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同类型泛型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&lt;T, U&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: U,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> both_integer = Point &#123; x: <span class="number">5</span>, y: <span class="number">10</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> both_float = Point &#123; x: <span class="number">1.0</span>, y: <span class="number">4.0</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> integer_and_float = Point &#123; x: <span class="number">5</span>, y: <span class="number">4.0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-函数泛型-同方法泛型"><a href="#2-函数泛型-同方法泛型" class="headerlink" title="2.函数泛型-同方法泛型"></a>2.函数泛型-同方法泛型</h3><p>传入什么，就返回什么类型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">largest</span></span>&lt;T&gt;(list: &amp;[T]) -&gt; T &#123;</span><br></pre></td></tr></table></figure><p>那会不会跟java一样，可以类泛型作用到方法。<br>rust 结构体泛型作用到 函数？</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">largest</span></span>&lt;T&gt;(list: &amp;[T]) -&gt; &amp;T &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> largest = &amp;list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list &#123;</span><br><span class="line">        <span class="keyword">if</span> item &gt; largest &#123;</span><br><span class="line">            largest = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    largest</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> number_list = <span class="built_in">vec!</span>[<span class="number">34</span>, <span class="number">50</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">65</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = largest(&amp;number_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The largest number is &#123;&#125;&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> char_list = <span class="built_in">vec!</span>[<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;q&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = largest(&amp;char_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The largest char is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-方法泛型"><a href="#3-方法泛型" class="headerlink" title="3.方法泛型"></a>3.方法泛型</h3><p>真有这个。</p><p>用法和定义同java一样。<br>实现一个Point 的方法，类型为T。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Point&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">x</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> p = Point &#123; x: <span class="number">5</span>, y: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;p.x = &#123;&#125;&quot;</span>, p.x());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型指定限制（constraint）<br>这个例子，也是实现Point，但是类型为具体类型 f32</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Point&lt;<span class="built_in">f32</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">distance_from_origin</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">f32</span> &#123;</span><br><span class="line">        (<span class="keyword">self</span>.x.powi(<span class="number">2</span>) + <span class="keyword">self</span>.y.powi(<span class="number">2</span>)).sqrt()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合 self 使用<br>注意 x 返回的是 self.x 所以是调用者 p1 自己的x</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&lt;X1, Y1&gt; &#123;</span><br><span class="line">    x: X1,</span><br><span class="line">    y: Y1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;X1, Y1&gt; Point&lt;X1, Y1&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">mixup</span></span>&lt;X2, Y2&gt;(<span class="keyword">self</span>, other: Point&lt;X2, Y2&gt;) -&gt; Point&lt;X1, Y2&gt; &#123;</span><br><span class="line">        Point &#123;</span><br><span class="line">            x: <span class="keyword">self</span>.x,</span><br><span class="line">            y: other.y,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = Point &#123; x: <span class="number">5</span>, y: <span class="number">10.4</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> p2 = Point &#123; x: <span class="string">&quot;Hello&quot;</span>, y: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> p3 = p1.mixup(p2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;p3.x = &#123;&#125;, p3.y = &#123;&#125;&quot;</span>, p3.x, p3.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p3.x = <span class="number">5</span>, p3.y = c</span><br></pre></td></tr></table></figure><h3 id="泛型代码的性能"><a href="#泛型代码的性能" class="headerlink" title="泛型代码的性能"></a>泛型代码的性能</h3><p>Rust 通过在编译时进行泛型代码的 <code>单态化（monomorphization）</code>来保证效率。<br>单态化是一个通过填充<strong>编译时</strong>使用的具体类型，将通用代码转换为特定代码的过程。</p><p>java也是一样的方式，通过泛型擦除来实现，就是<br>泛型信息只存在于代码编译阶段，在java的运行期(已经生成字节码文件后)与泛型相关的信息会被擦除掉。<br>所以其实也是在编译期做文章。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>rust 的很多方面，都借鉴了java的总分特性，不是指泛型，而是指后面还明更多的部分，比如<strong>迭代器</strong>，用起来很丝滑。<br>还有如<code>golang</code>部份的特性，在<code>channel</code>部分，用起来，就是像<code>golang</code>。</p>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> 泛型 </tag>
            
            <tag> generics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron-节点-witness加载过程</title>
      <link href="posts/fe400015.html"/>
      <url>posts/fe400015.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>witness 即在tron链中就是产块节点的代名词，一般称为<code>SR</code>。<br>一般节点不产块，要配置成witness，需要启动时指定私钥，并使用<code>--witness</code>或<code>-w</code>指定成为产块节点。</p><h2 id="witness-加载过程"><a href="#witness-加载过程" class="headerlink" title="witness 加载过程"></a>witness 加载过程</h2><p>有两种加载方式：</p><ol><li>参数或配置文件</li><li>指定<code>localwitness</code>启动</li></ol><h3 id="参数或配置文件"><a href="#参数或配置文件" class="headerlink" title="参数或配置文件"></a>参数或配置文件</h3><p>通过参数指定为witness节点，但是私钥建议写在配置文件中，否则<code>ps</code>查看一下进程就能看到启动参数，就全暴露了，但是如果有人能上机器，也能查看配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar FullNode.jar --witness -p xxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>输入上面的命令后，节点就会以<code>SR</code>类型启动，具体是如何加载的，调用栈如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FullNode.main()</span><br><span class="line">\--Args.setParam(args, Constant.TESTNET_CONF);        &#x2F;&#x2F;381</span><br><span class="line">   \--PARAMETER.privateKey          &#x2F;&#x2F;优先加载 参数</span><br><span class="line">   \--Constant.LOCAL_WITNESS        &#x2F;&#x2F;或加载 配置文件</span><br><span class="line">   \--LocalWitnesses.setPrivateKeys &#x2F;&#x2F;或从 keystore 中加载</span><br><span class="line">FullNode.startup()</span><br><span class="line">\--ConsensusService.start()   &#x2F;&#x2F; 加载localwitness</span><br></pre></td></tr></table></figure><h3 id="Args-setParam-加载过程"><a href="#Args-setParam-加载过程" class="headerlink" title="Args.setParam 加载过程"></a>Args.setParam 加载过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;app&quot;)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Args</span> <span class="keyword">extends</span> <span class="title">CommonParameter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Getter</span></span><br><span class="line">  <span class="meta">@Setter</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> LocalWitnesses localWitnesses = <span class="keyword">new</span> LocalWitnesses();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setParam</span><span class="params">(<span class="keyword">final</span> String[] args, <span class="keyword">final</span> String confFileName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// PARAMETER.privateKey 即 -p 或 --private-key 参数</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNoneBlank(PARAMETER.privateKey)) &#123;</span><br><span class="line">      localWitnesses = (<span class="keyword">new</span> LocalWitnesses(PARAMETER.privateKey));</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.isNoneBlank(PARAMETER.witnessAddress)) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Commons.decodeFromBase58Check(PARAMETER.witnessAddress);</span><br><span class="line">        <span class="keyword">if</span> (bytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">          localWitnesses.setWitnessAccountAddress(bytes);</span><br><span class="line">          logger.debug(<span class="string">&quot;Got localWitnessAccountAddress from cmd&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          PARAMETER.witnessAddress = <span class="string">&quot;&quot;</span>;</span><br><span class="line">          logger.warn(IGNORE_WRONG_WITNESS_ADDRESS_FORMAT);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 初始化 witness</span></span><br><span class="line">      localWitnesses.initWitnessAccountAddress(PARAMETER.isECKeyCryptoEngine());</span><br><span class="line">      logger.debug(<span class="string">&quot;Got privateKey from cmd&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.hasPath(Constant.LOCAL_WITNESS)) &#123;</span><br><span class="line">      <span class="comment">// Constant.LOCAL_WITNESS 即，配置文件中的 localwitness 这个配置项，可以配置多个</span></span><br><span class="line">      <span class="comment">// 作用就是一个 java-tron 服务，配置多个witness产块，这样做的话，要约成本，一台机器就可以配置多个</span></span><br><span class="line">      localWitnesses = <span class="keyword">new</span> LocalWitnesses();</span><br><span class="line">      List&lt;String&gt; localwitness = config.getStringList(Constant.LOCAL_WITNESS);</span><br><span class="line">      localWitnesses.setPrivateKeys(localwitness);</span><br><span class="line">      witnessAddressCheck(config);</span><br><span class="line">      localWitnesses.initWitnessAccountAddress(PARAMETER.isECKeyCryptoEngine());</span><br><span class="line">      logger.debug(<span class="string">&quot;Got privateKey from config.conf&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.hasPath(Constant.LOCAL_WITNESS_KEYSTORE)) &#123;</span><br><span class="line">      <span class="comment">// 通过 keystore 加载</span></span><br><span class="line">      localWitnesses = <span class="keyword">new</span> LocalWitnesses();</span><br><span class="line">      List&lt;String&gt; privateKeys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">      <span class="keyword">if</span> (PARAMETER.isWitness()) &#123;</span><br><span class="line">        List&lt;String&gt; localwitness = config.getStringList(Constant.LOCAL_WITNESS_KEYSTORE);</span><br><span class="line">        <span class="keyword">if</span> (localwitness.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          String fileName = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/&quot;</span> + localwitness.get(<span class="number">0</span>);</span><br><span class="line">          String password;</span><br><span class="line">          <span class="keyword">if</span> (StringUtils.isEmpty(PARAMETER.password)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Please input your password.&quot;</span>);</span><br><span class="line">            password = WalletUtils.inputPassword();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            password = PARAMETER.password;</span><br><span class="line">            PARAMETER.password = <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            Credentials credentials = WalletUtils</span><br><span class="line">                .loadCredentials(password, <span class="keyword">new</span> File(fileName));</span><br><span class="line">            SignInterface sign = credentials.getSignInterface();</span><br><span class="line">            String prikey = ByteArray.toHexString(sign.getPrivateKey());</span><br><span class="line">            privateKeys.add(prikey);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException | CipherException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">            logger.error(<span class="string">&quot;Witness node start failed!&quot;</span>);</span><br><span class="line">            exit(-<span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      localWitnesses.setPrivateKeys(privateKeys);</span><br><span class="line">      witnessAddressCheck(config);</span><br><span class="line">      localWitnesses.initWitnessAccountAddress(PARAMETER.isECKeyCryptoEngine());</span><br><span class="line">      logger.debug(<span class="string">&quot;Got privateKey from keystore&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="共识阶段加载"><a href="#共识阶段加载" class="headerlink" title="共识阶段加载"></a>共识阶段加载</h2><p><code>ConsensusService</code> 主要控制共识相关，在启动时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConsensusService.start</span><br><span class="line">\--Consensus.start</span><br><span class="line">   \--DposService.start <span class="comment">// 对共抽的抽象，设计上方便切换共识</span></span><br></pre></td></tr></table></figure><p>几个关注的点：</p><ol><li>设置成<code>witness</code>节点</li><li>加载前面的私钥</li><li>启动共识</li><li>更新updateWitness</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Param param = Param.getInstance();</span><br><span class="line">  <span class="comment">// 设置成 witness 节点</span></span><br><span class="line">  param.setEnable(parameter.isWitness());</span><br><span class="line">  param.setGenesisBlock(parameter.getGenesisBlock());</span><br><span class="line">  param.setMinParticipationRate(parameter.getMinParticipationRate());</span><br><span class="line">  param.setBlockProduceTimeoutPercent(Args.getInstance().getBlockProducedTimeOut());</span><br><span class="line">  param.setNeedSyncCheck(parameter.isNeedSyncCheck());</span><br><span class="line">  param.setAgreeNodeCount(parameter.getAgreeNodeCount());</span><br><span class="line">  List&lt;Miner&gt; miners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="comment">// 拿到私钥列表</span></span><br><span class="line">  List&lt;String&gt; privateKeys = Args.getLocalWitnesses().getPrivateKeys();</span><br><span class="line">  <span class="keyword">if</span> (privateKeys.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 前面说了，可以配置多个 私钥，所以这里遍历</span></span><br><span class="line">    <span class="keyword">for</span> (String key : privateKeys) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] privateKey = fromHexString(key);</span><br><span class="line">      <span class="keyword">byte</span>[] privateKeyAddress = SignUtils</span><br><span class="line">          .fromPrivate(privateKey, Args.getInstance().isECKeyCryptoEngine()).getAddress();</span><br><span class="line">      WitnessCapsule witnessCapsule = witnessStore.get(privateKeyAddress);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> == witnessCapsule) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;Witness &#123;&#125; is not in witnessStore.&quot;</span>, Hex.toHexString(privateKeyAddress));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 封装到 Miner 中，在产块时私钥相关校验</span></span><br><span class="line">      Miner miner = param.<span class="function">new <span class="title">Miner</span><span class="params">(privateKey, ByteString.copyFrom(privateKeyAddress)</span>,</span></span><br><span class="line"><span class="function">          ByteString.<span class="title">copyFrom</span><span class="params">(privateKeyAddress)</span>)</span>;</span><br><span class="line">      miners.add(miner);</span><br><span class="line">      logger.info(<span class="string">&quot;Add witness: &#123;&#125;, size: &#123;&#125;&quot;</span>,</span><br><span class="line">          Hex.toHexString(privateKeyAddress), miners.size());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] privateKey =</span><br><span class="line">        fromHexString(Args.getLocalWitnesses().getPrivateKey());</span><br><span class="line">    <span class="keyword">byte</span>[] privateKeyAddress = SignUtils.fromPrivate(privateKey,</span><br><span class="line">        Args.getInstance().isECKeyCryptoEngine()).getAddress();</span><br><span class="line">    <span class="keyword">byte</span>[] witnessAddress = Args.getLocalWitnesses().getWitnessAccountAddress(</span><br><span class="line">        Args.getInstance().isECKeyCryptoEngine());</span><br><span class="line">    WitnessCapsule witnessCapsule = witnessStore.get(witnessAddress);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == witnessCapsule) &#123;</span><br><span class="line">      logger.warn(<span class="string">&quot;Witness &#123;&#125; is not in witnessStore.&quot;</span>, Hex.toHexString(witnessAddress));</span><br><span class="line">    &#125;</span><br><span class="line">    Miner miner = param.n<span class="function">ew <span class="title">Miner</span><span class="params">(privateKey, ByteString.copyFrom(privateKeyAddress)</span>,</span></span><br><span class="line"><span class="function">        ByteString.<span class="title">copyFrom</span><span class="params">(witnessAddress)</span>)</span>;</span><br><span class="line">    miners.add(miner);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  param.setMiners(miners);</span><br><span class="line">  param.setBlockHandle(blockHandle);</span><br><span class="line">  param.setPbftInterface(pbftBaseImpl);</span><br><span class="line">  <span class="comment">// 启动共识</span></span><br><span class="line">  consensus.start(param);</span><br><span class="line">  logger.info(<span class="string">&quot;consensus service start success&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dpos-中加载"><a href="#Dpos-中加载" class="headerlink" title="Dpos 中加载"></a>Dpos 中加载</h2><p>//TODO</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
          <category> witness </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> tron </tag>
            
            <tag> 波场 </tag>
            
            <tag> witness </tag>
            
            <tag> 加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go结合Slash Commands使用</title>
      <link href="posts/3c62c672.html"/>
      <url>posts/3c62c672.html</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>通过 <code>Slack</code> 命令模式，调用操作远程服务器。<br>服务端需要跟一个<code>http</code>服务来解析<code>slash</code>调过来的命令。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备以下步骤：</p><ol><li>创建Slash conmand</li><li>开发服务端应用</li></ol><h2 id="添加-Slash-Conmand"><a href="#添加-Slash-Conmand" class="headerlink" title="添加 Slash Conmand"></a>添加 Slash Conmand</h2><h3 id="添加App"><a href="#添加App" class="headerlink" title="添加App"></a>添加App</h3><p>先到官网地址：<a href="https://api.slack.com/">https://api.slack.com/</a> 创建一个<code>App</code></p><p><img src="/posts/3c62c672/%E5%AE%98%E7%BD%91.png" alt="官网"></p><p><img src="/posts/3c62c672/createApp.png" alt="createApp"></p><p>选<code>Slash Conmand</code></p><p><img src="/posts/3c62c672/slashCommand.png" alt="slashCommand"></p><p><img src="/posts/3c62c672/createCommand.png" alt="createCommand"></p><p>输出一个自定义命令</p><p><img src="/posts/3c62c672/createNewCommand.png" alt="createNewCommand"></p><p>到这就创建完成了，接下来开发服务端。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>创建 go 项目<code>slacktool</code>，添加：</p><ol><li>main.go 文件</li><li>go.mod 文件</li><li>environment.env 文件</li></ol><p>项目结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slacktool</span><br><span class="line">|---main.go</span><br><span class="line">|---go.mod</span><br><span class="line">|---environment.env</span><br></pre></td></tr></table></figure><h3 id="添加-go-mod-依赖"><a href="#添加-go-mod-依赖" class="headerlink" title="添加 go.mod 依赖"></a>添加 go.mod 依赖</h3><p>添加两个依赖：<br><code>godotenv</code> 和 <code>slack</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module github.com/forfreeday/slacktool</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.17</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">    github.com/joho/godotenv v1<span class="number">.4</span><span class="number">.0</span></span><br><span class="line">    github.com/nlopes/slack v0<span class="number">.6</span><span class="number">.0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>添加后执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h3 id="编辑-main-go"><a href="#编辑-main-go" class="headerlink" title="编辑 main.go"></a>编辑 main.go</h3><p>下面的功能包括：</p><ol><li>运行一个http服务端</li><li>runConmand 运行逻辑</li><li>exec 执行shell命令</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/joho/godotenv&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/nlopes/slack&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 读取环境变量配置</span></span><br><span class="line">err := godotenv.Load(<span class="string">&quot;environment.env&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Error loading .env file&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 具体处理逻辑</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/deploy-test&quot;</span>, slashCommandHandler)</span><br><span class="line">fmt.Println(<span class="string">&quot;[INFO] Server listening&quot;</span>)</span><br><span class="line">    <span class="comment">// 启动 http</span></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:10001&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slashCommandHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">s, err := slack.SlashCommandParse(r)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;for test: invoke msg&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> !s.ValidateToken(os.Getenv(<span class="string">&quot;SLACK_VERIFICATION_TOKEN&quot;</span>)) &#123;</span><br><span class="line">w.WriteHeader(http.StatusUnauthorized)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> s.Command &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/deploy-test&quot;</span>:</span><br><span class="line">params := &amp;slack.Msg&#123;Text: s.Text&#125;</span><br><span class="line">response := fmt.Sprintf(<span class="string">&quot;Command params : %v&quot;</span>, params.Text)</span><br><span class="line">        <span class="comment">// 开启协程，否则如果执行太久，slack端会返回 timeout</span></span><br><span class="line"><span class="keyword">go</span> runConmand(params, w)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(response))</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runConmand</span><span class="params">(param *slack.Msg, w http.ResponseWriter)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> param.Text &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;--restartAll&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;restart All node&quot;</span>)</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;deploy-test&quot;</span>, param.Text)</span><br><span class="line">_, err := cmd.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;--develop&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;develop code&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端行一下，服务端可以多加一些日志，查看效果。</p><p><img src="/posts/3c62c672/slash%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C.jpg" alt="slash执行效果"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>比较简单，上面的代码最终调了一个系统命令<code>deploy-test</code>，这个实际写的另一个命令，写文章举个例子。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> slack </category>
          
          <category> slash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> slack </tag>
            
            <tag> slash </tag>
            
            <tag> conmand </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-所有权</title>
      <link href="posts/e28f62f.html"/>
      <url>posts/e28f62f.html</url>
      
        <content type="html"><![CDATA[<h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p>所有权（系统）是 Rust 最为与众不同的特性。<br>它让 Rust 无需垃圾回收（garbage collector）即可保障内存安全。<br>所有权以及相关功能：借用（borrowing）、slice 以及 Rust 如何在内存中布局数据。</p><p>所有程序都必须管理其运行时使用计算机内存的方式。<br>一些语言中具有垃圾回收机制，如: java、python;<br>在另一些语言中，程序员必须亲自分配和释放内存，如：C/C++;</p><p>Rust 则选择了第三种方式：通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。</p><h2 id="内存与分配"><a href="#内存与分配" class="headerlink" title="内存与分配"></a>内存与分配</h2><p>Rust 的所有权围绕着内存分配进行，Rust 对内存管理通过其所有权展开。</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>它是一种 <strong>后进先出</strong> 的机制，类似我们日常的落盘子，只能一个一个向上方，然后从最上面拿一个盘子。<br>一个变量要放到栈上，那么它的大小在编译时就要明确。<code>i32</code> 类型的变量，它就占用 <code>4</code> 个字节。Rust 中可以放到栈上的数据类型，他们的大小都是固定的。<br>如果是字符串，在运行时才会赋值的变量，在编译期的时候大小是未知或不确定的。所以字符串类型存储在<strong>堆上</strong>。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>用于编译时大小未知或不确定的，只有运行时才能确定的数据。在堆上存储一些动态类型的数据。堆是不受系统管理的，是用户自己管理的，也增加了内存溢出的风险。</p><h2 id="1-所有权规则"><a href="#1-所有权规则" class="headerlink" title="1.所有权规则"></a>1.所有权规则</h2><p>记住这三句话，整个所有权就是围绕这三句话，这三句话也直接概括了所有权。</p><ol><li>Rust 中的<strong>每一个值</strong>都有一个<strong>所有者（owner）</strong>。</li><li>值在<strong>任一时刻</strong>有且只有<strong>一个</strong>所有者。</li><li>当所有者（变量）离开作用域，这个值将被丢弃。</li></ol><h2 id="2-变量作用域"><a href="#2-变量作用域" class="headerlink" title="2.变量作用域"></a>2.变量作用域</h2><p>大部份编程语言都有 <strong>作用域(scope)</strong> 的概念，但是在rust中，这个概念被提到一个很重要的高度。<br>先看看rust一些变量的 <strong>作用域（scope）</strong>。<br>作用域是一个项（item）在程序中有效的范围。<br>下面这个例子，重点关注变量：<code>let s = &quot;hello&quot;</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;                      <span class="comment">// s 在这里无效, 它尚未声明</span></span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">&quot;hello&quot;</span>;   <span class="comment">// 从此处起，s 是有效的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 s</span></span><br><span class="line">    &#125;                      <span class="comment">// 此作用域已结束，s 不再有效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>s</code> 进入作用域时，它就是有效的。<br>这一直持续到它 <strong>离开作用域</strong> 为止。</p><p>当 <code>s</code> 离开作用域的时候。当变量离开作用域，Rust 为我们调用一个特殊的函数。这个函数叫做 <code>drop</code>，在这里 String 的作者可以放置释放内存的代码。<br>Rust 在结尾的 <code>&#125;</code> 处<strong>自动调用</strong> <code>drop</code>。</p><p><strong>Rust 采取了一个不同的策略：内存在拥有它的变量离开作用域后就被自动释放</strong>。<br>核心就一句话，变量出了<strong>作用域</strong>，rust帮你释放了！！</p><h2 id="3-移动"><a href="#3-移动" class="headerlink" title="3.移动"></a>3.移动</h2><p>在 rust 当中一个变量指向另一个变量，并不是地址或引用的copy，而是称之为：<strong>移动</strong>。<br>当 s2=s1 时，引用s1被移动到s2上，这和其它编程语言完全不同！！<br>下面这段代码，在其它编程语言上指针<code>s1</code>指向了指针<code>s1</code>，<code>s1</code>仍然有效，在rust当中，<code>s1</code>无效已经无效。<br>在rust中，这个操作被称为 <strong>移动（move）</strong>，而不是叫做浅拷贝。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> s2 = s1;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, world!&quot;</span>, s1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">error[E0382]: borrow of moved value: `s1`</span><br><span class="line"> --&gt; src/main.rs:<span class="number">5</span>:<span class="number">28</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">2</span> |     <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait</span><br><span class="line"><span class="number">3</span> |     <span class="keyword">let</span> s2 = s1;</span><br><span class="line">  |              -- value moved here</span><br><span class="line"><span class="number">4</span> |</span><br><span class="line"><span class="number">5</span> |     <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, world!&quot;</span>, s1);   </span><br><span class="line">  |                            ^^ value borrowed here after <span class="keyword">move</span></span><br><span class="line">  |</span><br></pre></td></tr></table></figure><p>为什么要这么设计？<br>为了防止<strong>二次释放</strong>。<br>当 <code>s2</code> 和 <code>s1</code> 离开作用域，他们都会尝试释放相同的内存。<br>这是一个叫做 <strong>二次释放（double free）</strong>的错误，也是之前提到过的内存安全性 bug 之一。<br>两次释放（相同）内存会导致内存污染，它可能会导致潜在的安全漏洞。</p><h3 id="如何保证，即要、也要"><a href="#如何保证，即要、也要" class="headerlink" title="如何保证，即要、也要"></a>如何保证，即要、也要</h3><p>即要把<code>s2=s1</code>，也可保持<code>s1</code>可用，那就显示拷贝。</p><h2 id="4-引用和借用-reference-amp-borrowing"><a href="#4-引用和借用-reference-amp-borrowing" class="headerlink" title="4.引用和借用 reference &amp; borrowing"></a>4.引用和借用 reference &amp; borrowing</h2><h3 id="借用-borrowing"><a href="#借用-borrowing" class="headerlink" title="借用(borrowing)"></a>借用(borrowing)</h3><p>借用就是字面意思，借来的数据，你并不拥有它。<br>看个例子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="comment">// len 借用 s1</span></span><br><span class="line">    <span class="keyword">let</span> len = calculate_length(&amp;s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s1, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_length</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    s.len()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>s1</code> 移进了 <code>calculate_length</code>，但是所有权并没有转移，这里只是借用了<code>s1</code>。<br>也就是说：指向 值 <code>s1</code> 的引用，但是并不拥有它。<br>因为并不拥有这个值，所以当引用停止使用时，它所指向的值也不会被丢弃。</p><h3 id="借用默认不允许修改值"><a href="#借用默认不允许修改值" class="headerlink" title="借用默认不允许修改值"></a>借用默认不允许修改值</h3><p>这个是反例，当去改变一个借用的数据时，就会报错。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    change(&amp;s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(some_string: &amp;<span class="built_in">String</span>) &#123;</span><br><span class="line">    some_string.push_str(<span class="string">&quot;, world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> 所有权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GnuPG-2子密钥使用</title>
      <link href="posts/38f72231.html"/>
      <url>posts/38f72231.html</url>
      
        <content type="html"><![CDATA[<h2 id="子密钥"><a href="#子密钥" class="headerlink" title="子密钥"></a>子密钥</h2><p>主私钥有所有功能，但实际使用中仅用来生成子密钥，要保证主密钥的绝对安全。<br>所以一般只用来生成子密钥，使用子密钥参与工作。<br>即：<code>subkey</code>，可以看到子密钥拥有以下这些功能，除了没有<strong>认证</strong>功能</p><table><thead><tr><th align="center">类型</th><th align="center">认证 [C]</th><th align="center">签名 [S]</th><th align="center">身份验证 [A]</th><th align="center">加密 [E]</th></tr></thead><tbody><tr><td align="center">主私钥</td><td align="center">有</td><td align="center">有</td><td align="center">有</td><td align="center">有</td></tr><tr><td align="center">子私钥</td><td align="center">无</td><td align="center">有</td><td align="center">有</td><td align="center">有</td></tr></tbody></table><p>单一公钥机制对于服务端的验证特别友好，无论用户有多少个子密钥，服务器只需要一份证书（公钥）就够了，而不需要额外开销，去查询这份证书是哪个上级签发的。<br>什么叫单一公钥机制？<br>就是<strong>主密钥</strong>生成一个公钥，所有的子私钥都可以对这个公钥进行签名、身份验证、加密操作。</p><h2 id="生成子密钥"><a href="#生成子密钥" class="headerlink" title="生成子密钥"></a>生成子密钥</h2><p>子密钥可以指定上面的：[S]、[A]、[E] 的功能，可以全部拥有，也可以功能独立，取决于在添加时的指定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --expert --edit-key [用户ID]</span><br></pre></td></tr></table></figure><p>参数说明：</p><p><code>--expert</code>：进入gpg命令模式<br><code>--edit-key</code>：操作用户ID</p><p>输入<code>addkey</code>，添加子密钥，选择一种加密模式，选 <code>4</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gpg&gt; addkey</span><br><span class="line">请选择您要使用的密钥类型：</span><br><span class="line">   (3) DSA（仅用于签名）</span><br><span class="line">   (4) RSA（仅用于签名）</span><br><span class="line">   (5) ElGamal（仅用于加密）</span><br><span class="line">   (6) RSA（仅用于加密）</span><br><span class="line">   (7) DSA（自定义用途）</span><br><span class="line">   (8) RSA（自定义用途）</span><br><span class="line">  (10) ECC（仅用于签名）</span><br><span class="line">  (11) ECC（自定义用途）</span><br><span class="line">  (12) ECC（仅用于加密）</span><br><span class="line">  (13) 现存的密钥</span><br><span class="line"> （14）卡中现有密钥</span><br></pre></td></tr></table></figure><p>选择长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSA 密钥的长度应在 1024 位与 4096 位之间。</span><br><span class="line">您想要使用的密钥长度？(3072)</span><br><span class="line">请求的密钥长度是 3072 位</span><br><span class="line">选择一个有效期：1y 表示一年</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">请设定这个密钥的有效期限。</span><br><span class="line">         0 &#x3D; 密钥永不过期</span><br><span class="line">      &lt;n&gt;  &#x3D; 密钥在 n 天后过期</span><br><span class="line">      &lt;n&gt;w &#x3D; 密钥在 n 周后过期</span><br><span class="line">      &lt;n&gt;m &#x3D; 密钥在 n 月后过期</span><br><span class="line">      &lt;n&gt;y &#x3D; 密钥在 n 年后过期</span><br><span class="line">密钥的有效期限是？(0) 1y</span><br><span class="line">创建时间要大概几秒，成功后的输出：DAF9C7421FB1B533为子密钥</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sec  rsa3072&#x2F;D66E46924A7A4475</span><br><span class="line">     创建于：2023-01-03  有效至：2025-01-02  可用于：SC</span><br><span class="line">     信任度：绝对        有效性：绝对</span><br><span class="line">ssb  rsa3072&#x2F;9FF7004AC3A0DB89</span><br><span class="line">     创建于：2023-01-03  有效至：2025-01-02  可用于：E</span><br><span class="line">ssb  rsa3072&#x2F;DAF9C7421FB1B533</span><br><span class="line">     创建于：2023-01-04  有效至：2024-01-04  可用于：S</span><br><span class="line">[ 绝对 ] (1). liukai &lt;liukaitest@163.com&gt;</span><br><span class="line">最后输入save，保存后再退出当前模式。</span><br><span class="line">gpg &gt; save</span><br></pre></td></tr></table></figure><h3 id="验证子密钥"><a href="#验证子密钥" class="headerlink" title="验证子密钥"></a>验证子密钥</h3><p>查看刚生成的子密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gpg -k DAF9C7421FB1B533</span><br><span class="line">输出：sub   rsa3072为刚创建的子密钥</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pub   rsa3072 2023-01-03 [SC] [有效至：2025-01-02]</span><br><span class="line">      79A86B57A0DA913F0D76B5ACD66E46924A7A4475</span><br><span class="line">uid             [ 绝对 ] liukai &lt;liukaitest@gmail.com&gt;</span><br><span class="line">sub   rsa3072 2023-01-03 [E] [有效至：2025-01-02]</span><br><span class="line">sub   rsa3072 2023-01-04 [S] [有效至：2024-01-04]</span><br></pre></td></tr></table></figure><h3 id="导出子密钥"><a href="#导出子密钥" class="headerlink" title="导出子密钥"></a>导出子密钥</h3><p>实际使用中，主密钥不会直接参与验证工作，而是生成多个子密钥去工作，这样做的好处是，子密钥如果泄露可以吊销，子密钥的功能也是有限的。</p><p>将生成的子密钥发送给服务端进行验证工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --armor --output private-key.txt --export-secret-subkey [用户ID]</span><br></pre></td></tr></table></figure><p>参数说明：</p><p><code>--armor</code>: 以ASCII形式显示，不推存，容易密钥暴露明文<br><code>--export-secret-subkey</code>：导出子密钥<br><code>--output</code>：子密钥文件名</p><h2 id="GPG-吊销证书"><a href="#GPG-吊销证书" class="headerlink" title="GPG 吊销证书"></a>GPG 吊销证书</h2><p>这个就是字面意思，吊销证书。场景就是如果私钥丢失了，那么原来的公钥也就不能信任了。<br>所以可以生成一个员销证书，来吊销原来的证书。</p><p>因此 GPG 多了一个“吊销证书”（revocation certificate），拿着这个证书你就能证明</p><ol><li>确认吊销者身份</li><li>把丢失当前这个密钥作废</li></ol>]]></content>
      
      
      <categories>
          
          <category> safe </category>
          
          <category> cryptography </category>
          
          <category> rsa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gnupg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GnuPG-1主密钥使用</title>
      <link href="posts/82be817.html"/>
      <url>posts/82be817.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>GnuPG，简称GPG，是一个密码学软件，用于加密、签名通信内容及管理非对称密码学的密钥。GnuPG 是自由软件，遵循 IETF 订定的 OpenPGP 技术标准设计，并与 <code>PGP</code> 保持兼容。</p><table><thead><tr><th align="center">功能</th><th align="center">能力</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">[C]</td><td align="center">Certificating</td><td align="center">认证 / 给其它证书签名</td></tr><tr><td align="center">[S]</td><td align="center">Signing</td><td align="center">签名</td></tr><tr><td align="center">[A]</td><td align="center">Authenticating</td><td align="center">身份验证</td></tr><tr><td align="center">[E]</td><td align="center">Encrypting</td><td align="center">加密</td></tr></tbody></table><p>GPG 密钥的能力中， [C]、[S]、[A] 均属于签名方案，只有 [E] 是加密方案。<br>一个主密钥，可以绑定若干个子密钥；这些子密钥有的具备加密功能，有的具备签名功能。<br>可以理解为，主私钥就是用来生成多个子密钥来使用，而子密钥丢失可以随时废弃，主密钥生成新的子密钥来使用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方下载地址：<a href="https://www.gnupg.org/download/index.en.html">https://www.gnupg.org/download/index.en.html</a></p><h3 id="centOS"><a href="#centOS" class="headerlink" title="centOS"></a>centOS</h3><p>CentOS 默认已经安装了 gpg2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --version</span><br></pre></td></tr></table></figure><p>如果需要手动安装，在<a href="http://rpmfind.net/">http://rpmfind.net/</a> 搜GPG下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://rpmfind.net/linux/centos/7.9.2009/os/x86_64/Packages/gnupg2-2.0.22-5.el7_5.x86_64.rpm</span><br><span class="line">rpm -ivh gnupg2-2.0.22-5.el7_5.x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>macOS 下安装，可以选择图形界面和命令行两种形式：</p><p>1.GPGTools 包含图形界面，下载地址：<a href="https://gpgtools.org/">https://gpgtools.org/</a></p><p>可以直接安装 GPGTools，就可以包含命令行工具，本例安装 GPGTools，但是使用它的命令行进行操作。</p><p><img src="/posts/82be817/macOS.jpg" alt="macOS"></p><p>2.命令行工具安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gpg</span><br></pre></td></tr></table></figure><h2 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h2><p>安装后使用命令：<code>gpg</code>进行后续的操作，生成私钥使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure><p>只需输入姓名、邮件即可生成，输出如下，私钥文件生成目录：/Users/{user_name}/.gnupg/openpgp-revocs.d/<br>需要关注<strong>用户ID</strong>，在操作时很多地方需要用到用户ID，我这里生成的测试用户ID：9F4B9BCF408B96C68E0645805BDF50B192200806</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">gpg (GnuPG/MacGPG2) 2.2.40; Copyright (C) 2022 g10 Code GmbH</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">注意：使用 “gpg --full-generate-key” 以获得一个全功能的密钥生成对话框。</span><br><span class="line"></span><br><span class="line">GnuPG 需要构建用户标识以辨认您的密钥。</span><br><span class="line"></span><br><span class="line">真实姓名： liukaitest</span><br><span class="line">电子邮件地址： liukaitest@163.com</span><br><span class="line">您选定了此用户标识：</span><br><span class="line">    “liukaitest &lt;liukaitest@163.com&gt;”</span><br><span class="line"></span><br><span class="line">更改姓名（N）、注释（C）、电子邮件地址（E）或确定（O）/退出（Q）？ o</span><br><span class="line">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘</span><br><span class="line">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数</span><br><span class="line">发生器有更好的机会获得足够的熵。</span><br><span class="line">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘</span><br><span class="line">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数</span><br><span class="line">发生器有更好的机会获得足够的熵。</span><br><span class="line">gpg: 吊销证书已被存储为‘/Users/liukai/.gnupg/openpgp-revocs.d/9F4B9BCF408B96C68E0645805BDF50B192200806.rev’</span><br><span class="line">公钥和私钥已经生成并被签名。</span><br><span class="line"></span><br><span class="line">pub   rsa3072 2023-01-03 [SC] [有效至：2025-01-02]</span><br><span class="line">      9F4B9BCF408B96C68E0645805BDF50B192200806</span><br><span class="line">uid                      liukaitest &lt;liukaitest@163.com&gt;</span><br><span class="line">sub   rsa3072 2023-01-03 [E] [有效至：2025-01-02]</span><br></pre></td></tr></table></figure><h2 id="列出私链"><a href="#列出私链" class="headerlink" title="列出私链"></a>列出私链</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list-secret-keys</span><br></pre></td></tr></table></figure><h2 id="输出公钥"><a href="#输出公钥" class="headerlink" title="输出公钥"></a>输出公钥</h2><p>项目应用中，需要将公钥输出给其它机器使用。公钥文件（.gnupg/pubring.gpg）以二进制形式储存。<br>执行命令，需要用到上面生成的用户ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --armor --output public-key.txt --export [用户ID]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><p><code>--armor</code>：参数可以将其转换为ASCII码显示<br><code>--output</code>：参数指定输出文件名（public-key.txt）<br><code>--export:</code>：指定哪个用户的公钥</p><h2 id="导入、导出密钥"><a href="#导入、导出密钥" class="headerlink" title="导入、导出密钥"></a>导入、导出密钥</h2><h3 id="导出公钥"><a href="#导出公钥" class="headerlink" title="导出公钥"></a>导出公钥</h3><p>导出为公钥文件，--output 参数可以省略，默认文件名也是 public-key.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --armor --output public-key.txt --export [用户ID]</span><br></pre></td></tr></table></figure><h3 id="导出私钥"><a href="#导出私钥" class="headerlink" title="导出私钥"></a>导出私钥</h3><p>导出需要输入密钥密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg -a -o private-file.key --export-secret-keys [用户ID]</span><br></pre></td></tr></table></figure><h3 id="导入公钥、私钥"><a href="#导入公钥、私钥" class="headerlink" title="导入公钥、私钥"></a>导入公钥、私钥</h3><p>有两种方式：</p><ol><li>从远GPG公钥服务器导入</li><li>从公钥文件导入</li></ol><p>从公钥文件导入，这种方式很简单，做开源项目，很多项目会在README中说明公钥HASH，就可以拿着HASH或uid从远程导入到本地。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --recv-keys &lt;keyid/uid&gt;</span><br></pre></td></tr></table></figure><p>通过文件导入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --import [密钥文件]</span><br></pre></td></tr></table></figure><hr><h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>签名的数据内容有两种形式：</p><ol><li>二进制</li><li>ASCII</li></ol><p>签名会生成签名文件或将签名和文件合并成一个文件。</p><h3 id="1-签名数据、生成新文件：原文件和签名生成在同一个文件中"><a href="#1-签名数据、生成新文件：原文件和签名生成在同一个文件中" class="headerlink" title="1.签名数据、生成新文件：原文件和签名生成在同一个文件中"></a>1.签名数据、生成新文件：原文件和签名生成在同一个文件中</h3><p>生成结果为二进制的签名文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --sign demo.txt</span><br></pre></td></tr></table></figure><p>生成新文件：<code>demo.txt.gpg</code>，内容为二进制。</p><p>生成 ASCII 内容的签名文件。文件名为xxxx.xxx.asc。签名信息添加在文件尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --clear-sign 123.txt.gpg</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PGP SIGNED MESSAGE-----</span><br><span class="line">Hash: SHA256</span><br><span class="line"></span><br><span class="line">123123</span><br><span class="line">1231231</span><br><span class="line">12</span><br><span class="line">3123</span><br><span class="line">12</span><br><span class="line">312323</span><br><span class="line">123123123</span><br><span class="line">12</span><br><span class="line">3</span><br><span class="line">-----BEGIN PGP SIGNATURE-----</span><br><span class="line"></span><br><span class="line">iQGzBAEBCAAdFiEEeahrV6DakT8NdrWs1m5Gkkp6RHUFAmOz+Y4ACgkQ1m5Gkkp6</span><br><span class="line">RHXWNQv/fbhBLdmuvw41nrtqK6exJ6MxX0Kso5NXOp5PleKc5baParHgjEvXEey8</span><br><span class="line">6/krmom2K0W9tQQ0cXQkagDqRIhpSNEr+QiG1OZb6tLRLbFPqYCEU9dugc426/xO</span><br><span class="line">4s9/gaLscYo5X8aoOkvO2cdlP/cYNPmI3CUGXJqy9KGVqmfvl8iTbg2LCEmAYqQu</span><br><span class="line">uQdS42XXH8qieEvjCaBj1aC06NVsLmydwlFu3Zah9HVGj2IQmBTXjboz+FrYJ4q+</span><br><span class="line">iVMuOH4b02dg7Il0h8u636EeUwNVkX+4jJB3+DPenQ37FOxp1vv/miKM4ace7SjX</span><br><span class="line">nmMi+oAJnB577dEaOrxnP6wOKcWEd6/GJMRvb1FcLElu46Bsz5UhoQwRmGyuCrNL</span><br><span class="line">2M6j2j4MHzNv4XBLaFv7Lo59TjZVZrghwblL3Y82zcDsak4kBu/GwZCS9/WANjSs</span><br><span class="line">sPFZSVpwe5bg6cFLN35GAcUB590UCbOtN2SMvdWLWeTw4bSeyqcA8wRi0GTU31Tc</span><br><span class="line">yrVpIRH4</span><br><span class="line">=oMT2</span><br><span class="line">-----END PGP SIGNATURE-----</span><br></pre></td></tr></table></figure><p>以上两个命令都是将签名添加到文件中。</p><h3 id="2-签名数据、生成新文件：sig、asc"><a href="#2-签名数据、生成新文件：sig、asc" class="headerlink" title="2.签名数据、生成新文件：sig、asc"></a>2.签名数据、生成新文件：sig、asc</h3><p>1.生成签名，基于二进制格式</p><p>如果想生成单独的签名文件，与文件内容分开存放，可以使用detach-sign参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --detach-sign demo.txt</span><br></pre></td></tr></table></figure><p>2.生成签名，基于 ASCII 格式</p><p>这个命令会在当前目录下生成 xxxx.xxx.sig 这是文件的签名。采用二进制储存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --detach-sign --armor demo.txt</span><br></pre></td></tr></table></figure><p>这个命令会生成文件的ASCII签名: demo.txt.asc。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PGP SIGNATURE-----</span><br><span class="line"></span><br><span class="line">iQGzBAABCAAdFiEEeahrV6DakT8NdrWs1m5Gkkp6RHUFAmOz+vUACgkQ1m5Gkkp6</span><br><span class="line">RHVfKQv8CptzZlVqHoxq7TpGeg0kuB7WAtnG5yaHqRCWmGAI6RdMa6o6MI/RchtZ</span><br><span class="line">CvBZRZjm4U228cUmN1/pl/wwI91HL97tei/NZ65ke/KgcEnw+HrluY+5b8j7SLug</span><br><span class="line">XambZRlfFkdjTuwGM1zgaIhcBpTG4tX+pURGtdGRp5jTzNyWP6vVq80oXte85o/N</span><br><span class="line">aZV/GEa5UOgigPnEK09DP3yTsHxhw8y2Rc8kDS5P1AWeE37dxO3NU1NzkWOmct7P</span><br><span class="line">a4g+1cTxL2o3hXCt+TYCejqduKLXJjZLJRlU+Kie+nanEH868GN+qGeCOQN2eN3K</span><br><span class="line">5E/sZzR7A3XTNT9gLYrtr7uRlz7+iU4vYsL5SvyB18I84T7Fqa8qM5s9KMIh7wsL</span><br><span class="line">GlHcoE7H7zOkES3U0RyZWTYHrzJ/h8bCm6ErGy4meqWZRzQTgGMpWlAUvx9rU6iS</span><br><span class="line">ZgwWDgc2qLPIEi0PhD6rVl9Kx1Pr3Ai5XJCtbBn41VK5B5Y6tXqheKXoo6n6lEBj</span><br><span class="line">EmTuKvec</span><br><span class="line">=OduX</span><br><span class="line">-----END PGP SIGNATURE-----</span><br></pre></td></tr></table></figure><h3 id="3-验证签名-gpg-verify"><a href="#3-验证签名-gpg-verify" class="headerlink" title="3.验证签名 gpg --verify"></a>3.验证签名 gpg --verify</h3><p>新版本不需要 --output 参数，但是原文件必须在当前目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gpg --verify demo.txt.gpg</span><br><span class="line">gpg --verify demo.txt.asc</span><br><span class="line">gpg --verify demo.txt.sig</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gpg: 假定被签名的数据在‘demo.txt’</span><br><span class="line">gpg: 签名建立于 二  1/ 3 17:52:53 2023 CST</span><br><span class="line">gpg:               使用 RSA 密钥 79A86B57A0DA913F0D76B5ACD66E46924A7A4475</span><br><span class="line">gpg: 完好的签名，来自于 “liukai &lt;liukaitest@gmail.com&gt;” [绝对]</span><br></pre></td></tr></table></figure><h3 id="4-签名-加密"><a href="#4-签名-加密" class="headerlink" title="4.签名+加密"></a>4.签名+加密</h3><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --local-user [发信者ID] --recipient [接收者ID] --armor --sign --encrypt demo.txt</span><br></pre></td></tr></table></figure><p>参数说明：</p><p><code>--local-user</code>：参数指定用发信者的私钥签名<br><code>--recipient</code>：参数指定用接收者的公钥加密<br><code>--armor</code>：参数表示采用ASCII码形式显示<br><code>--sign</code>：参数表示需要签名<br><code>--encrypt</code>：参数表示指定源文件</p><p>发信者ID、接收者ID形式：DF9B9C49EAA9298432589D76DA87E80D6294BE9B</p><p>5.验证签名</p><p>收到别人签名后的文件，需要用对方的公钥验证签名是否为真。verify参数用来验证。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --verify demo.txt.sig demo.txt</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gpg: 签名建立于 二  1/ 3 16:32:41 2023 CST</span><br><span class="line">gpg:               使用 RSA 密钥 79A86B57A0DA913F0D76B5ACD66E46924A7A4475</span><br><span class="line">gpg: 完好的签名，来自于 “liukai &lt;liukaitest.asho@gmail.com&gt;” [绝对]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主密钥拥有所有的功能，但是在使用上一般<strong>不直接使用</strong>主密钥，而是多个生成子密来使用。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://gnupg.org/">https://gnupg.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> safe </category>
          
          <category> cryptography </category>
          
          <category> rsa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gnupg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔--2022-2023总结</title>
      <link href="posts/9c4b5c1b.html"/>
      <url>posts/9c4b5c1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="起点"><a href="#起点" class="headerlink" title="起点"></a>起点</h2><p>说是总结，其实是吐槽。<br>写了这么些博客，很少说跟技术无关的博客。<br>2022已经完结，这一篇过去了，2023年是一个新的起点，一切都会从新开始，我也一样。<br>在2022之前的不完整，都留在过去，在这一个新的起点，告别过往，重新开始，回归自己应有的状态。</p><h2 id="谷底"><a href="#谷底" class="headerlink" title="谷底"></a>谷底</h2><p><code>2023</code>之前的感想。<br><code>2020</code>年之前，是最好生活状态。每天能够边工作边学习边生活，即便是996也是一种很好的状态，每天都在进步，不论是工作、还是生活。<br>就像跟代码热恋，走到哪满脑子都是代码，就差跟代码生猴子。<br>每天处在一种打鸡血的状态，没事也要找点问题出来，大嗓门就怕大厦楼下保安不知道楼上有我这号人物。<br>在公司能搞定一切和不要脸。</p><p>直到这个过程被打破。</p><p>之后两年感觉像是，在一个泥潭中，越用力陷的越深，一点一点往下拖。</p><p><code>2020</code>年，人生中的一个大低谷，并不是因为疫情，而是人和事，我发现除了代码之外，很多事我控制不了。<br>疫情对我来说，除了担心身边的人之外，需要戴口罩这件麻烦事，其他的没有什么影响。<br>前半年的人与人之间折腾，让我身心俱疲，从生活漫延到工作，工作实在进行不下去，也没法工作，干脆给自己放个长假，在家躺了一段时间。<br>逃避虽然不能解决问题，但是有用，休息了一段时间后，算是放空身心，但总是要面对生活。<br>过完十一开始新的征程。</p><p><code>2020</code>下半年的开始</p><p>半推半就入职新公司，最大的想法是找回状态，好好去做。不管什么都留在前半年。</p><p>事实证明烦心事，如果不能彻底解决的话，工作还是没有办法好好进行。整个人都在暴发的边缘反复来回。新的征程怕是要中道崩殂了。</p><p>经历着一个让自己都感觉厌恶自己的阶段。<br>工作也迎来入行以来最大的低谷与被动，很多事情变得不再可控，处处被动。<br>事事都搞成我以往最看不起的样子，原来生活真的非常影响工作，整个人被巨大的负面情绪包围。</p><p>最难受的倒不是专业能力受到质疑，而是让对我有期望的人失望，这个让我更难受。人的精力有限，是个消耗品，如果在情绪中被消耗，那工作中就没有的消耗，就是没有油的车一样。</p><h2 id="山间"><a href="#山间" class="headerlink" title="山间"></a>山间</h2><p><code>2020</code>年，的另一个拐点，对生活有了另一种的思考，明确需要改变重心，考虑工作以外的事。在此之前的日子是除了工作很多事情与我无关。<br><code>2020</code>年，疫情让节凑换了一种调调，开始有时间考虑理想、生活、工作之间平衡。</p><p>做编程一直是我的理想，一直都是，甚至有时候会掐灭做其他工作的想法。这其实是一种逃避心态，坚定的信念是不惧挑战的。</p><p>为什么会去挑战自己的理想，才是重点。</p><p>不逃避，直面所有问题</p><p>是否忽视了对人的关心？<br>工作真是全部？<br>打工可以为荣？<br>工作的意义是人生价值，还是为老板奉献？<br>做喜欢的事是伟大还是自私？<br>时间有限，着眼当下，还是着眼不确定的未来？<br>那，是否该放弃理想，追求世俗意义的成功，还是理想的成功？</p><p>很多事不能追问，一追问就会发现以前觉得不错的是，很可能是过于主观。</p><p>而理想是是个自私的执念，</p><h2 id="捷径"><a href="#捷径" class="headerlink" title="捷径"></a>捷径</h2><p>这个理想其实相比较起来，其实并不怎么赚钱，当你有一条别人眼里的光明大道时，这个理想，显得没什么说服力。年纪小的时候有理由追求理想，但是，没有但是。</p><p>如果想让自己能够继续维持理想，那就需要有维持理想的资本。<br>然后开始各种偿试。</p><p>然后在不断的偿试中，自以为发现一条如同印钞机捷径，忽然感觉自己又行了，可以把控一切。再然后就翻车了。<br><code>2020</code>下半年接触币圈，以为看到维持理想的捷径，靠币圈赚到钱，可以边赚很多钱，可以边做自己想做的事，然后头脑发热两眼发光没日没夜的搞，真是没日没夜，觉都不睡。</p><p>事实证明这并不是一条捷径。<br>当一个人把时间花在自己事上，工作的时间事必须会被占用。我只想赚钱，又不想离开工作，于是就把自己慢慢边缘化。</p><p>我听过一句，只有自己才能把自己边缘化，我做到了，但是在这个阶段，我确并不在意。<br>我最应该感谢的是<code>lvs007</code>对我的包容，<code>lvs007</code>对我的期待很高。<br>我确因为自己做的事，没有精力照顾到工作上的事，忽略了很多工作上的事，有的时候刻意回避一些事，就怕别人知道我能干。<br><code>lvs007</code>的对由很高的期望变成失望。<br>这种让别人失望的感受，同时也让我很难受，我其实很怕让别人失望。<br>我说话从来避免出现找借口的字句和话语，很多私事又没法解释，只能自己叹气。</p><h2 id="山坡"><a href="#山坡" class="headerlink" title="山坡"></a>山坡</h2><p>这个时候的自己，就像在两条路的中间拔河，越努力越痛苦，无论哪一边用力，都会很痛苦。其实在把时间更多的占用工作时间时，就已经说明心态从理想和现实之间出现了拉扯，理想与现实难平衡。</p><p>理想是做自己一直想做的事，现实是必须认清现状，做可以让生活更好的事。<br>做开发是我的理想。赚更多的钱是现实。</p><p>理想和现实本来不冲突，在我刻意忽略现实问题，假装看不见的时候，都不是问题。但是经历事多了，成了一个大问题，已经到了不得不面对的时候。</p><p>当自己沉浸在自己世界里，不断的学习更新技术，不用去面对现实的时候，一切都是好的。投资自己，再通过技术获得更多的报酬。<br>但是直接这个问题，没有任何躲闪空间的时候，这个问题就打破了平衡。<br>一旦思想起来冲突，就像有两个小人天天在大脑里做辩论，都想说服对方：</p><ul><li>现实：明明可以赚到更多的钱，却耗在自己的理想上，真是很不负责</li><li>理想：这不是耗，是投资，理想也很重要，这是一直在追求的东西</li><li>现实：追求没错，然后呢，放弃更好的生活，只为你自己，那对其他人呢？</li><li>理想：你说没错，但是理想也可以让生活变的更好，虽然没有现实来的多</li><li>现实：那你做饭了吗，只要放弃理想，就可以赚钱到很多，满足所有人的期待，你在做无意义的坚持，你也明白这一点。</li><li>理想: ...</li><li>现实：...</li></ul><p>都明白更好的发展，才是最好的选择，光一句为了理想就可以放弃给身边的人未来的生活，就无法反驳。<br>然后，越努力越痛苦，陷处无限的自我内耗。<br>内耗最可怕的是磨灭状态，无论之前多好的状态，甚至换了一个人的性格和个性。</p><p>这两年发生的事情，只能对自己讲，没法对别人讲，甚至我自己对现在的自己都感觉很陌生。</p><p>忽然有一天想明白了一件事，<br>马化腾、雷军、谢吉·布林、拉里·佩奇、比尔·盖茨 也都是很牛X的程序员，不都不写代码了。<br>这么一想就不纠结了。<br>虽然我跟这些人比，啥也不是，但是本质是对职业生涯选择是一样的，那就是都在想办法搞更多钱。<br>这样一想就舒服多了。<br>如果想写代码，还跟以前一样，参与开源项目，一样可以过把瘾。还欠风轮一个天池比赛，也可以还了。<br>这个问题算是有解了。</p><h2 id="山脚"><a href="#山脚" class="headerlink" title="山脚"></a>山脚</h2><p>一个人需要走很多路，多个方向的路不应该是拔河，人生应该有很多偿试，不应该越走越窄，每一条路不过是前方的分叉路，最终都是朝着一个方向前进。多走几条路，才会体会到到达终点前，还有一不样的风景。</p><p>内耗了很久，还是妥协了。<br>理想和现实可以并行，只是存在的方式不同。</p><p>理想是一条路，现实也是一条路，把每一条走过的路，当成经验，认真对待每一次旅程，收获到经验后，走出一条更适合自己的路。带着每一段路的经验和收获继续一路向前。</p><p>停止逼迫自己，好好去做想做的事。</p><p>为了逼自己离开编程行业，故意让自己把事情搞砸，一旦有努力的心态，就会被负面的逻辑打压。<br>这种逼着自离开工作和想要努力工作的心态，反复的折磨自己，很痛苦。<br>本想着在币圈赚到钱的话，还可以一边写代码一边把生活安排好，结果自己成了韭菜。这个破功了。</p><p>在低谷想明白很多事，生活上的事，已经朝着好的方向前进。<br>工用上的事，尽量去做，然后做好才能说服自己没有遗憾。<br>这二者已经能做到平衡。</p><h2 id="原点"><a href="#原点" class="headerlink" title="原点"></a>原点</h2><p>坚定、明确和有序合理的安排才能消除内耗。<br>理想不需要放弃，在路上就一路前行。<br>现实需要直面，说再多不如大步迈向前方。</p><p>给自己设定一个时间，走完理想需要的路程。<br>走完了，也就去做该做的事。<br>有时候真希望自己是个自私的人，只想自己过的好就行了。<br>这把年纪了，想要自私也来不及了感觉。<br>人总是需要面对各种现实情况，做想做的事和该做什么事，有时候真的很难选。</p><p><code>2023</code>年开始给自己一个倒计时：<br>把暴脾气调整好，做一个谦和、平和的人，每一个人都值得尊重，不要再伤害到任何人。<br>解决掉所有事情，集中精力，认真工作。<br>明确生活和工作的边界，不再被某一方面事情主导，不内耗，好好去做每一件事，不要故意搞砸来逼自己，给自己的理想做一个美好的收尾，给所有人一个满意的答案。</p><p>找回之前的自己，恢复状态和境界。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-vim整合基于rust-analyzer</title>
      <link href="posts/69325553.html"/>
      <url>posts/69325553.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在vim上配置并使用<code>rust</code>的vim开发环境，我个人比较习惯<code>coc.vim</code>这个平台的一系列插件，所以整个就接着在<code>coc.vim</code>上构建<code>rust-vim</code>，谁叫这东西确实牛逼。<br>依赖插件:</p><ul><li>coc.vim</li><li>coc-rls</li><li>coc-rust-analyzer</li></ul><p>rust官方有提供一个vim的插件，但是功能比较简单，本节要说插件，并不是官方提供的vim插件，而是比官方提供插件功能还要强一些。<br>而<code>coc-rust-analyzer</code>这个插件的是基于<code>rust-analyzer</code>这个插件，<code>coc.vim</code>将期进行<code>vim</code>化，记其可以工作在vim下，这个和<code>vim-go</code>插件的做法是一样的。</p><h2 id="安装-coc-rls"><a href="#安装-coc-rls" class="headerlink" title="安装 coc-rls"></a>安装 coc-rls</h2><p>需要提前安装好<a href="https://liukay.com/posts/db0a7b21.html">rustup</a>，这个工具其实在装<code>rust</code>的时候就已经安装好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖组件</span></span><br><span class="line">rustup component add rls rust-analysis rust-src</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 coc-rls</span></span><br><span class="line">:CocInstall coc-rls</span><br></pre></td></tr></table></figure><h2 id="安装coc-rust-analyzer"><a href="#安装coc-rust-analyzer" class="headerlink" title="安装coc-rust-analyzer"></a>安装coc-rust-analyzer</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:CocInstall coc-rust-analyzer</span><br></pre></td></tr></table></figure><p><img src="/posts/69325553/%E5%AE%89%E8%A3%85coc-rust-analyzer.jpg" alt="安装coc-rust-analyzer"></p><p>初次打开，会有这样的提示，安装一下：</p><p><img src="/posts/69325553/%E5%88%9D%E6%AC%A1%E6%89%93%E5%BC%80.jpg" alt="初次打开"></p><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>开启<code>coc-rust-analyzer</code>，在命令模式下输入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:CocConfig</span><br></pre></td></tr></table></figure><p>这是个json格式，添加一行:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;rust-analyzer.enable&quot;</span>: true</span><br></pre></td></tr></table></figure><p>看下代码提示，还有截图中的<code>i32</code>都是类似于<code>vscode</code>的类型提示功能。</p><p><img src="/posts/69325553/%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA.jpg" alt="代码提示"></p><p>再看下函数跳转，直接跳转<code>println!</code>这个内置函数。<br>我之前配置的是<code>gd</code>，这里直接继续了配置，还是跟<code>coc</code>快捷有关。<br>后续专门说下coc相关的配置。</p><p><img src="/posts/69325553/%E8%B7%B3%E8%BD%AC%E5%87%BD%E6%95%B0.jpg" alt="跳转函数"></p><p>再按下<code>control+i</code>退回。</p><h2 id="运行-rust"><a href="#运行-rust" class="headerlink" title="运行 rust"></a>运行 rust</h2><p>装好了，代码提示也有了，怎么运行呢？<br>通过内置工具就可以运行<code>rust</code>，每安装一个插件，可运行的命令都在<code>CocCommand</code>中，输入查看一下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:CocCommand</span><br></pre></td></tr></table></figure><p>在这个命令行下输入<code>rust</code>把所有的rust开头的命令过滤出来：</p><p><img src="/posts/69325553/CocCommand.jpg" alt="CocCommand"></p><p><img src="/posts/69325553/rust%E5%91%BD%E4%BB%A4.jpg" alt="rust命令"></p><p>运行一下</p><p><img src="/posts/69325553/%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%8B.jpg" alt="运行一下"></p><p>结果：</p><p><img src="/posts/69325553/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg" alt="运行结果"></p><h3 id="输入命令运行"><a href="#输入命令运行" class="headerlink" title="输入命令运行"></a>输入命令运行</h3><p>一般不会反复的输命令来执行，而是会通过快捷键不执行。</p><p><img src="/posts/69325553/%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8C.jpg" alt="直接运行"></p><p>rust的内置命令很多，可以直接设置快捷键</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>rt :CocCommand rust-analyzer.run<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>\rt</code>来运行。</p><h2 id="显示文档说明"><a href="#显示文档说明" class="headerlink" title="显示文档说明"></a>显示文档说明</h2><p>大写<code>K</code></p><p><img src="/posts/69325553/%E6%98%BE%E7%A4%BA%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E.jpg" alt="显示文档说明"></p><h2 id="完整配置如下"><a href="#完整配置如下" class="headerlink" title="完整配置如下"></a>完整配置如下</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个工具，如果是和我一样的<code>vim</code>患者可以捣鼓捣鼓，如果不是，建议还是直接IDEA的产品加个插件就可以开跑了。<br>rust我也是在学习的过程，语言虽然只是工具，但是在学习的过程中，也能学习到新的东西，拓宽一下边界，也能触类旁通。<br>下一步给<code>rust-vim</code>添加上debug功能。<br>已添加完成: <a href="https://liukai.net/posts/3e7235c0.html">rust-vim 整合基于vimspector的debug调试环境</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/neoclide/coc-rls">https://github.com/neoclide/coc-rls</a><br><a href="https://github.com/fannheyward/coc-rust-analyzer">https://github.com/fannheyward/coc-rust-analyzer</a></p>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
          <category> vim </category>
          
          <category> ide </category>
          
          <category> ide </category>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> ide </tag>
            
            <tag> vim </tag>
            
            <tag> rust-vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac m2自动登陆跳板机脚本</title>
      <link href="posts/95f16259.html"/>
      <url>posts/95f16259.html</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>需求很简单，通过脚本自动登陆跳板机。<br>因为最近换的是mac M2，然后碰到了一堆问题。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>从<strong>intel</strong>芯片换到<strong>m2</strong>出现很多问题。<br>首先mac m2 没有python2，默认是python3，所以脚本的命令要调整成python3相关的。<br>然后是 ssh 登陆，原来正常可以登陆方式也有问题，默认的ssh密钥失效，需要替换成新的密钥。<br>就导致原来的免密登陆也失效了，添加了公钥，依然需要输密码，下面的脚本，有一段是补偿输入密码的操作，<br>如果不需要，可以删了输密码的部份。</p><h2 id="自动登陆脚本"><a href="#自动登陆脚本" class="headerlink" title="自动登陆脚本"></a>自动登陆脚本</h2><p>需要准备两个脚本：</p><ol><li>login.sh, shell 脚本</li><li>jump.python, python3脚本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">expect -c &quot;</span><br><span class="line">set pwd you_pass_word</span><br><span class="line">spawn ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa test@10.10.10.10</span><br><span class="line">set timeout 2</span><br><span class="line">expect &quot;*assword:*&quot;</span><br><span class="line">send \&quot;\$pwd\r\&quot;</span><br><span class="line"></span><br><span class="line">set timeout 2</span><br><span class="line">expect \&quot;\[MFA auth\]:\&quot;</span><br><span class="line">set password \&quot;`python3 ~/.ssh/jump.python`\&quot;</span><br><span class="line">send \&quot;\$password\r\&quot;</span><br><span class="line">interact</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><h3 id="解释上面的脚本"><a href="#解释上面的脚本" class="headerlink" title="解释上面的脚本"></a>解释上面的脚本</h3><p>说明一下，新的 ssh 需要输入：</p><blockquote><p>ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa</p></blockquote><p>原来 ssh 只需要：</p><blockquote><p>ssh <a href="mailto:&#x75;&#115;&#101;&#114;&#x6e;&#x61;&#109;&#101;&#x40;&#49;&#48;&#x2e;&#x31;&#48;&#x2e;&#x31;&#x30;&#x2e;&#49;&#48;">&#x75;&#115;&#101;&#114;&#x6e;&#x61;&#109;&#101;&#x40;&#49;&#48;&#x2e;&#x31;&#48;&#x2e;&#x31;&#x30;&#x2e;&#49;&#48;</a> 就可以登陆了</p></blockquote><h2 id="python3-部分"><a href="#python3-部分" class="headerlink" title="python3 部分"></a>python3 部分</h2><p>python3 脚本提取google验证码。</p><p><code>my_secret</code> 是谷歌的密钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> onetimepass <span class="keyword">as</span> otp</span><br><span class="line"></span><br><span class="line">my_secret = <span class="string">&#x27;XXXXXXXXXXXXX&#x27;</span></span><br><span class="line">my_token = otp.get_totp(my_secret)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;%06d&quot;</span> % my_token)</span><br></pre></td></tr></table></figure><h2 id="iterm2-配置"><a href="#iterm2-配置" class="headerlink" title="iterm2 配置"></a>iterm2 配置</h2><p>在 Open Profiles 中添加一下自动登陆脚本：</p><p><img src="/posts/95f16259/iterm2%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE.jpg" alt="iterm2自动登陆配置.jpg"></p><p>login shell 或 Command 都可以，用<code>sh</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ~/.ssh/jump.sh</span><br></pre></td></tr></table></figure><p>不要使用 <code>expect</code> 开头：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect ~/.ssh/jump.sh</span><br></pre></td></tr></table></figure><p>这样就可以登陆成功了，即不需要输密码，也不需要验证码。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> mac </category>
          
          <category> iterm2 </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
            <tag> mac </tag>
            
            <tag> iterm2 </tag>
            
            <tag> m2 </tag>
            
            <tag> python3 </tag>
            
            <tag> 跳板机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Merkle Tree、Merkle Patricia Tree</title>
      <link href="posts/504d00cf.html"/>
      <url>posts/504d00cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果是接触区块链开发相关的话题，Merkle Tree 是一个必需要了解的话题。<br>BTC和ETH都使用这项技术，但是数据结构不同。<br>应用侧重点也不同。</p><h2 id="用意"><a href="#用意" class="headerlink" title="用意"></a>用意</h2><h2 id="Merkle-tree"><a href="#Merkle-tree" class="headerlink" title="Merkle tree"></a>Merkle tree</h2><p><img src="/posts/504d00cf/Hash_Tree.svg" alt="Hash_Tree.svg"></p><p>注意这里的虚线，最后的叶子节点是真正挂数据的节点。</p><h2 id="Merkle-Patricia-Tree"><a href="#Merkle-Patricia-Tree" class="headerlink" title="Merkle Patricia Tree"></a>Merkle Patricia Tree</h2><p>TODO</p><h2 id="以太坊-Merkle-Patricia-Tree-应用"><a href="#以太坊-Merkle-Patricia-Tree-应用" class="headerlink" title="以太坊 Merkle Patricia Tree 应用"></a>以太坊 Merkle Patricia Tree 应用</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://en.wikipedia.org/wiki/Merkle_tree">https://en.wikipedia.org/wiki/Merkle_tree</a></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> merkle </category>
          
          <category> ethereum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> merkle </tag>
            
            <tag> 树 </tag>
            
            <tag> 原理 </tag>
            
            <tag> trie </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethereum-geth常用操作</title>
      <link href="posts/687e1894.html"/>
      <url>posts/687e1894.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>eth已经2.0了，但是1.0除了挖矿之外大部分功能都还是一样的。</p><h2 id="geth-能做什么"><a href="#geth-能做什么" class="headerlink" title="geth 能做什么"></a>geth 能做什么</h2><ul><li>与eth链交互：console</li><li>查看区块链状态</li><li>管理账号: personal</li><li>发送交易: </li><li>挖矿 miner</li></ul><h2 id="交互操作-console"><a href="#交互操作-console" class="headerlink" title="交互操作: console"></a>交互操作: console</h2><p>通过console启动，可以进行一系统的操作。</p><h3 id="1-连接eth主网"><a href="#1-连接eth主网" class="headerlink" title="1.连接eth主网"></a>1.连接eth主网</h3><p>默认连接最新的主网。</p><p><code>--datadir</code>: 数据存放目录，不指定默认：<code>/home/$user/.ethereum</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir /data/geth --goerli console</span><br></pre></td></tr></table></figure><h3 id="2-连接eth测试网"><a href="#2-连接eth测试网" class="headerlink" title="2.连接eth测试网"></a>2.连接eth测试网</h3><p><code>--goerli</code>: 加入 goerli测试网<br><code>--rpcapi</code>: 开启rpc服务，开启后才可以进行操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir &quot;/data/geth&quot; --rpc --rpcport 8545 --rpcapi &quot;personal,eth,net,web3,admin&quot; --rpccorsdomain &quot;*&quot; --goerli console </span><br></pre></td></tr></table></figure><hr><h2 id="节点管理-admin"><a href="#节点管理-admin" class="headerlink" title="节点管理: admin"></a>节点管理: admin</h2><p>自己搭建节点，第一步是要能使用，如果不是私链，那就需要连接上以太坊的主网或者测试网进行操作。</p><h3 id="1-添加节点-admin-addPeer"><a href="#1-添加节点-admin-addPeer" class="headerlink" title="1.添加节点 admin.addPeer"></a>1.添加节点 admin.addPeer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.addPeer(&quot;enode://19d3655aba7ef72065412365d95a66a10fcf0518f21594d0746b0177467c4d650b726a3e9612792e6dcb9716814498dc6826e3b47ab6e6270d85113d4bc7d6a1@135.181.82.60:30303&quot;)</span><br></pre></td></tr></table></figure><h3 id="2-查看当前连接节点-admin-peers"><a href="#2-查看当前连接节点-admin-peers" class="headerlink" title="2.查看当前连接节点 admin.peers"></a>2.查看当前连接节点 admin.peers</h3><p>下面这个是我连接的节点，是芬兰的一个节点。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    caps: [&quot;eth/63&quot;, &quot;eth/64&quot;, &quot;eth/65&quot;],</span><br><span class="line">    enode: &quot;enode://19d3655aba7ef72065412365d95a66a10fcf0518f21594d0746b0177467c4d650b726a3e9612792e6dcb9716814498dc6826e3b47ab6e6270d85113d4bc7d6a1@135.181.82.60:30303&quot;,</span><br><span class="line">    enr: &quot;enr:-Je4QAqQY0hSvgTJLu-FBPW6rnpHa-pm1dge3G3qV4ChlKlMJsZA8togglNFljRAFWhOU6bv7-UHAQxp-siymzU2a24Jg2V0aMfGhMJe-lyAgmlkgnY0gmlwhIe1UjyJc2VjcDI1NmsxoQMZ02Vaun73IGVBI2XZWmahD88FGPIVlNB0awF3RnxNZYN0Y3CCdl-DdWRwgnZf&quot;,</span><br><span class="line">    id: &quot;2f927cec8a9408be8acfbf9ecc7b72a905d112c8842b9a1539a7cd40934b7357&quot;,</span><br><span class="line">    name: &quot;Geth/v1.9.24-stable-cc05b050/linux-amd64/go1.15.5&quot;,</span><br><span class="line">    network: &#123;</span><br><span class="line">      inbound: false,</span><br><span class="line">      localAddress: &quot;192.168.31.128:53372&quot;,</span><br><span class="line">      remoteAddress: &quot;135.181.82.60:30303&quot;,</span><br><span class="line">      static: false,</span><br><span class="line">      trusted: false</span><br><span class="line">    &#125;,</span><br><span class="line">    protocols: &#123;</span><br><span class="line">      eth: &#123;</span><br><span class="line">        difficulty: 6585792,</span><br><span class="line">        head: &quot;0x8705d7d7a4aa189704385c325ff24ebc82496c87fff884e942bf4aba78467f0f&quot;,</span><br><span class="line">        version: 65</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="查看节点信息-admin-nodeInfo"><a href="#查看节点信息-admin-nodeInfo" class="headerlink" title="查看节点信息 admin.nodeInfo"></a>查看节点信息 admin.nodeInfo</h3><p>查询节点自身信息。</p><p><code>enode</code>: 自身的节点地址<br><code>enr</code>:<br><code>discovery</code>: 节点发现服务端口<br><code>listener</code>: 连接监听端口<br><code>protocols</code>: 协议信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  enode: &quot;enode://514cf44d46abc26df3fbb084acef308483a6b1bc0712f9aead5fbbca0f1e5671f86467a2f0ec10628b48b771cde8501294715aa5d4c4b520b1a457daae9a0b3e@111.201.21.10:30303?discport=26172&quot;,</span><br><span class="line">  enr: &quot;enr:-KK4QAzy9muCCHDtd8kwjgLS9MrRKa8YKutziw51hBXyjTrJEegdA2eFsh6BR-6BcAHFF9SEu3HPUGu0-yMYTo2xcKQHg2V0aMrJhKP1qwiDF9QzgmlkgnY0gmlwhG_JFcmJc2VjcDI1NmsxoQJRTPRNRqvCbfP7sISs7zCEg6axvAcS-a6tX7vKDx5WcYN0Y3CCdl-DdWRwgmY8hHVkcDaCdl8&quot;,</span><br><span class="line">  id: &quot;45fe4324552ac00907ffea5bfbd48f678f3dad5adafe2041b585270a09034410&quot;,</span><br><span class="line">  ip: &quot;111.201.21.10&quot;,</span><br><span class="line">  listenAddr: &quot;[::]:30303&quot;,</span><br><span class="line">  name: &quot;Geth/v1.9.25-stable-e7872729/linux-amd64/go1.16.15&quot;,</span><br><span class="line">  ports: &#123;</span><br><span class="line">    discovery: 26172,</span><br><span class="line">    listener: 30303</span><br><span class="line">  &#125;,</span><br><span class="line">  protocols: &#123;</span><br><span class="line">    eth: &#123;</span><br><span class="line">      config: &#123;</span><br><span class="line">        byzantiumBlock: 0,</span><br><span class="line">        chainId: 5,</span><br><span class="line">        clique: &#123;...&#125;,</span><br><span class="line">        constantinopleBlock: 0,</span><br><span class="line">        daoForkSupport: true,</span><br><span class="line">        eip150Block: 0,</span><br><span class="line">        eip150Hash: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">        eip155Block: 0,</span><br><span class="line">        eip158Block: 0,</span><br><span class="line">        homesteadBlock: 0,</span><br><span class="line">        istanbulBlock: 1561651,</span><br><span class="line">        petersburgBlock: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      difficulty: 1,</span><br><span class="line">      genesis: &quot;0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a&quot;,</span><br><span class="line">      head: &quot;0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a&quot;,</span><br><span class="line">      network: 5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="账号管理-personal"><a href="#账号管理-personal" class="headerlink" title="账号管理 personal"></a>账号管理 personal</h2><h3 id="1-创建账号-personal-newAccount"><a href="#1-创建账号-personal-newAccount" class="headerlink" title="1.创建账号 personal.newAccount()"></a>1.创建账号 personal.newAccount()</h3><p>创建账号可以创建多个账号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount(&quot;password&quot;)</span><br></pre></td></tr></table></figure><p>结果:</p><blockquote><p>INFO [12-09|23:28:39.162] Your new key was generated               address=0x6C5d3DafE18B5108a0C02B5663f6963EBf9f4CfA<br>WARN [12-09|23:28:39.191] Please backup your key file!             path=/data/geth/keystore/UTC--2022-12-09T15-28-34.293134840Z--6c5d3dafe18b5108a0c02b5663f6963ebf9f4cfa<br>WARN [12-09|23:28:39.191] Please remember your password!<br>&quot;0x6c5d3dafe18b5108a0c02b5663f6963ebf9f4cfa&quot;</p></blockquote><p>生成一个<code>keystore</code>文件，路径是启动时候我设定的路径: <code>/data/geth/keystore</code>。<br><code>keystore</code>文件是相关于密钥，签署交易的以太坊私钥的加密文件。如果你丢失了这个文件，你就丢失了私钥。<br>简单的说<code>keystore</code>就是你<strong>加密过后</strong>的私钥，要有私钥和你的密码，才能使用你的账号，这样就是双重保险。<br>几乎每条链都有<code>keystore</code>文件这种形式。</p><p>查看一下<code>keystore</code>文件内容:</p><p><strong>cipher</strong>: 对称加密，用对称加密是因为使用到密码，需要解密。<br><strong>cipherparams</strong>: 是 cipher 算法需要的参数。<br><strong>iv</strong>: 是加密算法需要的初始化向量。<br><strong>kdf</strong>: <code>scrypt</code> 密钥生成函数，用于让你用密码加密 keystore 文件。<br><strong>kdfparams</strong>: <code>kdf</code> 算法需要的参数（scrypt函数需要的参数）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;6c5d3dafe18b5108a0c02b5663f6963ebf9f4cfa&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;crypto&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cipher&quot;</span>: <span class="string">&quot;aes-128-ctr&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;ciphertext&quot;</span>: <span class="string">&quot;a2816bbca5bf7805e75d4961375579eeb80ede2cb9364f9a8dd8be0be4694a7d&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;cipherparams&quot;</span>: &#123;&#125;, </span><br><span class="line">        <span class="attr">&quot;kdf&quot;</span>: <span class="string">&quot;scrypt&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;kdfparams&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;dklen&quot;</span>: <span class="number">32</span>, </span><br><span class="line">            <span class="attr">&quot;n&quot;</span>: <span class="number">262144</span>, </span><br><span class="line">            <span class="attr">&quot;p&quot;</span>: <span class="number">1</span>, </span><br><span class="line">            <span class="attr">&quot;r&quot;</span>: <span class="number">8</span>, </span><br><span class="line">            <span class="attr">&quot;salt&quot;</span>: <span class="string">&quot;6e7f880f2e53e744c2acb422b01ddad319fbd4ee6dfe38da3e921efbdb4604ff&quot;</span></span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="attr">&quot;mac&quot;</span>: <span class="string">&quot;24c823caf933a0563b1da19982b8259fcaafb423a69cb6fb85108303cd2ebd4e&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;ef6cdbe1-dbe3-43b8-bcea-e7b3e0e121f7&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-交互模式-personal-newAccount"><a href="#2-交互模式-personal-newAccount" class="headerlink" title="2.交互模式 personal.newAccount"></a>2.交互模式 personal.newAccount</h3><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount()</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>Passphrase: #输入密码<br>Repeat passphrase: #确认密码<br>INFO [12-09|23:41:31.682] Your new key was generated               address=0x1d774CdA456C0f7cC84484b0316A4E959c206E14<br>WARN [12-09|23:41:31.682] Please backup your key file!             path=/data/geth/keystore/UTC--2022-12-09T15-41-30.670272653Z--1d774cda456c0f7cc84484b0316a4e959c206e14<br>WARN [12-09|23:41:31.682] Please remember your password!<br>&quot;0x1d774cda456c0f7cc84484b0316a4e959c206e14&quot;</p></blockquote><hr><h2 id="链治理：eth"><a href="#链治理：eth" class="headerlink" title="链治理：eth"></a>链治理：eth</h2><h3 id="1-查询所有账号-eth-accounts"><a href="#1-查询所有账号-eth-accounts" class="headerlink" title="1.查询所有账号 eth.accounts"></a>1.查询所有账号 eth.accounts</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.accounts</span><br></pre></td></tr></table></figure><blockquote><p>[&quot;0x6c5d3dafe18b5108a0c02b5663f6963ebf9f4cfa&quot;, &quot;0x1d774cda456c0f7cc84484b0316a4e959c206e14&quot;]</p></blockquote><p>这是我刚生成的两个账号</p><p>选择其中一个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.accounts[0]</span><br></pre></td></tr></table></figure><blockquote><p>&quot;0x6c5d3dafe18b5108a0c02b5663f6963ebf9f4cfa&quot;</p></blockquote><h3 id="2-查看余额-eth-getBalance"><a href="#2-查看余额-eth-getBalance" class="headerlink" title="2.查看余额 eth.getBalance"></a>2.查看余额 eth.getBalance</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eth.getBalance(eth.accounts[1])</span><br><span class="line"></span><br><span class="line">eth.getBalance(&quot;0x6c5d3dafe18b5108a0c02b5663f6963ebf9f4cfa&quot;)</span><br></pre></td></tr></table></figure><h2 id="挖矿-miner"><a href="#挖矿-miner" class="headerlink" title="挖矿 miner"></a>挖矿 miner</h2><h3 id="1-开启挖矿"><a href="#1-开启挖矿" class="headerlink" title="1.开启挖矿"></a>1.开启挖矿</h3><p>需要区块同步完成，否则无法挖矿</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">miner.start(10)</span><br></pre></td></tr></table></figure><p>10表示挖矿线程数。</p><p>如果没有同步完成就开启挖矿会报错：</p><blockquote><p>Block sealing failed err=&quot;unauthorized signer&quot;<br>Block synchronisation started<br>Mining aborted due to sync</p></blockquote><h3 id="2-停止挖矿-miner-stop"><a href="#2-停止挖矿-miner-stop" class="headerlink" title="2.停止挖矿 miner.stop"></a>2.停止挖矿 miner.stop</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">miner.stop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> ethereum </category>
          
          <category> geth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> ethereum </tag>
            
            <tag> blockchain </tag>
            
            <tag> ethereum原理 </tag>
            
            <tag> 节点 </tag>
            
            <tag> geth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-rustup介绍</title>
      <link href="posts/db0a7b21.html"/>
      <url>posts/db0a7b21.html</url>
      
        <content type="html"><![CDATA[<h2 id="rustup-工具链管理"><a href="#rustup-工具链管理" class="headerlink" title="rustup 工具链管理"></a>rustup 工具链管理</h2><p>这个可能很少人在意，一般只有在安装rust的时候通过脚本安装了<code>rustup</code>，但是后面很少会用到。<br>这几天在折腾<code>rust-vim</code>的时候，发现还是会用到，记录一下。<br>这个工具不止是安装、御载，还是一个工具链管理工具。</p><p>有几个作用：</p><ul><li>安装rust</li><li>卸载rust</li><li>升级rust</li><li>安装工具链，就是rust相关的工具链</li></ul><h2 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h2><blockquote><p>Rust 由工具 rustup 安装和管理。Rust 有着以 6 星期为周期的 快速版本迭代机制，支持 大量平台，因而不同时期存在大量不同的 Rust 构建版本。 rustup 用于管理不同平台下的 Rust 构建版本并使其互相兼容， 支持安装由 Beta 和 Nightly 频道发布的版本，并支持其他用于交叉编译的编译版本。<br>如果您曾经安装过 rustup，可以执行 rustup update 来升级 Rust。</p></blockquote><h3 id="安装rust"><a href="#安装rust" class="headerlink" title="安装rust"></a>安装rust</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure><p>选<code>1</code>默认安装</p><p><img src="/posts/db0a7b21/%E5%AE%89%E8%A3%85.jpg" alt="安装"></p><p>再按照提示执行一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source $HOME/.cargo/env</span><br></pre></td></tr></table></figure><h3 id="更新-rust"><a href="#更新-rust" class="headerlink" title="更新 rust"></a>更新 rust</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup update</span><br></pre></td></tr></table></figure><h3 id="卸载-Rust"><a href="#卸载-Rust" class="headerlink" title="卸载 Rust"></a>卸载 Rust</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup self uninstall</span><br></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>官方文档中还有说明：</p><blockquote><p>This is similar to Ruby&#39;s rbenv, Python&#39;s pyenv, or Node&#39;s nvm.</p></blockquote><p>也就是说，还可以进行版本切换。</p><h3 id="频道-channel"><a href="#频道-channel" class="headerlink" title="频道 channel"></a>频道 channel</h3><blockquote><p>channel — Rust is released to three different &quot;channels&quot;: stable, beta, and nightly. See the Channels chapter for more details.</p></blockquote><p>就是说rust会发布：<code>稳定版</code>、<code>beta</code>版、<code>nightly</code>版本。<br>可以切换版本，有点类似于node的<code>nvm</code>版本切换。<br>要切换更多的版本之前，需要先安装一下版本:</p><p>安装一下<code>nightly</code>版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup toolchain install nightly</span><br></pre></td></tr></table></figure><p><img src="/posts/db0a7b21/%E5%AE%89%E8%A3%85nightly%E7%89%88%E6%9C%AC.jpg" alt="安装nightly版本"></p><p>更多参考: <a href="https://rust-lang.github.io/rustup/concepts/channels.html">https://rust-lang.github.io/rustup/concepts/channels.html</a></p><p>看看我装了几个版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup toolchain list</span><br></pre></td></tr></table></figure><p><img src="/posts/db0a7b21/%E7%89%88%E6%9C%AC%E5%88%97%E8%A1%A8.jpg" alt="版本列表"></p><h3 id="组件-component"><a href="#组件-component" class="headerlink" title="组件 component"></a>组件 component</h3><p>每个工具链都有几个“组件”，其中一些是必需的（如 rustc），一些是可选的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup toolchain install nightly --component rust-docs</span><br></pre></td></tr></table></figure><p>可以使用以下rustup component命令将组件添加到已安装的工具链中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup component add rust-docs</span><br></pre></td></tr></table></figure><p>我在配置rust-vim时，用到了下面几种组件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup component add rls rust-analysis rust-src</span><br></pre></td></tr></table></figure><p>更多参考：<a href="https://rust-lang.github.io/rustup/concepts/components.html">https://rust-lang.github.io/rustup/concepts/components.html</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://rust-lang.github.io/rustup/index.html">https://rust-lang.github.io/rustup/index.html</a><br><a href="https://rustup.rs/">https://rustup.rs/</a><br><a href="https://github.com/rust-lang/rustup">https://github.com/rust-lang/rustup</a></p>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> rustup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron 接收交易和广播交易</title>
      <link href="posts/c7f01f8a.html"/>
      <url>posts/c7f01f8a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分析<code>tron</code>是如何接收到交易，并在接收到交易后，后续是如何处理的，交易处理细节可以看看：<a href="https://liukay.com/posts/66788eb9.html">tron 交易处理--交易执行逻辑</a></p><h2 id="接收交易"><a href="#接收交易" class="headerlink" title="接收交易"></a>接收交易</h2><p>节点使用netty进行P2P连接，主要使用到的类：</p><ol><li><strong>TransactionsMsgHandler</strong>: netty Handler处理器</li><li><strong>TronNetService</strong>: 消息分发</li><li><strong>AdvService</strong>: 消息广播</li><li><strong>FetchInvDataMsgHandler</strong>: 消息拉取</li></ol><p>交易处理调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TronNetHandler.channelRead0 接收消息</span><br><span class="line">\--TronNetService.onMessage 分发消息</span><br><span class="line">   \--transactionsMsgHandler.processMessage; 具体业务处理</span><br></pre></td></tr></table></figure><h2 id="TronNetService-onMessage-分发消息"><a href="#TronNetService-onMessage-分发消息" class="headerlink" title="TronNetService.onMessage 分发消息"></a>TronNetService.onMessage 分发消息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(PeerConnection peer, TronMessage msg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg.getType()) &#123;</span><br><span class="line">      <span class="keyword">case</span> SYNC_BLOCK_CHAIN:</span><br><span class="line">        syncBlockChainMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> BLOCK_CHAIN_INVENTORY:</span><br><span class="line">        chainInventoryMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> INVENTORY:</span><br><span class="line">        inventoryMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> FETCH_INV_DATA:</span><br><span class="line">        fetchInvDataMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> BLOCK:</span><br><span class="line">        blockMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> TRXS:</span><br><span class="line">        <span class="comment">// 交易处理入口</span></span><br><span class="line">        transactionsMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PBFT_COMMIT_MSG:</span><br><span class="line">        pbftDataSyncHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> P2pException(TypeEnum.NO_SUCH_MESSAGE, msg.getType().toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    processException(peer, msg, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">long</span> costs = System.currentTimeMillis() - startTime;</span><br><span class="line">    <span class="keyword">if</span> (costs &gt; DURATION_STEP) &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;Message processing costs &#123;&#125; ms, peer: &#123;&#125;, type: &#123;&#125;, time tag: &#123;&#125;&quot;</span>,</span><br><span class="line">          costs, peer.getInetAddress(), msg.getType(), getTimeTag(costs));</span><br><span class="line">      Metrics.histogramObserve(MetricKeys.Histogram.MESSAGE_PROCESS_LATENCY,</span><br><span class="line">          costs / Metrics.MILLISECONDS_PER_SECOND, msg.getType().name());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TransactionsMsgHandler"><a href="#TransactionsMsgHandler" class="headerlink" title="TransactionsMsgHandler"></a>TransactionsMsgHandler</h2><p>接收到的交易先放在线程池: <code>trxHandlePool</code><br>再由<code>trxHandlePool</code>调用<code>handleTransaction</code>处理交易。<br><strong>普通交易</strong>和<strong>智能合约</strong>的交易，处理还不一样。</p><p>先看下交易缓冲池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无界队列</span></span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue();</span><br><span class="line"><span class="comment">// 工作线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threadNum = Args.getInstance().getValidateSignThreadNum();</span><br><span class="line"><span class="keyword">private</span> ExecutorService trxHandlePool = <span class="keyword">new</span> ThreadPoolExecutor(threadNum, threadNum, <span class="number">0L</span>,</span><br><span class="line">    TimeUnit.MILLISECONDS, queue);</span><br></pre></td></tr></table></figure><h3 id="processMessage-消息处理入口"><a href="#processMessage-消息处理入口" class="headerlink" title="processMessage 消息处理入口"></a>processMessage 消息处理入口</h3><p>区分普通交易和合约交易，另外会统计队列大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(PeerConnection peer, TronMessage msg)</span> <span class="keyword">throws</span> P2pException </span>&#123;</span><br><span class="line">  TransactionsMessage transactionsMessage = (TransactionsMessage) msg;</span><br><span class="line">  check(peer, transactionsMessage);</span><br><span class="line">  <span class="keyword">int</span> smartContractQueueSize = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> trxHandlePoolQueueSize = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> dropSmartContractCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历交易</span></span><br><span class="line">  <span class="keyword">for</span> (Transaction trx : transactionsMessage.getTransactions().getTransactionsList()) &#123;</span><br><span class="line">    <span class="keyword">int</span> type = trx.getRawData().getContract(<span class="number">0</span>).getType().getNumber();</span><br><span class="line">    <span class="comment">// 合约类型交易</span></span><br><span class="line">    <span class="keyword">if</span> (type == ContractType.TriggerSmartContract_VALUE</span><br><span class="line">        || type == ContractType.CreateSmartContract_VALUE) &#123;</span><br><span class="line">      <span class="comment">// 合约类型交易没有直接执行，而是添加到了 smartContractQueue 队列当中</span></span><br><span class="line">      <span class="comment">// 注意，这里用的是 !offer，也就是说插入失败了，超过限制</span></span><br><span class="line">      <span class="comment">// MAX_TRX_SIZE = 50_000</span></span><br><span class="line">      <span class="keyword">if</span> (!smartContractQueue.offer(<span class="keyword">new</span> TrxEvent(peer, <span class="keyword">new</span> TransactionMessage(trx)))) &#123;</span><br><span class="line">        smartContractQueueSize = smartContractQueue.size();</span><br><span class="line">        <span class="comment">// queue 是线程池的队列长度</span></span><br><span class="line">        trxHandlePoolQueueSize = queue.size();</span><br><span class="line">        dropSmartContractCount++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 没有 else 处理，那这笔交易就丢掉了！！！</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 普通交易</span></span><br><span class="line">      trxHandlePool.submit(() -&gt; handleTransaction(peer, <span class="keyword">new</span> TransactionMessage(trx)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上面没有else处理，但是这里加了判断，会打印出队列长度</span></span><br><span class="line">  <span class="keyword">if</span> (dropSmartContractCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    logger.warn(<span class="string">&quot;Add smart contract failed, drop count: &#123;&#125;, queueSize &#123;&#125;:&#123;&#125;&quot;</span>,</span><br><span class="line">        dropSmartContractCount, smartContractQueueSize, trxHandlePoolQueueSize);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="智能合约处理-handleSmartContract"><a href="#智能合约处理-handleSmartContract" class="headerlink" title="智能合约处理 handleSmartContract"></a>智能合约处理 handleSmartContract</h3><p>智能合约交易，会有单独的线程来处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleSmartContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这是个单线程的延时处理线程池</span></span><br><span class="line">  <span class="comment">// 也就是智能合约的交易，20ms执行一次</span></span><br><span class="line">  smartContractExecutor.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 限制 MAX_SMART_CONTRACT_SUBMIT_SIZE = 100</span></span><br><span class="line">      <span class="comment">// 那 queue 里数据多了，还执行不了！！</span></span><br><span class="line">      <span class="comment">// 也就是 queue 一定要先消费到 &lt; MAX_SMART_CONTRACT_SUBMIT_SIZE</span></span><br><span class="line">      <span class="keyword">while</span> (queue.size() &lt; MAX_SMART_CONTRACT_SUBMIT_SIZE) &#123;</span><br><span class="line">        TrxEvent event = smartContractQueue.take();</span><br><span class="line">        trxHandlePool.submit(() -&gt; handleTransaction(event.getPeer(), event.getMsg()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      logger.warn(<span class="string">&quot;Handle smart server interrupted&quot;</span>);</span><br><span class="line">      Thread.currentThread().interrupt();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot;Handle smart contract exception&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>, <span class="number">20</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易处理、广播-TransactionsMsgHandler-handleTransaction"><a href="#交易处理、广播-TransactionsMsgHandler-handleTransaction" class="headerlink" title="交易处理、广播 TransactionsMsgHandler.handleTransaction"></a>交易处理、广播 TransactionsMsgHandler.handleTransaction</h3><p>调用栈</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TransactionsMsgHandler.handleTransaction</span><br><span class="line">\--AdvService.broadcast: 广播服务</span><br></pre></td></tr></table></figure><p>在这里可以看到，每个<code>tron</code>节点在接到到交易到后：</p><ol><li>先自己处理</li><li>再广播交易</li></ol><p>广播也挺复杂，单独写个博客细扣。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleTransaction</span><span class="params">(PeerConnection peer, TransactionMessage trx)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (peer.isDisconnect()) &#123;</span><br><span class="line">    logger.warn(<span class="string">&quot;Drop trx &#123;&#125; from &#123;&#125;, peer is disconnect&quot;</span>, trx.getMessageId(),</span><br><span class="line">        peer.getInetAddress());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 广播队列验重</span></span><br><span class="line">  <span class="keyword">if</span> (advService.getMessage(<span class="keyword">new</span> Item(trx.getMessageId(), InventoryType.TRX)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    tronNetDelegate.pushTransaction(trx.getTransactionCapsule());</span><br><span class="line">    <span class="comment">// 广播交易</span></span><br><span class="line">    advService.broadcast(trx);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (P2pException e) &#123;</span><br><span class="line">    logger.warn(<span class="string">&quot;Trx &#123;&#125; from peer &#123;&#125; process failed. type: &#123;&#125;, reason: &#123;&#125;&quot;</span>,</span><br><span class="line">        trx.getMessageId(), peer.getInetAddress(), e.getType(), e.getMessage());</span><br><span class="line">    <span class="comment">// 如果是 BAD_TRX 断开连接</span></span><br><span class="line">    <span class="keyword">if</span> (e.getType().equals(TypeEnum.BAD_TRX)) &#123;</span><br><span class="line">      peer.disconnect(ReasonCode.BAD_TX);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;Trx &#123;&#125; from peer &#123;&#125; process failed&quot;</span>, trx.getMessageId(), peer.getInetAddress(),</span><br><span class="line">        e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广播数据-AdvService-broadcast"><a href="#广播数据-AdvService-broadcast" class="headerlink" title="广播数据 AdvService.broadcast"></a>广播数据 AdvService.broadcast</h3><p>首先要明确一个点：广播过去的，并示是交易，而是交易ID！！<br>广播的方式并不是把交易直接广播到其它节点，而是广播ID，然后其它节点到这个节点来拉取交易信息！！</p><p>广播缓存，使用<code>guave cache</code>，最老淘汰机制，如果超过<code>MAX_TRX_CACHE_SIZE</code>大小则老数据会丢弃，已经验证过这个场景，不过一般超达不到这个限制，只有在极端测试环境下能达到。<br>数据也就保留1H，也就是超时就丢弃。</p><p>重要成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_TRX_CACHE_SIZE = <span class="number">50_000</span>;</span><br><span class="line"><span class="comment">// 广播缓存，MAX_TRX_CACHE_SIZE</span></span><br><span class="line"><span class="comment">// 提供缓存供外部获取、验重等作用</span></span><br><span class="line"><span class="keyword">private</span> Cache&lt;Item, Message&gt; trxCache = CacheBuilder.newBuilder()</span><br><span class="line">    .maximumSize(MAX_TRX_CACHE_SIZE).expireAfterWrite(<span class="number">1</span>, TimeUnit.HOURS)</span><br><span class="line">    .recordStats().build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// invToSpread 最大限制</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SPREAD_SIZE = <span class="number">1_000</span></span><br><span class="line"><span class="comment">// 待发送队列</span></span><br><span class="line"><span class="keyword">private</span> ConcurrentHashMap&lt;Item, Long&gt; invToSpread = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>广播逻辑<br>可以广播<code>block</code>和<code>transaction</code>数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcast</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (fastForward) &#123;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 校验交易缓存大小，这里会限制，不过一般超不过这个限制，可以适当调大或调小</span></span><br><span class="line">   <span class="keyword">if</span> (invToSpread.size() &gt; MAX_SPREAD_SIZE) &#123;</span><br><span class="line">     logger.warn(<span class="string">&quot;Drop message, type: &#123;&#125;, ID: &#123;&#125;&quot;</span>, msg.getType(), msg.getMessageId());</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Item item;</span><br><span class="line">   <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> BlockMessage) &#123;</span><br><span class="line">     BlockMessage blockMsg = (BlockMessage) msg;</span><br><span class="line">     item = <span class="keyword">new</span> Item(blockMsg.getMessageId(), InventoryType.BLOCK);</span><br><span class="line">     logger.info(<span class="string">&quot;Ready to broadcast block &#123;&#125;&quot;</span>, blockMsg.getBlockId().getString());</span><br><span class="line">     blockMsg.getBlockCapsule().getTransactions().forEach(transactionCapsule -&gt; &#123;</span><br><span class="line">       Sha256Hash tid = transactionCapsule.getTransactionId();</span><br><span class="line">       invToSpread.remove(tid);</span><br><span class="line">       trxCache.put(<span class="keyword">new</span> Item(tid, InventoryType.TRX),</span><br><span class="line">           <span class="keyword">new</span> TransactionMessage(transactionCapsule.getInstance()));</span><br><span class="line">     &#125;);</span><br><span class="line">     blockCache.put(item, msg);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> TransactionMessage) &#123;</span><br><span class="line">     TransactionMessage trxMsg = (TransactionMessage) msg;</span><br><span class="line">     <span class="comment">// 注意，trxMsg.getMessageId() 是交易id: transactionCapsule.getTransactionId()</span></span><br><span class="line">     <span class="comment">// 也就是这里构建了一条广播消息的Item，包含了：交易ID、交易类型 TRX</span></span><br><span class="line">     item = <span class="keyword">new</span> Item(trxMsg.getMessageId(), InventoryType.TRX);</span><br><span class="line">     trxCount.add();</span><br><span class="line">     trxCache.put(item, <span class="keyword">new</span> TransactionMessage(trxMsg.getTransactionCapsule().getInstance()));</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     logger.error(<span class="string">&quot;Adv item is neither block nor trx, type: &#123;&#125;&quot;</span>, msg.getType());</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   invToSpread.put(item, System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (InventoryType.BLOCK.equals(item.getType())) &#123;</span><br><span class="line">     consumerInvToSpread();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拉取数据-FetchInvDataMsgHandler"><a href="#拉取数据-FetchInvDataMsgHandler" class="headerlink" title="拉取数据 FetchInvDataMsgHandler"></a>拉取数据 FetchInvDataMsgHandler</h3><p>假设上面的的交易通过节点A广播到了节点B，节点B收到消息后，就会来拉取直正的交易数据。<br>B 节点会发送 <code>FETCH_INV_DATA</code> 类型消息来A节点获数据。<br>核心方法在：<code>FetchInvDataMsgHandler.processMessage</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Sha256Hash hash : fetchInvDataMsg.getHashList()) &#123;</span><br><span class="line">  Item item = <span class="keyword">new</span> Item(hash, type);</span><br><span class="line">  <span class="comment">// 遍历 advService 的缓存数据，getMessage 中包含之前已发送的数据</span></span><br><span class="line">  Message message = advService.getMessage(item);</span><br><span class="line">  <span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// type: block、trx</span></span><br><span class="line">      message = tronNetDelegate.getData(hash, type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> P2pException(TypeEnum.DB_ITEM_NOT_FOUND,</span><br><span class="line">              <span class="string">&quot;Fetch item &quot;</span> + item + <span class="string">&quot; failed. reason: &quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FetchInvDataMsgHandler.processMessage</code>从<code>AdvService</code>的<code>trxCache</code>中拉取之前缓存的数据，这样就完成了一个广播到获取数据的流程。</p><p><code>AdvService.getMessage</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">getMessage</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item.getType() == InventoryType.TRX) &#123;</span><br><span class="line">    <span class="keyword">return</span> trxCache.getIfPresent(item);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> blockCache.getIfPresent(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送-consumerInvToSpread"><a href="#发送-consumerInvToSpread" class="headerlink" title="发送 consumerInvToSpread"></a>发送 consumerInvToSpread</h3><p>发送数据由: <code>consumerInvToSpread</code> 方法执行，通过：</p><ol><li><code>spreadExecutor</code> 定时执行</li><li><code>broadcast</code> 中判断类型为<code>InventoryType.BLOCK</code>则立即发送</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumerInvToSpread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  List&lt;PeerConnection&gt; peers = tronNetDelegate.getActivePeer().stream()</span><br><span class="line">      .filter(peer -&gt; !peer.isNeedSyncFromPeer() &amp;&amp; !peer.isNeedSyncFromUs())</span><br><span class="line">      .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (invToSpread.isEmpty() || peers.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  InvSender invSender = <span class="keyword">new</span> InvSender();</span><br><span class="line"></span><br><span class="line">  invToSpread.forEach((item, time) -&gt; peers.forEach(peer -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (peer.getAdvInvReceive().getIfPresent(item) == <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; peer.getAdvInvSpread().getIfPresent(item) == <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; !(item.getType().equals(InventoryType.BLOCK)</span><br><span class="line">        &amp;&amp; System.currentTimeMillis() - time &gt; BLOCK_PRODUCED_INTERVAL)) &#123;</span><br><span class="line">      peer.getAdvInvSpread().put(item, Time.getCurrentMillis());</span><br><span class="line">      invSender.add(item, peer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移除本次发送的数据，这样才不会越来越大</span></span><br><span class="line">    invToSpread.remove(item);</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="comment">// 发送</span></span><br><span class="line">  invSender.sendInv();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Transaction-交易结构"><a href="#Transaction-交易结构" class="headerlink" title="Transaction 交易结构"></a>Transaction 交易结构</h3><p><code>tron</code>链使用<code>protobuf</code>进行序列化和反序列化，观察一下<code>Transaction</code>的结构：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">Contract</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ContractType</span> </span>&#123;</span><br><span class="line">      AccountCreateContract = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 普通交易</span></span><br><span class="line">      TransferContract = <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// TRC10资产交易</span></span><br><span class="line">      TransferAssetContract = <span class="number">2</span>;</span><br><span class="line">      VoteAssetContract = <span class="number">3</span>;</span><br><span class="line">      VoteWitnessContract = <span class="number">4</span>;</span><br><span class="line">      WitnessCreateContract = <span class="number">5</span>;</span><br><span class="line">      AssetIssueContract = <span class="number">6</span>;</span><br><span class="line">      <span class="comment">// 7 呢？</span></span><br><span class="line">      WitnessUpdateContract = <span class="number">8</span>;</span><br><span class="line">      ParticipateAssetIssueContract = <span class="number">9</span>;</span><br><span class="line">      AccountUpdateContract = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 冻结</span></span><br><span class="line">      FreezeBalanceContract = <span class="number">11</span>;</span><br><span class="line">      <span class="comment">// 解冻</span></span><br><span class="line">      UnfreezeBalanceContract = <span class="number">12</span>;</span><br><span class="line">      <span class="comment">// 提取奖励</span></span><br><span class="line">      WithdrawBalanceContract = <span class="number">13</span>;</span><br><span class="line">      UnfreezeAssetContract = <span class="number">14</span>;</span><br><span class="line">      UpdateAssetContract = <span class="number">15</span>;</span><br><span class="line">      ProposalCreateContract = <span class="number">16</span>;</span><br><span class="line">      ProposalApproveContract = <span class="number">17</span>;</span><br><span class="line">      ProposalDeleteContract = <span class="number">18</span>;</span><br><span class="line">      SetAccountIdContract = <span class="number">19</span>;</span><br><span class="line">      CustomContract = <span class="number">20</span>;</span><br><span class="line">      CreateSmartContract = <span class="number">30</span>;</span><br><span class="line">      TriggerSmartContract = <span class="number">31</span>;</span><br><span class="line">      GetContract = <span class="number">32</span>;</span><br><span class="line">      UpdateSettingContract = <span class="number">33</span>;</span><br><span class="line">      ExchangeCreateContract = <span class="number">41</span>;</span><br><span class="line">      ExchangeInjectContract = <span class="number">42</span>;</span><br><span class="line">      ExchangeWithdrawContract = <span class="number">43</span>;</span><br><span class="line">      ExchangeTransactionContract = <span class="number">44</span>;</span><br><span class="line">      UpdateEnergyLimitContract = <span class="number">45</span>;</span><br><span class="line">      AccountPermissionUpdateContract = <span class="number">46</span>;</span><br><span class="line">      ClearABIContract = <span class="number">48</span>;</span><br><span class="line">      UpdateBrokerageContract = <span class="number">49</span>;</span><br><span class="line">      ShieldedTransferContract = <span class="number">51</span>;</span><br><span class="line">      MarketSellAssetContract = <span class="number">52</span>;</span><br><span class="line">      MarketCancelOrderContract = <span class="number">53</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ContractType type = <span class="number">1</span>;</span><br><span class="line">    google.protobuf.Any parameter = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">bytes</span> provider = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">bytes</span> ContractName = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">int32</span> Permission_id = <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">code</span> </span>&#123;</span><br><span class="line">      SUCESS = <span class="number">0</span>;</span><br><span class="line">      FAILED = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">contractResult</span> </span>&#123;</span><br><span class="line">      DEFAULT = <span class="number">0</span>;</span><br><span class="line">      SUCCESS = <span class="number">1</span>;</span><br><span class="line">      REVERT = <span class="number">2</span>;</span><br><span class="line">      BAD_JUMP_DESTINATION = <span class="number">3</span>;</span><br><span class="line">      OUT_OF_MEMORY = <span class="number">4</span>;</span><br><span class="line">      PRECOMPILED_CONTRACT = <span class="number">5</span>;</span><br><span class="line">      STACK_TOO_SMALL = <span class="number">6</span>;</span><br><span class="line">      STACK_TOO_LARGE = <span class="number">7</span>;</span><br><span class="line">      ILLEGAL_OPERATION = <span class="number">8</span>;</span><br><span class="line">      STACK_OVERFLOW = <span class="number">9</span>;</span><br><span class="line">      OUT_OF_ENERGY = <span class="number">10</span>;</span><br><span class="line">      OUT_OF_TIME = <span class="number">11</span>;</span><br><span class="line">      JVM_STACK_OVER_FLOW = <span class="number">12</span>;</span><br><span class="line">      UNKNOWN = <span class="number">13</span>;</span><br><span class="line">      TRANSFER_FAILED = <span class="number">14</span>;</span><br><span class="line">      INVALID_CODE = <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int64</span> fee = <span class="number">1</span>;</span><br><span class="line">    code ret = <span class="number">2</span>;</span><br><span class="line">    contractResult contractRet = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> assetIssueID = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">int64</span> withdraw_amount = <span class="number">15</span>;</span><br><span class="line">    <span class="built_in">int64</span> unfreeze_amount = <span class="number">16</span>;</span><br><span class="line">    <span class="built_in">int64</span> exchange_received_amount = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">int64</span> exchange_inject_another_amount = <span class="number">19</span>;</span><br><span class="line">    <span class="built_in">int64</span> exchange_withdraw_another_amount = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">int64</span> exchange_id = <span class="number">21</span>;</span><br><span class="line">    <span class="built_in">int64</span> shielded_transaction_fee = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">bytes</span> orderId = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">repeated</span> MarketOrderDetail orderDetails = <span class="number">26</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">raw</span> </span>&#123;</span><br><span class="line">    <span class="built_in">bytes</span> ref_block_bytes = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int64</span> ref_block_num = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">bytes</span> ref_block_hash = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">int64</span> expiration = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">repeated</span> authority auths = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">// data not used</span></span><br><span class="line">    <span class="built_in">bytes</span> data = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//only support size = 1,  repeated list here for extension</span></span><br><span class="line">    <span class="keyword">repeated</span> Contract contract = <span class="number">11</span>;</span><br><span class="line">    <span class="comment">// scripts not used</span></span><br><span class="line">    <span class="built_in">bytes</span> scripts = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">int64</span> timestamp = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">int64</span> fee_limit = <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  raw raw_data = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// only support size = 1,  repeated list here for muti-sig extension</span></span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">bytes</span> signature = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Result ret = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交易广播播代码:</p><p><a href="https://github.com/tronprotocol/java-tron/blob/develop/framework/src/main/java/org/tron/core/net/TronNetService.java">TronNetService.java</a><br><a href="https://github.com/tronprotocol/java-tron/blob/develop/framework/src/main/java/org/tron/core/net/service/AdvService.java">AdvService.java</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>了解这块代码的意义在于知道交易是怎么接收、处理、广播的，了解交易在所以节点之间的处理、流转。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> tron </tag>
            
            <tag> 广播 </tag>
            
            <tag> 交易 </tag>
            
            <tag> transaction </tag>
            
            <tag> netty </tag>
            
            <tag> handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethereum原理-RLP编码</title>
      <link href="posts/12a13330.html"/>
      <url>posts/12a13330.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>RLP(Recursive Length Prefix)，中文翻译过来叫递归长度前缀编码，它是以太坊序列化所采用的编码方式。RLP主要用于以太坊中数据的网络传输和持久化存储。<br>为什么要说这个东西，因为ETH在构建状态树的时候，使用到了这个编码，有比较强的关联性。</p><h3 id="为什么要有RLP这种编码"><a href="#为什么要有RLP这种编码" class="headerlink" title="为什么要有RLP这种编码?"></a>为什么要有RLP这种编码?</h3><p>是为了通用性，使数据成为平台无关性的数据。</p><blockquote><p>递归长度前缀的目的在于，对任意嵌套的二进制数据数组进行编码，而递归长度前缀是用于序列化以太坊执行层中对象的主要编码方法。 递归长度前缀的唯一目的是对结构进行编码；而对特定数据类型（例如字符串、浮点数）进行编码的工作，则留给高阶协议；但正递归长度前缀整数必须以不带前导零的大端序二进制形式表示（从而使整数值零相当于空字节数组）。 带有前导零的反序列化正整数被视为无效。 字符串长度的整数表示也必须以这种方式编码，有效载荷中的整数也是如此。</p></blockquote><p>意思就是说，底层存储的数据要保持一致，如果通过别的工具序列化出来的二进制数据，具有平台相关性，所以索性自己规定一种编码格式，上层使用者，自行解码。</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>RLP主要用于以太坊中数据的网络传输和持久化存储。<br>分四种情况：<br>1.单一字节<br>2.字符串长度小于: 56<br>3.字符串长度大于: 55<br>4.针对列表编码</p><h3 id="单一字节长度"><a href="#单一字节长度" class="headerlink" title="单一字节长度"></a>单一字节长度</h3><p>单一字节 如果其值介于[0x00, 0x7F]之间, 则保持不变(0-127)<br><code>0x7f</code>：表示的是一个十六进制数7F，即十进制127<br>对于值在<code>[0, 127]</code>之间的单个字节，其编码是其本身。<br>举个例子：<br>a的编码是97。其对应的就是ASCII码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">97</span>]</span><br></pre></td></tr></table></figure><p>取值范围</p><blockquote><p>[0x00, 0x7f]（十进制 [0, 127]）范围内的单个字节，该字节即是它自己的递归长度前缀编码。</p></blockquote><h3 id="字符串长度小于56，前缀-128-len"><a href="#字符串长度小于56，前缀-128-len" class="headerlink" title="字符串长度小于56，前缀 128+ len"></a>字符串长度小于56，前缀 128+ len</h3><p>第二种情况，字符串长度小于56，则需要添加<code>一个字节</code>做为前缀，该前缀的值是<code>0x80</code>+该字符串的长度。<br><code>0x80+</code>：对应10进制128。<br>这里说的长度，是指byte[]的len。</p><p>如果byte数组长度len &lt;= 55，编码的结果是数组本身，再加上128 + len 作为前缀。</p><p>举个例子：</p><p>有一个字符串：abc，对它进行编码，abc 编码结果是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;abc&quot;</span> = [<span class="number">131</span> <span class="number">97</span> <span class="number">98</span> <span class="number">99</span>]</span><br></pre></td></tr></table></figure><p>解释一下上面的结果：<br>1.131是怎么来的。如果超过一个字节且长度 &lt;= 55，必须多一位前缀用来记录长度，这个是人家的规则。abc分别占3个字节。<br>2.131 = 128 + len(&quot;abc&quot;)。<br>3.97 98 99依次是: a b c。</p><p>后面的编码也就基本套着这个规则。</p><p>取值范围</p><blockquote><p>如果字符串的长度为 0-55 个字节，则递归长度前缀编码包含一个值为 0x80（十进制 128）的单字节，加上该字符串之后字符串的长度。 因此，第一个字节的范围是 [0x80, 0xb7]（十进制 [128, 183]）。</p></blockquote><h3 id="3-如果数组长度大于55"><a href="#3-如果数组长度大于55" class="headerlink" title="3.如果数组长度大于55"></a>3.如果数组长度大于55</h3><p>这个跟前面有点不一样，会再多一个位置：<br>1.编码结果第一个是183加数组长度的编码的长度<br>2.然后是数组长度的本身的编码最后是byte数组的编码<br>3.最后是byte数组的编码。</p><p>官方文档的例子以16进制表示，看着别扭，我找了一个10进制表示的例子。</p><p>编码下面这段字符串：</p><blockquote><p>The length of this sentence is more than 55 bytes, I know it because I pre-designed it</p></blockquote><p>这段字符串共86个字节，包含空格。</p><p>注意结果的前两位，有迷惑性</p><blockquote><p>184 86 84 104 101 32 108 101 110 103 116 104 32 111 102 32 116 104 105 115 32 115 101 110 116 101 110 99 101 32 105 115 32 109 111 114 101 32 116 104 97 110 32 53 53 32 98 121 116 101 115 44 32 73 32 107 110 111 119 32 105 116 32 98 101 99 97 117 115 101 32 73 32 112 114 101 45 100 101 115 105 103 110 101 100 32 105 116</p></blockquote><p>其中前三个字节的计算方式如下：</p><p>184: 由前一位的长度计算得来的，因为数组长度86编码后仅占用<code>一个字节</code>，所以 184 = 183 + 1。后面会再给个例子。<br>86: 即数组长度86<br>84: 是上面字符串中，首个字母T的编码</p><p>再看个例子</p><p>编码一个重复1024次&quot;a&quot;的字符串，其结果为：</p><blockquote><p>185 4 0 97 97 97 97 97 97 ... 97。</p></blockquote><p>1024长度编码后为：<code>0x40</code> <code>0x00</code>，省略掉前面的零，长度为2，因此185 = 183 + 2。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="如果列表长度小于55"><a href="#如果列表长度小于55" class="headerlink" title="如果列表长度小于55"></a>如果列表长度小于55</h3><p>如果列表长度小于55，编码结果第一位是192加列表长度的编码的长度，然后依次连接各子列表的编码。</p><p>例如：<br>[&quot;abc&quot;, &quot;def&quot;] = [200 131 97 98 99 131 100 101 102]</p><p>其中，&quot;abc&quot;的编码为：131 97 98 99，&quot;def&quot;的编码为：131 100 101 102。<br>两个子字符串的编码后总长度是8，因此编码结果第一位计算得出：192 + 8 = 200。</p><p>192是怎么来的？</p><blockquote><p>如果列表的总有效载荷长度（即其所有经过递归长度前缀编码的项目的组合长度）为 0-55 个字节，则递归长度前缀编码包含一个值为 0xc0 的单字节，加上列表长度，后跟一串项目递归长度前缀编码。 因此，第一个字节的范围是 [0xc0, 0xf7]（十进制 [192, 247]）。</p></blockquote><h3 id="如果列表长度超过55"><a href="#如果列表长度超过55" class="headerlink" title="如果列表长度超过55"></a>如果列表长度超过55</h3><p>如果列表长度超过55，编码结果第一位是247加列表长度的编码长度，然后是列表长度本身的编码，最后依次连接各子列表的编码。</p><p>举个例子：<br>这段数据，两个元素双眼号内的数据包含空格是86个字符</p><blockquote><p>[&quot;The length of this sentence is more than 55 bytes, &quot;, &quot;I know it because I pre-designed it&quot;]</p></blockquote><p>编码结果是:</p><blockquote><p>248 88 179 84 104 101 32 108 101 110 103 116 104 32 111 102 32 116 104 105 115 32 115 101 110 116 101 110 99 101 32 105 115 32 109 111 114 101 32 116 104 97 110 32 53 53 32 98 121 116 101 115 44 32 163 73 32 107 110 111 119 32 105 116 32 98 101 99 97 117 115 101 32 73 32 112 114 101 45 100 101 115 105 103 110 101 100 32 105 116</p></blockquote><p>其中前两个字节的计算方式如下：</p><p>说明：</p><p>248 = 247 + 1<br>88 = 86 + 2，在规则3的示例中，长度为86，而在此例中，由于有两个<code>子字符串</code>（就是两个数组元素），每个子字符串本身的长度的编码各占1字节，因此总共占2字节。<br>第3个字节179依据规则2得出179 = 128 + 51<br>第55个字节163同样依据规则2得出163 = 128 + 35</p><blockquote><p>如果列表的总有效载荷长度超过 55 个字节，则递归长度前缀编码包含一个值为 0xf7 的单字节，加上二进制格式的有效载荷长度的以字节为单位的长度，后跟有效载荷的长度，然后是项目递归长度前缀编码串。 因此，第一个字节的范围是 [0xf8, 0xff]（十进制 [248, 255]）。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对面上的例子做一个总结，第一个字节<code>f</code>的大小</p><table><thead><tr><th align="center">首字节大小</th><th>类型</th><th align="center">长度</th></tr></thead><tbody><tr><td align="center">f∈ [0,128)</td><td>字节</td><td align="center">一个字节本身</td></tr><tr><td align="center">f∈[128,184)</td><td>数组</td><td align="center">长度不超过55的byte数组，数组的长度为 <code>l=f-128</code></td></tr><tr><td align="center">f∈[184,192)</td><td>数组</td><td align="center">一个长度超过55的数组，长度本身的编码长度<code>ll=f-183</code>,然后从第二个字节开始读取长度为ll的bytes，按照BigEndian编码成整数l，l即为数组的长度。</td></tr><tr><td align="center">f∈(192,247]</td><td>数组</td><td align="center">一个编码后总长度不超过55的列表，列表长度为<code>l=f-192</code></td></tr><tr><td align="center">f∈(247,256]</td><td>数组</td><td align="center">编码后长度大于55的列表，其长度本身的编码长度<code>ll=f-247</code>,然后从第二个字节读取长度为ll的bytes,按BigEndian编码成整数l，l即为子列表长度。然后递归根据解码规则进行解码。</td></tr></tbody></table><p>以上解释了什么叫<strong>递归长度前缀</strong>编码，这个名字本身很好的解释了编码规则。</p><p>RLP编码的话，大至就是这样，重点要了解它在构建状态树时，是如何使用的。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://ethereum.org/zh/developers/docs/data-structures-and-encoding/rlp">https://ethereum.org/zh/developers/docs/data-structures-and-encoding/rlp</a></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> ethereum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> ethereum </tag>
            
            <tag> blockchain </tag>
            
            <tag> 原理 </tag>
            
            <tag> 编码 </tag>
            
            <tag> 白皮书 </tag>
            
            <tag> rlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron-网络模型-AdvService广播服务</title>
      <link href="posts/7a9eccd0.html"/>
      <url>posts/7a9eccd0.html</url>
      
        <content type="html"><![CDATA[<h2 id="AdvService-作用"><a href="#AdvService-作用" class="headerlink" title="AdvService 作用"></a>AdvService 作用</h2><p><code>AdvService</code> 负责将数据广播到<code>tron</code>网络当中。<br>基础框架是<code>netty</code>，在此之上开发<code>AdvService</code>对业务进行了封装。</p><p>数据包括:</p><ol><li>交易</li><li>区块</li></ol><p>需要注意的是，<code>tron</code>的<code>AdvService</code>的这套广播逻辑，不是单向广播，而是双向互动。<br>啥意思，就是说，一般理解，一条数据广播出去后，就广播到对方节上了。<br>但是tron的广播不是这样，而是先广播一个交易ID到目录节点上，目标节点收到ID后，再发一条请求接取的网络请求，把数据接回去！！！！<br>是不是有点反直觉！！！</p><h3 id="AdvService-主要成员"><a href="#AdvService-主要成员" class="headerlink" title="AdvService 主要成员"></a>AdvService 主要成员</h3><p><strong>invToFetch</strong>:<br><strong>invToSpread</strong>: 待广播的数据：交易、区块<br><strong>invToFetchCache</strong>:</p><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><p><strong>consumerInvToSpread</strong>: 处理发送队列<br><strong>consumerInvToFetch</strong>:  处理拉取队列<br><strong>broadcast</strong>: 广播</p><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><ol><li>broadcast: 构建广播消息体：只包含ID<ol><li>将数据添加入trxCache/blockCache</li><li>封装item</li><li>保存待发送消息: invToSpread.put(item)</li></ol></li><li>consumerInvToSpread: 处理 invToSpread</li></ol><h2 id="广播-id"><a href="#广播-id" class="headerlink" title="广播 id"></a>广播 id</h2><p>需要发送的数据如：<strong>交易</strong>、<strong>区块</strong>，通过调用<code>AdvService.broadcast</code>将<code>id</code>广播。<br>但是广播并不是一调用<code>broadcast</code>就发送出去的，还需要在各个队列中导来导去好几次。<br>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">broadcast()</span><br><span class="line">\--consumerInvToSpread()</span><br><span class="line">   \--invSender.sendInv();</span><br><span class="line">       \--peer.sendMessage(<span class="keyword">new</span> InventoryMessage(value, key));</span><br><span class="line">          \--msgQueue.sendMessage(message);</span><br><span class="line">             \--requestQueue.add(<span class="keyword">new</span> MessageRoundTrip(msg));</span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li>判断block/trx<br>blockCache //接收到的数据进缓存<br>trxCache   //接收到的数据进缓存</li><li>将数据装成 item</li><li>invToSpread.put(item)</li><li>consumerInvToSpread        //处理 invToSpread 的中数据</li></ol><p>具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcast</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果是 fastForward 节点不广播</span></span><br><span class="line">  <span class="keyword">if</span> (fastForward) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// MAX_SPREAD_SIZE = 1_000</span></span><br><span class="line">  <span class="keyword">if</span> (invToSpread.size() &gt; MAX_SPREAD_SIZE) &#123;</span><br><span class="line">    logger.warn(<span class="string">&quot;Drop message, type: &#123;&#125;, ID: &#123;&#125;&quot;</span>, msg.getType(), msg.getMessageId());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Item item;</span><br><span class="line">  <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> BlockMessage) &#123;</span><br><span class="line">    BlockMessage blockMsg = (BlockMessage) msg;</span><br><span class="line">    <span class="comment">// 注意这里，是id，而不是区块本身</span></span><br><span class="line">    item = <span class="keyword">new</span> Item(blockMsg.getMessageId(), InventoryType.BLOCK);</span><br><span class="line">    logger.info(<span class="string">&quot;Ready to broadcast block &#123;&#125;&quot;</span>, blockMsg.getBlockId().getString());</span><br><span class="line">    <span class="comment">// 把Block中的交易放到trxCache</span></span><br><span class="line">    blockMsg.getBlockCapsule().getTransactions().forEach(transactionCapsule -&gt; &#123;</span><br><span class="line">      Sha256Hash tid = transactionCapsule.getTransactionId();</span><br><span class="line">      invToSpread.remove(tid);</span><br><span class="line">      trxCache.put(<span class="keyword">new</span> Item(tid, InventoryType.TRX),</span><br><span class="line">          <span class="keyword">new</span> TransactionMessage(transactionCapsule.getInstance()));</span><br><span class="line">    &#125;);</span><br><span class="line">    blockCache.put(item, msg);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> TransactionMessage) &#123;</span><br><span class="line">    TransactionMessage trxMsg = (TransactionMessage) msg;</span><br><span class="line">    <span class="comment">// getMessageId 是交易id</span></span><br><span class="line">    item = <span class="keyword">new</span> Item(trxMsg.getMessageId(), InventoryType.TRX);</span><br><span class="line">    trxCount.add();</span><br><span class="line">    trxCache.put(item, <span class="keyword">new</span> TransactionMessage(trxMsg.getTransactionCapsule().getInstance()));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;Adv item is neither block nor trx, type: &#123;&#125;&quot;</span>, msg.getType());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  invToSpread.put(item, System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (InventoryType.BLOCK.equals(item.getType())) &#123;</span><br><span class="line">    consumerInvToSpread();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Sha256Hash <span class="title">getMessageId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.transactionCapsule.getTransactionId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Sha256Hash <span class="title">getMessageId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getBlockCapsule().getBlockId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>consumerInvToSpread 中处理</p><p>处理过程:</p><ol><li>拿到所有活跃PeerConnection</li><li>创建InvSender</li><li>把数据copy到 peer 的AdvInvSpread</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumerInvToSpread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断 peer 状态，这段代码不能忽略</span></span><br><span class="line">  <span class="comment">// peer.isNeedSyncFromPeer() 表示这个peer的状态，正在同步，区块状态不完整，不完整的不要广播给它</span></span><br><span class="line">  <span class="comment">// peer.isNeedSyncFromUs() 表示peer，正在给别的节点同步数据：</span></span><br><span class="line">  <span class="comment">//   区块还不完整，那么链的状态也是不完整的，广播过去的交易，它们也处理不了</span></span><br><span class="line">  List&lt;PeerConnection&gt; peers = tronNetDelegate.getActivePeer().stream()</span><br><span class="line">      .filter(peer -&gt; !peer.isNeedSyncFromPeer() &amp;&amp; !peer.isNeedSyncFromUs())</span><br><span class="line">      .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (invToSpread.isEmpty() || peers.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  InvSender invSender = <span class="keyword">new</span> InvSender();</span><br><span class="line"></span><br><span class="line">  invToSpread.forEach((item, time) -&gt; peers.forEach(peer -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (peer.getAdvInvReceive().getIfPresent(item) == <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; peer.getAdvInvSpread().getIfPresent(item) == <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; !(item.getType().equals(InventoryType.BLOCK)       <span class="comment">// 如果是Block 且 超过3秒就不广播了</span></span><br><span class="line">        &amp;&amp; System.currentTimeMillis() - time &gt; BLOCK_PRODUCED_INTERVAL)) &#123;</span><br><span class="line">      <span class="comment">// 把交易塞到 peer 的 AdvInvSpread 队列</span></span><br><span class="line">      peer.getAdvInvSpread().put(item, Time.getCurrentMillis());</span><br><span class="line">      invSender.add(item, peer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移除提交易</span></span><br><span class="line">    invToSpread.remove(item);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  invSender.sendInv();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//TODO</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> tron </tag>
            
            <tag> 广播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron-数据库设计1-接口和内存数据库状态</title>
      <link href="posts/e50aa4af.html"/>
      <url>posts/e50aa4af.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p><code>tron</code>的数据库设计是在基于<code>leveldb</code>的基础上抽像自己的相关业务，设计出基于自己的业务数据操作类。<br>有两大块分别是：</p><ol><li>内存数据库</li><li>持久化数据库</li></ol><p>从两个角度进行梳理:</p><ol><li>代码设计</li><li>业务应用</li></ol><ul><li>代码结构<ul><li>代码结构设计</li><li>接口关系、主要功能方面着手了解。</li></ul></li><li>业务使用<ul><li>generateBlock</li><li>pushBlock</li><li>pushTransaction</li><li>switchFork</li></ul></li></ul><h2 id="一、ITronChainBase-存储操作接口"><a href="#一、ITronChainBase-存储操作接口" class="headerlink" title="一、ITronChainBase 存储操作接口"></a>一、ITronChainBase 存储操作接口</h2><p>数据库相关的接口比较多，有些关系结构看起来功能相似，反而不容易区分出差异。下面按照功能职责划分。</p><p>作用：提供基础数据库基础操作方法。<br><img src="/posts/e50aa4af/ITronChainBase.png" alt="ITronChainBase.png"></p><ol><li><strong>ITronChainBase</strong>: 顶层接口，提供如：<code>put</code>、<code>get</code>、<code>delete</code>等相关操作，包含两个抽象类。</li><li><strong>TronStoreWithRevoking</strong>: 抽象类，提供构造器中包含初始化方法。各个Store的初始化从这里开始，包含36个Store，如：<br>a. AccountStore<br>b. BlockStore<br>c. BlockIndexStore</li><li><strong>TronDatabase</strong>：抽象类，提供的方法大部分为抽像方法，这样的话，实现类可以根据需要，自行实现自己业务相关的数据库操作。<br>构造器也提供初始化功能，其构造器中的初始化 DbSourceInter，直接操作数据库。<br>子类如：<br>a. KhaosDatabase：内存数据库<br>b. CheckTmpStore：并没有真正实现ITronChainBase接口方法 ，接口方法都是空实现。<br>从设计上看，只是将跟数据库操作相关的类，使用相同接口进行规范。</li></ol><h2 id="二、RevokingDatabase-可回退数据库"><a href="#二、RevokingDatabase-可回退数据库" class="headerlink" title="二、RevokingDatabase 可回退数据库"></a>二、RevokingDatabase 可回退数据库</h2><p><img src="/posts/e50aa4af/RevokingDatabase.png" alt="RevokingDatabase.png"></p><p>作用：提供基于可回退的数据库操作。提供内存快照功能，管理指针对Session的处理：</p><ol><li>快照创建</li><li>数据合并</li><li>快照销毁</li></ol><p>相关接口、类如下:</p><ol><li><strong>RevokingDatabase</strong>: 接口，提供buildSession、merge等操作。</li><li><strong>RevokingStore</strong>：快照存储v1版本，实现类主要功能依赖抽像类AbstractRevokingStore</li><li><strong>SnapshotManager</strong>：快照存储v2版本，当前主要实现类。</li><li><strong>v1、v2区别</strong>:<br>a. <code>db.version = 1</code>， 方式：向数据库写入数据之前，将修改过程保存到内存，然后再将数据写到数据库，当需要数据回退的时候，根据内存保存的数据修改过程，还原数据库中的数据。<br>b. <code>db.version = 2</code>，方式：向数据库写入的数据都是不可回退的数据，而将可回退的数据写入到内存，当可回退的数据变成不可回退的时候即固化，再将数据写入到数据库。<br>c. <code>db.version=1</code> 这种方式，如果服务出现异常，回退就丢失了，不利于回退。</li></ol><h3 id="1-SnapshotManager-内存快照管理"><a href="#1-SnapshotManager-内存快照管理" class="headerlink" title="1.SnapshotManager 内存快照管理"></a>1.SnapshotManager 内存快照管理</h3><p>作用：维护session状态，包括：创建、合并、刷盘等操作。<br>顶层接口：<strong>RevokingDatabase</strong>，数据库模型：构建内存快照链表。<br>使用可回退数据库模型<strong>TronStoreWithRevoking</strong>，未固化块均存在于内存快照中，固化块存在于底层数据库<strong>LevelDB</strong>或者<strong>rocksDB</strong>中。<br>基于SnapshotRoot快照模型</p><p><img src="/posts/e50aa4af/%E5%9F%BA%E4%BA%8ESnapshotRoot%E5%BF%AB%E7%85%A7%E6%A8%A1%E5%9E%8B.png" alt="基于SnapshotRoot快照模型.png"></p><p>每一个<code>Snapshot</code>就是内存当中的一个数据结构，是当前整个数据库的状态，是整个数据库的状态。<br>就是说，每一个Snapshot保存的是某个块高的快照状态。</p><p>怎么理解？<br>首先，状态只跟区块有关，每个Snapshot对应一个当前区块状态，如：<br>Snapshot1 对应 block=10001。</p><p>比如：block=10001的状态是：<br>account1=100<br>account2=222</p><p>Snapshot2 对应 block=10002。</p><p>比如：block=10001的状态是：<br>account1=110<br>account2=333</p><p>至于为什么是这样对应，为什么要这样设计，这样设计的用意、为了解决什么问题、好处、可能出现的问题，后面讲。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tron </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron 参与度算法模拟</title>
      <link href="posts/26ee780.html"/>
      <url>posts/26ee780.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>这个算法是在<code>分布式</code>场景下，计算不同节点之前的参与度，也就是有多少节点还存活，并参与到正常的业务处理当中。</p><h3 id="为什么需要-参与度？"><a href="#为什么需要-参与度？" class="headerlink" title="为什么需要: 参与度？"></a>为什么需要: 参与度？</h3><p>大白话就是有什么用，不用行不行？<br>在中心化的应用当中，网络的数据处理只需要提交易中心节点处理即可。如下一个订单、注册一个用户。<br>在区块链场景下，所有节点之前都是独立的个体，谁也没有比较权威，在完成一个业务的处理，需要多个节点的认可才可能完成。<br>用不用需要看是使用的哪一种共识协议。如果是POW完全不用考虑，如果是DPOS这种就需要。<br>在<code>分布式</code>环境下，一件事需要处理成功，需要有一定数量的可信节点来<code>证明!</code>、<code>证明!</code>、<code>证明!</code>，否则这件事就不可能被认为是一件可信的事情，比如，有一个节点给自己的账户转了1000万，并生产了一个区块记账，那这个区块必须得到网络中半数以上的<code>验证者</code>认可，那这个区块就是可信的。如果不需要的话，自己可以随意改代码给做对自己有利的事，那这个网络就没有人会信任，所以需要有一定的节点成为：<code>验证者</code>。</p><h3 id="验证者"><a href="#验证者" class="headerlink" title="验证者"></a>验证者</h3><p>那就选出一批<code>验证者</code>来干活。问题是，网络是分布式的，机器、网络节点有可能会故障挂掉，如何确保挂掉一部分验证者后，网络还能继续工作。那就需要保证有一批最小的可信<code>验证者</code>，就需要一个算法，来计算当前还有多少可信<code>验证者</code>。</p><p>这里不谈为什么这些节点是否可信的问题，因为拜占庭将军问题解释起来有点多，只谈如何计算这些节点的有多少个，这个值就是：<code>参与度</code>。</p><p>事情就是这么个事，那如何计算呢？</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在分布式环境中，需要指定最少多少节点参与，才可以保证节点的正常运行。那就需要指定一个最小参与度。<br>需要考虑几个维护：</p><ol><li>最大参与者</li><li>最小参与度</li><li>节点挂掉后，如何降底参与度</li><li>节点恢复后，如何提升级与度</li></ol><p>参与度的值就是通过参与者进行计出来的，那么我们需要知道一个最小的参与度<code>minParticipationRate</code>。<br>这个值可以设置一个百分比来控制。</p><p>还有一个问题，整个网络环境是去中心化的呀，我怎么能知道，邻居节点挂了，依据是什么？<br>这个问题好解决，在DPOS协议当中，设定了27个验证者节点，且每3秒之间就会有一次区块交互，如果3秒内我没有收到上一个节点发给我的区块，说明上一个节点可能出现问题了，那么我就记一笔，上一个节点有问题可信节点-1。<br>OK那么节点之间的发现问题由DPOS协议来保证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.blockchain.labs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Arrays.fill;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022/4/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockFilledSlot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; database = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BLOCK_FILLED_SLOTS_NUMBER = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    initFill();</span><br><span class="line">    initBlockFilledSlotsIndex();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] blockFilledSlots = <span class="keyword">new</span> <span class="keyword">int</span>[getBlockFilledSlotsNumber()];</span><br><span class="line">    fill(blockFilledSlots, <span class="number">1</span>);</span><br><span class="line">    database.put(<span class="string">&quot;BLOCK_FILLED_SLOTS&quot;</span>, blockFilledSlots);</span><br><span class="line">    System.out.println(<span class="string">&quot;init param&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;SlotCount=&quot;</span> + IntStream.of(blockFilledSlots).sum());</span><br><span class="line">    System.out.println(<span class="string">&quot;Percent=&quot;</span> + calculateFilledSlotsCount() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initBlockFilledSlotsIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    database.put(<span class="string">&quot;BLOCK_FILLED_SLOTS_INDEX&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getBlockFilledSlotsIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) database.get(<span class="string">&quot;BLOCK_FILLED_SLOTS_INDEX&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getBlockFilledSlotsNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BLOCK_FILLED_SLOTS_NUMBER;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getBlockFilledSlots() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>[]) database.get(<span class="string">&quot;BLOCK_FILLED_SLOTS&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每一次 true false 都会让 index 往前或后移动一步</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applyBlock</span><span class="params">(<span class="keyword">boolean</span> fillBlock)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] blockFilledSlots = getBlockFilledSlots();</span><br><span class="line">    <span class="keyword">int</span> blockFilledSlotsIndex = getBlockFilledSlotsIndex();</span><br><span class="line"><span class="comment">//    System.out.println(&quot;blockFilledSlotsIndex before: &quot; + blockFilledSlotsIndex);</span></span><br><span class="line">    blockFilledSlots[blockFilledSlotsIndex] = fillBlock ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    saveBlockFilledSlots(blockFilledSlots);</span><br><span class="line">    saveBlockFilledSlotsIndex((blockFilledSlotsIndex + <span class="number">1</span>) % getBlockFilledSlotsNumber());</span><br><span class="line"><span class="comment">//    System.out.println(&quot;blockFilledSlotsIndex after: &quot; + getBlockFilledSlotsIndex());</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveBlockFilledSlots</span><span class="params">(<span class="keyword">int</span>[] blockFilledSlots)</span> </span>&#123;</span><br><span class="line"><span class="comment">//    System.out.println(&quot;array: &quot; + Arrays.toString(blockFilledSlots));</span></span><br><span class="line">    database.put(<span class="string">&quot;BLOCK_FILLED_SLOTS&quot;</span>, blockFilledSlots);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveBlockFilledSlotsIndex</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    database.put(<span class="string">&quot;BLOCK_FILLED_SLOTS_INDEX&quot;</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateFilledSlotsCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] blockFilledSlots = getBlockFilledSlots();</span><br><span class="line">    <span class="keyword">int</span> sum = IntStream.of(blockFilledSlots).sum();</span><br><span class="line"><span class="comment">//    System.out.println(&quot;calculateFilledSlotsCount: &quot; + sum);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span> * sum / getBlockFilledSlotsNumber();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> slot = <span class="number">64</span>;</span><br><span class="line">    <span class="comment">// 实际中，slot 的个数是根据 witness 的产块与否来决定的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slot; i++) &#123;</span><br><span class="line">      applyBlock(<span class="keyword">false</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;SlotsCount: &quot;</span> + IntStream.of(getBlockFilledSlots()).sum());</span><br><span class="line">      System.out.println(<span class="string">&quot;Percent: &quot;</span> + calculateFilledSlotsCount() + <span class="string">&quot; %&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line">      applyBlock(<span class="keyword">true</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;SlotsCount: &quot;</span> + IntStream.of(getBlockFilledSlots()).sum());</span><br><span class="line">      System.out.println(<span class="string">&quot;Percent: &quot;</span> + calculateFilledSlotsCount() + <span class="string">&quot; %&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参与度算法可以用来限制整个SR网络的产块状态，但是严格的参与度限制，也会使整个网络的产块稳定性和效率降低。<br>如果为了产块的稳定性，参与度并不是越大越好。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> tron </tag>
            
            <tag> java </tag>
            
            <tag> 参与度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-viper 配置文件框架</title>
      <link href="posts/2cda5d6f.html"/>
      <url>posts/2cda5d6f.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>看了一些开源项目，很多都会使用<code>viper</code>这个配置文件框架，然后了解了一番，做一下输出。<br>下面这些内容摘自官方github，官方的示例比较粗糙，下面稍加改动改动了一下写了几个示例。<br>实际这个框架写的简单好用。</p><p>viper 是一个完整的 Go应用程序的配置解决方案，它被设计为在应用程序中工作，并能处理所有类型的配置需求和格式。支持特性功能如下：</p><h3 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h3><p>读取 JSON、TOML、YAML、HCL、envfile和 Java属性的配置文件<br>监控配置文件改动，并热加载配置文件<br>从环境变量中读取<br>从远程配置中心读取配置（etcd/consul），并监控变动<br>从命令行标志中读取<br>从缓冲区读取<br>支持直接设置配置项的值</p><h3 id="viper读取配置文件的优先级顺序"><a href="#viper读取配置文件的优先级顺序" class="headerlink" title="viper读取配置文件的优先级顺序"></a>viper读取配置文件的优先级顺序</h3><p>viper.Set() 所设置的值<br>命令行 flag<br>环境变量<br>配置文件<br>配置中心etcd/consul<br>默认值</p><p>注意：viper的配置键是不区分大小写的。</p><h3 id="创建测试项目"><a href="#创建测试项目" class="headerlink" title="创建测试项目"></a>创建测试项目</h3><p>最简单的方式使用vscode、goland直接操作一下就完了，如果你也习惯使用vim来操作，可以直接用下面这种方式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p vipertest</span><br><span class="line">cd vipertest</span><br><span class="line">git init -q</span><br><span class="line">git remote add origin https:<span class="comment">//github.com/forfreeday/vipertest</span></span><br><span class="line"><span class="keyword">go</span> mod init github.com/forfreeday/vipertest</span><br><span class="line"></span><br><span class="line">mkdir -p $HOME/.vipertest/</span><br></pre></td></tr></table></figure><h3 id="添加测试数据"><a href="#添加测试数据" class="headerlink" title="添加测试数据"></a>添加测试数据</h3><p>添加一个测试用的配置文件，这里我就创建在这个目录，仅测试用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;$HOME/.vipertest/config.yaml</span><br><span class="line"></span><br><span class="line">Hacker: true</span><br><span class="line">name: steve</span><br><span class="line">hobbies:</span><br><span class="line">- skateboarding</span><br><span class="line">- snowboarding</span><br><span class="line">- go</span><br><span class="line">clothing:</span><br><span class="line">  jacket: leather</span><br><span class="line">  trousers: denim</span><br><span class="line">age: 35</span><br><span class="line">eyes : brown</span><br><span class="line">beard: true</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="读配置文件"><a href="#读配置文件" class="headerlink" title="读配置文件"></a>读配置文件</h3><p>主要操作API：<br>指定读取的文件名: config 是指文件名</p><blockquote><p>viper.SetConfigName(&quot;config&quot;)</p></blockquote><p>文件后缀为: yaml</p><blockquote><p>viper.SetConfigType(&quot;yaml&quot;)</p></blockquote><p>文件读取路径，可以添加多个</p><blockquote><p>viper.AddConfigPath(&quot;/etc/appname/&quot;)<br>viper.AddConfigPath(&quot;$HOME/.vipertest&quot;)<br>viper.AddConfigPath(&quot;.&quot;)</p></blockquote><p><img src="/posts/2cda5d6f/%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE.jpg" alt="读取配置"></p><h3 id="写入配置"><a href="#写入配置" class="headerlink" title="写入配置"></a>写入配置</h3><p>写入配置使用<code>viper.Set()</code>函数操作，调用这个函数只是写入到内存，还没以有直正写入到文件。<br>在 write 函数中，修改<code>name</code>的值，并添加个新的kv。</p><p><img src="/posts/2cda5d6f/viper%E8%AF%BB%E5%86%99demo.jpg" alt="viper读写demo"></p><p>最后查看一下配置，<code>name</code>已经被替换了，并添加了一个新的kv<code>testkey</code></p><p><img src="/posts/2cda5d6f/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.jpg" alt="配置文件"></p><p>完整示例代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;bytes&quot;</span></span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 读取配置</span></span><br><span class="line">  <span class="comment">// read()</span></span><br><span class="line">  <span class="comment">// 写入配置</span></span><br><span class="line">  <span class="comment">// write()</span></span><br><span class="line">  <span class="comment">// 从byte流中读取</span></span><br><span class="line">  readByIo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">  viper.SetConfigName(<span class="string">&quot;config&quot;</span>)           <span class="comment">// name of config file (without extension)</span></span><br><span class="line">  viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)             <span class="comment">// REQUIRED if the config file does not have the extension in the name</span></span><br><span class="line">  viper.AddConfigPath(<span class="string">&quot;/etc/appname/&quot;</span>)    <span class="comment">// path to look for the config file in</span></span><br><span class="line">  viper.AddConfigPath(<span class="string">&quot;$HOME/.vipertest&quot;</span>) <span class="comment">// call multiple times to add many search paths</span></span><br><span class="line">  viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)                <span class="comment">// optionally look for config in the working directory</span></span><br><span class="line">  err := viper.ReadInConfig()             <span class="comment">// Find and read the config file</span></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;                         <span class="comment">// Handle errors reading the config file</span></span><br><span class="line">    <span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;fatal error config file: %w&quot;</span>, err))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  fmt.Println(viper.Get(<span class="string">&quot;Hacker&quot;</span>))</span><br><span class="line">  fmt.Println(viper.Get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readByIo</span><span class="params">()</span></span> &#123;</span><br><span class="line">  viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>) <span class="comment">// or viper.SetConfigType(&quot;YAML&quot;)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// any approach to require this configuration into your program.</span></span><br><span class="line">  <span class="keyword">var</span> yamlExample = []<span class="keyword">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  Hacker: true</span></span><br><span class="line"><span class="string">  name: steve</span></span><br><span class="line"><span class="string">  hobbies:</span></span><br><span class="line"><span class="string">  - skateboarding</span></span><br><span class="line"><span class="string">  - snowboarding</span></span><br><span class="line"><span class="string">  - go</span></span><br><span class="line"><span class="string">  clothing:</span></span><br><span class="line"><span class="string">    jacket: leather</span></span><br><span class="line"><span class="string">    trousers: denim</span></span><br><span class="line"><span class="string">  age: 35</span></span><br><span class="line"><span class="string">  eyes : brown</span></span><br><span class="line"><span class="string">  beard: true</span></span><br><span class="line"><span class="string">  `</span>)</span><br><span class="line">  viper.ReadConfig(bytes.NewBuffer(yamlExample))</span><br><span class="line">  name := viper.Get(<span class="string">&quot;name&quot;</span>) <span class="comment">// this would be &quot;steve&quot;</span></span><br><span class="line">  fmt.Println(name)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;read by io, name: %s\n&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getValue</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="comment">// 需要强转</span></span><br><span class="line">  <span class="comment">//value := viper.Get(key)</span></span><br><span class="line">  value := viper.GetString(key)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;get value: %s\n&quot;</span>, value)</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 获取一个key为name的值</span></span><br><span class="line">  value := getValue(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;set value: %s\n&quot;</span>, value)</span><br><span class="line">  <span class="comment">// set 新值到文件</span></span><br><span class="line">  viper.Set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;liukai&quot;</span>)</span><br><span class="line">  value2 := getValue(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;set new value2: %s\n&quot;</span>, value2)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置新值</span></span><br><span class="line">  viper.Set(<span class="string">&quot;testkey&quot;</span>, <span class="string">&quot;liukai&quot;</span>)</span><br><span class="line">  value3 := getValue(<span class="string">&quot;testkey&quot;</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;set new value3: %s\n&quot;</span>, value3)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入到配置文件j</span></span><br><span class="line">  viper.WriteConfig()</span><br><span class="line">  <span class="comment">// 安全写入</span></span><br><span class="line">  <span class="comment">//viper.SafeWriteConfig()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>viper 即简单又强大，还可以从远程获取配置，详细直接参考官方说明。在项目中的应用感觉确实比java这种强调抽像的语言用起来更舒服一些。但是java在使用上强调编程范式，尽量遵循统一约定写起来更不容易出错，就是有些框架太过于抽象，不过习惯一下也就好了，就是阅读代码对新手不友好。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> viper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> viper </tag>
            
            <tag> 配置文件 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron-资源模型-能量Bandwidth</title>
      <link href="posts/e17f4065.html"/>
      <url>posts/e17f4065.html</url>
      
        <content type="html"><![CDATA[<h2 id="资源模型"><a href="#资源模型" class="headerlink" title="资源模型"></a>资源模型</h2><p><code>tron</code>有两种资源：</p><ul><li>带宽 Bandwidth<ul><li>固定免费额度</li><li>质押获得</li></ul></li><li>能量 Energy<ul><li>固定免费额度</li><li>质押获得</li></ul></li></ul><p>资源模型指什么，指<code>tron</code>链当中，每个账户<code>account</code>都拥有的除了代币之外的资源。<br>这个资源是在执行交易或智能合约时，进行消耗的资源，大白话就是交易都有手续费，这个资源就相当于免费给你的资源，可以用来抵销转账的手续费，每个账户免费额度有限。</p><p><code>tron</code>链中主要有两种资源模型：<strong>带宽</strong>和<strong>能量</strong>。<br>这个模型对标以太坊的 <code>gas</code> 费。</p><p><strong>什么意思呢？</strong><br>举个例子，比如玩游戏，游戏人物都有蓝条，这个蓝条使有技术就会耗蓝，这个蓝量会在一定时间内自动恢复。<br>这个能量和带完是一样的道理。</p><p><img src="/posts/e17f4065/%E8%83%BD%E9%87%8F%E6%B6%88%E8%80%97.jpg" alt="能量消耗"></p><p><strong>会在24小时恢复</strong><br><code>tron</code>链当中，每个账户都会拥有一定的免费资源额度，如果用完免费额度，就用账户中的代币抵扣，这个免费额度会在<strong>24小时</strong>内逐步恢复到一个初始值。</p><p><img src="/posts/e17f4065/%E6%81%A2%E5%A4%8D%E8%BF%87%E7%A8%8B.jpg" alt="恢复过程"></p><p><strong>免费的能量有多少？</strong></p><p>免费带宽是个固定值:1500。</p><p><strong>质押能量有多少？</strong></p><p>这个值是个动态值，跟参与这个游戏的人数有关。<br>这里有一个概念，就是全网总能上限，就是全网最大的一个带宽上限。<br>每个人都能从里面分到一点资源，当作一种福利看。</p><p>能分到多少，就要看有多少人来分了。<br>当前全网上限<code>43_200_000_000</code>。怎么分呢，就要看能与的人有多少。</p><p>如果当前只有一个人参与质押，那这个人能获得全部：</p><p><img src="/posts/e17f4065/%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E8%B4%A8%E6%8A%BC%E6%97%B6.jpg" alt="一个用户质押时"></p><p>两个用户质押时，按照质押比例，分平</p><p><img src="/posts/e17f4065/%E4%B8%A4%E4%B8%AA%E7%94%A8%E6%88%B7%E8%B4%A8%E6%8A%BC%E6%97%B6.jpg" alt="两个用户质押时"></p><p>以此类推</p><p><img src="/posts/e17f4065/%E4%B8%89%E4%B8%AA%E7%94%A8%E6%88%B7%E8%B4%A8%E6%8A%BC%E6%97%B6.jpg" alt="三个用户质押时"></p><p>全网有很多用户时，每个用户只能分到一点：</p><p><img src="/posts/e17f4065/%E5%85%A8%E7%BD%91.jpg" alt="全网"></p><h2 id="资源处理器-ResourceProcessor"><a href="#资源处理器-ResourceProcessor" class="headerlink" title="资源处理器 ResourceProcessor"></a>资源处理器 ResourceProcessor</h2><p>资源模型：<code>ResourceProcessor</code> 是资源处理的抽象类，有两个子类：</p><ul><li><code>BandwidthProcessor</code>: 带宽处理器</li><li><code>EnergyProcessor</code>: 能量处理器</li></ul><p>看下继承关系：</p><p><img src="/posts/e17f4065/%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E5%99%A8ResourceProcessor.jpg" alt="资源处理器ResourceProcessor.jpg"></p><hr><h2 id="带宽-Bandwidth"><a href="#带宽-Bandwidth" class="headerlink" title="带宽 Bandwidth"></a>带宽 Bandwidth</h2><p>普通交易仅消耗<strong>Bandwidth points</strong>。一般的TRX转账，消耗的是带宽。<br>这个带宽是<strong>字节</strong>来算的，就是一个一个字节，是不是有点意思，还有这样算钱的。</p><blockquote><p>交易以字节数组的形式在网络中传输及存储，一条交易消耗的 Bandwidth Points = 交易字节数 * Bandwidth Points费率。当前 Bandwidth Points费率 = 1.</p></blockquote><h3 id="带宽来源"><a href="#带宽来源" class="headerlink" title="带宽来源"></a>带宽来源</h3><p>Bandwidth Points的获取分两种，也是由这两部分组成：</p><ul><li><strong>质押所得</strong>：通过质押TRX获取的Bandwidth Points: 动态计算得到</li><li><strong>固定免费额度</strong>：每个账号每天有固定免费额度的带宽: <code>1500</code></li></ul><h4 id="单个账户质押能获得多少？"><a href="#单个账户质押能获得多少？" class="headerlink" title="单个账户质押能获得多少？"></a>单个账户质押能获得多少？</h4><p>质押TRX能获得多少<strong>Bandwidth Points</strong></p><p><code>额度</code> = <code>质押的TRX</code> / <code>整个网络质押的TRX总额</code> * <code>43_200_000_000</code><br>也就是所有用户按质押TRX平分固定额度的Bandwidth Points。</p><p>举个例子，就是举例：</p><p>有一个池子，里面的每天会产生100块钱的奖金，这个奖金是按在场人数来分钱，当：</p><ol><li>只有一个人的时候，这个人能得到100块</li><li>当有两个人的时候，每个人能得到50块</li><li>当有三个人的时候，每个人能得到33.333块</li><li>当有四个人的时候，每个人能得到25块</li></ol><p>依次类推。</p><p>所以全网带宽的上限为：<strong>43_200_000_000</strong><br>个人账户每日拥有免费带宽上限为：<strong>1500</strong><br>这里强调<strong>时间</strong>是因为，这些值是个变量，如果社区有人发起提案要求改变这个值，如果投票通过，值就会发生变化。</p><p><img src="/posts/e17f4065/%E5%85%A8%E7%BD%91%E5%B8%A6%E5%AE%BD%E4%B8%8A%E9%99%90.jpg" alt="全网带宽上限.jpg"></p><p>也可以通过钱包客户端来印证一下，打开钱包看一下：</p><p><img src="/posts/e17f4065/%E9%92%B1%E5%8C%85.jpg" alt="钱包.jpg"></p><p>这个测试账户的钱包里，带宽是<code>1500</code>，但是我没有质押TRX，但是能量是<code>0</code>，这个后面说。</p><h3 id="带宽消耗"><a href="#带宽消耗" class="headerlink" title="带宽消耗"></a>带宽消耗</h3><p>除了查询操作，任何交易都需要消耗 bandwidth points。</p><ol><li>TRX 转账</li><li>TRC10 转账</li><li>创建账户</li></ol><p>有一种特殊情况需要注意，如果是转账，包括普通转账或 TRC10 Token 转账，如果目标账户不存在，转账操作则会创建账户并转账，只会扣除创建账户消耗的Bandwidth Points，转账<strong>不会</strong>再消耗额外的Bandwidth Points.</p><p>还有个问题，如果1500用完了怎么办？<br>那就消耗账户中的TRX，<strong>换算</strong>成带宽。</p><h3 id="带宽消耗计算规则"><a href="#带宽消耗计算规则" class="headerlink" title="带宽消耗计算规则"></a>带宽消耗计算规则</h3><p>逻辑自上而下，资源哪个够就扣哪个，如果不足就扣费：</p><ol><li>消耗交易发起者<strong>质押</strong>获取的Bandwidth Points。</li><li>尝试消耗交易发起者的<strong>免费</strong>Bandwidth Points。</li><li>尝试消耗交易发起者的<strong>TRX</strong>，交易的字节数 * 1000 sun，这里就是说要收钱了。</li></ol><p>1000 sun又是个什么单位？<br>简单理解，就是对应以太坊的 <code>gas</code> 最小单位<code>wei</code><br>Tron网络中，<strong>1 TRX = 1_000_000 Sun</strong>。</p><h3 id="带宽恢复"><a href="#带宽恢复" class="headerlink" title="带宽恢复"></a>带宽恢复</h3><p>这个说比较容易理解，公式看起来费解。<br>在网络总锁定资金以及账户锁定资金不变的情况向，账户的带宽的已使用量随着时间增加而按比例衰减，24h 衰减到 0 。</p><blockquote><p>如时间 T1 时刻，账户带宽已使用量为 U , 到 T1 + 12 h ，账户再次使用带宽 u , 此时账户已使用带宽为 U / 2 + u<br>具体公式如下：</p></blockquote><p>$$<br>U^\prime = ( 1 - \frac{T_2 - T_1}{24h} ) * U + u<br>$$</p><p>公式是对应代码的，后面通过代码来验证这个公式。</p><p>注意，这里提到的是：<strong>再次使用</strong>，这个<strong>再次使用</strong>的时刻，就是计算恢复多少的时间起点，后面代码解释。<br>就是说使用了带宽之后会在24小时后<strong>已使用量</strong>恢复到了0。</p><p>业务处理调用栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">带宽处理入口</span><br><span class="line">Manager.processTransaction(...)</span><br><span class="line">\---consumeBandwidth(trxCap, trace);</span><br><span class="line">    \---BandwidthProcessor processor &#x3D; new BandwidthProcessor(chainBaseManager);</span><br><span class="line">    \---processor.consume(trx, trace);</span><br></pre></td></tr></table></figure><p>主要处理方法：<strong>BandwidthProcessor.consume</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(TransactionCapsule trx, TransactionTrace trace)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ContractValidateException, AccountResourceInsufficientException,</span></span><br><span class="line"><span class="function">    TooBigTransactionResultException </span>&#123;</span><br><span class="line">  List&lt;Contract&gt; contracts = trx.getInstance().getRawData().getContractList();</span><br><span class="line">  <span class="comment">// 获取交易字节长度</span></span><br><span class="line">  <span class="keyword">if</span> (trx.getResultSerializedSize() &gt; Constant.MAX_RESULT_SIZE_IN_TX * contracts.size()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TooBigTransactionResultException();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> bytesSize;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (chainBaseManager.getDynamicPropertiesStore().supportVM()) &#123;</span><br><span class="line">    bytesSize = trx.getInstance().toBuilder().clearRet().build().getSerializedSize();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bytesSize = trx.getSerializedSize();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Contract contract : contracts) &#123;</span><br><span class="line">    <span class="keyword">if</span> (contract.getType() == ShieldedTransferContract) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (chainBaseManager.getDynamicPropertiesStore().supportVM()) &#123;</span><br><span class="line">      bytesSize += Constant.MAX_RESULT_SIZE_IN_TX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.debug(<span class="string">&quot;trxId &#123;&#125;, bandwidth cost: &#123;&#125;&quot;</span>, trx.getTransactionId(), bytesSize);</span><br><span class="line">    trace.setNetBill(bytesSize, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] address = TransactionCapsule.getOwner(contract);</span><br><span class="line">    AccountCapsule accountCapsule = chainBaseManager.getAccountStore().get(address);</span><br><span class="line">    <span class="keyword">if</span> (accountCapsule == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(<span class="string">&quot;account does not exist&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> now = chainBaseManager.getHeadSlot();</span><br><span class="line">    <span class="keyword">if</span> (contractCreateNewAccount(contract)) &#123;</span><br><span class="line">      consumeForCreateNewAccount(accountCapsule, bytesSize, now, trace);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (contract.getType() == TransferAssetContract &amp;&amp; useAssetAccountNet(contract,</span><br><span class="line">        accountCapsule, now, bytesSize)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扣质押获得的带宽</span></span><br><span class="line">    <span class="keyword">if</span> (useAccountNet(accountCapsule, bytesSize, now)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扣免费代宽</span></span><br><span class="line">    <span class="keyword">if</span> (useFreeNet(accountCapsule, bytesSize, now)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扣TRX</span></span><br><span class="line">    <span class="keyword">if</span> (useTransactionFee(accountCapsule, bytesSize, trace)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 都不足，就抛异常</span></span><br><span class="line">    <span class="keyword">long</span> fee = chainBaseManager.getDynamicPropertiesStore().getTransactionFee() * bytesSize;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AccountResourceInsufficientException(</span><br><span class="line">        <span class="string">&quot;Account has insufficient bandwidth[&quot;</span> + bytesSize + <span class="string">&quot;] and balance[&quot;</span></span><br><span class="line">            + fee + <span class="string">&quot;] to create new account&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="能量-Energy"><a href="#能量-Energy" class="headerlink" title="能量 Energy"></a>能量 Energy</h2><p><strong>智能合约</strong>运行时执行每一条指令都需要消耗一定的系统资源，资源的多少用<strong>Energy</strong>的值来衡量。<br>作用：用户处理交易所需要消耗的资源。</p><p>Bandwidth Point表示带宽资源，Energy表示CPU和存储资源。</p><p>普通交易仅消耗：Bandwidth points<br><strong>智能合约的操作不仅要消耗Bandwidth points，还会消耗Energy</strong></p><p><img src="/posts/e17f4065/%E5%90%88%E7%BA%A6%E6%B6%88%E8%80%97%E8%B5%84%E6%BA%90.jpg" alt="合约消耗资源"></p><p>能量的处理也很复杂，可以单独再提练一下，写太多不利于别人理解。</p><h2 id="资源恢复"><a href="#资源恢复" class="headerlink" title="资源恢复"></a>资源恢复</h2><p>主要方法：ResourceProcessor.increase。<br>这个方法的实际就是上面提到的恢复模型，是一个滑动窗口算法。</p><p>在网络总锁定资金以及账户锁定资金不变的情况向，账户的带宽的已使用量随着时间增加而按比例衰减，24h 衰减到 0。<br>如时间 T1 时刻，账户带宽已使用量为 U, 到T1 + 12h，账户再次使用带宽u, 此时账户已使用带宽为 U/2 + u</p><p>$$<br>U^\prime = ( 1 - \frac{T_2 - T_1}{24h} ) * U + u<br>$$</p><p><code>U&#39;</code>: 恢复的量<br><code>T1</code>: 上次操作区块时间<br><code>U</code>: 上一次使用量，<br><code>T2</code>: 当前区块时间<br><code>u</code>: 本次使用量</p><p>理解为每24h，用户已使用的带宽值重置为0。<br>大白话就是，你花了多少质押的带宽，24小时后给你恢复。</p><p><img src="/posts/e17f4065/%E9%AA%8C%E8%AF%81%E5%85%AC%E5%BC%8F.jpg" alt="验证公式"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>官方文档：<a href="https://tronprotocol.github.io/documentation-zh/mechanism-algorithm/resource/">https://tronprotocol.github.io/documentation-zh/mechanism-algorithm/resource/</a><br>资源模型源码: <a href="https://github.com/tronprotocol/java-tron/blob/develop/chainbase/src/main/java/org/tron/core/db/ResourceProcessor.java">https://github.com/tronprotocol/java-tron/blob/develop/chainbase/src/main/java/org/tron/core/db/ResourceProcessor.java</a><br>transcan交易查询: <a href="https://tronscan.org/#/transaction/0c5e9247f8515f2b5e9d9e50930b3958917e059a13a29ff282829ac4027c0311">https://tronscan.org/#/transaction/0c5e9247f8515f2b5e9d9e50930b3958917e059a13a29ff282829ac4027c0311</a></p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 模型 </tag>
            
            <tag> tron </tag>
            
            <tag> 能量 </tag>
            
            <tag> 带宽 </tag>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron 快照机制</title>
      <link href="posts/34fb1c96.html"/>
      <url>posts/34fb1c96.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> snapshot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tron </tag>
            
            <tag> snapshot </tag>
            
            <tag> 快照 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethereum--Account账户模型</title>
      <link href="posts/ff367d3d.html"/>
      <url>posts/ff367d3d.html</url>
      
        <content type="html"><![CDATA[<h2 id="以太坊帐户"><a href="#以太坊帐户" class="headerlink" title="以太坊帐户"></a>以太坊帐户</h2><p>一个以太坊帐户是一个具有以太币 (ETH) 余额的实体，可以在以太坊上发送交易。 帐户可以由用户控制，也可以作为智能合约部署。</p><h2 id="帐户类型"><a href="#帐户类型" class="headerlink" title="帐户类型"></a>帐户类型</h2><p>以太坊有两种帐户类型：</p><ol><li><strong>外部账户 (External Owned Accout, EOA)</strong>: 私钥的所有者控制<ul><li>接收、持有和发送 ETH 和 token</li></ul></li><li><strong>合约账户 (Contract Account, CA)</strong>: 一种由代码控制，部署在网络上的智能合约。<ul><li>与已部署的智能合约进行交互</li></ul></li></ol><p>外部和合约账户使用相同的数据结构，只是使用的字段不同。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StateAccount is the Ethereum consensus representation of accounts.</span></span><br><span class="line"><span class="comment">// These objects are stored in the main account trie.</span></span><br><span class="line"><span class="keyword">type</span> StateAccount <span class="keyword">struct</span> &#123;</span><br><span class="line">Nonce    <span class="keyword">uint64</span></span><br><span class="line">Balance  *big.Int</span><br><span class="line">Root     common.Hash <span class="comment">// merkle root of the storage trie</span></span><br><span class="line">CodeHash []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外部账户-EOA"><a href="#外部账户-EOA" class="headerlink" title="外部账户 EOA"></a>外部账户 EOA</h2><p>特点：</p><ol><li>有私钥</li><li>用于确定每笔交易只能被处理一次的计数器（nonce）。</li><li>发送交易（以太币转账、发布合约、调用智能合约）</li><li>拥有以太币余额（以太币存放的地方，与比特币的UTXO模式不同）的balance。</li><li>没有相关联的代码</li></ol><h3 id="关键字段"><a href="#关键字段" class="headerlink" title="关键字段"></a>关键字段</h3><p>外部账户和智能合约使用的数据给构是一样的，只是外部账户只用两个字段有用：</p><ul><li><code>Nonce</code> – 显示从帐户发送的交易数量的计数器。 这将确保交易只处理一次。 在合约帐户中，这个数字代表该帐户创建的合约数量</li><li><code>Balance</code> – 这个地址拥有的 Wei 数量。 Wei 是以太币的计数单位，每个 ETH 有 1e+18 Wei。</li></ul><p>注意，因此外部账户数据中 <code>StateRootHash</code> 和 <code>CodeHash</code> 默认值是<strong>空</strong>!!!!</p><h2 id="合约账户"><a href="#合约账户" class="headerlink" title="合约账户"></a>合约账户</h2><p>存储<strong>智能合约</strong>的账户，合约代码可供调用，执行合约逻辑。</p><p>特点:</p><ol><li><strong>没有私钥</strong><br>仅有公开的地址，它的行为由合约自身包含的代码逻辑来控制</li><li><strong>拥有余额</strong></li><li><strong>有合约代码</strong></li><li><strong>能够被其它合约调用</strong><br>合约代码能够被交易或者其他合约消息调用，通过地址</li><li><strong>能够调用其他合约</strong><br>合约代码被执行时可再调用其他合约代码。</li><li><strong>能够改变数据存储</strong><br>合约代码被执行时可执行复杂运算，可永久地改变合约内部的数据存储。</li></ol><p>智能合约账户的地址创建并非由外部促成，而是在创建合约时候由代码自动生成的。</p><h3 id="关键字段-1"><a href="#关键字段-1" class="headerlink" title="关键字段"></a>关键字段</h3><ul><li><code>Nonce</code> – 显示从帐户发送的交易数量的计数器。 这将确保交易只处理一次。 在合约帐户中，这个数字代表该帐户创建的合约数量</li><li><code>Balance</code> – 这个地址拥有的 Wei 数量。 Wei 是以太币的计数单位，每个 ETH 有 1e+18 Wei。</li><li><code>CodeHash</code> - 该哈希表示以太坊虚拟机 (EVM) 上的帐户代码。 合约帐户具有编程的代码片段，可以执行不同的操作。 如果帐户收到消息调用，则执行此 EVM 代码。 与其他帐户字段不同，不能更改。 所有代码片段都被保存在状态数据库的相应哈希下，供后续检索。 此哈希值称为 codeHash。 对于外部所有的帐户，codeHash 字段是空字符串的哈希。</li><li><code>Root</code> – 有时被称为存储哈希。 Merkle Patricia trie 根节点的 256 位哈希已编码了帐户的存储内容（256 位整数值映射），并编码为 Trie，作为来自 256 的 Keccak 256 位哈希的映射位整数键，用于 RLP 编码的 256 位整数值。 此 Trie 对此帐户存储内容的哈希进行编码，默认情况下为空。</li></ul><p>每个账户在世界状态树中的呈现</p><p><img src="/posts/ff367d3d/%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B.png" alt="账户模型"></p><p>这还没完，账户每笔交易形成的树</p><p><img src="/posts/ff367d3d/%E8%B4%A6%E6%88%B7%E7%9A%84storageRoot.png" alt="账户的storageRoot.png"></p><p>多个区块的MPT树共享了账户状态，子块状态树和父块状态树的差别在于它指向了在子区块中被改变了的账户。这样节省了总的存储空间，方便了块的回滚操作。</p><p><img src="/posts/ff367d3d/%E8%B4%A6%E6%88%B7%E7%8A%B6%E6%80%81%E6%98%AF%E8%A2%AB%E5%85%B1%E4%BA%AB%E7%9A%84.png" alt="账户状态是被共享的.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>账户模型跟世界状态关联比较紧密，需要了解清楚，对构建世界状态的了解有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> account </category>
          
          <category> ethereum </category>
          
          <category> eth </category>
          
          <category> account </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> ethereum </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> 原理 </tag>
            
            <tag> account </tag>
            
            <tag> 账户模型 </tag>
            
            <tag> 账户 </tag>
            
            <tag> 模型 </tag>
            
            <tag> 外部账户 </tag>
            
            <tag> 合约账户 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synology 自动更新IP同步阿里云脚本</title>
      <link href="posts/bb890f3d.html"/>
      <url>posts/bb890f3d.html</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>需要使用域名指向自己的NAS的场景，达到域名动态的指定自己的IP的目的，但是家庭宽带IP不固定，每次重启路由IP会变，所以写一个脚本来自动查询IP，并更新到阿里云的域名上。</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>NAS 中配置定时任务是可以执行脚本的，本身也是Linux，如查开ssh的话，直接就能上去操作，不过不安全就是，全身如果IP对外暴露，就会有被人恶意连接上的危险。<br>很多文章放脚本需要开ssh之后，通过FTP工具上传脚本，不要这么做，轻易不要开启ssh登陆，除非你已经很熟悉了。</p><h3 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h3><p>建一个目录，创建一个文件<code>aliyun.sh</code>，然后<code>右键--属性</code>查看文件路径：</p><p><img src="/posts/bb890f3d/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.jpg" alt="查看文件路径"></p><p>脚本内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">if [ $1 ]; then</span><br><span class="line">    ApiId=$1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $2 ]; then</span><br><span class="line">    ApiKey=$2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $3 ]; then</span><br><span class="line">    Domain=$3</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$ApiId&quot; -o -z &quot;$ApiKey&quot; -o -z &quot;$Domain&quot; ]; then</span><br><span class="line">    echo &quot;参数缺失&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $4 ]; then</span><br><span class="line">    SubDomain=$4</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SubDomain&quot; ]; then</span><br><span class="line">    SubDomain=&quot;@&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">Nonce=$(date -u &quot;+%N&quot;)        # 有bug?</span><br><span class="line">Timestamp=$(date -u &quot;+%Y-%m-%dT%H%%3A%M%%3A%SZ&quot;)        # SB 阿里云, 什么鬼时间格式</span><br><span class="line">Nonce=$Timestamp</span><br><span class="line"></span><br><span class="line">urlencode() &#123;</span><br><span class="line">    local raw=&quot;$1&quot;;</span><br><span class="line">    local len=&quot;$&#123;#raw&#125;&quot;</span><br><span class="line">    local encoded=&quot;&quot;</span><br><span class="line"></span><br><span class="line">    for i in `seq 1 $len`; do</span><br><span class="line">        local j=$((i+1))</span><br><span class="line">        local c=$(echo $raw | cut -c$i-$i)</span><br><span class="line"></span><br><span class="line">        case $c in [a-zA-Z0-9.~_-]) ;;</span><br><span class="line">            *)</span><br><span class="line">            c=$(printf &#x27;%%%02X&#x27; &quot;&#x27;$c&quot;) ;;</span><br><span class="line">        esac</span><br><span class="line"></span><br><span class="line">        encoded=&quot;$encoded$c&quot;</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    echo $encoded</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$1</span> = query string</span></span><br><span class="line">getSignature() &#123;</span><br><span class="line">    local encodedQuery=$(urlencode $1)</span><br><span class="line">    local message=&quot;GET&amp;%2F&amp;$encodedQuery&quot;</span><br><span class="line">    local sig=$(echo -n &quot;$message&quot; | openssl dgst -sha1 -hmac &quot;$ApiKey&amp;&quot; -binary | openssl base64)</span><br><span class="line">    echo $(urlencode $sig)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sendRequest() &#123;</span><br><span class="line">    local sig=$(getSignature $1)</span><br><span class="line">    local result=$(wget -qO- --no-check-certificate --content-on-error &quot;https://alidns.aliyuncs.com?$1&amp;Signature=$sig&quot;)</span><br><span class="line">    echo $result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getRecordId() &#123;</span><br><span class="line">    echo &quot;获取 $SubDomain.$Domain 的 IP...&quot; &gt;&amp;2</span><br><span class="line">    local queryString=&quot;AccessKeyId=$ApiId&amp;Action=DescribeSubDomainRecords&amp;Format=JSON&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$Nonce&amp;SignatureVersion=1.0&amp;SubDomain=$SubDomain.$Domain&amp;Timestamp=$Timestamp&amp;Type=A&amp;Version=2015-01-09&quot;</span><br><span class="line">    local result=$(sendRequest &quot;$queryString&quot;)</span><br><span class="line">    local code=$(echo $result | sed &#x27;s/.*,&quot;Code&quot;:&quot;\([A-z]*\)&quot;,.*/\1/&#x27;)</span><br><span class="line">    local recordId=$(echo $result | sed &#x27;s/.*,&quot;RecordId&quot;:&quot;\([0-9]*\)&quot;,.*/\1/&#x27;)</span><br><span class="line"></span><br><span class="line">    if [ &quot;$code&quot; = &quot;$result&quot; ] &amp;&amp; [ ! &quot;$recordId&quot; = &quot;$result&quot; ]; then</span><br><span class="line">        local ip=$(echo $result | sed &#x27;s/.*,&quot;Value&quot;:&quot;\([0-9\.]*\)&quot;,.*/\1/&#x27;)</span><br><span class="line"></span><br><span class="line">        if [ &quot;$ip&quot; == &quot;$NewIP&quot; ]; then</span><br><span class="line">            echo &quot;IP 无变化, 退出脚本...&quot; &gt;&amp;2</span><br><span class="line">            echo &quot;quit&quot;</span><br><span class="line">        else</span><br><span class="line">            echo $recordId</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        echo &quot;null&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$1</span> = record ID, <span class="variable">$2</span> = new IP</span></span><br><span class="line">updateRecord() &#123;</span><br><span class="line">    local queryString=&quot;AccessKeyId=$ApiId&amp;Action=UpdateDomainRecord&amp;DomainName=$Domain&amp;Format=JSON&amp;RR=$SubDomain&amp;RecordId=$1&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$Nonce&amp;SignatureVersion=1.0&amp;Timestamp=$Timestamp&amp;Type=A&amp;Value=$2&amp;Version=2015-01-09&quot;</span><br><span class="line">    local result=$(sendRequest $queryString)</span><br><span class="line">    local code=$(echo $result | sed &#x27;s/.*,&quot;Code&quot;:&quot;\([A-z]*\)&quot;,.*/\1/&#x27;)</span><br><span class="line"></span><br><span class="line">    if [ &quot;$code&quot; = &quot;$result&quot; ]; then</span><br><span class="line">        echo &quot;$SubDomain.$Domain 已指向 $NewIP.&quot; &gt;&amp;2</span><br><span class="line">    else</span><br><span class="line">        echo &quot;更新失败.&quot; &gt;&amp;2</span><br><span class="line">        echo $result &gt;&amp;2</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$1</span> = new IP</span></span><br><span class="line">addRecord() &#123;</span><br><span class="line">    local queryString=&quot;AccessKeyId=$ApiId&amp;Action=AddDomainRecord&amp;DomainName=$Domain&amp;Format=JSON&amp;RR=$SubDomain&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$Nonce&amp;SignatureVersion=1.0&amp;Timestamp=$Timestamp&amp;Type=A&amp;Value=$1&amp;Version=2015-01-09&quot;</span><br><span class="line">    local result=$(sendRequest $queryString)</span><br><span class="line">    local code=$(echo $result | sed &#x27;s/.*,&quot;Code&quot;:&quot;\([A-z]*\)&quot;,.*/\1/&#x27;)</span><br><span class="line"></span><br><span class="line">    if [ &quot;$code&quot; = &quot;$result&quot; ]; then</span><br><span class="line">        echo &quot;$SubDomain.$Domain 已指向 $NewIP.&quot; &gt;&amp;2</span><br><span class="line">    else</span><br><span class="line">        echo &quot;添加失败.&quot; &gt;&amp;2</span><br><span class="line">        echo $result &gt;&amp;2</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get new IP address</span></span><br><span class="line">echo &quot;获取当前 IP...&quot;</span><br><span class="line">NewIP=$(wget -qO- --no-check-certificate &quot;http://members.3322.org/dyndns/getip&quot;)</span><br><span class="line">echo &quot;当前 IP 为 $NewIP.&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get record ID of sub domain</span></span><br><span class="line">recordId=$(getRecordId)</span><br><span class="line"></span><br><span class="line">if [ ! &quot;$recordId&quot; = &quot;quit&quot; ]; then</span><br><span class="line">    if [ &quot;$recordId&quot; = &quot;null&quot; ]; then</span><br><span class="line">        echo &quot;域名记录不存在, 添加 $SubDomain.$Domain 至 $NewIP...&quot;</span><br><span class="line">        addRecord $NewIP</span><br><span class="line">    else</span><br><span class="line">        echo &quot;域名记录已存在, 更新 $SubDomain.$Domain 至 $NewIP...&quot;</span><br><span class="line">        updateRecord $recordId $NewIP</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><blockquote><p>bash /volume1/workspaces/shell/nas/aliyun.sh AccessKey_ID AccessKey_Secret test.com www</p></blockquote><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>阿里云后台获取，这个直接进入阿里云控制台就可以操作了，懂的都懂</p><p><strong>AccessKey_ID</strong><br><strong>AccessKey_Secret</strong></p><p>域名<br><strong>test.com</strong>: 这个<code>test.com</code>不是我的域名，但晚写文章都用test<br><strong>www</strong>: 如果有子域名比较<code>nas</code>这样，也可以写成子域名</p><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><p>从控制面板中，添加任务，我这里添加的是定时任务，定时执行，也可以添加开机执行任务。<br>一般情况下只有路由器或光猫重启才会更新IP，NAS重启也会更新，所以还是定时的去更新比较靠谱。</p><p><img src="/posts/bb890f3d/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1.jpg" alt="计划任务"></p><p><img src="/posts/bb890f3d/%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1.jpg" alt="添加任务"></p><p><img src="/posts/bb890f3d/%E6%B7%BB%E5%8A%A0%E6%89%A7%E8%A1%8C.jpg" alt="添加执行.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到上面就配置完了，可以先设成一分钟，看看效果。</p>]]></content>
      
      
      <categories>
          
          <category> synology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> synology </tag>
            
            <tag> 群晖 </tag>
            
            <tag> cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron ECC使用及项目中的应用</title>
      <link href="posts/ea9f814b.html"/>
      <url>posts/ea9f814b.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p><strong>ECC（Elliptic Curves Cryptography，椭圆曲线密码编码学）是一种公开密钥算法</strong>。基于椭圆曲线数学的公开密钥加密算法，其本质是利用离散对数问题实现加密。<br>ECC的主要优势，是在使用更小的密钥的同时，提供更快的性能和更高等级的安全。<br>网上的理论大都讲的非常透彻，我也是看了很多，但是实际能力有限，对数论层面的只停留在浅薄的理解上，不敢乱讲。但是可以简单的说明其原理。</p><p>还有一点，加密算法包括<code>RSA</code>和<code>ECC</code>并不是不可以被破解，只是以当下现代计算机的计算性能算起来比较费劲，理论上破解<code>ECC</code>需要最少250万年，其破解的代价很高，以此来达到不可破解目的。<br>用量子计算？不说现在有量子技术可不可么，假设量子计算可是可行的，那为什么不升级到量子加密？</p><h3 id="ECC-基于椭圆曲线和离散对数"><a href="#ECC-基于椭圆曲线和离散对数" class="headerlink" title="ECC: 基于椭圆曲线和离散对数"></a>ECC: 基于椭圆曲线和离散对数</h3><p>其原理是数论理论中的单向运算函数，这种函数有一个特点：<strong>正方向计算容易，反方向计算却十分困难</strong>。<br>啥意思？就是计算：</p><blockquote><p>1234 * 4567 = ?</p></blockquote><p>计算这个简单，结果是：5635678。<br>那么，返过来计算：</p><blockquote><p>5635678 = x * y</p></blockquote><p>这样就不好计算了，而且结果有很多种有可能是：</p><blockquote><p>5635678 = 1 * 5635678<br>5635678 = 2 * 2817839<br>5635678 = 3 * 1408919.5</p></blockquote><p>都有可能。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>在编程领域最难的是0到1的过程，而复用前人的技术和经验上就比较轻松。<br>在对ECC的使用上，已经将这一算法简化到接口层面，通过调用接口来获提需要的安全性。</p><h3 id="BouncyCastle-加密工具包"><a href="#BouncyCastle-加密工具包" class="headerlink" title="BouncyCastle 加密工具包"></a>BouncyCastle 加密工具包</h3><p>BouncyCastle（轻量级密码术包）是一种用于 Java 平台的开放源码的轻量级密码术包；Bouncycstle 包含了大量的密码算法，其支持椭圆曲线密码算法，并提供JCE 1.2.1的实现。它提供了Java标准库没有的一些算法，例如，RipeMD160哈希算法。</p><p>TRON 中也是使用的这个算法工具包。<br>官网：<a href="https://www.bouncycastle.org/">https://www.bouncycastle.org/</a></p><h3 id="ECKey-类"><a href="#ECKey-类" class="headerlink" title="ECKey 类"></a>ECKey 类</h3><p>ECC 类是对加密工具的一个抽象，从类的<code>Copyright</code>上可以看到，这个类实际上是从<code>ethereumJ</code>拿过来的。好的设计都是相通的。</p><p>ECC在TRON中，创建账号的时候的用法：</p><p>1.获取一个ECKey 对象<br>2.获得私钥<br>3.获得公钥</p><p>通过 TRON 中生成账户这个接口来，非常典型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;API&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateAddressServlet</span> <span class="keyword">extends</span> <span class="title">RateLimiterServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获得一个Sign 接口用来获得私钥</span></span><br><span class="line">      SignInterface sign = SignUtils.getGeneratedRandomSign(Utils.getRandom(),</span><br><span class="line">          Args.getInstance().isECKeyCryptoEngine());</span><br><span class="line">      <span class="comment">// 获得私钥</span></span><br><span class="line">      <span class="keyword">byte</span>[] priKey = sign.getPrivateKey();</span><br><span class="line">      <span class="comment">// base58check 地址，我在之前的文章的专门讲过这个格式</span></span><br><span class="line">      <span class="keyword">byte</span>[] address = sign.getAddress();</span><br><span class="line">      <span class="comment">// 转成 十六进制字符串，这个也就是通常意义是的私钥，不能丢</span></span><br><span class="line">      String priKeyStr = Hex.encodeHexString(priKey);</span><br><span class="line">      <span class="comment">// 推出 base58check 地址</span></span><br><span class="line">      String base58check = StringUtil.encode58Check(address);</span><br><span class="line">      String hexString = ByteArray.toHexString(address);</span><br><span class="line">      JSONObject jsonAddress = <span class="keyword">new</span> JSONObject();</span><br><span class="line">      jsonAddress.put(<span class="string">&quot;address&quot;</span>, base58check);</span><br><span class="line">      jsonAddress.put(<span class="string">&quot;hexAddress&quot;</span>, hexString);</span><br><span class="line">      jsonAddress.put(<span class="string">&quot;privateKey&quot;</span>, priKeyStr);</span><br><span class="line">      <span class="comment">// 回写给前端，可以是页面、postman</span></span><br><span class="line">      response.getWriter().println(jsonAddress.toJSONString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      Util.processError(e, response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    doGet(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调一下试试，反复多调几次可以生成不同的私钥</p><blockquote><p>curl -X GET <a href="http://127.0.0.1:8090/wallet/generateaddress">http://127.0.0.1:8090/wallet/generateaddress</a></p></blockquote><p>结果关键是拿到私钥，然后通过私钥获得公钥、base58check：</p><blockquote><p>address: TNV7s8K96ZgEiFDuecSXvzKKJgkXwtjkWi<br>hexAddress: 418949b347588b1901fdf3b6e6dc80dffcd385c4de<br>privateKey: f7252a484bc631e57910cf65481b12c32b2906fa05742c72f27669b9ddc5d871</p></blockquote><p>使用就是这么简单，可以本地起一个<code>FullNode</code>自行调用接口，产生新的私钥，并没有中心化节点的之间的通信，也可以调用官方节点的接口，都是一样的。可以反复生成私钥，用来测试。</p><p>看下<strong>SignUtils.getGeneratedRandomSign</strong>是怎么处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SignInterface <span class="title">getGeneratedRandomSign</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    SecureRandom secureRandom, <span class="keyword">boolean</span> isECKeyCryptoEngine)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//安全的随机数，在java中Random是伪随机数，并不安全，SecureRandom 是安全的随机数</span></span><br><span class="line">  <span class="comment">// isECKeyCryptoEngine = true</span></span><br><span class="line">  <span class="keyword">if</span> (isECKeyCryptoEngine) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ECKey(secureRandom);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SM2(secureRandom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><p>使用一个完整的例子来看看怎么用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 生成一个 ECKey 对象</span></span><br><span class="line">  ECKey ecKey = <span class="keyword">new</span> ECKey(Utils.getRandom());</span><br><span class="line">  String privateKey = ByteArray.toHexString(ecKey.getPrivKeyBytes());</span><br><span class="line">  String publicKey = Hex.toHexString(ecKey.getPubKey());</span><br><span class="line">  <span class="keyword">byte</span>[] hexAddress = ecKey.getAddress();</span><br><span class="line">  String base58check1 = PublicMethed.getAddressString(privateKey);</span><br><span class="line">  String base58check2 = StringUtil.encode58Check(hexAddress);</span><br><span class="line">  String bash58check3 = Base58.encode58Check(hexAddress);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;private key: &quot;</span> + privateKey);</span><br><span class="line">  System.out.println(<span class="string">&quot;public key&quot;</span> +  publicKey);</span><br><span class="line">  System.out.println(<span class="string">&quot;hex address1: &quot;</span> + ByteArray.toHexString(hexAddress));</span><br><span class="line">  System.out.println(<span class="string">&quot;base58check1: &quot;</span> + base58check1);</span><br><span class="line">  System.out.println(<span class="string">&quot;base58check2: &quot;</span> + base58check2);</span><br><span class="line">  System.out.prntln(<span class="string">&quot;bash58check3: &quot;</span> + bash58check3);</span><br><span class="line">  ByteString bytes = ByteString.copyFrom(Commons.decodeFromBase58Check(base58check1));</span><br><span class="line">  System.out.println(<span class="string">&quot;hex address2: &quot;</span> + ByteArray.toHexString(bytes.toByteArray()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="base58check-地址"><a href="#base58check-地址" class="headerlink" title="base58check 地址"></a>base58check 地址</h3><p>base58check是一种特殊的格式，我在之前的文章中讲过个格式。看看它是怎么实现的。<br>TRON 中有两处需要使用到base58check格式：</p><ol><li>私钥address</li><li>账户address</li></ol><p>基本上账户的address用的多，在转账交易中base58check地址用的是最多的。<br>base58check就是给人看的，实际数据存到数据库中就是byte[]。</p><p>看下 base58check 的工作原理：将输入数据进行两次hash后，截取部分数据进行base58编码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode58Check</span><span class="params">(<span class="keyword">byte</span>[] input)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">byte</span>[] hash0 = Sha256Hash.hash(CommonParameter.getInstance().isECKeyCryptoEngine(), input);</span><br><span class="line">  <span class="keyword">byte</span>[] hash1 = Sha256Hash.hash(CommonParameter.getInstance().isECKeyCryptoEngine(), hash0);</span><br><span class="line">  <span class="keyword">byte</span>[] inputCheck = <span class="keyword">new</span> <span class="keyword">byte</span>[input.length + <span class="number">4</span>];</span><br><span class="line">  System.arraycopy(input, <span class="number">0</span>, inputCheck, <span class="number">0</span>, input.length);</span><br><span class="line">  System.arraycopy(hash1, <span class="number">0</span>, inputCheck, input.length, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">return</span> Base58.encode(inputCheck);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分享了一下ECC的用法，使用场景上不同链的用法也都是大同小异，明白几个概念，在关键处不至于被卡住。<br>学习方法我不断强调先熟练使用，再谈理解。<br>总是会有朋友跟我谈如何学习、理解这个问题，总觉得自己不聪明、理解不了。排除每个各人的理解能力，只谈投入时间，如果没有达到称的上努力的程度，请先不要谈悟性，如果你做不到看一眼一分钟内就理解，那么每天最少一小时的时间成本投入都没有，那先不要谈悟性。<br><strong>时间也是成本，不要吝啬在重要的事情上投入时间</strong></p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
          <category> ecc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> tron </tag>
            
            <tag> 加密 </tag>
            
            <tag> ecc </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synology 联通光猫配置nas内网穿透</title>
      <link href="posts/e037dc52.html"/>
      <url>posts/e037dc52.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用<code>NAS</code>，在外网数据访问上，不同的数据，肯定有不同的考量，有的数据直接使用自带的<code>QuickConnect</code>访问就可以了，有的敏感数据，不希望使用中间节点转发，则会考虑使用内网穿透。</p><p>之前一直使用<code>i234.me</code>进行转发，没有申请公网IP。<br>最近突然发现<code>synology</code>官方的<code>DDNS</code>已经失效，估计是被墙，<code>ping</code>不通了。</p><p>也就是说，只能使用<code>墙内允许的转发</code>，还是挺让人无语的。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h3><p>使用这些国内的转发的话，数据都会走节点转发，安全是个问题。</p><p>登陆后--&gt;管理平台--&gt;花生壳：<br>配置如下，域名选分配的免费域名，内网IP就是<code>NAS</code>所在内网路由器，分配的IP。<br>假设是<code>testtest.zicp.vip</code></p><p><img src="/posts/e037dc52/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%AE%BE%E7%BD%AE.jpg" alt="内网穿透设置"></p><p><img src="/posts/e037dc52/%E5%9F%9F%E5%90%8D%E8%AE%BE%E7%BD%AE.jpg" alt="域名设置"></p><h3 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h3><p><img src="/posts/e037dc52/DDNS%E9%85%8D%E7%BD%AE.jpg" alt="DDNS配置"></p><p>配置好之后，可以使用阿里云自己的域名通过<code>CNAME</code>转发到<code>testtest.zicp.vip</code>上，这样就完成了一个转发。<br>访问的话，直接使用<code>testtest.zicp.vip</code>进行访问即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种方式实现了内网穿透，但是还是需要中心转发节点进行转发，最好的方式还是申请固定IP。<br>还有一个思路，就是自己买一个服务器，自己搭数据转发节点，这个问题就是成本有点高，一台服务器一年上千块钱。<br>如果已经有的话，可以直接使用自己的云服务器，来做转发节点，如果想白嫖的话，免费当然是最好的。</p>]]></content>
      
      
      <categories>
          
          <category> synology </category>
          
          <category> 群晖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> synology </tag>
            
            <tag> 群晖 </tag>
            
            <tag> nas </tag>
            
            <tag> 内网 </tag>
            
            <tag> 私有云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron checkpoint数据还原点</title>
      <link href="posts/f112308.html"/>
      <url>posts/f112308.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TRON 的数据还原点<code>checkpoint</code>指的是数据在某一刻建立的一个快照的备份，给内存快照(snapshot)生成一个临时持久化存储。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>保存数据在内存中的状态到碰盘，用于<strong>服务异常数据异常恢复</strong>。<br>checkpoint 是将某一时刻在内存在还没有写入到磁盘中的数据，<code>临时</code>写入到磁盘当中，当处理成功后删除本次的checkpoint，待下一次刷盘时，重新创建checkpoint，重复这个过程。</p><p>在此之前需要对TRON的内存快照机制有一定的了解。</p><h2 id="刷盘机制"><a href="#刷盘机制" class="headerlink" title="刷盘机制"></a>刷盘机制</h2><p>TRON中的刷盘和很多别的应用的刷盘一样，都是将内存中的数据刷入到磁盘当中。也就是说：TRON对数据的写入是先内存，后磁盘。<br>如果数据在内存当中就会存在一个问题，如果服务进程挂了，那内存中的数据就会丢失。举个例子：<br>比如：</p><blockquote><p>A 给 B 转10块钱，这笔交易需要等待刷盘时机触发，才会写入到内存当中<br>此时，服务挂了，这个数据并没写入到磁盘中，那么这笔交易就丢失了。</p></blockquote><p>为了解决这一问题的，使用 checkpoint 机制。</p><p>先看一下内存中的数据结构图，每一次对<code>区块</code>操作，都会创建一个对应<code>区块</code>的checkpoint。<br><code>SnapshotRoot</code>是对<code>leveldb</code>的抽象，并不是一个内存的<code>snapshot</code>，而<code>SnapshotImpl</code>是对应每一次操作生成的一个内存快照，数据存储在<code>ConcurrentHashMap</code>。</p><p><img src="/posts/f112308/snapshot%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="snapshot结构图"></p><h2 id="checkpoint-机制"><a href="#checkpoint-机制" class="headerlink" title="checkpoint 机制"></a>checkpoint 机制</h2><p>在写入磁盘之前，先写入一个临时存储，这个临时存储就是一个<code>checkpoint</code>。<br>破案了，那么checkpoint，实际上就是一个用来管理临时存储的<code>功能</code>。<br>写入一个临时存储？那不就等于写入到了一个磁盘当中，那为什么要多此一举不如直接写入到磁盘当中费这个劲干什么呢，直接一把把所有内存数据写入对应的存储不就完了。</p><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>主要做三件事，这三件事也是checkpoint的逻辑顺序：</p><ol><li>检查checkpoint</li><li>删除checkpoint</li><li>创建checkpoint</li></ol><p>启动服务时<code>检查checkpoint</code>，在刷盘之前检查上一次是否存checkpoint并<code>删除checkpoint</code>，最后<code>创建checkpoint</code>，用于防止服务异常挂了后造成的数据库异常。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>看一下主要的处理逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (unChecked) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (shouldBeRefreshed()) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">      <span class="comment">// 删除checkpoint</span></span><br><span class="line">      deleteCheckpoint();</span><br><span class="line">      <span class="comment">// 创建checkpoint</span></span><br><span class="line">      createCheckpoint();</span><br><span class="line">      <span class="keyword">long</span> checkPointEnd = System.currentTimeMillis();</span><br><span class="line">      <span class="comment">// 刷盘，将数据提交到leveldb当中</span></span><br><span class="line">      refresh();</span><br><span class="line">      flushCount = <span class="number">0</span>;</span><br><span class="line">      logger.info(<span class="string">&quot;flush cost:&#123;&#125;, create checkpoint cost:&#123;&#125;, refresh cost:&#123;&#125;&quot;</span>,</span><br><span class="line">          System.currentTimeMillis() - start,</span><br><span class="line">          checkPointEnd - start,</span><br><span class="line">          System.currentTimeMillis() - checkPointEnd</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TronDBException e) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot; Find fatal error , program will be exited soon&quot;</span>, e);</span><br><span class="line">      hitDown = <span class="keyword">true</span>;</span><br><span class="line">      LockSupport.unpark(exitThread);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建checkpoint"><a href="#创建checkpoint" class="headerlink" title="创建checkpoint"></a>创建checkpoint</h3><p>创建<code>checkpoint</code>将内存中的数据放到临时存储<code>CheckTmpStore</code>中去。<br>可以看下<code>CheckTmpStore</code>的具体做了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createCheckpoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Map&lt;WrappedByteArray, WrappedByteArray&gt; batch = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 遍历内存数据，这里是所有未持久化的数据，以数据库为维度，如 account、block</span></span><br><span class="line">    <span class="keyword">for</span> (Chainbase db : dbs) &#123;</span><br><span class="line">      Snapshot head = db.getHead();</span><br><span class="line">      <span class="comment">// root是 leveldb 或 rocksdb 数据库本自，结构为：</span></span><br><span class="line">      <span class="comment">// snapshotRoot(leveldb)--&gt;snapshot--&gt;snapshot--&gt;...--&gt;snapshot</span></span><br><span class="line">      <span class="comment">// 如果到了root说明链表已经固化完了</span></span><br><span class="line">      <span class="keyword">if</span> (Snapshot.isRoot(head)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      String dbName = db.getDbName();</span><br><span class="line">      Snapshot next = head.getRoot();</span><br><span class="line">      <span class="comment">// 1 或 500</span></span><br><span class="line">      <span class="comment">// flush [block:1]</span></span><br><span class="line">      <span class="comment">// flush [block:1]--[block2]--[block n]--[block:500]</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; flushCount; ++i) &#123;</span><br><span class="line">        next = next.getNext();</span><br><span class="line">        SnapshotImpl snapshot = (SnapshotImpl) next;</span><br><span class="line">        DB&lt;Key, Value&gt; keyValueDB = snapshot.getDb();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Key, Value&gt; e : keyValueDB) &#123;</span><br><span class="line">          Key k = e.getKey();</span><br><span class="line">          Value v = e.getValue();</span><br><span class="line">          batch.put(WrappedByteArray.of(Bytes.concat(simpleEncode(dbName), k.getBytes())),</span><br><span class="line">              WrappedByteArray.of(v.encode()));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行存储</span></span><br><span class="line">    checkTmpStore.getDbSource().updateByBatch(batch.entrySet().stream()</span><br><span class="line">            .map(e -&gt; Maps.immutableEntry(e.getKey().getBytes(), e.getValue().getBytes()))</span><br><span class="line">            .collect(HashMap::<span class="keyword">new</span>, (m, k) -&gt; m.put(k.getKey(), k.getValue()), HashMap::putAll),</span><br><span class="line">        WriteOptionsWrapper.getInstance().sync(CommonParameter</span><br><span class="line">            .getInstance().getStorage().isDbSync()));</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> ( Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TronDBException(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建checkpoint就是这么点事，那么问题来了<br>创建checkpoint过程中如果程序挂了，数据会不会有问题？<br>数据丢失了怎么办？<br>机器宕机了怎么办？</p><h3 id="创建checkpoint过程中如果程序挂了，数据会不会有问题？"><a href="#创建checkpoint过程中如果程序挂了，数据会不会有问题？" class="headerlink" title="创建checkpoint过程中如果程序挂了，数据会不会有问题？"></a>创建checkpoint过程中如果程序挂了，数据会不会有问题？</h3><p>如查程序挂了，数据没有写入到数据库中，只会丢失内存部分的数据库。原始数据没有受到影响，缺失的部分从其它节点同步后获得。</p><h3 id="数据丢失了怎么办？"><a href="#数据丢失了怎么办？" class="headerlink" title="数据丢失了怎么办？"></a>数据丢失了怎么办？</h3><p><code>checkpoint</code>创建成功后，如果服务挂了，重启后会先检查<code>checkpoint</code>中的数据，如果存在就加载到内存当中。所以这个机制本身就是用来防止<strong>写库时</strong>丢失内存数据的。</p><h3 id="机器宕机了怎么办？"><a href="#机器宕机了怎么办？" class="headerlink" title="机器宕机了怎么办？"></a>机器宕机了怎么办？</h3><p>宕机数据有可能会丢失!!!<br>如果正好<code>createCheckpoint</code>进行调用<code>checkTmpStore</code>写到一半机器宕机了，那数据有可能只有了一半，就会出现脏数据。这样的话，下次服务启动后，数据有可能对不上，服务就会一直处理异常状态。</p><h2 id="checkTmpStore"><a href="#checkTmpStore" class="headerlink" title="checkTmpStore"></a>checkTmpStore</h2><p>作用：存储内存快照（Snapshot）数据。<br>也就是把内存的Snapshot数据，存在这里。</p><h3 id="检查checkpoint"><a href="#检查checkpoint" class="headerlink" title="检查checkpoint"></a>检查checkpoint</h3><p>在<code>java-tron</code>服务启动时，检查<code>checkpoint</code>是否有数据，如果有数据，则将数据加载入内存当中。</p><p>启动流程:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manager.init()</span><br><span class="line">    |---revokingStore.check();</span><br><span class="line">           |---SnapshotManager.check()</span><br></pre></td></tr></table></figure><p>SnapshotManager.check() 中check的就是checkpoint的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ensure run this method first after process start.</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (Chainbase db : dbs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Snapshot.isRoot(db.getHead())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;first check.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// checkTmpStore 是临时存储库，会存储所有数据在内存中的状态</span></span><br><span class="line">  <span class="comment">// 检查 checkTmpStore 里是否有数据</span></span><br><span class="line">  <span class="keyword">if</span> (!checkTmpStore.getDbSource().allKeys().isEmpty()) &#123;</span><br><span class="line">    <span class="comment">// 把所有数据库转成一个Map，这里的数据，是上一次刷盘之前的数据！！！</span></span><br><span class="line">    Map&lt;String, Chainbase&gt; dbMap = dbs.stream()</span><br><span class="line">        .map(db -&gt; Maps.immutableEntry(db.getDbName(), db))</span><br><span class="line">        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));</span><br><span class="line">    <span class="comment">// advance 就是字面意思，在内存中开辟一个新的 snapshot，这个是链表结构</span></span><br><span class="line">    advance();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; e : checkTmpStore.getDbSource()) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] key = e.getKey();</span><br><span class="line">      <span class="keyword">byte</span>[] value = e.getValue();</span><br><span class="line">      <span class="comment">// 遍历DB，db 是数据库名</span></span><br><span class="line">      String db = simpleDecode(key);</span><br><span class="line">      <span class="keyword">if</span> (dbMap.get(db) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">byte</span>[] realKey = Arrays.copyOfRange(key, db.getBytes().length + <span class="number">4</span>, key.length);</span><br><span class="line">      <span class="keyword">byte</span>[] realValue = value.length == <span class="number">1</span> ? <span class="keyword">null</span> : Arrays.copyOfRange(value, <span class="number">1</span>, value.length);</span><br><span class="line">      <span class="keyword">if</span> (realValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果checkTmpStore 里对应的值不为 null，就更新到数据库中</span></span><br><span class="line">        dbMap.get(db).getHead().put(realKey, realValue);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 为空则说明key对应的value值为空，也移除掉这个值</span></span><br><span class="line">        <span class="comment">// 如果key不存在，调用get方法返回就是null</span></span><br><span class="line">        dbMap.get(db).getHead().remove(realKey);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意，这个是 merge 操作，就是合并的意思。意思是把前一块数据合并写到root中</span></span><br><span class="line">    dbs.forEach(db -&gt; db.getHead().getRoot().merge(db.getHead()));</span><br><span class="line">    <span class="comment">// 修改链表指针指向新一个head</span></span><br><span class="line">    retreat();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 标志自己已经check过了</span></span><br><span class="line">  unChecked = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>checkPoint</code>机制可以有效的防止服务挂掉时保存内存中的数据，但是宕机的场景的话确实没有办法，包括像RocketMQ号称高可用也没有办法解决宕机队列数据丢失的问题。<br>如果数据不一致，最好的方法是删除数据库，重新下载备分库使用。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tron </tag>
            
            <tag> java </tag>
            
            <tag> checkpoint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethereum原理--关于keccak256</title>
      <link href="posts/5e501647.html"/>
      <url>posts/5e501647.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于-keccak256"><a href="#关于-keccak256" class="headerlink" title="关于 keccak256"></a>关于 keccak256</h2><p>看以太坊代码，发现很多地方使用的加密函数是：<code>keccak256</code>，了解了一下做个输出。</p><blockquote><p>Keccak算法（读作为“ket-chak”）是Guido Bertoni, Joan Daemen, Michael Peters, and Giles Van Assche的工作。 SHA-3的候选人在2008年10月提交。<br>Keccak采用了创新的的“海绵引擎”散列消息文本。它是快速的，在英特尔酷睿2处理器下的平均速度为12.5周期每字节。它设计简单，方便硬件实现。<br>Keccak已可以抵御最小的复杂度为2n的攻击，其中N为散列的大小。它具有广泛的安全边际。至目前为止，第三方密码分析已经显示出Keccak没有严重的弱点。尽管如此，Keccak的创建者已经启动Crunchy加密比赛，挑起人们发现和报告成功且可核查的攻击Keccak的兴趣。</p></blockquote><p> Keccak-256被设计为于2007年举行的<code>SHA-3</code>密码哈希函数竞赛的候选者。<br>Keccak是获胜的算法，在2015年被标准化为 <code>FIPS</code>（联邦信息处理标准）。<br>不过NIST接受原始的Keccak256设计后，更改了Padding的格式，以太坊坚持使用了原始的方案，因为这一更改存在争议，导致了正式的SHA3实现和原始的Keccak不兼容。<br><code>NIST</code>一般指美国国家标准与技术研究院。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><code>keccak256</code>算法则可以将任意长度的输入压缩成<code>64位</code>，16进制的数，且哈希碰撞的概率近乎为0.</p><h2 id="keccak256-代码结构"><a href="#keccak256-代码结构" class="headerlink" title="keccak256 代码结构"></a>keccak256 代码结构</h2><h3 id="sha3加密接口-crypto-go"><a href="#sha3加密接口-crypto-go" class="headerlink" title="sha3加密接口: crypto.go"></a>sha3加密接口: crypto.go</h3><p>加密接口在：<code>crypto.go</code> 源码文件中。<br><code>KeccakState</code>: 是对 <code>sha3.state</code> 的封装，下面的注释也有说明。还特意提到<code>Read</code>比<code>Sum</code>快。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KeccakState wraps sha3.state. In addition to the usual hash methods, it also supports</span></span><br><span class="line"><span class="comment">// Read to get a variable amount of data from the hash state. Read is faster than Sum</span></span><br><span class="line"><span class="comment">// because it doesn&#x27;t copy the internal state, but also modifies the internal state.</span></span><br><span class="line"><span class="keyword">type</span> KeccakState <span class="keyword">interface</span> &#123;</span><br><span class="line">hash.Hash</span><br><span class="line">Read([]<span class="keyword">byte</span>) (<span class="keyword">int</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keccak256 calculates and returns the Keccak256 hash of the input data.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Keccak256</span><span class="params">(data ...[]<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">32</span>)</span><br><span class="line">d := sha3.NewLegacyKeccak256().(KeccakState)</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> data &#123;</span><br><span class="line">d.Write(b)</span><br><span class="line">&#125;</span><br><span class="line">d.Read(b)</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主要方法-Keccak256Hash"><a href="#主要方法-Keccak256Hash" class="headerlink" title="主要方法 Keccak256Hash"></a>主要方法 Keccak256Hash</h3><p>作用：<code>Keccak256Hash</code>计算并返回输入数据的<code>Keccak256</code>哈希值，将其转换为一个内部哈希数据结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Keccak256Hash calculates and returns the Keccak256 hash of the input data,</span></span><br><span class="line"><span class="comment">// converting it to an internal Hash data structure.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Keccak256Hash</span><span class="params">(data ...[]<span class="keyword">byte</span>)</span> <span class="params">(h common.Hash)</span></span> &#123;</span><br><span class="line">d := sha3.NewLegacyKeccak256().(KeccakState)</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> data &#123;</span><br><span class="line">d.Write(b)</span><br><span class="line">&#125;</span><br><span class="line">d.Read(h[:])</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>拿了一下官方测试举例：<code>crypto_test.go</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// These tests are sanity checks.</span></span><br><span class="line"><span class="comment">// They should ensure that we don&#x27;t e.g. use Sha3-224 instead of Sha3-256</span></span><br><span class="line"><span class="comment">// and that the sha3 library uses keccak-f permutation.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestKeccak256Hash</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">msg := []<span class="keyword">byte</span>(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">exp, _ := hex.DecodeString(<span class="string">&quot;4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45&quot;</span>)</span><br><span class="line">    <span class="comment">// 校验结果正确性</span></span><br><span class="line">checkhash(t, <span class="string">&quot;Sha3-256-array&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(in []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">h := Keccak256Hash(in);</span><br><span class="line"><span class="keyword">return</span> h[:]</span><br><span class="line">&#125;, msg, exp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// debug 看下具体内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkhash</span><span class="params">(t *testing.T, name <span class="keyword">string</span>, f <span class="keyword">func</span>([]<span class="keyword">byte</span>)</span> []<span class="title">byte</span>, <span class="title">msg</span>, <span class="title">exp</span> []<span class="title">byte</span>)</span> &#123;</span><br><span class="line">sum := f(msg)</span><br><span class="line"><span class="keyword">if</span> !bytes.Equal(exp, sum) &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;hash %s mismatch: want: %x have: %x&quot;</span>, name, exp, sum)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="以太坊哪些地方使用到了"><a href="#以太坊哪些地方使用到了" class="headerlink" title="以太坊哪些地方使用到了"></a>以太坊哪些地方使用到了</h2><p>几乎只要用的数据相关的，都需要进行转换。</p><h3 id="将key进行转换"><a href="#将key进行转换" class="headerlink" title="将key进行转换"></a>将key进行转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *odrTrie)</span> <span class="title">TryGet</span><span class="params">(key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">key = crypto.Keccak256(key)</span><br><span class="line"><span class="keyword">var</span> res []<span class="keyword">byte</span></span><br><span class="line">err := t.do(key, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">res, err = t.trie.TryGet(key)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> res, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多调用，所有的也看不完，找到重要的部分阅读。</p><p><img src="/posts/5e501647/%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" alt="调用关系"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>区块链依赖于加密算法，对加密算法的了解是非常有必要的。全看调用是看不完的，至少需要知道怎么用。<br>以太坊使用 keccak256 的目的：<code>keccak256</code>算法则可以将任意长度的输入压缩成<code>64位</code>，16进制的数，且哈希碰撞的概率近乎为0.</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://www.oschina.net/translate/keccak-the-new-sha-3-encryption-standard?cmp">全新的 SHA-3 加密标准 —— Keccak</a></li><li><a href="https://github.com/ethereum/go-ethereum/blob/master/crypto/crypto_test.go">ethereum/crypto_test.go</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> ethereum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> blockchain </tag>
            
            <tag> ethereum原理 </tag>
            
            <tag> keccak256 </tag>
            
            <tag> sha3 </tag>
            
            <tag> 加密哈希函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊 chainlist</title>
      <link href="posts/d82e7b9b.html"/>
      <url>posts/d82e7b9b.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Chainlist 是 EVM 网络的列表。 用户可以使用这些信息将他们的钱包和 Web3 中间件提供商连接到适当的Chain ID 和网络 ID，以连接到正确的链。<br>因为每条ETH的链都有自己的ID，不能重复，相当于是一个ID。</p><h2 id="查询chainID"><a href="#查询chainID" class="headerlink" title="查询chainID"></a>查询chainID</h2><p>chainId不能重，在配置自己的chainID时，先查一下。<br>可以看到ETH自己的chainID是1，BNB是56，polygon 是137，往下拉一堆链。</p><p><a href="https://chainlist.org/">https://chainlist.org/</a><br><img src="/posts/d82e7b9b/chainlist.org.jpg" alt="chainlist.org"></p><p><a href="https://chainlist.wtf/">https://chainlist.wtf/</a><br><img src="/posts/d82e7b9b/chainlist.wtf.jpg" alt="chainlist.wtf"></p><h2 id="官方源码"><a href="#官方源码" class="headerlink" title="官方源码"></a>官方源码</h2><p><a href="https://github.com/ethereum-lists/chains">https://github.com/ethereum-lists/chains</a></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> ethereum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> ethereum </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> blockchain </tag>
            
            <tag> ethereum原理 </tag>
            
            <tag> chainlist </tag>
            
            <tag> 私链 </tag>
            
            <tag> chainid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron 编码 二进制、base58check、Hex</title>
      <link href="posts/53993e75.html"/>
      <url>posts/53993e75.html</url>
      
        <content type="html"><![CDATA[<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>在<code>TRON</code>中使用到的其中二种编码：</p><ol><li>base58check</li><li>hex</li><li>byte</li></ol><p>为什么说这三种编码，主要是这三种比较常用。<br>首先用到最多的就是地方就是基于<code>byte[]</code>衍生的各种编码场景如：</p><ol><li>私钥</li><li>protobuf</li><li>leveldb存储</li></ol><p>都是先基于<code>byte</code>数据来的，其它区块链当中也有大量使用<code>byte</code>。</p><h2 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h2><p>使用场景：</p><ol><li>数据存储</li><li>网络传输</li></ol><p>这个比较在常用，在tron链中，越是底层的数据存储越是需要二进制，如私钥、数据存储等，就是<code>byte[]</code>这种格式。<br>使用<strong>protobuf</strong>序列化也是byte[]，leveldb 的存储也是基于byte[]。<br>可以理解为，最重要和核心的数据形式。但是byte也有一个问题，就是表现形式上，太长了，不利于人类的阅读体验。<br>数据之间需要进行转换才能使用，首先，数据存储到leveldb中，是只能存储二进制数据，也就是在源头上，数据就必须是二进制形式存在的，如果要使用转换数据是必然的行为。<br>当然你说我就要二进制，就不嫌麻烦，整套系统都用二进制操作，也不是不可以，效率是少了一步转换肯定是可以，但是内存上有没有那么大的空间。二是我调试时，看二进制没问题，完全不在话下，就要看二进制，那随意。</p><p><img src="/posts/53993e75/%E5%AD%98%E5%82%A8%E7%9B%B8%E5%85%B3%E6%8E%A5%E5%8F%A3.jpg" alt="存储相关接口"></p><p>看看在内存中的表现形式，这种的表现形式，更长，更难以理解，但是leveldb在存储二进制时，还会使用到一种叫varint的压缩算法，protobuf中也有使用，这种编码后面有机会专门说一下。<br>IDEA将<code>二进制</code>自动转成了<code>十进制</code>的表现形式，这个就不赘述了。</p><p><img src="/posts/53993e75/%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F.jpg" alt="内存中的表现形式"></p><p>所以一句话，这是在tron中最基础的数据形式，为啥这么点事，我要写这么多字，因为有很多社区开发者在这一块有很多问题，总是搞混应用场景，总结来说可以简单的理解两个应用场景：</p><ol><li>数据存储是二进制</li><li>网络传输是二进制</li></ol><h2 id="base58check"><a href="#base58check" class="headerlink" title="base58check"></a>base58check</h2><p>base58check是基于base58的基础上加了一个校验码。<br>在二进制数据的传输过程中，为了防止数据传输的错误，保护数据安全，通常会加一个校验码。通过校验码的配合可以发现数据是否被破坏或者是否在发送时输入错误了。Base58Check就是Base58加上校验码，或者可以说是Base58的一种编码形式，在比特币系统中生成钱包地址的时候就使用到了这种编码形式，TRON中的地址也是使用到了这种编码。</p><p>使用场景：</p><ol><li>钱包地址</li><li>转账</li><li>配置文件</li></ol><p><strong>为什么使用base58编码？</strong><br>因为是给人类看的。</p><p><strong>什么是base58check？</strong><br>就是在 base64的基础上去掉了6个容易混淆的字母、字符，只剩58个了，所以叫：base58。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</span><br></pre></td></tr></table></figure><p><strong>哪几个符号？</strong><br>不含Base64中的0（数字0）、O（大写字母o）、l（小写字母 L）、I（大写字母i），以及“+”和“/”两个字符。<br>简而言之，Base58就是由不包括（0，O，l，I，+，/）的大小写字母和数字组成。</p><p><strong>check是指什么意思？</strong><br>为了增加防止打印和转录错误的安全性，比特币常用的是Base58Check，它是一种内置错误校验代码的Base58编码格式。检验和是额外4个字节，被添加到正在编码的数据末端。校验和是从编码的数据的哈希值中得到的，所以可以用来检测并避免转录和输入中产生的错误。</p><p>使用Base58check编码时，解码软件会计算数据的校验和并和编码中自带的校验和进行对比。二者不匹配则表明有错误产生，这个Base58Check的数据就是无效的。这就防止输错的比特币地址被钱包软件认为是有效的地址，造成资金的丢失。</p><p>到底长啥样?长这样：</p><blockquote><p>TNNqZuYhMfQvooC4kJwTsMJEQVU3vWGa5u</p></blockquote><p><strong>怎么用？</strong></p><p>使用上，需要把base58check字符串，转成二进制byte[]，毕竟人看完了，机器也得看。</p><p><img src="/posts/53993e75/base58check%E4%BD%BF%E7%94%A8.jpg" alt="base58check使用"></p><h2 id="hex-十六进制"><a href="#hex-十六进制" class="headerlink" title="hex 十六进制"></a>hex 十六进制</h2><p>应用场景：</p><ol><li>程序内部表示地址，不是给人看的</li><li>表示hash字符串</li></ol><p>地址有两种表示形式，一是base58check，二是hex形式，第一种是给人看的，第二种程序内部使用。这两种编码形式可以互相转换。本质是代表的是一个数种，多种表现形多。仅仅是使用的对象不同而已。</p><p><strong>长什么样子？</strong><br>最多的场景是使用Hash表示的地方，都可以用十六进制表示，比二进制要表示要简短不止一点点。</p><p><img src="/posts/53993e75/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6hash.jpg" alt="十六进制hash"></p><p>代码中的应用</p><p><img src="/posts/53993e75/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E4%BB%A3%E7%A0%81.jpg" alt="十六进制代码"></p><p>地址有两种编码格式，下面的hexAddress就是十六进制。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;TJfTWgzey3d3QHbrautjRmANNULfk91VFj&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexAddress&quot;</span>: <span class="string">&quot;415f5dc2006f98936ca054ea49b4d38d292c9429c8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bash58Check-测试"><a href="#Bash58Check-测试" class="headerlink" title="Bash58Check 测试"></a>Bash58Check 测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.tron.walletserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.tron.common.crypto.Sha256Sm3Hash;</span><br><span class="line"><span class="keyword">import</span> org.tron.common.utils.Base58;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022/03/02.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base58CheckTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decode58Check(String input) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] decodeCheck = Base58.decode(input);</span><br><span class="line">    <span class="keyword">if</span> (decodeCheck.length &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] decodeData = <span class="keyword">new</span> <span class="keyword">byte</span>[decodeCheck.length - <span class="number">4</span>];</span><br><span class="line">    System.arraycopy(decodeCheck, <span class="number">0</span>, decodeData, <span class="number">0</span>, decodeData.length);</span><br><span class="line">    <span class="keyword">byte</span>[] hash0 = Sha256Sm3Hash.hash(decodeData);</span><br><span class="line">    <span class="keyword">byte</span>[] hash1 = Sha256Sm3Hash.hash(hash0);</span><br><span class="line">    <span class="keyword">if</span> (hash1[<span class="number">0</span>] == decodeCheck[decodeData.length]</span><br><span class="line">            &amp;&amp; hash1[<span class="number">1</span>] == decodeCheck[decodeData.length + <span class="number">1</span>]</span><br><span class="line">            &amp;&amp; hash1[<span class="number">2</span>] == decodeCheck[decodeData.length + <span class="number">2</span>]</span><br><span class="line">            &amp;&amp; hash1[<span class="number">3</span>] == decodeCheck[decodeData.length + <span class="number">3</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> decodeData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String bash58CheckStr = <span class="string">&quot;TJfTWgzey3d3QHbrautjRmANNULfk91VFj&quot;</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = decode58Check(bash58CheckStr);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">    System.out.println(Arrays.toString(bytes));</span><br><span class="line">    System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>---------<br>[65, 95, 93, -62, 0, 111, -104, -109, 108, -96, 84, -22, 73, -76, -45, -115, 41, 44, -108, 41, -56]<br>---------</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>二进制、十六进制、base58check 这几种数据格式和编码都是在区块链在很常用的一套数据结构和编码，其实很多都是互相借鉴，谁也别说抄谁。<br>总的来说，了解了一个套路，再看其他的链就大同小异了。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> tron </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 编码 </tag>
            
            <tag> base58check </tag>
            
            <tag> hex </tag>
            
            <tag> byte </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethereum原理-gas说明</title>
      <link href="posts/7470b6b7.html"/>
      <url>posts/7470b6b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>简单的说就是手续费的一种变体，本质还是转账费用，只能在设计上，功能更复杂，用处更多。<br>即然是手续费，为什么不干脆一次性收取或者设定一个转账比例，不是更简单？<br>这个后面说。</p><h2 id="Gas-说明"><a href="#Gas-说明" class="headerlink" title="Gas 说明"></a>Gas 说明</h2><p>以太坊自称要成为世界计算机，但是这个计算机是烧<code>Gas</code>而不是用电，也不知是汽化天燃气还是液化天燃气。也有可能是以太坊想说，发电要用天燃气，所以Gas代表了消耗。</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">Gas(也称：GasUsed)</td><td align="center">EVM中的每个操作都指定了要消耗的gas量</td></tr><tr><td align="center">Gas Price</td><td align="center">每个操作的单价，就是说这笔交易，不只一处需要使用到Gas</td></tr><tr><td align="center">Gas Limit</td><td align="center">本次交易的Gas限额</td></tr></tbody></table><p>所以一笔交易的手续费就是：</p><blockquote><p>Transaction Fee = Gas * GasPrice</p></blockquote><p>就是这么简单粗暴。</p><p>作用：资源限制手段，以及网络矿工奖励手段。</p><ol><li>作为以太坊价格（具有波动性）和矿工对其工作的奖励之间的抽象层。</li><li>另一种是抵御拒绝服务攻击。</li></ol><p>为了防止网络中的意外或恶意无限循环或其他计算浪费，每个交易的发起者需要设置他们愿意花费在gas上的金额的限制。<br>因此，gas系统阻止攻击者发送垃圾邮件交易，因为他们必须按比例支付他们消耗的计算，带宽和存储资源。</p><h3 id="Gas-限制"><a href="#Gas-限制" class="headerlink" title="Gas 限制"></a>Gas 限制</h3><p>每笔交易的<code>gas</code>是的上限的，也就是<code>gasLimit</code>，而每个区块只包含<code>1250</code>万单位的gas，超过这个上限后，交易无法打包，只能等待下一个区块再打包。</p><h3 id="Gas-操作次数"><a href="#Gas-操作次数" class="headerlink" title="Gas - 操作次数"></a>Gas - 操作次数</h3><p>Gas 的操作每一步操作步数，都是固定的。也就是说每个合约在执行时，能执行多少操作完全就可以被计算出来的。</p><ol><li>添加两个数字需要<code>3</code>个gas</li><li>计算Keccak256哈希值，需要<code>30</code>个gas+ 每256位数据被哈希6个gas</li><li>发送交易成本为<code>21000</code> gas</li></ol><p><code>ADD</code>: 3<br><code>MUL</code>: 5<br><code>SUB</code>: 3</p><p><img src="/posts/7470b6b7/gas%E6%93%8D%E4%BD%9C.jpg" alt="gas操作"></p><h3 id="GasPrice-操作单价"><a href="#GasPrice-操作单价" class="headerlink" title="GasPrice - 操作单价"></a>GasPrice - 操作单价</h3><p><code>gasprice</code>的计量单位为：<code>gwei</code>，一个<code>gwei</code>为是1g个wei，即<code>10^9</code> wei。<br>由于1 wei = <code>10^(-18)</code> ETH，所以: <code>1 gwei</code> = <code>10^9 wei</code> = <code>10^(-9)</code> ETH。</p><h3 id="wei和Gwei-不一样"><a href="#wei和Gwei-不一样" class="headerlink" title="wei和Gwei 不一样"></a>wei和Gwei 不一样</h3><table><thead><tr><th align="center">单位</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">wei</td><td align="center">1wei = 10^(-18) ETH</td></tr><tr><td align="center">Gwet</td><td align="center">1gwei = 10^9 wei，1gwei = 10^(-9) ETH</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="这笔费用去了哪里？"><a href="#这笔费用去了哪里？" class="headerlink" title="这笔费用去了哪里？"></a>这笔费用去了哪里？</h3><p>最终给了矿工。</p><h2 id="gas-预测"><a href="#gas-预测" class="headerlink" title="gas 预测"></a>gas 预测</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.estimateGas(&#123;from:eth.accounts[<span class="number">0</span>], to:eth.account[<span class="number">1</span>], value: <span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="设置打包费用"><a href="#设置打包费用" class="headerlink" title="设置打包费用"></a>设置打包费用</h3><p>如果站在矿工的角度上来说，怎么设置哪些需要打包哪些不需要打包。<br>而<code>Gas</code>的收益最后归矿工所有。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.evm.codes/?fork=merge">evm.codes</a></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> ethereum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> ethereum </tag>
            
            <tag> blockchain </tag>
            
            <tag> 原理 </tag>
            
            <tag> gas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm 参与度算法</title>
      <link href="posts/e73c25f8.html"/>
      <url>posts/e73c25f8.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参与度算法是用在计算多个节点之间的参与情况的算法，也就是说在多个已经确认的节点个数之间的一种算法。</p><p>说人话<br>就是假设有10个节点，这10个节点都正常工作参与度就是100%，如果挂了一个节点，参与度就是：90%。<br>是不是有点感觉了。</p><p>在分布式场景下，参与度是个重要的指标，尤其是各种分布式应用，那用的更是多。<br>比如有一堆reids集群，挂了几个还可以工作，这就是一个参与度的阀值。<br>在<code>DPOS共识</code>的区块链的场景下，这个值就可以起到一个参考指标的作用。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.blockchain.labs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Arrays.fill;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022/4/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockFilledSlot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; database = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BLOCK_FILLED_SLOTS_NUMBER = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    initFill();</span><br><span class="line">    initBlockFilledSlotsIndex();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] blockFilledSlots = <span class="keyword">new</span> <span class="keyword">int</span>[getBlockFilledSlotsNumber()];</span><br><span class="line">    fill(blockFilledSlots, <span class="number">1</span>);</span><br><span class="line">    database.put(<span class="string">&quot;BLOCK_FILLED_SLOTS&quot;</span>, blockFilledSlots);</span><br><span class="line">    System.out.println(<span class="string">&quot;init param&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;SlotCount=&quot;</span> + IntStream.of(blockFilledSlots).sum());</span><br><span class="line">    System.out.println(<span class="string">&quot;Percent=&quot;</span> + calculateFilledSlotsCount() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initBlockFilledSlotsIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    database.put(<span class="string">&quot;BLOCK_FILLED_SLOTS_INDEX&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getBlockFilledSlotsIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) database.get(<span class="string">&quot;BLOCK_FILLED_SLOTS_INDEX&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getBlockFilledSlotsNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BLOCK_FILLED_SLOTS_NUMBER;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getBlockFilledSlots() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>[]) database.get(<span class="string">&quot;BLOCK_FILLED_SLOTS&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每一次 true false 都会让 index 往前移动一步</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applyBlock</span><span class="params">(<span class="keyword">boolean</span> fillBlock)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] blockFilledSlots = getBlockFilledSlots();</span><br><span class="line">    <span class="keyword">int</span> blockFilledSlotsIndex = getBlockFilledSlotsIndex();</span><br><span class="line"><span class="comment">//    System.out.println(&quot;blockFilledSlotsIndex before: &quot; + blockFilledSlotsIndex);</span></span><br><span class="line">    blockFilledSlots[blockFilledSlotsIndex] = fillBlock ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    saveBlockFilledSlots(blockFilledSlots);</span><br><span class="line">    saveBlockFilledSlotsIndex((blockFilledSlotsIndex + <span class="number">1</span>) % getBlockFilledSlotsNumber());</span><br><span class="line"><span class="comment">//    System.out.println(&quot;blockFilledSlotsIndex after: &quot; + getBlockFilledSlotsIndex());</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveBlockFilledSlots</span><span class="params">(<span class="keyword">int</span>[] blockFilledSlots)</span> </span>&#123;</span><br><span class="line"><span class="comment">//    System.out.println(&quot;array: &quot; + Arrays.toString(blockFilledSlots));</span></span><br><span class="line">    database.put(<span class="string">&quot;BLOCK_FILLED_SLOTS&quot;</span>, blockFilledSlots);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveBlockFilledSlotsIndex</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    database.put(<span class="string">&quot;BLOCK_FILLED_SLOTS_INDEX&quot;</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateFilledSlotsCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] blockFilledSlots = getBlockFilledSlots();</span><br><span class="line">    <span class="keyword">int</span> sum = IntStream.of(blockFilledSlots).sum();</span><br><span class="line"><span class="comment">//    System.out.println(&quot;calculateFilledSlotsCount: &quot; + sum);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span> * sum / getBlockFilledSlotsNumber();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> slot = <span class="number">64</span>;</span><br><span class="line">    <span class="comment">// 实际中，slot 的个数是根据 witness 的产块与否来决定的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slot; i++) &#123;</span><br><span class="line">      applyBlock(<span class="keyword">false</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;SlotsCount: &quot;</span> + IntStream.of(getBlockFilledSlots()).sum());</span><br><span class="line">      System.out.println(<span class="string">&quot;Percent: &quot;</span> + calculateFilledSlotsCount() + <span class="string">&quot; %&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line">      applyBlock(<span class="keyword">true</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;SlotsCount: &quot;</span> + IntStream.of(getBlockFilledSlots()).sum());</span><br><span class="line">      System.out.println(<span class="string">&quot;Percent: &quot;</span> + calculateFilledSlotsCount() + <span class="string">&quot; %&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个算法，其实就是对一个百分比波动的简单算法的实现。不管是否简单，在实际应用中，确可以发挥作用，也值得学习。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> blockchain </category>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 算法 </tag>
            
            <tag> algorithm </tag>
            
            <tag> 参与度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron 公开节点和对外接口</title>
      <link href="posts/4f0b4758.html"/>
      <url>posts/4f0b4758.html</url>
      
        <content type="html"><![CDATA[<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>看完基本的官方文档介绍之后，就会想着如何去试试官方文档中给的接口。<br>对外提供的节点: <a href="https://tronprotocol.github.io/documentation-en/developers/official-public-nodes/">https://tronprotocol.github.io/documentation-en/developers/official-public-nodes/</a><br>这些节点都是对外节点，官方提供的</p><p><img src="/posts/4f0b4758/%E5%AE%98%E6%96%B9FullNode%E8%8A%82%E7%82%B9.jpg" alt="官方FullNode节点"></p><h2 id="HTTP-接口"><a href="#HTTP-接口" class="headerlink" title="HTTP 接口"></a>HTTP 接口</h2><p>对外提供，接口列表：<a href="https://tronprotocol.github.io/documentation-en/api/http/">https://tronprotocol.github.io/documentation-en/api/http/</a><br>现在，节点也有了，接口也有了，那就试试看这些接口的情况</p><p><img src="/posts/4f0b4758/HTTP%E6%8E%A5%E5%8F%A3.jpg" alt="HTTP接口"></p><h2 id="调用HTTP接口"><a href="#调用HTTP接口" class="headerlink" title="调用HTTP接口"></a>调用HTTP接口</h2><h3 id="查询最近区块"><a href="#查询最近区块" class="headerlink" title="查询最近区块"></a>查询最近区块</h3><p>这个接口非常常用，其实看官方的文档就可以知道怎么调用。</p><p><img src="/posts/4f0b4758/%E6%9F%A5%E8%AF%A2%E5%8C%BA%E5%9D%97%E6%8E%A5%E5%8F%A3.jpg" alt="查询区块接口"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>接口类拟的用法官方文档已经写的简单又清楚，我就不献丑了，写这个就是让大家知道有这个文档，使用官方公开的节点也可以让自己先熟悉怎么用。<br>我常说的一句话，先熟悉怎么用，快速消除陌生感，之后再了解原理，其实就是那么回事。<br>什么事，一翻译成大白话，原理都是相通的。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> tron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米 红米 路由器的sn计算</title>
      <link href="posts/e574c0a8.html"/>
      <url>posts/e574c0a8.html</url>
      
        <content type="html"><![CDATA[<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>计算小米路由器的<code>sn</code>的网站 <a href="https://www.oxygen7.cn/miwifi">https://www.oxygen7.cn/miwifi</a> 不能访问了，网上找了一圈，找到了这个方法，解决这个问题：<br>记录一下，懂的都懂，相要用小米路由器科学的，这一步免不了。<br>创建一个 <code>sn.py</code> 的python文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version_info &lt; (<span class="number">3</span>,<span class="number">7</span>):</span><br><span class="line">    print(<span class="string">&quot;python version is not supported&quot;</span>, file=sys.stderr)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">salt = &#123;<span class="string">&#x27;r1d&#x27;</span>: <span class="string">&#x27;A2E371B0-B34B-48A5-8C40-A7133F3B5D88&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;others&#x27;</span>: <span class="string">&#x27;d44fb0960aa0-a5e6-4a30-250f-6d2df50a&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_salt</span>(<span class="params">sn</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> sn:</span><br><span class="line">        <span class="keyword">return</span> salt[<span class="string">&quot;r1d&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;-&quot;</span>.join(reversed(salt[<span class="string">&quot;others&quot;</span>].split(<span class="string">&quot;-&quot;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_passwd</span>(<span class="params">sn</span>):</span></span><br><span class="line">    passwd = sn + get_salt(sn)</span><br><span class="line">    m = hashlib.md5(passwd.encode())</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()[:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">f&quot;Usage: <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span> &lt;S/N&gt;&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    serial = sys.argv[<span class="number">1</span>]</span><br><span class="line">    print(calc_passwd(serial))</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sn.py &lt;你的sn&gt;</span><br></pre></td></tr></table></figure><p><img src="/posts/e574c0a8/are-u-ok.jpg" alt="are—u-ok"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> red_mi </tag>
            
            <tag> sn </tag>
            
            <tag> xiaomi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GLIBCXX_3.4.20 not found 问题解决</title>
      <link href="posts/941b333b.html"/>
      <url>posts/941b333b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>最近在编译<strong>leveldb</strong>时，碰到一个问题：<strong>GLIBCXX_3.4.20 not found</strong>，<br>这个提示已经比较明显了，是本地缺少重要的二进制LIB库文件。</p><p>本地的二进制文件一般在<code>/usr/lib64</code>下面，因为我使用的是64位系统。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>查看本地系统的 GLIBCXX_版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GLIBCXX_3.4</span><br><span class="line">GLIBCXX_3.4.1</span><br><span class="line">GLIBCXX_3.4.2</span><br><span class="line">GLIBCXX_3.4.3</span><br><span class="line">GLIBCXX_3.4.4</span><br><span class="line">GLIBCXX_3.4.5</span><br><span class="line">GLIBCXX_3.4.6</span><br><span class="line">GLIBCXX_3.4.7</span><br><span class="line">GLIBCXX_3.4.8</span><br><span class="line">GLIBCXX_3.4.9</span><br><span class="line">GLIBCXX_3.4.10</span><br><span class="line">GLIBCXX_3.4.11</span><br><span class="line">GLIBCXX_3.4.12</span><br><span class="line">GLIBCXX_3.4.13</span><br><span class="line">GLIBCXX_3.4.14</span><br><span class="line">GLIBCXX_3.4.15</span><br><span class="line">GLIBCXX_3.4.16</span><br><span class="line">GLIBCXX_3.4.17</span><br><span class="line">GLIBCXX_3.4.18</span><br><span class="line">GLIBCXX_3.4.19</span><br><span class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br></pre></td></tr></table></figure><p>刚好到 <strong>3.4.19</strong>，就是没有 <strong>3.4.20</strong></p><h2 id="三种解决思路"><a href="#三种解决思路" class="headerlink" title="三种解决思路"></a>三种解决思路</h2><h3 id="1-在本机上找"><a href="#1-在本机上找" class="headerlink" title="1.在本机上找"></a>1.在本机上找</h3><p>如果找到的话，就可以直接使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;libstdc++.so*&quot;</span><br></pre></td></tr></table></figure><p>找到<code>libstdc++.so.6.0.25</code>这个包。</p><p>先备份原来的文件，如果新的组件有问题，就扑街了，再将找到的文件放入<code>/usr/lib64</code>，重新建立软链接。<br>先备份原来的包，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv libstdc++.so.6 ~/libstdc++.so.6.bak</span><br><span class="line">ln -snf libstdc++.so.6.0.25 libstdc++.so.6</span><br></pre></td></tr></table></figure><h3 id="2-手动下载"><a href="#2-手动下载" class="headerlink" title="2.手动下载"></a>2.手动下载</h3><p>系统中没有的话，只能自己下载了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://adbin.top/packages/lib64.tar.gz</span><br></pre></td></tr></table></figure><p>可以自动选择缺失部份：<br><a href="https://pkgs.org/download/libstdc++.so.6">https://pkgs.org/download/libstdc++.so.6</a></p><h3 id="3-yum-安装缺失文件"><a href="#3-yum-安装缺失文件" class="headerlink" title="3.yum 安装缺失文件"></a>3.yum 安装缺失文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# yum provides libstdc</span><br><span class="line">Loaded plugins: fastestmirror, ovl</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: download.cf.centos.org</span><br><span class="line"> * extras: download.cf.centos.org</span><br><span class="line"> * updates: download.cf.centos.org</span><br><span class="line">No matches found</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> leveldb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> GLIBCXX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-tron 区块处理</title>
      <link href="posts/c66b841e.html"/>
      <url>posts/c66b841e.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>区块链当中，所有的交易都包含在区块中，如何验证每一次接收到的区块的合法性就至关重要。<br>区块链是分布式的、对外公开的，所有人都可以参与，有些恶意节点通过修改代码的形式加入到区块链中，把一些对自己有利的交易、区块广播到节点当中，使这些交易对自己有利。<br>所以判断合法交易、区块就尤为重要。这些操作都是交易区块链当中的各个节点进行验证。</p><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块是用来包含tron网中的交易的数据结构，是由27个超级节点(SR)，每隔3秒，<strong>依次轮流</strong>将交易打包后的数据结构。</p><h2 id="处理区块"><a href="#处理区块" class="headerlink" title="处理区块"></a>处理区块</h2><h3 id="处理入口"><a href="#处理入口" class="headerlink" title="处理入口"></a>处理入口</h3><p>区块处理主要有两个入口，也对应两种场景：</p><ol><li>同步处理区块</li><li>追块处理区块</li></ol><p>同步处理区块，是节点之前本节点和网络中的节点区块之前高度没有差异，同步接收最新的区块。<br>追块处理区块，本节点区块高度落后网络中的节点太远，需要追到最新高度后，转换为<strong>同步处理区块</strong>。</p><h3 id="同步处理区块"><a href="#同步处理区块" class="headerlink" title="同步处理区块"></a>同步处理区块</h3><p>入口类：<strong>TronNetHandler</strong><br>TronNetHandler 是一个 Netty 的 Handler，接收其他节点的消息，基本和其它节点交互的入口类都是这个类。<br>整个流程调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TronNetHandler.channelRead0</span><br><span class="line">    |---tronNetService.onMessage(peer, msg);</span><br><span class="line">        |---BlockMsgHandler.processMessage();</span><br><span class="line">                 |---tronNetDelegate.processBlock(block, <span class="keyword">false</span>);</span><br><span class="line">                           |---dbManager.pushBlock(block);</span><br></pre></td></tr></table></figure><h3 id="网络同步入口"><a href="#网络同步入口" class="headerlink" title="网络同步入口"></a>网络同步入口</h3><p>TronNetHandler 是网络入口，是一个Netty的Handler。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TronNetHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TronMessage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> PeerConnection peer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> MessageQueue msgQueue;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TronNetService tronNetService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, TronMessage msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    msgQueue.receivedMessage(msg);</span><br><span class="line">    <span class="comment">// 消息处理逻辑</span></span><br><span class="line">    tronNetService.onMessage(peer, msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TronNetService.onMessage 处理入口，包括几种不同的处理消息类型：</p><ol><li><strong>SYNC_BLOCK_CHAIN 请求同步区块链消息</strong></li><li><strong>BLOCK_CHAIN_INVENTORY 区块链区块清单消息</strong></li><li><strong>INVENTORY 请求获取数据消息</strong></li><li><strong>FETCH_INV_DATA 请求获取数据消息</strong></li><li><strong>BLOCK 区块数据消息</strong></li><li><strong>TRXS 交易易消息</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(PeerConnection peer, TronMessage msg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg.getType()) &#123;</span><br><span class="line">      <span class="keyword">case</span> SYNC_BLOCK_CHAIN:</span><br><span class="line">        <span class="comment">// 同步区块处理</span></span><br><span class="line">        syncBlockChainMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> BLOCK_CHAIN_INVENTORY:</span><br><span class="line">        chainInventoryMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> INVENTORY:</span><br><span class="line">        inventoryMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> FETCH_INV_DATA:</span><br><span class="line">        fetchInvDataMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 区块同步处理，主要的处理方法</span></span><br><span class="line">      <span class="keyword">case</span> BLOCK:</span><br><span class="line">        blockMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> TRXS:</span><br><span class="line">        <span class="comment">// 接收交易处理</span></span><br><span class="line">        transactionsMsgHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PBFT_COMMIT_MSG:</span><br><span class="line">        pbftDataSyncHandler.processMessage(peer, msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> P2pException(TypeEnum.NO_SUCH_MESSAGE, msg.getType().toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    processException(peer, msg, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="同步接收-BlockMsgHandler-processMessage"><a href="#同步接收-BlockMsgHandler-processMessage" class="headerlink" title="同步接收 BlockMsgHandler.processMessage"></a>同步接收 BlockMsgHandler.processMessage</h3><p>处理实时接收到的区块。主要是做几步：</p><ol><li>区块校验</li><li>接收 或 同步区块判断</li><li>处理区块</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(PeerConnection peer, TronMessage msg)</span> <span class="keyword">throws</span> P2pException </span>&#123;</span><br><span class="line"></span><br><span class="line">  BlockMessage blockMessage = (BlockMessage) msg;</span><br><span class="line">  BlockId blockId = blockMessage.getBlockId();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 非快速转发节点，即普能节点需要走一下 check 方法</span></span><br><span class="line">  <span class="keyword">if</span> (!fastForward &amp;&amp; !peer.isFastForwardPeer()) &#123;</span><br><span class="line">    <span class="comment">// 做三个校验，也是很重要的三个校验：</span></span><br><span class="line">    <span class="comment">// 1. 校验消息是息在接收 或 发送缓存中</span></span><br><span class="line">    <span class="comment">// 2. 校验消息是否长过长度</span></span><br><span class="line">    <span class="comment">// 3. 校验消息是时间戳是否大于 BLOCK_PRODUCED_INTERVAL，也就是 3000 ms</span></span><br><span class="line">    <span class="comment">// 建议自行看下</span></span><br><span class="line">    check(peer, blockMessage);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如是在同步请求缓存中，说明这个块是同步的块</span></span><br><span class="line">  <span class="comment">// 如果进这个逻辑，那就是另一种同步了</span></span><br><span class="line">  <span class="comment">// SyncBlockRequested 中的 blockId 哪来的？是在启动过程中预先判断自己的区块高度与邻近节点的差异</span></span><br><span class="line">  <span class="comment">// 是一块比较复杂的逻辑，后面单独讲启动同步这块逻辑，所以如果是正常实时同步是走 else</span></span><br><span class="line">  <span class="keyword">if</span> (peer.getSyncBlockRequested().containsKey(blockId)) &#123;</span><br><span class="line">    peer.getSyncBlockRequested().remove(blockId);</span><br><span class="line">    syncService.processBlock(peer, blockMessage);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Long time = peer.getAdvInvRequest().remove(<span class="keyword">new</span> Item(blockId, InventoryType.BLOCK));</span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != time) &#123;</span><br><span class="line">      MetricsUtil.histogramUpdate(MetricsKey.NET_LATENCY_FETCH_BLOCK + peer.getNode().getHost(),</span><br><span class="line">          now - time);</span><br><span class="line">   &#125;</span><br><span class="line">    fetchBlockService.blockFetchSuccess(blockId);</span><br><span class="line">    <span class="comment">// num 指的是高度也就是编号</span></span><br><span class="line">    <span class="comment">// HeadBlock 是指头块，TRON 里的 HeadBlock 和 SolidityBlock 是两个概念，这两个概念跟区块同步有关</span></span><br><span class="line">    <span class="comment">// HeadBlock 是指最新接收到的块还未固化，大白话就是还没写库，在内存中，这个块可以被回退</span></span><br><span class="line">    <span class="comment">// SolidityBlock 就是字面意思，固化块，大白话就是已经写库了，不会被回滚</span></span><br><span class="line">    <span class="comment">// 为什么会有这种区别，这个有点长遍大论了，主要是因为TRON是快照机制而产生的这两种块的区别</span></span><br><span class="line">    <span class="keyword">long</span> interval = blockId.getNum() - tronNetDelegate.getHeadBlockId().getNum();</span><br><span class="line">    <span class="comment">// 进入下一阶段逻辑，整个流程下来，代码都非常重要，没有一段感觉是可以跳过去的</span></span><br><span class="line">    <span class="comment">// 因为每个步骤环环相扣，但是这种代码风格，实在不像是java的那种啥都抽象一下的方式，</span></span><br><span class="line">    <span class="comment">// 更像是一个精致流水线，每一步都写的很好，很精辟，但是不抽像。</span></span><br><span class="line">    <span class="comment">// 这个项目的代码看多的时候，就会发现这个特点，所以会有一种环环相扣的感觉</span></span><br><span class="line">    processBlock(peer, blockMessage.getBlockCapsule());</span><br><span class="line">    logger.info(</span><br><span class="line">        <span class="string">&quot;Receive block/interval &#123;&#125;/&#123;&#125; from &#123;&#125; fetch/delay &#123;&#125;/&#123;&#125;ms, &quot;</span></span><br><span class="line">            + <span class="string">&quot;txs/process &#123;&#125;/&#123;&#125;ms, witness: &#123;&#125;&quot;</span>,</span><br><span class="line">        blockId.getNum(),</span><br><span class="line">        interval,</span><br><span class="line">        peer.getInetAddress(),</span><br><span class="line">        time == <span class="keyword">null</span> ? <span class="number">0</span> : now - time,</span><br><span class="line">        now - blockMessage.getBlockCapsule().getTimeStamp(),</span><br><span class="line">        ((BlockMessage) msg).getBlockCapsule().getTransactions().size(),</span><br><span class="line">        System.currentTimeMillis() - now,</span><br><span class="line">        Hex.toHexString(blockMessage.getBlockCapsule().getWitnessAddress().toByteArray()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="初步处理-BlockMsgHandler-processBlock"><a href="#初步处理-BlockMsgHandler-processBlock" class="headerlink" title="初步处理 BlockMsgHandler.processBlock"></a>初步处理 BlockMsgHandler.processBlock</h3><p>进行初步处理，做一些对区块的校验。<br>这个方法还会进一步判断是否需要同步，在<code>tronNetDelegate.containBlock(block.getParentBlockId())</code>这个判断内部，会判断区块是否存在，通过<code>khaosDB</code>缓存或数据库中查询这一块是否存在来决定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBlock</span><span class="params">(PeerConnection peer, BlockCapsule block)</span> <span class="keyword">throws</span> P2pException </span>&#123;</span><br><span class="line">  BlockId blockId = block.getBlockId();</span><br><span class="line">  <span class="comment">// 判断Block是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (!tronNetDelegate.containBlock(block.getParentBlockId())) &#123;</span><br><span class="line">    logger.warn(<span class="string">&quot;Get unlink block &#123;&#125; from &#123;&#125;, head is &#123;&#125;.&quot;</span>, blockId.getString(),</span><br><span class="line">        peer.getInetAddress(), tronNetDelegate.getHeadBlockId().getString());</span><br><span class="line">    <span class="comment">// 不存在说明，没有接收到这一块，重新进行同步</span></span><br><span class="line">    syncService.startSync(peer);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> headNum = tronNetDelegate.getHeadBlockId().getNum();</span><br><span class="line">  <span class="comment">// 如果这一块，比之前接收到的高度要低，也没必要继续了，我的块本身就比你的要高</span></span><br><span class="line">  <span class="keyword">if</span> (block.getNum() &lt; headNum) &#123;</span><br><span class="line">    logger.warn(<span class="string">&quot;Receive a low block &#123;&#125;, head &#123;&#125;&quot;</span>, blockId.getString(), headNum);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// validBlock 主要验两个逻辑：</span></span><br><span class="line">  <span class="comment">// 1. 验签，这步和互联网项目的验签类似</span></span><br><span class="line">  <span class="comment">// 2. 判断是否为witness产的块</span></span><br><span class="line">  <span class="keyword">boolean</span> flag = tronNetDelegate.validBlock(block);</span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="comment">// 先广播broadcast，再处理tronNetDelegate.processBlock</span></span><br><span class="line">    broadcast(<span class="keyword">new</span> BlockMessage(block));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 内部会调用 Manager.pushBlock 核心区块处理方法，走了一圈，终于到核心逻辑</span></span><br><span class="line">    tronNetDelegate.processBlock(block, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      broadcast(<span class="keyword">new</span> BlockMessage(block));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    witnessProductBlockService.validWitnessProductTwoBlock(block);</span><br><span class="line"></span><br><span class="line">    tronNetDelegate.getActivePeer().forEach(p -&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (p.getAdvInvReceive().getIfPresent(blockId) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p.setBlockBothHave(blockId);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.warn(<span class="string">&quot;Process adv block &#123;&#125; from peer &#123;&#125; failed. reason: &#123;&#125;&quot;</span>,</span><br><span class="line">            blockId, peer.getInetAddress(), e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理区块-Manager-pushBlock"><a href="#处理区块-Manager-pushBlock" class="headerlink" title="处理区块 Manager.pushBlock"></a>处理区块 Manager.pushBlock</h3><p>核心处理区块逻辑，包括:</p><ol><li>区块验签</li><li>切链</li><li>执行区块交易</li><li>奖励发放</li></ol><p>等一系列操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * save a block.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">pushBlock</span><span class="params">(<span class="keyword">final</span> BlockCapsule block)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ValidateSignatureException, ContractValidateException, ContractExeException,</span></span><br><span class="line"><span class="function">    UnLinkedBlockException, ValidateScheduleException, AccountResourceInsufficientException,</span></span><br><span class="line"><span class="function">    TaposException, TooBigTransactionException, TooBigTransactionResultException,</span></span><br><span class="line"><span class="function">    DupTransactionException, TransactionExpirationException,</span></span><br><span class="line"><span class="function">    BadNumberBlockException, BadBlockException, NonCommonBlockException,</span></span><br><span class="line"><span class="function">    ReceiptCheckErrException, VMIllegalException, ZksnarkException, EventBloomException </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">  List&lt;TransactionCapsule&gt; txs = getVerifyTxs(block);</span><br><span class="line">  logger.info(<span class="string">&quot;Block num: &#123;&#125;, re-push-size: &#123;&#125;, pending-size: &#123;&#125;, &quot;</span></span><br><span class="line">          + <span class="string">&quot;block-tx-size: &#123;&#125;, verify-tx-size: &#123;&#125;&quot;</span>,</span><br><span class="line">      block.getNum(), rePushTransactions.size(), pendingTransactions.size(),</span><br><span class="line">      block.getTransactions().size(), txs.size());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在指定高度停止，调试时用的功能</span></span><br><span class="line">  <span class="keyword">if</span> (CommonParameter.getInstance().getShutdownBlockTime() != <span class="keyword">null</span></span><br><span class="line">      &amp;&amp; CommonParameter.getInstance().getShutdownBlockTime()</span><br><span class="line">      .isSatisfiedBy(<span class="keyword">new</span> Date(block.getTimeStamp()))) &#123;</span><br><span class="line">    latestSolidityNumShutDown = block.getNum();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注意，这里用的是 java7 的try 写法，不仔细看会踩坑，所以PendingManager里自行实现的资源关闭</span></span><br><span class="line">  <span class="keyword">try</span> (PendingManager pm = <span class="keyword">new</span> PendingManager(<span class="keyword">this</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!block.generatedByMyself) &#123;</span><br><span class="line">      <span class="comment">// 验证 默克尔根</span></span><br><span class="line">      <span class="keyword">if</span> (!block.calcMerkleRoot().equals(block.getMerkleRoot())) &#123;</span><br><span class="line">        logger.warn(</span><br><span class="line">            <span class="string">&quot;The merkle root doesn&#x27;t match, Calc result is &quot;</span></span><br><span class="line">                + block.calcMerkleRoot()</span><br><span class="line">                + <span class="string">&quot; , the headers is &quot;</span></span><br><span class="line">                + block.getMerkleRoot());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadBlockException(<span class="string">&quot;The merkle hash is not validated&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 节点状态相关验证</span></span><br><span class="line">      consensus.receiveBlock(block);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只允许 1笔匿名交易存在</span></span><br><span class="line">    <span class="keyword">if</span> (block.getTransactions().stream().filter(tran -&gt; isShieldedTransaction(tran.getInstance()))</span><br><span class="line">        .count() &gt; SHIELDED_TRANS_IN_BLOCK_COUNTS) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadBlockException(</span><br><span class="line">          <span class="string">&quot;shielded transaction count &gt; &quot;</span> + SHIELDED_TRANS_IN_BLOCK_COUNTS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BlockCapsule newBlock;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 把区存存入 KhaosDatabase，这个DB是一个纯内存的存储</span></span><br><span class="line">      newBlock = <span class="keyword">this</span>.khaosDb.push(block);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnLinkedBlockException e) &#123;</span><br><span class="line">      logger.error(</span><br><span class="line">          <span class="string">&quot;latestBlockHeaderHash:&#123;&#125;, latestBlockHeaderNumber:&#123;&#125;, latestSolidifiedBlockNum:&#123;&#125;&quot;</span>,</span><br><span class="line">          getDynamicPropertiesStore().getLatestBlockHeaderHash(),</span><br><span class="line">          getDynamicPropertiesStore().getLatestBlockHeaderNumber(),</span><br><span class="line">          getDynamicPropertiesStore().getLatestSolidifiedBlockNum());</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DB don&#x27;t need lower block</span></span><br><span class="line">    <span class="keyword">if</span> (getDynamicPropertiesStore().getLatestBlockHeaderHash() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newBlock.getNum() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newBlock.getNum() &lt;= getDynamicPropertiesStore().getLatestBlockHeaderNumber()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// switch fork</span></span><br><span class="line">      <span class="comment">// 切链</span></span><br><span class="line">      <span class="comment">// 什么是切链？</span></span><br><span class="line">      <span class="comment">// 大白话就是选择一条正确的链</span></span><br><span class="line">      <span class="comment">// 什么是选择一条正确的链?</span></span><br><span class="line">      <span class="comment">// 大白话就是，27 个节点产块，它有可能出现两个节点同时产一个高度的区块，必须选出谁产的是正确的那个区块。</span></span><br><span class="line">      <span class="comment">// 说人话：</span></span><br><span class="line">      <span class="comment">// 假设当前TRON区块边节点最新高度是：10000，现在轮到 SR节点1 产块，但是，</span></span><br><span class="line">      <span class="comment">// SR节点1可能由于网络原因，SR节点1生产的区块没有被下一个节点SR1收到，那么SR2认为SR1可能出现故障，就会接着 10000 后面生产自己的区块。</span></span><br><span class="line">      <span class="comment">// 那么问题来了，SR节点1 网络恢复后，所有27个SR会同时收到两个 10001（SR1）和 10001（SR2）所产的两个高度相关的区块。</span></span><br><span class="line">      <span class="comment">// 那到底谁才是正确的？</span></span><br><span class="line">      <span class="comment">// 解决方案：谁的链更长，谁就是正确的。也就是10001（SR1）和 10001（SR2）这两个块，后面跟的块谁的长，谁就是正确的。</span></span><br><span class="line">      <span class="comment">// SR1 : 10000--&gt;10001--&gt;10002</span></span><br><span class="line">      <span class="comment">// SR2 : 10000--&gt;10001--&gt;10002--&gt;10003--&gt;10004--&gt;10005 很明显这个是正确的。</span></span><br><span class="line">      <span class="keyword">if</span> (!newBlock</span><br><span class="line">          .getParentHash()</span><br><span class="line">          .equals(getDynamicPropertiesStore().getLatestBlockHeaderHash())) &#123;</span><br><span class="line">        logger.warn(</span><br><span class="line">            <span class="string">&quot;switch fork! new head num = &#123;&#125;, block id = &#123;&#125;&quot;</span>,</span><br><span class="line">            newBlock.getNum(),</span><br><span class="line">            newBlock.getBlockId());</span><br><span class="line"></span><br><span class="line">        logger.warn(</span><br><span class="line">            <span class="string">&quot;******** before switchFork ******* push block: &quot;</span></span><br><span class="line">                + block.toString()</span><br><span class="line">                + <span class="string">&quot;, new block:&quot;</span></span><br><span class="line">                + newBlock.toString()</span><br><span class="line">                + <span class="string">&quot;, dynamic head num: &quot;</span></span><br><span class="line">                + chainBaseManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber()</span><br><span class="line">                + <span class="string">&quot;, dynamic head hash: &quot;</span></span><br><span class="line">                + chainBaseManager.getDynamicPropertiesStore().getLatestBlockHeaderHash()</span><br><span class="line">                + <span class="string">&quot;, dynamic head timestamp: &quot;</span></span><br><span class="line">                + chainBaseManager.getDynamicPropertiesStore().getLatestBlockHeaderTimestamp()</span><br><span class="line">                + <span class="string">&quot;, khaosDb head: &quot;</span></span><br><span class="line">                + khaosDb.getHead()</span><br><span class="line">                + <span class="string">&quot;, khaosDb miniStore size: &quot;</span></span><br><span class="line">                + khaosDb.getMiniStore().size()</span><br><span class="line">                + <span class="string">&quot;, khaosDb unlinkMiniStore size: &quot;</span></span><br><span class="line">                + khaosDb.getMiniUnlinkedStore().size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切链，还是一个比较核心主逻辑，因为在区块链中相同高度区块问题非常常见，包括比特币，比特币基于POW协议，同一时刻产块的相同</span></span><br><span class="line">        <span class="comment">// 块高的区块更是多的多，所以理解这一块，对理解链的原理很有帮助</span></span><br><span class="line">        switchFork(newBlock);</span><br><span class="line">        logger.info(SAVE_BLOCK + newBlock);</span><br><span class="line"></span><br><span class="line">        logger.warn(</span><br><span class="line">            <span class="string">&quot;******** after switchFork ******* push block: &quot;</span></span><br><span class="line">                + block.toString()</span><br><span class="line">                + <span class="string">&quot;, new block:&quot;</span></span><br><span class="line">                + newBlock.toString()</span><br><span class="line">                + <span class="string">&quot;, dynamic head num: &quot;</span></span><br><span class="line">                + chainBaseManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber()</span><br><span class="line">                + <span class="string">&quot;, dynamic head hash: &quot;</span></span><br><span class="line">                + chainBaseManager.getDynamicPropertiesStore().getLatestBlockHeaderHash()</span><br><span class="line">                + <span class="string">&quot;, dynamic head timestamp: &quot;</span></span><br><span class="line">                + chainBaseManager.getDynamicPropertiesStore().getLatestBlockHeaderTimestamp()</span><br><span class="line">                + <span class="string">&quot;, khaosDb head: &quot;</span></span><br><span class="line">                + khaosDb.getHead()</span><br><span class="line">                + <span class="string">&quot;, khaosDb miniStore size: &quot;</span></span><br><span class="line">                + khaosDb.getMiniStore().size()</span><br><span class="line">                + <span class="string">&quot;, khaosDb unlinkMiniStore size: &quot;</span></span><br><span class="line">                + khaosDb.getMiniUnlinkedStore().size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 构建一个可回退的 session</span></span><br><span class="line">      <span class="comment">// 处理区块，如果失败，可以被这一区块处理过的数据回滚到上一个区块的状态</span></span><br><span class="line">      <span class="comment">// 每一个块中的交易处理和泛汲到的数据变更，实际上是存在内存当中的，也就是存在 session 中</span></span><br><span class="line">      <span class="comment">// 直到经过18个块的间隔后，状态才会被写入到磁盘中</span></span><br><span class="line">      <span class="keyword">try</span> (ISession tmpSession = revokingStore.buildSession()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> oldSolidNum =</span><br><span class="line">            chainBaseManager.getDynamicPropertiesStore().getLatestSolidifiedBlockNum();</span><br><span class="line">        <span class="comment">// 处理区块</span></span><br><span class="line">        applyBlock(newBlock, txs);</span><br><span class="line">        tmpSession.commit();</span><br><span class="line">        <span class="comment">// if event subscribe is enabled, post block trigger to queue</span></span><br><span class="line">        postBlockTrigger(newBlock);</span><br><span class="line">        <span class="comment">// if event subscribe is enabled, post solidity trigger to queue</span></span><br><span class="line">        postSolidityTrigger(oldSolidNum,</span><br><span class="line">            getDynamicPropertiesStore().getLatestSolidifiedBlockNum());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        logger.error(throwable.getMessage(), throwable);</span><br><span class="line">        khaosDb.removeBlk(block.getBlockId());</span><br><span class="line">        <span class="keyword">throw</span> throwable;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(SAVE_BLOCK + newBlock);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//clear ownerAddressSet</span></span><br><span class="line">  <span class="keyword">if</span> (CollectionUtils.isNotEmpty(ownerAddressSet)) &#123;</span><br><span class="line">    Set&lt;String&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (TransactionCapsule transactionCapsule : rePushTransactions) &#123;</span><br><span class="line">      filterOwnerAddress(transactionCapsule, result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (TransactionCapsule transactionCapsule : pushTransactionQueue) &#123;</span><br><span class="line">      filterOwnerAddress(transactionCapsule, result);</span><br><span class="line">    &#125;</span><br><span class="line">    ownerAddressSet.clear();</span><br><span class="line">    ownerAddressSet.addAll(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MetricsUtil.meterMark(MetricsKey.BLOCKCHAIN_BLOCK_PROCESS_TIME,</span><br><span class="line">      System.currentTimeMillis() - start);</span><br><span class="line"></span><br><span class="line">  logger.info(<span class="string">&quot;pushBlock block number:&#123;&#125;, cost/txs:&#123;&#125;/&#123;&#125;&quot;</span>,</span><br><span class="line">      block.getNum(),</span><br><span class="line">      System.currentTimeMillis() - start,</span><br><span class="line">      block.getTransactions().size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="处理区块-applyBlock"><a href="#处理区块-applyBlock" class="headerlink" title="处理区块 applyBlock"></a>处理区块 applyBlock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">applyBlock</span><span class="params">(BlockCapsule block, List&lt;TransactionCapsule&gt; txs)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ContractValidateException, ContractExeException, ValidateSignatureException,</span></span><br><span class="line"><span class="function">    AccountResourceInsufficientException, TransactionExpirationException,</span></span><br><span class="line"><span class="function">    TooBigTransactionException, DupTransactionException, TaposException,</span></span><br><span class="line"><span class="function">    ValidateScheduleException, ReceiptCheckErrException, VMIllegalException,</span></span><br><span class="line"><span class="function">    TooBigTransactionResultException, ZksnarkException, BadBlockException, EventBloomException </span>&#123;</span><br><span class="line">  <span class="comment">// 执行区块交易</span></span><br><span class="line">  processBlock(block, txs);</span><br><span class="line">  <span class="comment">// 保存储区块</span></span><br><span class="line">  chainBaseManager.getBlockStore().put(block.getBlockId().getBytes(), block);</span><br><span class="line">  <span class="comment">// 更新最新区块</span></span><br><span class="line">  chainBaseManager.getBlockIndexStore().put(block.getBlockId());</span><br><span class="line">  <span class="keyword">if</span> (block.getTransactions().size() != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 保存交易，根据区块ID，用于接口查询</span></span><br><span class="line">    chainBaseManager.getTransactionRetStore()</span><br><span class="line">        .put(ByteArray.fromLong(block.getNum()), block.getResult());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于链升级、降级逻辑</span></span><br><span class="line">  updateFork(block);</span><br><span class="line">  <span class="comment">// 如果当前时间跟区最新的区块之间差了 60 秒的话，区块就需要500块一刷盘，差这么多块，说明是在追块</span></span><br><span class="line">  <span class="comment">// 因为此时在同步其它节点的区块，一块一刷盘太消耗性能，500块一刷也合理，如果中间失败了，也可以回退到上一个状态</span></span><br><span class="line">  <span class="comment">// SnapshotManager.DEFAULT_MAX_FLUSH_COUNT = 500</span></span><br><span class="line">  <span class="keyword">if</span> (System.currentTimeMillis() - block.getTimeStamp() &gt;= <span class="number">60_000</span>) &#123;</span><br><span class="line">    revokingStore.setMaxFlushCount(SnapshotManager.DEFAULT_MAX_FLUSH_COUNT);</span><br><span class="line">    <span class="keyword">if</span> (Args.getInstance().getShutdownBlockTime() != <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; Args.getInstance().getShutdownBlockTime().getNextValidTimeAfter(</span><br><span class="line">        <span class="keyword">new</span> Date(block.getTimeStamp() - SnapshotManager.DEFAULT_MAX_FLUSH_COUNT * <span class="number">1000</span> * <span class="number">3</span>))</span><br><span class="line">        .compareTo(<span class="keyword">new</span> Date(block.getTimeStamp())) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      revokingStore.setMaxFlushCount(SnapshotManager.DEFAULT_MIN_FLUSH_COUNT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (latestSolidityNumShutDown &gt; <span class="number">0</span> &amp;&amp; latestSolidityNumShutDown - block.getNum()</span><br><span class="line">        &lt;= SnapshotManager.DEFAULT_MAX_FLUSH_COUNT) &#123;</span><br><span class="line">      revokingStore.setMaxFlushCount(SnapshotManager.DEFAULT_MIN_FLUSH_COUNT);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则就是一块一刷盘，也就是正在同步处理</span></span><br><span class="line">    <span class="comment">// SnapshotManager.DEFAULT_MIN_FLUSH_COUNT = 1</span></span><br><span class="line">    revokingStore.setMaxFlushCount(SnapshotManager.DEFAULT_MIN_FLUSH_COUNT);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行区块-processBlock"><a href="#执行区块-processBlock" class="headerlink" title="执行区块 processBlock"></a>执行区块 processBlock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBlock</span><span class="params">(BlockCapsule block, List&lt;TransactionCapsule&gt; txs)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ValidateSignatureException, ContractValidateException, ContractExeException,</span></span><br><span class="line"><span class="function">    AccountResourceInsufficientException, TaposException, TooBigTransactionException,</span></span><br><span class="line"><span class="function">    DupTransactionException, TransactionExpirationException, ValidateScheduleException,</span></span><br><span class="line"><span class="function">    ReceiptCheckErrException, VMIllegalException, TooBigTransactionResultException,</span></span><br><span class="line"><span class="function">    ZksnarkException, BadBlockException, EventBloomException </span>&#123;</span><br><span class="line">  <span class="comment">// todo set revoking db max size.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// checkWitness</span></span><br><span class="line">  <span class="keyword">if</span> (!consensus.validBlock(block)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ValidateScheduleException(<span class="string">&quot;validateWitnessSchedule error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chainBaseManager.getBalanceTraceStore().initCurrentBlockBalanceTrace(block);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//reset BlockEnergyUsage</span></span><br><span class="line">  chainBaseManager.getDynamicPropertiesStore().saveBlockEnergyUsage(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//parallel check sign</span></span><br><span class="line">  <span class="keyword">if</span> (!block.generatedByMyself) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 对交易并行验签</span></span><br><span class="line">      preValidateTransactionSign(txs);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot;parallel check sign interrupted exception! block info: &#123;&#125;&quot;</span>, block, e);</span><br><span class="line">      Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TransactionRetCapsule transactionRetCapsule =</span><br><span class="line">      <span class="keyword">new</span> TransactionRetCapsule(block);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 重置 默克尔树，其实是set自己为最新的树</span></span><br><span class="line">    merkleContainer.resetCurrentMerkleTree();</span><br><span class="line">    accountStateCallBack.preExecute(block);</span><br><span class="line">    <span class="keyword">for</span> (TransactionCapsule transactionCapsule : block.getTransactions()) &#123;</span><br><span class="line">      transactionCapsule.setBlockNum(block.getNum());</span><br><span class="line">      <span class="keyword">if</span> (block.generatedByMyself) &#123;</span><br><span class="line">        transactionCapsule.setVerified(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      accountStateCallBack.preExeTrans();</span><br><span class="line">      <span class="comment">// 执行一次交易</span></span><br><span class="line">      TransactionInfo result = processTransaction(transactionCapsule, block);</span><br><span class="line">      accountStateCallBack.exeTransFinish();</span><br><span class="line">      <span class="keyword">if</span> (Objects.nonNull(result)) &#123;</span><br><span class="line">        transactionRetCapsule.addTransactionInfo(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    accountStateCallBack.executePushFinish();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    accountStateCallBack.exceptionFinish();</span><br><span class="line">  &#125;</span><br><span class="line">  merkleContainer.saveCurrentMerkleTreeAsBestMerkleTree(block.getNum());</span><br><span class="line">  block.setResult(transactionRetCapsule);</span><br><span class="line">  <span class="comment">// 计算能量、带宽，复杂逻辑，可以单独解读一篇文章</span></span><br><span class="line">  <span class="keyword">if</span> (getDynamicPropertiesStore().getAllowAdaptiveEnergy() == <span class="number">1</span>) &#123;</span><br><span class="line">    EnergyProcessor energyProcessor = <span class="keyword">new</span> EnergyProcessor(</span><br><span class="line">        chainBaseManager.getDynamicPropertiesStore(), chainBaseManager.getAccountStore());</span><br><span class="line">    energyProcessor.updateTotalEnergyAverageUsage();</span><br><span class="line">    energyProcessor.updateAdaptiveTotalEnergyLimit();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将厉发放，用于奖励对witness投票的账户</span></span><br><span class="line">  payReward(block);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (chainBaseManager.getDynamicPropertiesStore().getNextMaintenanceTime()</span><br><span class="line">      &lt;= block.getTimeStamp()) &#123;</span><br><span class="line">    proposalController.processProposals();</span><br><span class="line">    chainBaseManager.getForkController().reset();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!consensus.applyBlock(block)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadBlockException(<span class="string">&quot;consensus apply block failed&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新存储</span></span><br><span class="line">  updateTransHashCache(block);</span><br><span class="line">  updateRecentBlock(block);</span><br><span class="line">  updateRecentTransaction(block);</span><br><span class="line">  updateDynamicProperties(block);</span><br><span class="line"></span><br><span class="line">  chainBaseManager.getBalanceTraceStore().resetCurrentBlockTrace();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (CommonParameter.getInstance().isJsonRpcFilterEnabled()) &#123;</span><br><span class="line">    Bloom blockBloom = chainBaseManager.getSectionBloomStore()</span><br><span class="line">        .initBlockSection(transactionRetCapsule);</span><br><span class="line">    chainBaseManager.getSectionBloomStore().write(block.getNum());</span><br><span class="line">    block.setBloom(blockBloom);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里大致的处理流程就是这样，当然有很多细可以细扣。</p><p><strong>为什么要处理区块?</strong><br>为了使这个被<strong>2/3</strong>的SR节点认可。27个SR节点的2/3就是19个节点。</p><p>因为一个区块里包含了这个节点打包的一批交易，包含的笔数由当时打包的能力决定，这里有一个问题就是你无法保证这个节点是否会作恶，偷偷修改数据。<br>因此这些包易当中可能存在不合法的交易，在DPoS共识当中，一个区块必须是由超过 2/3的节点验证合法后，这个区块才会被当成一个合法的区块。也就是需要被2/3的节点认可。<br>之后这个区块性质就是一个<strong>固化块即Solidity块</strong>。<br>2/3的节点收到一个区块后，会对这个区块进行验证。</p><p><strong>怎么验证？</strong><br>验证方式就是把接收到的这个区块，重新执行一遍。如果执行成功，结果不会主动上送，而是更新在存储当中，<br>产块节点会主动调用接口查询这一块的处理状态。</p><p><strong>接收到的区块验证失败怎么处理？</strong><br>失败会抛异常，节点被断开p2p链接，回溯代码可知，如果需要验证，在pushBlock中主动写代码抛异常就可以复现这个场景。</p><p><strong>接收到区块，不处理直接存储行不行？</strong><br>这个很难实现，第一要保证节点中的所有数据状态在接收是交易时就已经100%保证正常，这个应该很难实现，但是像Tendermint就是只在接收时处理一次，区块只验证hash。</p><h2 id="验证区块场景"><a href="#验证区块场景" class="headerlink" title="验证区块场景"></a>验证区块场景</h2><p>有3种处理场景：</p><ol><li>启动同步区块</li><li>产块后处理区块</li><li>运行接收区块</li></ol><h3 id="启动同步区块"><a href="#启动同步区块" class="headerlink" title="启动同步区块"></a>启动同步区块</h3><p>如果是一个新的节点接入到Tron链当中，当前数据库当中的数据是空的，一个区块都没有，需要从网络当中进行同步区块。</p><h3 id="产块后处理区块"><a href="#产块后处理区块" class="headerlink" title="产块后处理区块"></a>产块后处理区块</h3><p>SR节点自己生产的区块，自己也需要处理</p><h3 id="运行接收区块"><a href="#运行接收区块" class="headerlink" title="运行接收区块"></a>运行接收区块</h3><p>节点运行过程中，接收到的区块。</p><h3 id="区块结构"><a href="#区块结构" class="headerlink" title="区块结构"></a>区块结构</h3><p>一个区块由两部分组成：</p><ol><li><strong>区块头</strong></li><li><strong>区块体</strong></li></ol><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// block</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 区块体，只包含交易</span></span><br><span class="line">  <span class="keyword">repeated</span> Transaction transactions = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 区块头</span></span><br><span class="line">  BlockHeader block_header = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">BlockHeader</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">raw</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int64</span> timestamp = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">bytes</span> txTrieRoot = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">bytes</span> parentHash = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//bytes nonce = 5;</span></span><br><span class="line">    <span class="comment">//bytes difficulty = 6;</span></span><br><span class="line">    <span class="built_in">int64</span> number = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">int64</span> witness_id = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">bytes</span> witness_address = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">int32</span> version = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">bytes</span> accountStateRoot = <span class="number">11</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  raw raw_data = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">bytes</span> witness_signature = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">Contract</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 交易类型</span></span><br><span class="line">    <span class="comment">// 不是说只有原生代币TRX、TRC10、TRC20，怎么有这么多交易类型？</span></span><br><span class="line">    <span class="comment">// 因为区块链当中，链治理也需要发起交易，比如：对提案投票、质押代币、节点投票都是交易</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ContractType</span> </span>&#123;</span><br><span class="line">      AccountCreateContract = <span class="number">0</span>;</span><br><span class="line">      TransferContract = <span class="number">1</span>;</span><br><span class="line">      TransferAssetContract = <span class="number">2</span>;</span><br><span class="line">      VoteAssetContract = <span class="number">3</span>;</span><br><span class="line">      VoteWitnessContract = <span class="number">4</span>;</span><br><span class="line">      WitnessCreateContract = <span class="number">5</span>;</span><br><span class="line">      AssetIssueContract = <span class="number">6</span>;</span><br><span class="line">      WitnessUpdateContract = <span class="number">8</span>;</span><br><span class="line">      ParticipateAssetIssueContract = <span class="number">9</span>;</span><br><span class="line">      AccountUpdateContract = <span class="number">10</span>;</span><br><span class="line">      FreezeBalanceContract = <span class="number">11</span>;</span><br><span class="line">      UnfreezeBalanceContract = <span class="number">12</span>;</span><br><span class="line">      WithdrawBalanceContract = <span class="number">13</span>;</span><br><span class="line">      UnfreezeAssetContract = <span class="number">14</span>;</span><br><span class="line">      UpdateAssetContract = <span class="number">15</span>;</span><br><span class="line">      ProposalCreateContract = <span class="number">16</span>;</span><br><span class="line">      ProposalApproveContract = <span class="number">17</span>;</span><br><span class="line">      ProposalDeleteContract = <span class="number">18</span>;</span><br><span class="line">      SetAccountIdContract = <span class="number">19</span>;</span><br><span class="line">      CustomContract = <span class="number">20</span>;</span><br><span class="line">      CreateSmartContract = <span class="number">30</span>;</span><br><span class="line">      TriggerSmartContract = <span class="number">31</span>;</span><br><span class="line">      GetContract = <span class="number">32</span>;</span><br><span class="line">      UpdateSettingContract = <span class="number">33</span>;</span><br><span class="line">      ExchangeCreateContract = <span class="number">41</span>;</span><br><span class="line">      ExchangeInjectContract = <span class="number">42</span>;</span><br><span class="line">      ExchangeWithdrawContract = <span class="number">43</span>;</span><br><span class="line">      ExchangeTransactionContract = <span class="number">44</span>;</span><br><span class="line">      UpdateEnergyLimitContract = <span class="number">45</span>;</span><br><span class="line">      AccountPermissionUpdateContract = <span class="number">46</span>;</span><br><span class="line">      ClearABIContract = <span class="number">48</span>;</span><br><span class="line">      UpdateBrokerageContract = <span class="number">49</span>;</span><br><span class="line">      ShieldedTransferContract = <span class="number">51</span>;</span><br><span class="line">      MarketSellAssetContract = <span class="number">52</span>;</span><br><span class="line">      MarketCancelOrderContract = <span class="number">53</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ContractType type = <span class="number">1</span>;</span><br><span class="line">    google.protobuf.Any parameter = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">bytes</span> provider = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">bytes</span> ContractName = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">int32</span> Permission_id = <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">code</span> </span>&#123;</span><br><span class="line">      SUCESS = <span class="number">0</span>;</span><br><span class="line">      FAILED = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">contractResult</span> </span>&#123;</span><br><span class="line">      DEFAULT = <span class="number">0</span>;</span><br><span class="line">      SUCCESS = <span class="number">1</span>;</span><br><span class="line">      REVERT = <span class="number">2</span>;</span><br><span class="line">      BAD_JUMP_DESTINATION = <span class="number">3</span>;</span><br><span class="line">      OUT_OF_MEMORY = <span class="number">4</span>;</span><br><span class="line">      PRECOMPILED_CONTRACT = <span class="number">5</span>;</span><br><span class="line">      STACK_TOO_SMALL = <span class="number">6</span>;</span><br><span class="line">      STACK_TOO_LARGE = <span class="number">7</span>;</span><br><span class="line">      ILLEGAL_OPERATION = <span class="number">8</span>;</span><br><span class="line">      STACK_OVERFLOW = <span class="number">9</span>;</span><br><span class="line">      OUT_OF_ENERGY = <span class="number">10</span>;</span><br><span class="line">      OUT_OF_TIME = <span class="number">11</span>;</span><br><span class="line">      JVM_STACK_OVER_FLOW = <span class="number">12</span>;</span><br><span class="line">      UNKNOWN = <span class="number">13</span>;</span><br><span class="line">      TRANSFER_FAILED = <span class="number">14</span>;</span><br><span class="line">      INVALID_CODE = <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int64</span> fee = <span class="number">1</span>;</span><br><span class="line">    code ret = <span class="number">2</span>;</span><br><span class="line">    contractResult contractRet = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> assetIssueID = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">int64</span> withdraw_amount = <span class="number">15</span>;</span><br><span class="line">    <span class="built_in">int64</span> unfreeze_amount = <span class="number">16</span>;</span><br><span class="line">    <span class="built_in">int64</span> exchange_received_amount = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">int64</span> exchange_inject_another_amount = <span class="number">19</span>;</span><br><span class="line">    <span class="built_in">int64</span> exchange_withdraw_another_amount = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">int64</span> exchange_id = <span class="number">21</span>;</span><br><span class="line">    <span class="built_in">int64</span> shielded_transaction_fee = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">bytes</span> orderId = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">repeated</span> MarketOrderDetail orderDetails = <span class="number">26</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">raw</span> </span>&#123;</span><br><span class="line">    <span class="built_in">bytes</span> ref_block_bytes = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int64</span> ref_block_num = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">bytes</span> ref_block_hash = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">int64</span> expiration = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">repeated</span> authority auths = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">// data not used</span></span><br><span class="line">    <span class="built_in">bytes</span> data = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//only support size = 1,  repeated list here for extension</span></span><br><span class="line">    <span class="keyword">repeated</span> Contract contract = <span class="number">11</span>;</span><br><span class="line">    <span class="comment">// scripts not used</span></span><br><span class="line">    <span class="built_in">bytes</span> scripts = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">int64</span> timestamp = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">int64</span> fee_limit = <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  raw raw_data = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// only support size = 1,  repeated list here for muti-sig extension</span></span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">bytes</span> signature = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Result ret = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运程运行时，长啥样？<br>就是下面这样，区块头体积很小，只包含：区块高度、上一个区块hash、交易笔数等关键信息。像这样<br>这个是通过运行时，debug观察区块的结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BlockCapsule </span><br><span class="line">[ hash=<span class="number">000000000229610</span>fd7a9a496f5b5a720cdd8fa188b2c9c44504a918fffca07ef</span><br><span class="line">number=<span class="number">36266255</span></span><br><span class="line">parentId=<span class="number">000000000229610e871</span>e5ad5ea7779b7f09db5cea82fc330606e497b6bea49b0</span><br><span class="line">witness address=<span class="number">415863</span>f6091b8e71766da808b1dd3159790f61de7d</span><br><span class="line">generated by myself=<span class="literal">false</span></span><br><span class="line">generate time=<span class="number">2021</span><span class="number">-12</span><span class="number">-13</span> <span class="number">01</span>:<span class="number">44</span>:<span class="number">12.0</span></span><br><span class="line">account root=<span class="number">0000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">merkle root=dfcaf2b5168ea9601d9c7aabb88a3c144c4784ca580c0d660ebb268b363b2e8f</span><br><span class="line">txs size=<span class="number">80</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>区块体包含交易:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">transactions &#123;</span><br><span class="line">  raw_data &#123;</span><br><span class="line">    ref_block_bytes: &quot;`\373&quot;</span><br><span class="line">    ref_block_hash: &quot;\033\376ab\257\213z\&#x27;&quot;</span><br><span class="line">    expiration: 1639331106000</span><br><span class="line">    data: &quothttps://tronhelp.io \345\256\242\346\234\215\357\274\232tronassistant/tronaide&quot;</span><br><span class="line">    contract &#123;</span><br><span class="line">      type: TransferContract</span><br><span class="line">      parameter &#123;</span><br><span class="line">        type_url: &quot;type.googleapis.com/protocol.TransferContract&quot;</span><br><span class="line">        value: &quot;\n\025A\030\036m\024\&#x27;\222\226R\&#x27;(4Bk\314U\314\266\360\037\300\022\025A\265pN\363C\343\222#1@g1\035\371\023\034\275\340kC\030\001&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    timestamp: 1639331047596</span><br><span class="line">  &#125;</span><br><span class="line">  signature: &quot;\177\272\316M\370-\373\033&#125;\020\273\255\006\372u5g \372\311\255\341uN\0209,\377\332!\211\025:\244\303&#125;o\271\017-\364s`\031\262r\n\002E\272\225\253^G\325`\260@Gpl\017\366\\\000&quot;</span><br><span class="line">  ret &#123;</span><br><span class="line">    contractRet: SUCCESS</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">transactions &#123;</span><br><span class="line">  raw_data &#123;</span><br><span class="line">    ref_block_bytes: &quot;a\r&quot;</span><br><span class="line">    ref_block_hash: &quot;\257\r\311x\024I\321\356&quot;</span><br><span class="line">    expiration: 1639331106000</span><br><span class="line">    contract &#123;</span><br><span class="line">      type: TransferContract</span><br><span class="line">      parameter &#123;</span><br><span class="line">        type_url: &quot;type.googleapis.com/protocol.TransferContract&quot;</span><br><span class="line">        value: &quot;\n\025A\311\304\327\027\307\tp\350\346(\302\256\354\256WUD0\216\304\022\025A(\213\354?*\222\036\333?\272\232\3730\360Z*\327\234\247\020\030\330\214\213\001&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    timestamp: 1639331049389</span><br><span class="line">  &#125;</span><br><span class="line">  signature: &quot;\212\305\333&lt;\001l\256\2257\310t+\275*G\002b\316M\331?\361\343\232ud\221\370\203 [`\361\325\351Sf\323*5\377\315\340+\317\227\353\375\334\305\204\322k.\255\320\021U\316\242E0\304\006\001&quot;</span><br><span class="line">  ret &#123;</span><br><span class="line">    contractRet: SUCCESS</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">transactions &#123;</span><br><span class="line">  raw_data &#123;</span><br><span class="line">    ref_block_bytes: &quot;a\r&quot;</span><br><span class="line">    ref_block_hash: &quot;\257\r\311x\024I\321\356&quot;</span><br><span class="line">    expiration: 1639331106000</span><br><span class="line">    contract &#123;</span><br><span class="line">      type: TriggerSmartContract</span><br><span class="line">      parameter &#123;</span><br><span class="line">        type_url: &quot;type.googleapis.com/protocol.TriggerSmartContract&quot;</span><br><span class="line">        value: &quot;\n\025A\311\304\327\027\307\tp\350\346(\302\256\354\256WUD0\216\304\022\025A\246\024\370\003\266\375x\t\206\244,x\354\234\177w\346\336\321&lt;\&quot;D\251\005\234\273\000\000\000\000\000\000\000\000\000\000\000\000\300G\334z\264\200\216\017?\177Z\272\240\267\300|\221\271\370\337\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\225\313\330&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    timestamp: 1639331048431</span><br><span class="line">    fee_limit: 100000000</span><br><span class="line">  &#125;</span><br><span class="line">  signature: &quot;\311=j\354\342\253M\303\353\034\216\353\227\215\261\2607\330\036\216\270\242 \274\252\266\212\003\205Q,\261l9\f\207\r&amp;\357\267\307\265\204~\310\253-1\201\305\353\016+\370R\343Xs%z\307\242&#125;G\001&quot;</span><br><span class="line">  ret &#123;</span><br><span class="line">    contractRet: SUCCESS</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">transactions &#123;</span><br><span class="line">  raw_data &#123;</span><br><span class="line">    ref_block_bytes: &quot;a\r&quot;</span><br><span class="line">    ref_block_hash: &quot;\257\r\311x\024I\321\356&quot;</span><br><span class="line">    expiration: 1639331106000</span><br><span class="line">    contract &#123;</span><br><span class="line">      type: TriggerSmartContract</span><br><span class="line">      parameter &#123;</span><br><span class="line">        type_url: &quot;type.googleapis.com/protocol.TriggerSmartContract&quot;</span><br><span class="line">        value: &quot;\n\025A\311\304\327\027\307\tp\350\346(\302\256\354\256WUD0\216\304\022\025A\246\024\370\003\266\375x\t\206\244,x\354\234\177w\346\336\321&lt;\&quot;D\251\005\234\273\000\000\000\000\000\000\000\000\000\000\000\000\314\331f\256\254r\206\307\253\251K\227z\346e\316\344\365O\272\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\372\360\200&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    timestamp: 1639331048583</span><br><span class="line">    fee_limit: 100000000</span><br><span class="line">  &#125;</span><br><span class="line">  signature: &quot;\200\356;\241\023~\222\033\320P\203\323\332f&lt;\221V\v.\251\027BD\274Q\226LL\252\202\372\020\006\263\3616],X\262I`\332\232\373\364*\331\221\324\024\264tE\372L:\030\336\364/H\243\r\000&quot;</span><br><span class="line">  ret &#123;</span><br><span class="line">    contractRet: SUCCESS</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 太长了，省略部分</span></span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  witness_signature: &quot;\225\245\240\342\313y\270\311\204`\243\372\241]~9i\2637\327\272\3274\210\004\327\252\033,\376\251\315v\232$l\263\375\346\232A\375\031\337.!y\201|\360[\022\177\313]\222\2645Y\301\270Y&#125;\034\000&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区块头 和 区块体，在存储时，也是<strong>分开存储</strong>，使用leveldb时，也表现在存储在两个不同的物理数据文件中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>区块处理的流程大致是这样，泛区块网络传输、验证、处理、存储等，是一个比较核心的流程，区块链中最基本的两个流程：1.产块 和 2.区块上链(处理成功的区块)。在Tron中每3秒产一个块，空块(不包含交易，只有区块头的块)也是可以上链的。</p><p>理解这个流程，对链的开发和特点有一些帮助。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> tron </tag>
            
            <tag> java-tron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron 交易处理--交易执行逻辑</title>
      <link href="posts/66788eb9.html"/>
      <url>posts/66788eb9.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分布式区块链环境下，所有的钱包要发起交易，都可以通过网络中的<code>FullNode</code>节点发起交易。<br>TRON 网络中，交易是从客户端发起，再通过 FullNode 进行广播，并将交易广播到网络的<code>SR</code>节点，并由<code>SR</code>节点进行打包。</p><h3 id="主要角色"><a href="#主要角色" class="headerlink" title="主要角色"></a>主要角色</h3><p>TRON网络中，站在发起交易的角度去看，需要了解的三个角色：</p><ol><li>钱包客户端，代表用户</li><li>FullNode全节点，用来转广播交易</li><li>SR超级节点，用来使交易上链</li></ol><p><img src="/posts/66788eb9/tron%E7%BD%91%E7%BB%9C%E4%B8%BB%E8%A6%81%E4%B8%BB%E8%89%B2.jpg" alt="tron网络主要主色"></p><p>使用TRON网络，主要就是各种钱包客户端。<br>构建交易，需要通过钱包应用发起，可以是手机钱包或者浏览器钱包插件，都可以发起一笔交易，也可以使用HTTP接口或者RPC接口都可以发起交易。</p><p>比如用用浏览器插件发起：</p><p><img src="/posts/66788eb9/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E9%92%B1%E5%8C%85.jpg" alt="浏览器插件钱包"></p><p>当然如果需要深入了解，可以使用官方的<code>wallet-cli</code>工具，通过代码的方式，了解其实现原理。<br>官方钱包项目: <a href="https://github.com/tronprotocol/wallet-cli">https://github.com/tronprotocol/wallet-cli</a></p><h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>图形界面操作，就不需要多说了，这里来了解一下使用<code>wallet-cli</code>工具发起的转账流程，<code>wallet-cli</code>就是一个客户端，图形界面当中使用客户端也是相同原理。</p><p>TRON 中有三种代币，是三种不同类型的交易逻辑：</p><ol><li>原生代币：TRX</li><li>TRC10代币：可自行发行的代币，不能执行智能合约</li><li>TRC20代币：可自行发行，可执行智能合约的合约代币</li></ol><p>这三种代币可以理解成就是三套机构，内部业务完全不同。一个比一个复杂。</p><h3 id="构建原生代币：TRX交易"><a href="#构建原生代币：TRX交易" class="headerlink" title="构建原生代币：TRX交易"></a>构建原生代币：TRX交易</h3><p>构建一笔<code>TRX</code>交易，需要和FullNode交互两次：</p><ol><li><strong>构建交易</strong></li><li><strong>广播交易</strong></li></ol><p>大至的处理流程</p><p>钱包发起交易--&gt;FullNode 接收交易广播交易--&gt;SR节点接收交易放入队列中</p><p>这个图描述了交易的构建、广播的一个大致流程，可以阅读代码来描述更多细节。</p><p><img src="/posts/66788eb9/%E4%BA%A4%E6%98%93%E5%8F%91%E8%B5%B7%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="交易发起流程图"></p><p>sendCoin 构建TRX交易，代码入口，整个流程比较长，这里看关键部份，有兴趣的小伙伴推荐拉下整个项目看一下。</p><h4 id="构建交易"><a href="#构建交易" class="headerlink" title="构建交易"></a>构建交易</h4><p><img src="/posts/66788eb9/sendCoin%E4%BB%A3%E7%A0%81%E5%85%A5%E5%8F%A3.jpg" alt="sendCoin代码入口"></p><p>在这个方法中，有两次和<code>FullNode</code>的交互，分别是：</p><ol><li>rpcCli.createTransaction2: 调用gRPC访问FullNode构建交易基础信息</li><li>processTransactionExtention: 广播交易到FullNode</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendCoin</span><span class="params">(<span class="keyword">byte</span>[] owner, <span class="keyword">byte</span>[] to, <span class="keyword">long</span> amount)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> CipherException, IOException, CancelException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (owner == <span class="keyword">null</span>) &#123;</span><br><span class="line">    owner = getAddress();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在本地构建交易对象</span></span><br><span class="line">  TransferContract contract = createTransferContract(to, owner, amount);</span><br><span class="line">  <span class="comment">// recVersion=2，上面实始化时，从配置文件中初化为2</span></span><br><span class="line">  <span class="keyword">if</span> (rpcVersion == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.调用FullNode 的createTransaction 构建交易</span></span><br><span class="line">    TransactionExtention transactionExtention = rpcCli.createTransaction2(contract);</span><br><span class="line">    <span class="comment">// 2.处理交易，并广播交易，最终结果由网络中27个SR中的某个SR节点打包上链</span></span><br><span class="line">    <span class="keyword">return</span> processTransactionExtention(transactionExtention);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Transaction transaction = rpcCli.createTransaction(contract);</span><br><span class="line">    <span class="keyword">return</span> processTransaction(transaction);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构建本地交易对象"><a href="#构建本地交易对象" class="headerlink" title="构建本地交易对象"></a>构建本地交易对象</h4><p>本地的构建很简单就几个关键要素<br>owner: 自己的地址<br>to: 目标地址<br>amount: 要转入的金额</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TransferContract <span class="title">createTransferContract</span><span class="params">(<span class="keyword">byte</span>[] to, <span class="keyword">byte</span>[] owner, <span class="keyword">long</span> amount)</span> </span>&#123;</span><br><span class="line">  TransferContract.Builder builder = TransferContract.newBuilder();</span><br><span class="line">  ByteString bsTo = ByteString.copyFrom(to);</span><br><span class="line">  ByteString bsOwner = ByteString.copyFrom(owner);</span><br><span class="line">  builder.setToAddress(bsTo);</span><br><span class="line">  builder.setOwnerAddress(bsOwner);</span><br><span class="line">  builder.setAmount(amount);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FullNode交易构建入口"><a href="#FullNode交易构建入口" class="headerlink" title="FullNode交易构建入口"></a>FullNode交易构建入口</h4><p>再看下<strong>rpcCli.createTransaction2</strong> 对应的<strong>FullNode</strong>端的处理，如果感觉比较乱，参照一下上面时序图的步骤。<br>FullNode的<strong>gRPC</strong>入口：<strong>WalletGrpc</strong></p><p>调用栈：</p><ol><li><strong>WalletGrpc.invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver)</Resp></strong><br><img src="/posts/66788eb9/gRPC%E5%88%9B%E5%BB%BA%E4%BA%A4%E6%98%93%E5%85%A5%E5%8F%A3.jpg" alt="gRPC创建交易入口"></li><li><strong>RpcApiService.createTransaction2(TransferContract request, StreamObserver<TransactionExtention> responseObserver)</TransactionExtention></strong></li><li><strong>RpcApiService.createTransactionExtention(Message request, ContractType contractType, StreamObserver<TransactionExtention> responseObserver)</TransactionExtention></strong></li><li><strong>RpcApiService.createTransactionCapsule(com.google.protobuf.Message message, ContractType contractType)</strong></li><li><strong>Wallet.createTransactionCapsule(message, contractType);</strong></li><li><strong>Wallet.setTransaction(trx);</strong></li></ol><p>核心方法在：<br>Wallet.createTransactionCapsule() 和 setTransaction(trx);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TransactionCapsule <span class="title">createTransactionCapsule</span><span class="params">(com.google.protobuf.Message message,</span></span></span><br><span class="line"><span class="function"><span class="params">    ContractType contractType)</span> <span class="keyword">throws</span> ContractValidateException </span>&#123;</span><br><span class="line">  TransactionCapsule trx = <span class="keyword">new</span> TransactionCapsule(message, contractType);</span><br><span class="line">  <span class="keyword">if</span> (contractType != ContractType.CreateSmartContract</span><br><span class="line">      &amp;&amp; contractType != ContractType.TriggerSmartContract) &#123;</span><br><span class="line">    List&lt;Actuator&gt; actList = ActuatorFactory.createActuator(trx, chainBaseManager);</span><br><span class="line">    <span class="keyword">for</span> (Actuator act : actList) &#123;</span><br><span class="line">      act.validate();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (contractType == ContractType.CreateSmartContract) &#123;</span><br><span class="line"></span><br><span class="line">    CreateSmartContract contract = ContractCapsule</span><br><span class="line">        .getSmartContractFromTransaction(trx.getInstance());</span><br><span class="line">    <span class="keyword">long</span> percent = contract.getNewContract().getConsumeUserResourcePercent();</span><br><span class="line">    <span class="keyword">if</span> (percent &lt; <span class="number">0</span> || percent &gt; <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(<span class="string">&quot;percent must be &gt;= 0 and &lt;= 100&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  setTransaction(trx);</span><br><span class="line">  <span class="keyword">return</span> trx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>setTransaction设置交易引用区块和过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTransaction</span><span class="params">(TransactionCapsule trx)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    BlockId blockId = chainBaseManager.getHeadBlockId();</span><br><span class="line">    <span class="comment">// 判断是以 solidity 还上 head 为交易的引用区块</span></span><br><span class="line">    <span class="comment">// 这里面有区别，如果是以head为区块引用交易有可能用丢失</span></span><br><span class="line">    <span class="comment">// 以 solidity 也就是固化块，交易分叉也不会丢失，因为头块有可能会被回滚</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;solid&quot;</span>.equals(Args.getInstance().getTrxReferenceBlock())) &#123;</span><br><span class="line">      blockId = chainBaseManager.getSolidBlockId();</span><br><span class="line">    &#125;</span><br><span class="line">    trx.setReference(blockId.getNum(), blockId.getBytes());</span><br><span class="line">    <span class="comment">// 超时时间等于: 当前时间最区块高度时间戳 + 60秒</span></span><br><span class="line">    <span class="comment">// Args.getInstance().getTrxExpirationTimeInMilliseconds(); 是60秒</span></span><br><span class="line">    <span class="comment">// public static final long TRANSACTION_DEFAULT_EXPIRATION_TIME = 60 * 1_000L; //60 seconds</span></span><br><span class="line">    <span class="keyword">long</span> expiration = chainBaseManager.getHeadBlockTimeStamp() + Args.getInstance()</span><br><span class="line">        .getTrxExpirationTimeInMilliseconds();</span><br><span class="line">    trx.setExpiration(expiration);</span><br><span class="line">    trx.setTimestamp();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;Create transaction capsule failed.&quot;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里交易的构建就完成了，但是并不会在FullNode端记录任何数据，因为这是去中心化的服务，成功的交易才会被打包到区块当中。不成功的交易会被接直丢弃，执行不成功并不会对账户造成损失。<br>这笔交易有可能因为网络原因、余额不足等原理，最后执行不一定会成功。</p><h3 id="广播交易"><a href="#广播交易" class="headerlink" title="广播交易"></a>广播交易</h3><p>回到<strong>sendCoin方法</strong>中，交易构建完成后，第二步就是广播。</p><p>主要方法：<strong>processTransactionExtention(transactionExtention);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">processTransactionExtention</span><span class="params">(TransactionExtention transactionExtention)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, CipherException, CancelException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (transactionExtention == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Return ret = transactionExtention.getResult();</span><br><span class="line">  <span class="keyword">if</span> (!ret.getResult()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Code = &quot;</span> + ret.getCode());</span><br><span class="line">    System.out.println(<span class="string">&quot;Message = &quot;</span> + ret.getMessage().toStringUtf8());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Transaction transaction = transactionExtention.getTransaction();</span><br><span class="line">  <span class="keyword">if</span> (transaction == <span class="keyword">null</span> || transaction.getRawData().getContractCount() == <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Transaction is empty&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(</span><br><span class="line">      <span class="string">&quot;Receive txid = &quot;</span> + ByteArray.toHexString(transactionExtention.getTxid().toByteArray()));</span><br><span class="line">  <span class="comment">// 对交易签名</span></span><br><span class="line">  transaction = signTransaction(transaction);</span><br><span class="line">  <span class="keyword">return</span> rpcCli.broadcastTransaction(transaction);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="交易签名"><a href="#交易签名" class="headerlink" title="交易签名"></a>交易签名</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Transaction <span class="title">signTransaction</span><span class="params">(Transaction transaction)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> CipherException, IOException, CancelException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (transaction.getRawData().getTimestamp() == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// long currentTime = System.currentTimeMillis();</span></span><br><span class="line">    transaction = TransactionUtils.setTimestamp(transaction);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;Your transaction details are as follows, please confirm.&quot;</span>);</span><br><span class="line">  System.out.println(Utils.printTransaction(transaction));</span><br><span class="line"></span><br><span class="line">  Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">  System.out.println(<span class="string">&quot;Please confirm that you want to continue enter y or Y, else any other.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    String input = in.nextLine().trim();</span><br><span class="line">    String str = input.split(<span class="string">&quot;\\s+&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;y&quot;</span>.equalsIgnoreCase(str)) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> CancelException(<span class="string">&quot;User cancelled&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;Please input your password.&quot;</span>);</span><br><span class="line">  <span class="comment">// 转成char数组</span></span><br><span class="line">  <span class="keyword">char</span>[] password = Utils.inputPassword(<span class="keyword">false</span>);</span><br><span class="line">  <span class="comment">// 转成 byte[]</span></span><br><span class="line">  <span class="keyword">byte</span>[] passwd = org.tron.keystore.StringUtils.char2Byte(password);</span><br><span class="line">  <span class="comment">// 清除掉密码</span></span><br><span class="line">  org.tron.keystore.StringUtils.clear(password);</span><br><span class="line">  System.out.println(</span><br><span class="line">      <span class="string">&quot;txid = &quot;</span> + ByteArray.toHexString(Sha256Hash.hash(transaction.getRawData().toByteArray())));</span><br><span class="line">  <span class="comment">// ECDSA加密：将 transaction 配合 publicKey，对交易生成签名</span></span><br><span class="line">  transaction = TransactionUtils.sign(transaction, <span class="keyword">this</span>.getEcKey(passwd));</span><br><span class="line">  org.tron.keystore.StringUtils.clear(passwd);</span><br><span class="line">  <span class="keyword">return</span> transaction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sign方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transaction <span class="title">sign</span><span class="params">(Transaction transaction, ECKey myKey)</span> </span>&#123;</span><br><span class="line">  Transaction.Builder transactionBuilderSigned = transaction.toBuilder();</span><br><span class="line">  <span class="keyword">byte</span>[] hash = Sha256Hash.hash(transaction.getRawData().toByteArray());</span><br><span class="line">  List&lt;Contract&gt; listContract = transaction.getRawData().getContractList();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listContract.size(); i++) &#123;</span><br><span class="line">    ECDSASignature signature = myKey.sign(hash);</span><br><span class="line">    ByteString bsSign = ByteString.copyFrom(signature.toByteArray());</span><br><span class="line">    transactionBuilderSigned.addSignature(</span><br><span class="line">        bsSign);<span class="comment">//Each contract may be signed with a different private key in the future.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  transaction = transactionBuilderSigned.build();</span><br><span class="line">  <span class="keyword">return</span> transaction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>this.getEcKey</strong> 获取取地秘钥信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ECKey <span class="title">getEcKey</span><span class="params">(<span class="keyword">byte</span>[] password)</span> <span class="keyword">throws</span> CipherException, IOException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (walletFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.walletFile = loadWalletFile();</span><br><span class="line">    <span class="keyword">this</span>.address = decodeFromBase58Check(<span class="keyword">this</span>.walletFile.getAddress());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 私钥加密部份，很复杂完全看晕了</span></span><br><span class="line">  <span class="keyword">return</span> Wallet.decrypt(password, walletFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="广播交易到FullNode"><a href="#广播交易到FullNode" class="headerlink" title="广播交易到FullNode"></a>广播交易到FullNode</h4><p>通过<strong>rpcCli.broadcastTransaction(transaction);<strong>这个方法广播到</strong>FullNode</strong>节点上，FullNode对广播过来的交易的主要入口：<br>交易由钱包发起后，会最先广播到<strong>FullNode</strong>节点，由FullNode节点将交易转发到<strong>SR</strong>节点上。</p><h2 id="方法处口"><a href="#方法处口" class="headerlink" title="方法处口"></a>方法处口</h2><p>主要入口方法是：<strong>Wallet#broadcastTransaction</strong>，这个方法被很多方法调用，但是主要的两个调用方法：<strong>RPC</strong>和<strong>HTTP</strong>是以下两个方法。</p><p><img src="/posts/66788eb9/broadcast%E6%96%B9%E6%B3%95.jpg" alt="broadcast方法"></p><h3 id="RPC调用"><a href="#RPC调用" class="headerlink" title="RPC调用"></a>RPC调用</h3><p>走的 GRPC 调用，<strong>RpcApiService.broadcastTransaction</strong></p><h3 id="HTTP调用"><a href="#HTTP调用" class="headerlink" title="HTTP调用"></a>HTTP调用</h3><p><strong>java-tron</strong>的HTTP接口都是以 Servlet 结属，HTTP服务器使用的是 <strong>Jetty</strong>。<br>交易广播的入口在 <strong>BroadcastHexServlet.doPost</strong>，调用 wallet.broadcastTransaction(transaction);</p><h4 id="HTTP方法处口"><a href="#HTTP方法处口" class="headerlink" title="HTTP方法处口"></a>HTTP方法处口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    String input = request.getReader().lines()</span><br><span class="line">        .collect(Collectors.joining(System.lineSeparator()));</span><br><span class="line">    String trx = JSONObject.parseObject(input).getString(<span class="string">&quot;transaction&quot;</span>);</span><br><span class="line">    Transaction transaction = Transaction.parseFrom(ByteArray.fromHexString(trx));</span><br><span class="line">    TransactionCapsule transactionCapsule = <span class="keyword">new</span> TransactionCapsule(transaction);</span><br><span class="line">    String transactionID = ByteArray</span><br><span class="line">        .toHexString(transactionCapsule.getTransactionId().getBytes());</span><br><span class="line">    GrpcAPI.Return result = wallet.broadcastTransaction(transaction);</span><br><span class="line">    JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    json.put(<span class="string">&quot;result&quot;</span>, result.getResult());</span><br><span class="line">    json.put(<span class="string">&quot;code&quot;</span>, result.getCode().toString());</span><br><span class="line">    json.put(<span class="string">&quot;message&quot;</span>, result.getMessage().toStringUtf8());</span><br><span class="line">    json.put(<span class="string">&quot;transaction&quot;</span>, JsonFormat.printToString(transaction, <span class="keyword">true</span>));</span><br><span class="line">    json.put(<span class="string">&quot;txid&quot;</span>, transactionID);</span><br><span class="line"></span><br><span class="line">    response.getWriter().println(json.toJSONString());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    Util.processError(e, response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务处理"><a href="#业务处理" class="headerlink" title="业务处理"></a>业务处理</h2><p>前面两个是介绍调用入口，这部分说明如何处理交易并广播。<br>主要的处理入口：<strong>Manager#pushTransaction</strong>，会对接收到的交易进行处理。</p><p>处理流程：</p><ol><li>交易进入接收队列<strong>pushTransactionQueue</strong></li><li>验签</li><li>构建快照</li><li>处理交易<strong>processTransaction</strong></li><li>处理成功的交易进<strong>pendingTransactions</strong>，这个真正的交易缓存池！！</li><li>从交易接收队<strong>pushTransactionQueue</strong>列中移除这笔交易</li></ol><p>篇幅有限，只看核心部分代码，细节看代码注释。</p><h3 id="Wallet-broadcastTransaction"><a href="#Wallet-broadcastTransaction" class="headerlink" title="Wallet.broadcastTransaction"></a>Wallet.broadcastTransaction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Broadcast a transaction.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> GrpcAPI.<span class="function">Return <span class="title">broadcastTransaction</span><span class="params">(Transaction signedTransaction)</span> </span>&#123;</span><br><span class="line">  GrpcAPI.Return.Builder builder = GrpcAPI.Return.newBuilder();</span><br><span class="line">  <span class="comment">// 重新构建交易，以 Capsule 结构的类，都是一个对 protobfu 的包装结构，最终会转化成二进制</span></span><br><span class="line">  TransactionCapsule trx = <span class="keyword">new</span> TransactionCapsule(signedTransaction);</span><br><span class="line">  <span class="comment">//  </span></span><br><span class="line">  trx.setTime(System.currentTimeMillis());</span><br><span class="line">  Sha256Hash txID = trx.getTransactionId();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    TransactionMessage message = <span class="keyword">new</span> TransactionMessage(signedTransaction.toByteArray());</span><br><span class="line">    <span class="comment">// 默认 minEffectiveConnection = 1</span></span><br><span class="line">    <span class="keyword">if</span> (minEffectiveConnection != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tronNetDelegate.getActivePeer().isEmpty()) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;Broadcast transaction &#123;&#125; has failed, no connection.&quot;</span>, txID);</span><br><span class="line">        <span class="keyword">return</span> builder.setResult(<span class="keyword">false</span>).setCode(response_code.NO_CONNECTION)</span><br><span class="line">            .setMessage(ByteString.copyFromUtf8(<span class="string">&quot;No connection.&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// needSyncFromUs 是在两个节点连接建立时，判断是从本节点同步给对方节点，还是反过来</span></span><br><span class="line">      <span class="comment">// 这里过滤掉需要同步的节点</span></span><br><span class="line">      <span class="keyword">int</span> count = (<span class="keyword">int</span>) tronNetDelegate.getActivePeer().stream()</span><br><span class="line">          .filter(p -&gt; !p.isNeedSyncFromUs() &amp;&amp; !p.isNeedSyncFromPeer())</span><br><span class="line">          .count();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (count &lt; minEffectiveConnection) &#123;</span><br><span class="line">        String info = <span class="string">&quot;Effective connection:&quot;</span> + count + <span class="string">&quot; lt minEffectiveConnection:&quot;</span></span><br><span class="line">            + minEffectiveConnection;</span><br><span class="line">        logger.warn(<span class="string">&quot;Broadcast transaction &#123;&#125; has failed. &#123;&#125;.&quot;</span>, txID, info);</span><br><span class="line">        <span class="keyword">return</span> builder.setResult(<span class="keyword">false</span>).setCode(response_code.NOT_ENOUGH_EFFECTIVE_CONNECTION)</span><br><span class="line">            .setMessage(ByteString.copyFromUtf8(info))</span><br><span class="line">            .build();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 当前 pending 和 rePush 队列的长度是否超过最大值</span></span><br><span class="line">    <span class="comment">// 这个值同样可以通过配置文件配置，默认2000</span></span><br><span class="line">    <span class="keyword">if</span> (dbManager.isTooManyPending()) &#123;</span><br><span class="line">      logger.warn(<span class="string">&quot;Broadcast transaction &#123;&#125; has failed, too many pending.&quot;</span>, txID);</span><br><span class="line">      <span class="keyword">return</span> builder.setResult(<span class="keyword">false</span>).setCode(response_code.SERVER_BUSY)</span><br><span class="line">          .setMessage(ByteString.copyFromUtf8(<span class="string">&quot;Server busy.&quot;</span>)).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交易缓存</span></span><br><span class="line">    <span class="keyword">if</span> (trxCacheEnable) &#123;</span><br><span class="line">      <span class="comment">// 拒绝重复交易</span></span><br><span class="line">      <span class="keyword">if</span> (dbManager.getTransactionIdCache().getIfPresent(txID) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;Broadcast transaction &#123;&#125; has failed, it already exists.&quot;</span>, txID);</span><br><span class="line">        <span class="keyword">return</span> builder.setResult(<span class="keyword">false</span>).setCode(response_code.DUP_TRANSACTION_ERROR)</span><br><span class="line">            .setMessage(ByteString.copyFromUtf8(<span class="string">&quot;Transaction already exists.&quot;</span>)).build();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dbManager.getTransactionIdCache().put(txID, <span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chainBaseManager.getDynamicPropertiesStore().supportVM()) &#123;</span><br><span class="line">      trx.resetResult();</span><br><span class="line">    &#125;</span><br><span class="line">    dbManager.pushTransaction(trx);</span><br><span class="line">    <span class="keyword">int</span> num = tronNetService.fastBroadcastTransaction(message);</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span> &amp;&amp; minEffectiveConnection != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> builder.setResult(<span class="keyword">false</span>).setCode(response_code.NOT_ENOUGH_EFFECTIVE_CONNECTION)</span><br><span class="line">          .setMessage(ByteString.copyFromUtf8(<span class="string">&quot;P2P broadcast failed.&quot;</span>)).build();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;Broadcast transaction &#123;&#125; to &#123;&#125; peers successfully.&quot;</span>, txID, num);</span><br><span class="line">      <span class="keyword">return</span> builder.setResult(<span class="keyword">true</span>).setCode(response_code.SUCCESS).build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Manager-pushTransaction-交易处理"><a href="#Manager-pushTransaction-交易处理" class="headerlink" title="Manager.pushTransaction 交易处理"></a>Manager.pushTransaction 交易处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * push transaction into pending.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">pushTransaction</span><span class="params">(<span class="keyword">final</span> TransactionCapsule trx)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ValidateSignatureException, ContractValidateException, ContractExeException,</span></span><br><span class="line"><span class="function">    AccountResourceInsufficientException, DupTransactionException, TaposException,</span></span><br><span class="line"><span class="function">    TooBigTransactionException, TransactionExpirationException,</span></span><br><span class="line"><span class="function">    ReceiptCheckErrException, VMIllegalException, TooBigTransactionResultException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isShieldedTransaction(trx.getInstance()) &amp;&amp; !Args.getInstance()</span><br><span class="line">      .isFullNodeAllowShieldedTransactionArgs()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pushTransactionQueue.add(trx);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!trx.validateSignature(chainBaseManager.getAccountStore(),</span><br><span class="line">        chainBaseManager.getDynamicPropertiesStore())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ValidateSignatureException(<span class="string">&quot;trans sig validate failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isShieldedTransaction(trx.getInstance())</span><br><span class="line">          &amp;&amp; shieldedTransInPendingCounts.get() &gt;= shieldedTransInPendingMaxCounts) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!session.valid()) &#123;</span><br><span class="line">        session.setValue(revokingStore.buildSession());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> (ISession tmpSession = revokingStore.buildSession()) &#123;</span><br><span class="line">        processTransaction(trx, <span class="keyword">null</span>);</span><br><span class="line">        trx.setTrxTrace(<span class="keyword">null</span>);</span><br><span class="line">        pendingTransactions.add(trx);</span><br><span class="line">        tmpSession.merge();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isShieldedTransaction(trx.getInstance())) &#123;</span><br><span class="line">        shieldedTransInPendingCounts.incrementAndGet();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    pushTransactionQueue.remove(trx);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Manager-processTransaction-核心逻辑"><a href="#Manager-processTransaction-核心逻辑" class="headerlink" title="Manager.processTransaction 核心逻辑"></a>Manager.processTransaction 核心逻辑</h2><p>流程就是这么个流程，那么来看几个的问题，细节在 processTransaction。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process transaction.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TransactionInfo <span class="title">processTransaction</span><span class="params">(<span class="keyword">final</span> TransactionCapsule trxCap, BlockCapsule blockCap)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ValidateSignatureException, ContractValidateException, ContractExeException,</span></span><br><span class="line"><span class="function">    AccountResourceInsufficientException, TransactionExpirationException,</span></span><br><span class="line"><span class="function">    TooBigTransactionException, TooBigTransactionResultException,</span></span><br><span class="line"><span class="function">    DupTransactionException, TaposException, ReceiptCheckErrException, VMIllegalException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (trxCap == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Objects.nonNull(blockCap)) &#123;</span><br><span class="line">    chainBaseManager.getBalanceTraceStore().initCurrentTransactionBalanceTrace(trxCap);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// TaPos 校验，这个很精随，交易必须是引用自最近的 65535个区块，防止交易在分叉链上双花</span></span><br><span class="line">  validateTapos(trxCap);</span><br><span class="line">  <span class="comment">// 校验：交易超时时间 和 交易最大字节数</span></span><br><span class="line">  <span class="comment">// TRANSACTION_MAX_BYTE_SIZE = 500 * 1_024L;</span></span><br><span class="line">  validateCommon(trxCap);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (trxCap.getInstance().getRawData().getContractList().size() != <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ContractSizeNotEqualToOneException(</span><br><span class="line">        <span class="string">&quot;act size should be exactly 1, this is extend feature&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 交易验重</span></span><br><span class="line">  validateDup(trxCap);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!trxCap.validateSignature(chainBaseManager.getAccountStore(),</span><br><span class="line">      chainBaseManager.getDynamicPropertiesStore())) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ValidateSignatureException(<span class="string">&quot;transaction signature validate failed&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TransactionTrace trace = <span class="keyword">new</span> TransactionTrace(trxCap, StoreFactory.getInstance(),</span><br><span class="line">      <span class="keyword">new</span> RuntimeImpl());</span><br><span class="line">  trxCap.setTrxTrace(trace);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算代宽 TRX 转账消耗</span></span><br><span class="line">  consumeBandwidth(trxCap, trace);</span><br><span class="line">  <span class="comment">// 计算多签手续费</span></span><br><span class="line">  consumeMultiSignFee(trxCap, trace);</span><br><span class="line"></span><br><span class="line">  trace.init(blockCap, eventPluginLoaded);</span><br><span class="line">  <span class="comment">// 验证是否是合约类型</span></span><br><span class="line">  trace.checkIsConstant();</span><br><span class="line">  trace.exec();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Objects.nonNull(blockCap)) &#123;</span><br><span class="line">    trace.setResult();</span><br><span class="line">    <span class="keyword">if</span> (blockCap.hasWitnessSignature()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (trace.checkNeedRetry()) &#123;</span><br><span class="line">        String txId = Hex.toHexString(trxCap.getTransactionId().getBytes());</span><br><span class="line">        logger.info(<span class="string">&quot;Retry for tx id: &#123;&#125;&quot;</span>, txId);</span><br><span class="line">        trace.init(blockCap, eventPluginLoaded);</span><br><span class="line">        trace.checkIsConstant();</span><br><span class="line">        <span class="comment">// 执行交易，调用实际执行方法，根据不同类型执行</span></span><br><span class="line">        <span class="comment">// 普通交易 和 智能合约 交易是不同的两套逻辑</span></span><br><span class="line">        <span class="comment">// 这块逻辑直接写在文章下面</span></span><br><span class="line">        trace.exec();</span><br><span class="line">        <span class="comment">// 设置 resultCode</span></span><br><span class="line">        trace.setResult();</span><br><span class="line">        logger.info(<span class="string">&quot;Retry result for tx id: &#123;&#125;, tx resultCode in receipt: &#123;&#125;&quot;</span>,</span><br><span class="line">            txId, trace.getReceipt().getResult());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 校验最络结果，非预期结果会抛 ReceiptCheckErrException 异常</span></span><br><span class="line">      trace.check();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算实际消耗能量</span></span><br><span class="line">  trace.finalization();</span><br><span class="line">  <span class="keyword">if</span> (Objects.nonNull(blockCap) &amp;&amp; getDynamicPropertiesStore().supportVM()) &#123;</span><br><span class="line">    trxCap.setResult(trace.getTransactionContext());</span><br><span class="line">  &#125;</span><br><span class="line">  chainBaseManager.getTransactionStore().put(trxCap.getTransactionId().getBytes(), trxCap);</span><br><span class="line"></span><br><span class="line">  Optional.ofNullable(transactionCache)</span><br><span class="line">      .ifPresent(t -&gt; t.put(trxCap.getTransactionId().getBytes(),</span><br><span class="line">          <span class="keyword">new</span> BytesCapsule(ByteArray.fromLong(trxCap.getBlockNum()))));</span><br><span class="line"></span><br><span class="line">  TransactionInfoCapsule transactionInfo = TransactionUtil</span><br><span class="line">      .buildTransactionInfoInstance(trxCap, blockCap, trace);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if event subscribe is enabled, post contract triggers to queue</span></span><br><span class="line">  <span class="comment">// only trigger when process block</span></span><br><span class="line">  <span class="keyword">if</span> (Objects.nonNull(blockCap) &amp;&amp; !blockCap.isMerkleRootEmpty()) &#123;</span><br><span class="line">    String blockHash = blockCap.getBlockId().toString();</span><br><span class="line">    postContractTrigger(trace, <span class="keyword">false</span>, blockHash);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Contract contract = trxCap.getInstance().getRawData().getContract(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (isMultiSignTransaction(trxCap.getInstance())) &#123;</span><br><span class="line">    ownerAddressSet.add(ByteArray.toHexString(TransactionCapsule.getOwner(contract)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Objects.nonNull(blockCap)) &#123;</span><br><span class="line">    chainBaseManager.getBalanceTraceStore()</span><br><span class="line">        .updateCurrentTransactionStatus(</span><br><span class="line">            trace.getRuntimeResult().getResultCode().name());</span><br><span class="line">    chainBaseManager.getBalanceTraceStore().resetCurrentTransactionTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//set the sort order</span></span><br><span class="line">  trxCap.setOrder(transactionInfo.getFee());</span><br><span class="line">  <span class="keyword">if</span> (!eventPluginLoaded) &#123;</span><br><span class="line">    trxCap.setTrxTrace(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> transactionInfo.getInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易执行-RuntimeImpl-execute"><a href="#交易执行-RuntimeImpl-execute" class="headerlink" title="交易执行 RuntimeImpl.execute()"></a>交易执行 RuntimeImpl.execute()</h3><p>Manager.process是执行交易的入口的话，RuntimeImpl.execute就是选择实际执行交易的方法。</p><p><strong>VMActuator</strong>: TVM 类型交易执行器，也就是智能合约<br><strong>Actuator</strong>: 非智能合约类型交易，包括TRX转账、提案(提案也是一笔交易)、TRC10交易等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(TransactionContext context)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ContractValidateException, ContractExeException </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.context = context;</span><br><span class="line"></span><br><span class="line">  ContractType contractType = context.getTrxCap().getInstance().getRawData().getContract(<span class="number">0</span>)</span><br><span class="line">      .getType();</span><br><span class="line">  <span class="keyword">switch</span> (contractType.getNumber()) &#123;</span><br><span class="line">    <span class="keyword">case</span> ContractType.TriggerSmartContract_VALUE:</span><br><span class="line">    <span class="keyword">case</span> ContractType.CreateSmartContract_VALUE:</span><br><span class="line">      Set&lt;String&gt; actuatorSet = CommonParameter.getInstance().getActuatorSet();</span><br><span class="line">      <span class="keyword">if</span> (!actuatorSet.isEmpty() &amp;&amp; !actuatorSet.contains(VMActuator.class.getSimpleName())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(<span class="string">&quot;not exist contract &quot;</span> + <span class="string">&quot;SmartContract&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      actuator2 = <span class="keyword">new</span> VMActuator(context.isStatic());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      actuatorList = ActuatorCreator.getINSTANCE().createActuator(context.getTrxCap());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (actuator2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 智能合约逻辑</span></span><br><span class="line">    actuator2.validate(context);</span><br><span class="line">    actuator2.execute(context);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 非合约交易</span></span><br><span class="line">    <span class="keyword">for</span> (Actuator act : actuatorList) &#123;</span><br><span class="line">      <span class="comment">// 验证</span></span><br><span class="line">      act.validate();</span><br><span class="line">      <span class="comment">// 执行</span></span><br><span class="line">      <span class="comment">// 在TRX转账的场景下执行的是 TransferActuator</span></span><br><span class="line">      act.execute(context.getProgramResult().getRet());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  setResultCode(context.getProgramResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有交易的Actuator</p><p><img src="/posts/66788eb9/%E6%89%80%E6%9C%89%E4%BA%A4%E6%98%93Actuator.jpg" alt="所有交易Actuator"></p><p>TRX转账交易执行的是<strong>TransferActuator</strong></p><h2 id="TransferActuator-TRX转账交易"><a href="#TransferActuator-TRX转账交易" class="headerlink" title="TransferActuator TRX转账交易"></a>TransferActuator TRX转账交易</h2><p>每个 Actuator 有两个主要的方法:</p><ol><li>validate</li><li>execute</li></ol><p>为什么是执行 TransferActutor<br>在每个 Actuator 注册时，都明确的Actuator的处理类型<br><img src="/posts/66788eb9/TransferActutor.jpg" alt="TransferActutor"></p><h3 id="TransferActutor-实现"><a href="#TransferActutor-实现" class="headerlink" title="TransferActutor 实现"></a>TransferActutor 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;actuator&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferActuator</span> <span class="keyword">extends</span> <span class="title">AbstractActuator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造器注册交易类型: ContractType.TransferContract</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TransferActuator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(ContractType.TransferContract, TransferContract.class);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(Object object)</span> <span class="keyword">throws</span> ContractExeException </span>&#123;</span><br><span class="line">    TransactionResultCapsule ret = (TransactionResultCapsule) object;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(ret)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ActuatorConstant.TX_RESULT_NULL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> fee = calcFee();</span><br><span class="line">    AccountStore accountStore = chainBaseManager.getAccountStore();</span><br><span class="line">    DynamicPropertiesStore dynamicStore = chainBaseManager.getDynamicPropertiesStore();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TransferContract transferContract = any.unpack(TransferContract.class);</span><br><span class="line">      <span class="keyword">long</span> amount = transferContract.getAmount();</span><br><span class="line">      <span class="keyword">byte</span>[] toAddress = transferContract.getToAddress().toByteArray();</span><br><span class="line">      <span class="keyword">byte</span>[] ownerAddress = transferContract.getOwnerAddress().toByteArray();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// if account with to_address does not exist, create it first.</span></span><br><span class="line">      <span class="comment">// 这里有点重点，如果 toAccount 不存在，就创建一个</span></span><br><span class="line">      <span class="comment">// 就像是， 我给你卡里转账，你的卡号不存在，我让银行立马生成一个卡号，是这个意思没错</span></span><br><span class="line">      <span class="comment">// 这么做的原因是，区块链是非中心化的节点，我在 A 节点创建账号，这个账号B节点未有存在，我也不能保证我跟B节点之前是存在通信的</span></span><br><span class="line">      <span class="comment">// 网络中的节点可能存在上百个，广播的话流量太大</span></span><br><span class="line">      <span class="comment">// 如果这个账号不存在，是随便写的怎么办？</span></span><br><span class="line">      <span class="comment">// 那这笔交易永远不可能到达</span></span><br><span class="line">      AccountCapsule toAccount = accountStore.get(toAddress);</span><br><span class="line">      <span class="keyword">if</span> (toAccount == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> withDefaultPermission =</span><br><span class="line">            dynamicStore.getAllowMultiSign() == <span class="number">1</span>;</span><br><span class="line">        toAccount = <span class="keyword">new</span> AccountCapsule(ByteString.copyFrom(toAddress), AccountType.Normal,</span><br><span class="line">            dynamicStore.getLatestBlockHeaderTimestamp(), withDefaultPermission, dynamicStore);</span><br><span class="line">        accountStore.put(toAddress, toAccount);</span><br><span class="line"></span><br><span class="line">        fee = fee + dynamicStore.getCreateNewAccountFeeInSystemContract();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Commons.adjustBalance(accountStore, ownerAddress, -(Math.addExact(fee, amount)));</span><br><span class="line">      <span class="keyword">if</span> (dynamicStore.supportBlackHoleOptimization()) &#123;</span><br><span class="line">        dynamicStore.burnTrx(fee);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Commons.adjustBalance(accountStore, accountStore.getBlackhole(), fee);</span><br><span class="line">      &#125;</span><br><span class="line">      Commons.adjustBalance(accountStore, toAddress, amount);</span><br><span class="line">      ret.setStatus(fee, code.SUCESS);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BalanceInsufficientException | ArithmeticException | InvalidProtocolBufferException e) &#123;</span><br><span class="line">      logger.debug(e.getMessage(), e);</span><br><span class="line">      ret.setStatus(fee, code.FAILED);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractExeException(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> <span class="keyword">throws</span> ContractValidateException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.any == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(ActuatorConstant.CONTRACT_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (chainBaseManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(ActuatorConstant.STORE_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AccountStore 是账户数据库，使用的是 leveldb，比特币也是leveldb</span></span><br><span class="line">    <span class="comment">// 以太坊使用的是 rocksdb，是在 leveldb 的础上改进的db</span></span><br><span class="line">    AccountStore accountStore = chainBaseManager.getAccountStore();</span><br><span class="line">    DynamicPropertiesStore dynamicStore = chainBaseManager.getDynamicPropertiesStore();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.any.is(TransferContract.class)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(</span><br><span class="line">          <span class="string">&quot;contract type error, expected type [TransferContract], real type [&quot;</span> + <span class="keyword">this</span>.any</span><br><span class="line">              .getClass() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fee = 0</span></span><br><span class="line">    <span class="keyword">long</span> fee = calcFee();</span><br><span class="line">    <span class="keyword">final</span> TransferContract transferContract;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// any.unpack 是 protobuf 一种通配的写法，可以转成任意类型的对象</span></span><br><span class="line">      transferContract = any.unpack(TransferContract.class);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">      logger.debug(e.getMessage(), e);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面是常规校验</span></span><br><span class="line">    <span class="keyword">byte</span>[] toAddress = transferContract.getToAddress().toByteArray();</span><br><span class="line">    <span class="keyword">byte</span>[] ownerAddress = transferContract.getOwnerAddress().toByteArray();</span><br><span class="line">    <span class="keyword">long</span> amount = transferContract.getAmount();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!DecodeUtil.addressValid(ownerAddress)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(<span class="string">&quot;Invalid ownerAddress!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!DecodeUtil.addressValid(toAddress)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(<span class="string">&quot;Invalid toAddress!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Arrays.equals(toAddress, ownerAddress)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(<span class="string">&quot;Cannot transfer TRX to yourself.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AccountCapsule ownerAccount = accountStore.get(ownerAddress);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ownerAccount == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(<span class="string">&quot;Validate TransferContract error, no OwnerAccount.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> balance = ownerAccount.getBalance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(<span class="string">&quot;Amount must be greater than 0.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      AccountCapsule toAccount = accountStore.get(toAddress);</span><br><span class="line">      <span class="keyword">if</span> (toAccount == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里是有手续费的，默认值，也是0</span></span><br><span class="line">        fee = fee + dynamicStore.getCreateNewAccountFeeInSystemContract();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//after ForbidTransferToContract proposal, send trx to smartContract by actuator is not allowed.</span></span><br><span class="line">      <span class="keyword">if</span> (dynamicStore.getForbidTransferToContract() == <span class="number">1</span></span><br><span class="line">          &amp;&amp; toAccount != <span class="keyword">null</span></span><br><span class="line">          &amp;&amp; toAccount.getType() == AccountType.Contract) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(<span class="string">&quot;Cannot transfer TRX to a smartContract.&quot;</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// after AllowTvmCompatibleEvm proposal, send trx to smartContract which version is one</span></span><br><span class="line">      <span class="comment">// by actuator is not allowed.</span></span><br><span class="line">      <span class="keyword">if</span> (dynamicStore.getAllowTvmCompatibleEvm() == <span class="number">1</span></span><br><span class="line">          &amp;&amp; toAccount != <span class="keyword">null</span></span><br><span class="line">          &amp;&amp; toAccount.getType() == AccountType.Contract) &#123;</span><br><span class="line"></span><br><span class="line">        ContractCapsule contractCapsule = chainBaseManager.getContractStore().get(toAddress);</span><br><span class="line">        <span class="keyword">if</span> (contractCapsule == <span class="keyword">null</span>) &#123; <span class="comment">//  this can not happen</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(</span><br><span class="line">              <span class="string">&quot;Account type is Contract, but it is not exist in contract store.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contractCapsule.getContractVersion() == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(</span><br><span class="line">              <span class="string">&quot;Cannot transfer TRX to a smartContract which version is one. &quot;</span></span><br><span class="line">                  + <span class="string">&quot;Instead please use TriggerSmartContract &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (balance &lt; Math.addExact(amount, fee)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(</span><br><span class="line">            <span class="string">&quot;Validate TransferContract error, balance is not sufficient.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (toAccount != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Math.addExact(toAccount.getBalance(), amount);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">      logger.debug(e.getMessage(), e);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ContractValidateException(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ByteString <span class="title">getOwnerAddress</span><span class="params">()</span> <span class="keyword">throws</span> InvalidProtocolBufferException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> any.unpack(TransferContract.class).getOwnerAddress();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">calcFee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 手续费0，但是会消耗带宽</span></span><br><span class="line">    <span class="keyword">return</span> TRANSFER_FEE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建账号手续费</p><p><img src="/posts/66788eb9/%E5%88%9B%E5%BB%BA%E8%B4%A6%E5%8F%B7%E6%89%8B%E7%BB%AD%E8%B4%B9.jpg" alt="创建账号手续费"></p><h3 id="交易为什么要先进pushTransactionQueue"><a href="#交易为什么要先进pushTransactionQueue" class="headerlink" title="交易为什么要先进pushTransactionQueue?"></a>交易为什么要先进pushTransactionQueue?</h3><p>pushTransactionQueue 就是一个交易缓存池，处理成功的交易会被放到pendingTransactions当中。<br>无论处理结果如何，最后都会从 pushTransactionQueue中移除。</p><h3 id="直接进pendingTransactions处理不行吗"><a href="#直接进pendingTransactions处理不行吗" class="headerlink" title="直接进pendingTransactions处理不行吗?"></a>直接进<strong>pendingTransactions</strong>处理不行吗?</h3><p>可行，也不可行。<br>如果强行直接放 pendingTransactions 也不是不可以，但是更为负杂，pendingTransactions主要是在打包交易时提供有效的数据，假设所有交易都直接进pendingTransactions，里面的交易在打包时，还需要判断哪些有效哪些无效？就多了很多判断逻辑，还有processTransaction是一个Queue，是有顺序的，要删除已使用的交易时处理起来就劲了。<br>与其这么麻烦，不如分成两个处理。</p><h3 id="交易竟然还有一个-rePush-对列，用这个的意义是什么？"><a href="#交易竟然还有一个-rePush-对列，用这个的意义是什么？" class="headerlink" title="交易竟然还有一个 rePush 对列，用这个的意义是什么？"></a>交易竟然还有一个 rePush 对列，用这个的意义是什么？</h3><p>这个开始理解不了，后来看到打包部分，打包时间只有750毫秒，这段时间内SR不可能把所有交易全打包，所以没打包完的交易移动到<strong>rePUsh</strong>队列中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>注意在交易处理中<strong>pushBlock</strong>使用了<strong>synchronized</strong>，Manager中有4个地方使用了<strong>synchronized</strong>，分别是</p><ul><li><strong>pushBlock</strong></li><li><strong>generateBlock</strong></li><li><strong>eraseBlock</strong></li><li><strong>pushTransaction</strong></li></ul><p>说明这4个操作，同时只能有一个进行，这是因为Tron中的产易无法做到并行处理。原因是还是和区块链的非中心化特性有关。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> tron </tag>
            
            <tag> 波场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间轮 slot 机制实现</title>
      <link href="posts/7ecfc8d7.html"/>
      <url>posts/7ecfc8d7.html</url>
      
        <content type="html"><![CDATA[<h2 id="slot机制"><a href="#slot机制" class="headerlink" title="slot机制"></a>slot机制</h2><p>Slot 机制，大白话，就是分片机制。可以把时间或空间分成一个个槽，通过一定算法使用这些槽的机制。</p><h3 id="有什么用？"><a href="#有什么用？" class="headerlink" title="有什么用？"></a>有什么用？</h3><p>作用是可以把数据平均分存放到某个槽空间内，比如Hash环中使用的Hash Slot。再比如数组，可以再解为是一种槽机制。<br>这是空间是的槽机制，<br>在时间维度，可以把时间分片，每隔一段时间，就是一个时间槽位。<br>比如：一分钟有60秒，每2秒划分一个槽位就有30个槽，那就可以执行30次；<br>比如：一天有86400秒，每3秒划分一个槽位就有28800个槽。</p><p>这里实现一个简单的时间槽机制，分布式场景下，通过这个机制在，去中心化的场景下，让不同的机制按照一定时间槽机制进行运作。</p><p><img src="/posts/7ecfc8d7/%E6%BC%94%E7%A4%BA.jpeg" alt="演示"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>要求</strong><br>必须保证是精准的3秒间隔，中间代码处理业务逻辑的时间必须也要计算在内。<br>比如，执行业务逻辑使用100毫秒，那么到下一个3秒的间隔就是2900毫秒；<br>如果，执行业务逻辑使用500毫秒，那么到下一个3秒的间隔就是2500毫秒；<br>如果，执行业务逻辑使用2900毫秒，那么到下一个3秒的间隔就是100毫秒；<br>保证完整的3秒，不多不少。</p><p><strong>思路</strong><br>这样的话，就要记录计算所有时间：</p><ol><li>标记当前开始时间</li><li>记录业务逻辑处理的时间</li><li>计算出下一次间隔时间</li></ol><p>每一轮开始，就会有一个<strong>开始时间</strong>为起点，执行的时间就是<strong>使用时间</strong>，将这个时间录下来，并使用开始时间减去使用时间，就得到了<strong>剩余时间</strong>。<br>还需要一个标杆来确认每轮<strong>时间间隔</strong>。</p><p>提取需要几个参数：</p><ol><li>INTERVAL 时间间隔</li><li>current 当前时间</li><li>useTime 使用的时间</li><li>stillTime 剩余时间</li></ol><p>INTERVAL 即是时间间隔，在逻辑上也是一个Slot。我们要做的其实就是针对这个进行操作，计算这个时间槽内的时间流逝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildInterval</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> interval = <span class="number">3000</span>;</span><br><span class="line">  <span class="keyword">long</span> nextTime;</span><br><span class="line">  <span class="keyword">long</span> currentSlot = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取当前时间，逻辑上是当前slot内的起始时间</span></span><br><span class="line">    <span class="keyword">long</span> current = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算出当前 slot 的剩余时间</span></span><br><span class="line">    <span class="keyword">long</span> stillTime = interval - current % interval;</span><br><span class="line">    System.out.println(<span class="string">&quot;i: &quot;</span> + i + <span class="string">&quot;, interval: &quot;</span> + stillTime);</span><br><span class="line">    Thread.sleep(stillTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得下一个 slot 的时间</span></span><br><span class="line">    nextTime = current + stillTime;</span><br><span class="line">    System.out.println(<span class="string">&quot;nextTime: &quot;</span> + nextTime);</span><br><span class="line">    currentSlot = currentSlot + nextTime % interval + <span class="number">1</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;currentSlot: &quot;</span> + currentSlot);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">i: 0, interval: 2272</span><br><span class="line">nextTime: 1647172716000</span><br><span class="line">currentSlot: 1</span><br><span class="line">-----------------</span><br><span class="line">i: 1, interval: 2999</span><br><span class="line">nextTime: 1647172719000</span><br><span class="line">currentSlot: 2</span><br><span class="line">-----------------</span><br><span class="line">i: 2, interval: 2994</span><br><span class="line">nextTime: 1647172722000</span><br><span class="line">currentSlot: 3</span><br><span class="line">-----------------</span><br><span class="line">i: 3, interval: 2997</span><br><span class="line">nextTime: 1647172725000</span><br><span class="line">currentSlot: 4</span><br><span class="line">-----------------</span><br><span class="line">i: 4, interval: 2995</span><br><span class="line">nextTime: 1647172728000</span><br><span class="line">currentSlot: 5</span><br><span class="line">-----------------</span><br><span class="line">i: 5, interval: 2999</span><br><span class="line">nextTime: 1647172731000</span><br><span class="line">currentSlot: 6</span><br><span class="line">-----------------</span><br><span class="line">i: 6, interval: 2995</span><br><span class="line">nextTime: 1647172734000</span><br><span class="line">currentSlot: 7</span><br><span class="line">-----------------</span><br><span class="line">i: 7, interval: 2999</span><br><span class="line">nextTime: 1647172737000</span><br><span class="line">currentSlot: 8</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure><p>现在可以完整复现出一个完美情况下的Slot机制，可以看到每个时间戳之间的差距刚好是3000毫秒。<br>这里还有问题，如果超时了怎么办？分布式环境下，如何保证多个节点之间的时间是同步的？</p><h2 id="getSlot-方法"><a href="#getSlot-方法" class="headerlink" title="getSlot 方法"></a>getSlot 方法</h2><p>把上面封装成一个可以操作的方法，用来在获得和判断下一个slot的位置。产块前，需要先判断是否进入了下一个slot周期。当前时间必须大于 LatestBlockHeaderTimestamp，等于也不行说明还在当前slot周期内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlotTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> BLOCK_PRODUCED_INTERVAL = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 算出下一个 slot 的时间点</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 算出下一个 slot 时间点</span></span><br><span class="line"><span class="comment">   *     slot机制调定每3秒为了个slot，一天有86000 秒，则一天有 86400 / 3 = 28800(slot)</span></span><br><span class="line"><span class="comment">   *     00: 00</span></span><br><span class="line"><span class="comment">   *     00: 03</span></span><br><span class="line"><span class="comment">   *     00: 06</span></span><br><span class="line"><span class="comment">   *     00: 09</span></span><br><span class="line"><span class="comment">   *     00: 12</span></span><br><span class="line"><span class="comment">   *     ...</span></span><br><span class="line"><span class="comment">   *     以此类推</span></span><br><span class="line"><span class="comment">   *     该方法算出上一个区块的时间，到下一个slot的精确slot是在什么位置</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> slot</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">(<span class="keyword">long</span> slot)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> interval = BLOCK_PRODUCED_INTERVAL;</span><br><span class="line">    <span class="comment">// 最后一块高度的时间戳</span></span><br><span class="line">    <span class="keyword">long</span> time = getLatestBlockHeaderTimestamp();</span><br><span class="line">    <span class="comment">// 算出一个不带余数，整数如: 1600000123 计处后得到余数：123；</span></span><br><span class="line">    <span class="comment">// 1600000123 - 123 = 1600000000</span></span><br><span class="line">    time = time - ((time - getGenesisBlockTime()) % interval);</span><br><span class="line">    <span class="keyword">return</span> time + interval * slot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSlot</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> firstSlotTime = getTime(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 只有当前时间大于 产块时间，说明已经进入下一个slot，等于都不行</span></span><br><span class="line">    <span class="keyword">if</span> (time &lt; firstSlotTime) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (time - firstSlotTime) / BLOCK_PRODUCED_INTERVAL + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getGenesisBlockTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获得区块头时间戳</span></span><br><span class="line"><span class="comment">   *  实际场景中，这个是间一定比当前时间戳 System.currentTimeMillis() 早大概0-3000毫秒</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 在线时间戳转换工具 https://tool.lu/timestamp/</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getLatestBlockHeaderTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">//    return 1652849462102L; //2022-04-26 14:57:09</span></span><br><span class="line"><span class="comment">//    return 1650956726000L; //2022-04-26 15:05:26</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//    测试数据1：时间和 LatestBlockHeaderTimestamp 相等</span></span><br><span class="line"><span class="comment">//    long current = System.currentTimeMillis();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    测试数据2：current &gt; LatestBlockHeaderTimestamp</span></span><br><span class="line"><span class="comment">//    long current = System.currentTimeMillis() + 1000;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    测试数据3：</span></span><br><span class="line">    <span class="keyword">long</span> current = System.currentTimeMillis() + <span class="number">3000</span>;</span><br><span class="line">    <span class="keyword">long</span> time3000 = getTime(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">long</span> time6000 = getTime(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;当前时间：&quot;</span> + current);</span><br><span class="line">    System.out.println(<span class="string">&quot;下一个slot 时间点：&quot;</span> + time3000);</span><br><span class="line">    System.out.println(<span class="string">&quot;下一个时间间格6000：&quot;</span> + time6000);</span><br><span class="line">    <span class="keyword">long</span> slot = getSlot(current + <span class="number">50</span>);</span><br><span class="line">    System.out.println(slot);</span><br><span class="line">    <span class="keyword">if</span> (slot == <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;NOT_TIME_YET&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;PRODUCT slot: &quot;</span> + slot);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>当前时间：1652857261155<br>下一个时间间格3000：1652857260000<br>下一个时间间格6000：1652857263000<br>1<br>PRODUCT slot: 1</p></blockquote><h2 id="模拟多节点Slot"><a href="#模拟多节点Slot" class="headerlink" title="模拟多节点Slot"></a>模拟多节点Slot</h2><p>不同机器，不同网络环境，非中心化节点之间Slot场景</p><p>TODO</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> algorithm </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
          <category> consensus </category>
          
          <category> slot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 算法 </tag>
            
            <tag> tron </tag>
            
            <tag> 源码 </tag>
            
            <tag> slot </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron TaPos理解和应用</title>
      <link href="posts/1b47d3c9.html"/>
      <url>posts/1b47d3c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是TaPos"><a href="#什么是TaPos" class="headerlink" title="什么是TaPos"></a>什么是TaPos</h2><p>全称：<strong>Transaction as Proof of Stake</strong>，基于交易的权益证明机制。<br>大白话：这笔交易所基于的证明。<br>啥意思？<br>就是说，在区块链的场景当中，每一过往的笔交易都基于一个区块。因为区块链当中所有的交易都是被打包到一个个区块当中的，如果这是一笔成功的交易，那它一定是存在于某一个特定的区块当中。<br>另外，每一笔交易都有一个唯一的Hash，保证这笔交易的唯一性。那就破案了，这里的证明就是指：<strong>区块</strong>。</p><h2 id="有什么实际作用"><a href="#有什么实际作用" class="headerlink" title="有什么实际作用"></a>有什么实际作用</h2><ol><li>防止有不包含区块引用的交易被重放到某个分叉上，这样能避免不是该分叉的区块被添加到该分叉。</li><li>告诉用户该块是在哪个分支上面。</li></ol><p>这个需要事先了解切链场景，才能说明这个问题。</p><p>先说分叉：</p><p>在区块链网络当中，如果同时收到相同高度的区块就，链就会分叉，你可以理解为git提交记录，从master分支中切出一个新的分叉，会有人基于这个分叉不断的提交代码。<br>在区块链的角度也是一样的，如果区块高度都是 1000 和 1000&#39;，那这个时候链就会出现分叉。</p><h2 id="在哪里用"><a href="#在哪里用" class="headerlink" title="在哪里用"></a>在哪里用</h2><p>一般在验证广播交易阶段使用。</p><h3 id="构建交易"><a href="#构建交易" class="headerlink" title="构建交易"></a>构建交易</h3><p>构建一笔交易时，会将这笔交易所需要引用的区块高度带上。<br>交易构建之后会被广播到对应的FullNode节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTransaction</span><span class="params">(TransactionCapsule trx)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    BlockId blockId = chainBaseManager.getHeadBlockId();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;solid&quot;</span>.equals(Args.getInstance().getTrxReferenceBlock())) &#123;</span><br><span class="line">      blockId = chainBaseManager.getSolidBlockId();</span><br><span class="line">    &#125;</span><br><span class="line">    trx.setReference(blockId.getNum(), blockId.getBytes());</span><br><span class="line">    <span class="keyword">long</span> expiration = chainBaseManager.getHeadBlockTimeStamp() + Args.getInstance()</span><br><span class="line">        .getTrxExpirationTimeInMilliseconds();</span><br><span class="line">    trx.setExpiration(expiration);</span><br><span class="line">    trx.setTimestamp();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;Create transaction capsule failed.&quot;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证TaPos"><a href="#验证TaPos" class="headerlink" title="验证TaPos"></a>验证TaPos</h3><p>接收到广播过来的交易后，会验证构建交易时记录的Tapos的区块高度，如果不是有资质的区块高度，就丢弃交易。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">validateTapos</span><span class="params">(TransactionCapsule transactionCapsule)</span> <span class="keyword">throws</span> TaposException </span>&#123;</span><br><span class="line">  <span class="keyword">byte</span>[] refBlockHash = transactionCapsule.getInstance()</span><br><span class="line">      .getRawData().getRefBlockHash().toByteArray();</span><br><span class="line">  <span class="keyword">byte</span>[] refBlockNumBytes = transactionCapsule.getInstance()</span><br><span class="line">      .getRawData().getRefBlockBytes().toByteArray();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 通过交易中的区块高度，到最近的区块中去查找是否存在</span></span><br><span class="line">    <span class="keyword">byte</span>[] blockHash = chainBaseManager.getRecentBlockStore().get(refBlockNumBytes).getData();</span><br><span class="line">    <span class="keyword">if</span> (!Arrays.equals(blockHash, refBlockHash)) &#123;</span><br><span class="line">      String str = String.format(</span><br><span class="line">          <span class="string">&quot;Tapos failed, different block hash, %s, %s , recent block %s, &quot;</span></span><br><span class="line">              + <span class="string">&quot;solid block %s head block %s&quot;</span>,</span><br><span class="line">          ByteArray.toLong(refBlockNumBytes), Hex.toHexString(refBlockHash),</span><br><span class="line">          Hex.toHexString(blockHash),</span><br><span class="line">          chainBaseManager.getSolidBlockId().getString(),</span><br><span class="line">          chainBaseManager.getHeadBlockId().getString()).toString();</span><br><span class="line">      logger.info(str);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> TaposException(str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ItemNotFoundException e) &#123;</span><br><span class="line">    String str = String</span><br><span class="line">        .format(<span class="string">&quot;Tapos failed, block not found, ref block %s, %s , solid block %s head block %s&quot;</span>,</span><br><span class="line">            ByteArray.toLong(refBlockNumBytes), Hex.toHexString(refBlockHash),</span><br><span class="line">            chainBaseManager.getSolidBlockId().getString(),</span><br><span class="line">            chainBaseManager.getHeadBlockId().getString()).toString();</span><br><span class="line">    logger.info(str);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TaposException(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在去中心化的环境当中，各节点之间数据是独立的，也没有一个中心化的节点可以提供参照数据，还要保证是非切链的交易。<br>这样的场下，要保证刚创建的这笔交易是基于有交主链上的交易，就可以通过获取已经固化的区块，作为依据，这样就可以保证这笔交易是基于主链上的交易。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> tron </tag>
            
            <tag> Tapos </tag>
            
            <tag> 理解 </tag>
            
            <tag> 应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 错误日志告警脚本</title>
      <link href="posts/19f10ba3.html"/>
      <url>posts/19f10ba3.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>服务器有敏感数据，不允许直接登陆服务器查看日志文件，也不允许使用如<strong>ELK</strong>等日志功能收集日志，所以只能使用最简单的办法，只将错误日志进行收集，然后通过应用的webhook进行收集。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>两种思路：</p><ol><li>周期轮询</li><li>实时抓取</li></ol><h3 id="周期轮询"><a href="#周期轮询" class="headerlink" title="周期轮询"></a>周期轮询</h3><p>每隔一分钟去抓取一次，错误日志的内容上送webhook。<br>这样的好处是不会抓到过多的错误日志，但是也有个问题，有可能会错过关键的错误日志。<br>假如每一分钟一轮询，这一次查询刚好没有错误日志产生，而这一个轮询时刻的一分钟内产生了错误日志，就会错过。</p><p>如果到到轮询时刻去统计这一分钟到上一分钟之间的错误日志，是可以，但是如果错误在轮询完成后的这一刻发生，需要等到一分钟之后才会告警出来，缺乏实时性，如果对实时性要求不高可以使用这种方式。</p><h3 id="实时抓取"><a href="#实时抓取" class="headerlink" title="实时抓取"></a>实时抓取</h3><p>这个思路很简单，就是实时抓取ERROR日志，有ERROR就推送webhook。<br>实现思路：</p><ol><li>使用 tail 查询日志</li><li>倒序获取第一条</li><li>关键字可指定</li><li>过滤关键字</li></ol><p>下面这个脚本实现以上的几个思路，算是一种简单的实现，我一直觉得脚本这东西不要写的太复杂，需要考虑后面的人维护的成本。另外脚本尽量使用<strong>python</strong>而不是shell，python更好维护，也利于扩展。写shell是因为历史原因。</p><p>三个关键的文件<br>errorword.txt 是错误关键字<br>exclude.txt 是排除的关键字<br>error_test.log 是错误日志</p><p>如果测试的话，使用 echo &gt;&gt; 重定向进去，如果是使用vim编辑保存的话，tail 会抓会量日志，不是脚本有问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">IP=`echo $(curl -s ifconfig.me)`</span><br><span class="line"></span><br><span class="line">ERROR_WORD=/data/errorword.txt</span><br><span class="line">EXCLUDE=/data/exclude.txt</span><br><span class="line">SLACK=https://hooks.slack.com/services/test_webhook</span><br><span class="line">LOG_DIR=/Users/liukai/workspaces/temp/shell/alert/error_test.log</span><br><span class="line"></span><br><span class="line">tail -Fn0 $LOG_DIR| \</span><br><span class="line">while read line;do</span><br><span class="line">    echo $line | grep -i -f $ERROR_WORD &gt;/dev/null</span><br><span class="line">    if [ $? -eq 0 ];then</span><br><span class="line">       echo $line | grep -i -f $EXCLUDE &gt;/dev/null</span><br><span class="line">       ## white list</span><br><span class="line">        if [ $? -gt 0 ]; then</span><br><span class="line">            new_line=`echo $line | sed s/\&quot;//g`</span><br><span class="line">            message=&#x27;&#123;</span><br><span class="line">                &quot;blocks&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;section&quot;,</span><br><span class="line">                        &quot;text&quot;: &#123;</span><br><span class="line">                            &quot;type&quot;: &quot;mrkdwn&quot;,</span><br><span class="line">                            &quot;text&quot;: &quot;服务异常日志, IP: &#x27;&quot;$IP&quot;&#x27; \n&gt;&#x27;$new_line&#x27;\n&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;&#x27;</span><br><span class="line">            alert=`echo $message | sed s/\&#x27;//g`</span><br><span class="line">            #echo &quot;$IP,$(date),$line&quot; &gt;&gt; /Users/liukai/workspaces/temp/shell/alert/error_report.log</span><br><span class="line">            curl -H &quot;Content-Type: application/json&quot; -X POST -d &quot;$alert&quot; $SLACK</span><br><span class="line">       fi</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="改进版本"><a href="#改进版本" class="headerlink" title="改进版本"></a>改进版本</h2><p>让任务在后台执行，上一个版本是用来验证这个功能，实际使用当中需要放到后台当中持续运行。<br>使用方式:</p><blockquote><p>sh alert.sh start | stop</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">IP=`echo $(curl -s ifconfig.me)`</span><br><span class="line">OPT=$1</span><br><span class="line">ALERT_DIR=/data/alert</span><br><span class="line">ERROR_WORD=$ALERT_DIR/errorword.txt</span><br><span class="line">EXCLUDE=$ALERT_DIR/exclude.txt</span><br><span class="line">LOG_DIR=/data/logs/tron.log</span><br><span class="line">SLACK=https://hooks.slack.com/services/test_webhook</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">  nohup tail -Fn0 $LOG_DIR| \</span><br><span class="line">    while read line;do</span><br><span class="line">        echo $line | grep -i -f $ERROR_WORD &gt;/dev/null</span><br><span class="line">        if [ $? -eq 0 ];then</span><br><span class="line">           echo $line | grep -i -f $EXCLUDE &gt;/dev/null</span><br><span class="line">           ## white list</span><br><span class="line">            if [ $? -gt 0 ]; then</span><br><span class="line">                new_line=`echo $line | sed s/\&quot;//g`</span><br><span class="line">                message=&#x27;&#123;</span><br><span class="line">                    &quot;blocks&quot;: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;type&quot;: &quot;section&quot;,</span><br><span class="line">                            &quot;text&quot;: &#123;</span><br><span class="line">                                &quot;type&quot;: &quot;mrkdwn&quot;,</span><br><span class="line">                                &quot;text&quot;: &quot;服务异常日志, IP: &#x27;&quot;$IP&quot;&#x27; \n&gt;&#x27;$new_line&#x27;\n&quot;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;&#x27;</span><br><span class="line">                alert=`echo $message | sed s/\&#x27;//g`</span><br><span class="line">                curl -H &quot;Content-Type: application/json&quot; -X POST -d &quot;$alert&quot; $SLACK</span><br><span class="line">           fi</span><br><span class="line">        fi</span><br><span class="line">    done &amp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">    kill -9 `ps -ef |grep &#x27;tail -Fn0&#x27;|grep -v &#x27;grep&#x27; |awk &#123;&#x27;print $2&#x27;&#125;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [[ $OPT == &#x27;start&#x27; ]]; then</span><br><span class="line">  start</span><br><span class="line">  if [[ !? -eq 0 ]]; then</span><br><span class="line">      echo &quot;start alert&quot;</span><br><span class="line">  else</span><br><span class="line">      echo &quot;start fail&quot;</span><br><span class="line">  fi</span><br><span class="line">elif [[ $OPT == &#x27;stop&#x27; ]];then</span><br><span class="line">    stop</span><br><span class="line">    echo &quot;stop alert&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>尽量使用简单的脚本，不要让脚本变的复杂。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> slack </tag>
            
            <tag> 日志 </tag>
            
            <tag> 告警 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron http接口postman</title>
      <link href="posts/48251021.html"/>
      <url>posts/48251021.html</url>
      
        <content type="html"><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>把官方文档中的所有http接口整理成了postman的形式，方便自己调试使用。</p><p><img src="/posts/48251021/postman%E6%8E%A5%E5%8F%A3.jpg" alt="postman接口.jpg"></p><p>使用http接口的话，需要注意的是，在代码中一个流程就可以完成的事情，在http接口下，需要一步一步执行。</p><p>比如创建一笔交易，需要调几次接口：</p><ol><li><code>createtransaction</code></li><li><code>gettransactionsign</code></li><li><code>broadcasttransaction</code></li></ol><p>这个和使用 wallet-cli 工具不同的的，wallet-cli 在一次交易构建中，在一次方法内，完成了这三步的操作。</p><h2 id="构建交易示例"><a href="#构建交易示例" class="headerlink" title="构建交易示例"></a>构建交易示例</h2><h3 id="构建一笔交易-createtransaction"><a href="#构建一笔交易-createtransaction" class="headerlink" title="构建一笔交易 createtransaction"></a>构建一笔交易 createtransaction</h3><p>构建一笔交易，需要拿到返回的结果、加私钥生成签名。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;to_address&quot;</span>: <span class="string">&quot;410932AD502E8AB6CE4B7E0E8D52D78BAA231C00B6&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;owner_address&quot;</span>: <span class="string">&quot;41AF71E98F91515D7E5D5379837B9EEFD1AB4650D2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;amount&quot;</span>: <span class="number">9999000000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成签名-gettransactionsign"><a href="#生成签名-gettransactionsign" class="headerlink" title="生成签名 gettransactionsign"></a>生成签名 <code>gettransactionsign</code></h2><p><code>transaction</code> 的部份就是上一个接口执行的结果，带入到这个接口当中进行签名。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;transaction&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;txID&quot;</span>: <span class="string">&quot;4dffedb56b125c5dc3d49aabd9d5af7abf01b533e4aade5eac519fe121697345&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;raw_data&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;contract&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;value&quot;</span>: &#123;</span><br><span class="line">                            <span class="attr">&quot;owner_address&quot;</span>: <span class="string">&quot;418f0078f2bcf4c45305ca204ef309b3ae8261b731&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;007570646174654e616d6531353330363038383733343633&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;type_url&quot;</span>: <span class="string">&quot;type.googleapis.com/protocol.WitnessCreateContract&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;WitnessCreateContract&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;ref_block_bytes&quot;</span>: <span class="string">&quot;3a0b&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;ref_block_hash&quot;</span>: <span class="string">&quot;269c9ae280d8bad0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;expiration&quot;</span>: <span class="number">1652945508000</span>,</span><br><span class="line">            <span class="attr">&quot;timestamp&quot;</span>: <span class="number">1652345508695</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;privateKey&quot;</span>: <span class="string">&quot;testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广播交易-broadcasttransaction"><a href="#广播交易-broadcasttransaction" class="headerlink" title="广播交易 broadcasttransaction"></a>广播交易 <code>broadcasttransaction</code></h2><p>把交易广播上链，这样这笔交易如果执行成功，就会上链。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;signature&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;97c825b41c77de2a8bd65b3df55cd4c0df59c307ce42321dcc1cc455ddba583dd9502e17cfec5945b34cad0511985a6165999092a6dec84c2bdd97e649fc01&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;txID&quot;</span>: <span class="string">&quot;454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;raw_data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;contract&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">                        <span class="attr">&quot;owner_address&quot;</span>: <span class="string">&quot;41e552f6487585c2b58bc2c9bb4492bc1f17132cd0&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;to_address&quot;</span>: <span class="string">&quot;41d1e7a6bc354106cb410e65ff8b181c600ff14292&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">&quot;type_url&quot;</span>: <span class="string">&quot;type.googleapis.com/protocol.TransferContract&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;TransferContract&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;ref_block_bytes&quot;</span>: <span class="string">&quot;267e&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ref_block_hash&quot;</span>: <span class="string">&quot;9a447d222e8de9f2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;expiration&quot;</span>: <span class="number">1530893064000</span>,</span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span>: <span class="number">1530893006233</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postman 的接口json，我整了一份：<a href="48251021/java-tron.postman_collection.json.zip">java-tron-postman.json</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://tronprotocol.github.io/documentation-en/api/http/">tron HTTP API</a></p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> tron </tag>
            
            <tag> 波场 </tag>
            
            <tag> http </tag>
            
            <tag> 接口 </tag>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 使用wget后文件消失</title>
      <link href="posts/b91ef7ed.html"/>
      <url>posts/b91ef7ed.html</url>
      
        <content type="html"><![CDATA[<p>发现一个挺有意思的问题，之前一直没发现docker的这个问题，今天在改 Dockerfile 的时候发现，构建后运行容器，进行容器内部发现一个配置文件丢失了。<br>检查命令没有问题，查看日志也没有问题。</p><p>build日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--2022-03-15 10:02:31--  https://raw.githubusercontent.com/protocol/deployment/master/main_net_config.conf</span><br><span class="line">Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.110.133, 185.199.109.133, ...</span><br><span class="line">Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 17180 (17K) [text/plain]</span><br><span class="line">Saving to: &#x27;/java/config/main_net_config.conf&#x27;</span><br><span class="line"></span><br><span class="line">     0K .......... ......                                     100% 28.5M=0.001s</span><br><span class="line"></span><br><span class="line">2022-03-15 10:02:31 (28.5 MB/s) - &#x27;/java/config/main_net_config.conf&#x27; saved [17180/17180]</span><br></pre></td></tr></table></figure><p>各种验证后，可以确定不是 Dockerfile 的问题，日志也是提示 saved，大概率是docker的问题，各种找解决方法</p><p><strong>有问题的写法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">FROM centos7/centos7</span><br><span class="line"></span><br><span class="line">ENV TMP_DIR=&quot;/build&quot;</span><br><span class="line">ENV JDK_TAR=&quot;jdk-8u202-linux-x64.tar.gz&quot;</span><br><span class="line">ENV JDK_DIR=&quot;jdk1.8.0_202&quot;</span><br><span class="line">ENV JDK_MD5=&quot;0029351f7a946f6c05b582100c7d45b7&quot;</span><br><span class="line">ENV BASE_DIR=&quot;/java&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN set -o errexit -o nounset \</span><br><span class="line">    &amp;&amp; yum -y install git wget \</span><br><span class="line">    &amp;&amp; wget -P /usr/local https://github.com/frekele/oracle-java/releases/download/8u202-b08/$JDK_TAR \</span><br><span class="line">    &amp;&amp; echo &quot;$JDK_MD5 /usr/local/$JDK_TAR&quot; | md5sum -c \</span><br><span class="line">    &amp;&amp; tar -zxf /usr/local/$JDK_TAR -C /usr/local\</span><br><span class="line">    &amp;&amp; rm /usr/local/$JDK_TAR \</span><br><span class="line">    &amp;&amp; export JAVA_HOME=/usr/local/$JDK_DIR \</span><br><span class="line">    &amp;&amp; export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \</span><br><span class="line">    &amp;&amp; export PATH=$PATH:$JAVA_HOME/bin \</span><br><span class="line">    &amp;&amp; echo &quot;git clone&quot; \</span><br><span class="line">    &amp;&amp; mkdir -p $TMP_DIR \</span><br><span class="line">    &amp;&amp; cd $TMP_DIR \</span><br><span class="line">    &amp;&amp; git clone https://github.com/protocol/java.git \</span><br><span class="line">    &amp;&amp; cd java \</span><br><span class="line">    &amp;&amp; git checkout master \</span><br><span class="line">    &amp;&amp; ./gradlew build -x test \</span><br><span class="line">    &amp;&amp; cd build/distributions \</span><br><span class="line">    &amp;&amp; unzip -o java-1.0.0.zip \</span><br><span class="line">    &amp;&amp; mv java-1.0.0 $BASE_DIR \</span><br><span class="line">    &amp;&amp; wget -P $BASE_DIR/config https://raw.githubusercontent.com/protocol/deployment/master/main_net_config.conf</span><br><span class="line">    &amp;&amp; rm -rf $TMP_DIR \</span><br><span class="line">    &amp;&amp; rm -rf ~/.gradle \</span><br><span class="line">    &amp;&amp; mv $JAVA_HOME/jre /usr/local \</span><br><span class="line">    &amp;&amp; rm -rf $JAVA_HOME \</span><br><span class="line">    &amp;&amp; yum clean all</span><br></pre></td></tr></table></figure><p><strong>解决后的写法</strong></p><p>将wget拆出来，单独写一个 RUN 执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">FROM centos7/centos7</span><br><span class="line"></span><br><span class="line">ENV TMP_DIR=&quot;/build&quot;</span><br><span class="line">ENV JDK_TAR=&quot;jdk-8u202-linux-x64.tar.gz&quot;</span><br><span class="line">ENV JDK_DIR=&quot;jdk1.8.0_202&quot;</span><br><span class="line">ENV JDK_MD5=&quot;0029351f7a946f6c05b582100c7d45b7&quot;</span><br><span class="line">ENV BASE_DIR=&quot;/java&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN set -o errexit -o nounset \</span><br><span class="line">    &amp;&amp; yum -y install git wget \</span><br><span class="line">    &amp;&amp; wget -P /usr/local https://github.com/frekele/oracle-java/releases/download/8u202-b08/$JDK_TAR \</span><br><span class="line">    &amp;&amp; echo &quot;$JDK_MD5 /usr/local/$JDK_TAR&quot; | md5sum -c \</span><br><span class="line">    &amp;&amp; tar -zxf /usr/local/$JDK_TAR -C /usr/local\</span><br><span class="line">    &amp;&amp; rm /usr/local/$JDK_TAR \</span><br><span class="line">    &amp;&amp; export JAVA_HOME=/usr/local/$JDK_DIR \</span><br><span class="line">    &amp;&amp; export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \</span><br><span class="line">    &amp;&amp; export PATH=$PATH:$JAVA_HOME/bin \</span><br><span class="line">    &amp;&amp; echo &quot;git clone&quot; \</span><br><span class="line">    &amp;&amp; mkdir -p $TMP_DIR \</span><br><span class="line">    &amp;&amp; cd $TMP_DIR \</span><br><span class="line">    &amp;&amp; git clone https://github.com/protocol/java.git \</span><br><span class="line">    &amp;&amp; cd java \</span><br><span class="line">    &amp;&amp; git checkout master \</span><br><span class="line">    &amp;&amp; ./gradlew build -x test \</span><br><span class="line">    &amp;&amp; cd build/distributions \</span><br><span class="line">    &amp;&amp; unzip -o java-1.0.0.zip \</span><br><span class="line">    &amp;&amp; mv java-1.0.0 $BASE_DIR \</span><br><span class="line">    &amp;&amp; rm -rf $TMP_DIR \</span><br><span class="line">    &amp;&amp; rm -rf ~/.gradle \</span><br><span class="line">    &amp;&amp; mv $JAVA_HOME/jre /usr/local \</span><br><span class="line">    &amp;&amp; rm -rf $JAVA_HOME \</span><br><span class="line">    &amp;&amp; yum clean all</span><br><span class="line"></span><br><span class="line">RUN wget -P $BASE_DIR/config https://raw.githubusercontent.com/protocol/deployment/master/main_net_config.conf</span><br></pre></td></tr></table></figure><p>官方文档<br><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">https://docs.docker.com/develop/develop-images/dockerfile_best-practices/</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> wget </tag>
            
            <tag> 问题处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ETH2.0-Lido业务与质押了解</title>
      <link href="posts/99fe4621.html"/>
      <url>posts/99fe4621.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>ETH2.0搞的风风火火，我没有32个ETH，不然我也去质押，多少赚点。我很好奇ETH怎么实现质押的，然后稍微看了一下。</p><p><code>Lido</code> 是一个以太坊 2.0 质押服务平台，用户可质押任意数量。<br><code>Lido</code> 是一个<strong>跨多个区块链</strong>的流动性质押协议，这个是重点，现在多链生态才是王道，自己玩只会越玩越窄。</p><p>ETH的质押是 <code>1</code>:<code>1</code> 的获得质押代币 <code>stETH</code>，获得<code>stETH</code>后，可以参与 DeFi 市场其他服务。</p><p>Lido 的 stTokens 在整个以太坊生态系统中被广泛采用：</p><ul><li>最重要的流动性场所包括Curve 上的 stETH/ETH 流动性池和Balancer v2 上的 wstETH/ETH MetaStable 池。</li><li><code>stETH</code>在以太坊主网上的<code>AAVE</code> v2 市场上被列为抵押资产。</li><li><code>wstETH</code>在 Maker 上被列为抵押资产。</li><li><code>steCRV</code>（the Curve stETH/ETH LP 代币）被列为 Maker 上的抵押资产。</li><li>在 Lido 的 stTokens 之上构建了多种流动性策略，包括yearn、Harvest Finance和Babylon Finance。</li></ul><p>Curve 是一个去中心化交易所。</p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>Lido 是一个以太坊 2.0 质押协议平台，用户可在 Lido 上以任意 ETH 参与质押，无需搭建节点也可以获得收益。<br>说白了就是因为转了<code>POS</code>之后，需要有人质押成为验证者，代替以前的挖矿节点。<br>但是很多人跟我一样没有32个ETH，也想参与挖矿的话，就可以从Lido中购买。<br>而且ETH2.0的质押收益有一个很有意思的点，你只要账户中持有stETH，就会有收益，即便是你参与了质押，但是手中没有stETH，也是分不到收益的。<br>每天会进行一次快照，对账户中拥有stETH的账户分发收益。</p><h2 id="什么是-stETH"><a href="#什么是-stETH" class="headerlink" title="什么是 stETH"></a>什么是 stETH</h2><p>stETH 是一种<code>ERC20</code>代币，代表与 Lido 抵押的以太币。与质押的以太币不同，它是流动的，可以转移、交易或在 DeFi 应用程序中使用。<br>stETH 的总供应量反映了存入协议的以太币数量加上质押奖励，减去潜在的验证者惩罚。<br>stETH 代币以 1:1 的比例在以太存款上铸造。<br>当从 Beacon 链中引入提款时，也可以通过以相同的 1:1 比例<strong>燃烧</strong> stETH 来<strong>赎回</strong>以太币。</p><p>注意，Lido 实施了质押率限制，旨在减少合并后质押激增对质押队列和 Lido 社会化奖励分配模型的影响。</p><p>stETH 是一种可重新定价的 ERC-20 代币。通常，当 Lido 预言机报告 Beacon 链以太币余额更新时，stETH 代币余额每天都会重新计算。stETH 余额更新会自动发生在所有持有 stETH 的地址上。变基机制已通过共享实现（请参阅共享）。</p><h2 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h2><p>Lido 是一个非托管式的以太坊 2.0 质押服务平台，针对以太坊和 ETH 和下面这些币的流动性抵押解决方案，之前还支持 Terra，然后Terra崩了。<br>什么是非托管式？<br>非托管型加密货币钱包是指只有持有者掌控私钥。此类钱包适合希望完全掌控资金的用户。没有中间机构的干预。</p><p><img src="/posts/99fe4621/%E6%94%AF%E6%8C%81%E4%B8%9A%E5%8A%A1.jpg" alt="支持业务.jpg"></p><p>以太坊 2.0 的质押机制：<br>以太坊 2.0 是以太坊从 <code>Pow</code> 转向 <code>Pos</code>，而 PoS 机制需要节点参与者可以达成共识的独立网络，即信标链。<br>作为对系统提供安全保障的质押者，以太坊 2.0 需要提供 ETH 奖励才会有人愿意参与。<br>未来，信标链将与以太坊合并，并允许质押者赚取目前归于 PoW 矿工的交易费以及矿工可提取价值（MEV）。</p><h2 id="LIDO-的收益"><a href="#LIDO-的收益" class="headerlink" title="LIDO 的收益"></a>LIDO 的收益</h2><p>当前平台收益相关不大，基本来自:<br>1.用户在质押中所获得的奖励收益，收费范围在收益的 10%-15%（本文2021年）左右<br>2.手续费：是平台主要的收益来源<br>拥有质押池越大的平台，能从用户质押奖励中抽取的收益就越高</p><h2 id="质押规则"><a href="#质押规则" class="headerlink" title="质押规则"></a>质押规则</h2><p>1.至少需要 32 个 ETH，且只能以 32 的倍数进行质押；<br>2.无法将质押委托给其他验证者；<br>3.提款启用后，解锁期为 27 小时；<br>4.质押奖励取决于网络的 ETH 质押量，越多的 ETH 意味质押比例收益越少。</p><p>针对规则1：市场上出了中心化质押池和去中心化质押池。<br>原理大致相同，通过将 ETH 汇集在一起，以绕过 32 个 ETH 的最低要求，不需要每个用户操作自己的验证器，质押池会处理相应操作。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.业务范围需要拓展<br>stETH 本身是实时变化的底层资产，较难与现有的 DeFi 体制兼容，团队为此提出了包装版 wstETH 来改善该问题。<br>同时 stETH 的生态圈还未有较强的生态项目接入，可参与的生态圈仍需要继续扩展，目前已向 Aave 和 Maker 提交提案，以期两个 DeFi 龙头可以接受将 stETH 作为抵押资产。</p><p>2.Lido 的资金未完全去中心化管理<br>目前可以任意金额参与以太坊 2.0 质押的平台，都还需要中介机构来控制用户资金。<br>平台为了尽量确保密钥安全，会通过 MPC 将密钥行拆分，或多签形式进行分布式管理，但参与拆分和多签的数量，成员之间的关系等机制，都会影响到密钥的去中心化问题，是一种弱去中心化的方式。<br>Lido 所采取的多签形式，也会存在共同作恶风险，未来平台能否实现密钥的去中心化管理，对于用户资金安全至关重要。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://lido.fi/">https://lido.fi/</a><br><a href="https://docs.lido.fi/">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> lido </category>
          
          <category> ethereum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> ethereum </tag>
            
            <tag> blockchain </tag>
            
            <tag> lido </tag>
            
            <tag> stake </tag>
            
            <tag> 质押 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron-产块-SR产块机制</title>
      <link href="posts/a81a51e8.html"/>
      <url>posts/a81a51e8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SR 基于DPOS共识，所有节点按照时间顺序轮流产块。</p></blockquote><h2 id="DPOS-共识简述"><a href="#DPOS-共识简述" class="headerlink" title="DPOS 共识简述"></a>DPOS 共识简述</h2><p>DPOS 共识即为，<strong>Delegated Proof of Stake</strong> 股份授权证明，在 POS 机制上进行改进。<br>相较于DPOS更为中心化，大白话主要就是两个角色：</p><ol><li>持股人(持币用户)投票选举出委托人(Delegates)</li><li>被委托人进行出块，将奖励分给投票人</li></ol><p>在DPOS机制下，算法要求系统做三件事：</p><ol><li>随机指定生产者出场顺序；</li><li>必须按顺序产块，不按顺序生产的区块无效；</li><li>每过一个周期洗牌一次，打乱原有顺序；</li></ol><p>受托人的职责主要有：</p><ol><li>保证节点的正常运行；</li><li>收集网络里的交易；</li><li>节点验证交易，把交易打包到区块；</li><li>节点广播区块，其他节点验证后把区块添加到自己的数据库；</li><li>带领并促进区块链项目的发展；</li></ol><p>大至概念就是这些，下面对SR产块原理进行分析。</p><h2 id="产块机制"><a href="#产块机制" class="headerlink" title="产块机制"></a>产块机制</h2><p>注意，TRON对DPOS的产块机制是做了调整的，不完全是按照这个的机制来实现。这个嘛。。。懂的都懂。</p><p><strong>产块大流程</strong></p><ol><li>产块节点通过定时任务制每隔最多不超过3秒执行一次，判断是否轮到自己产块</li><li>如果是自己产块，回滚当前节点交易状态，并将交易池中的交易打包</li><li>打包成功后广播该区块给其他节点</li><li>处理刚才自己产的区块，这一步是为了走固化逻辑</li></ol><p>产块机制需要关注的几个重点：</p><ol><li>27节点如何论流产块</li><li>如何知道当前该我产块</li><li>产块后做什么</li><li>产块异常场景怎么处理<ul><li>产块失败怎么办</li><li>成功产块，但是区块没广播出去怎么办</li><li>没有收到上一个节点产的块怎么办</li></ul></li></ol><h3 id="27节点如何论流产块"><a href="#27节点如何论流产块" class="headerlink" title="27节点如何论流产块"></a>27节点如何论流产块</h3><p>节点有27个，且都是分布式的环境下，并没有中心化的节点进行调度。典型的拜占庭将军问题。<br>通过严格的时间轮进行节点控制。<br>啥意思？</p><p>产块逻辑入口：<strong>DposTask.init()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!dposService.isEnable() || StringUtils.isEmpty(dposService.getMiners())) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Runnable runnable = () -&gt; &#123;</span><br><span class="line">    <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dposService.isNeedSyncCheck()) &#123;</span><br><span class="line">          Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">          dposService.setNeedSyncCheck(dposSlot.getTime(<span class="number">1</span>) &lt; System.currentTimeMillis());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 产块间隔时间，3S</span></span><br><span class="line">          <span class="comment">// 取模，可以获得整数时间</span></span><br><span class="line">          <span class="keyword">long</span> time =</span><br><span class="line">              BLOCK_PRODUCED_INTERVAL - System.currentTimeMillis() % BLOCK_PRODUCED_INTERVAL;</span><br><span class="line">          <span class="comment">// sleep n秒，注意这里使用的是当前系统时间，得出的时间并不是一个对 3000 取模的秒</span></span><br><span class="line">          <span class="comment">// 假设 System.currentTimeMillis() = 1647161596195</span></span><br><span class="line">          <span class="comment">// 3000 - 1647161596195 % 3000，那time = 1805</span></span><br><span class="line">          <span class="comment">// 这么做的意义是什么？</span></span><br><span class="line">          <span class="comment">// 意义就是为了保证是严格的每3秒执行一次，线程自动执行后对 3000 取模，就可以知道当前时间戳离 300 还差多少豪秒</span></span><br><span class="line">          Thread.sleep(time);</span><br><span class="line">          <span class="comment">// 产块逻辑</span></span><br><span class="line">          State state = produceBlock();</span><br><span class="line">          <span class="keyword">if</span> (!State.OK.equals(state)) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Produce block failed: &#123;&#125;&quot;</span>, state);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;Produce block task interrupted.&quot;</span>);</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Produce block error.&quot;</span>, throwable);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  produceThread = <span class="keyword">new</span> Thread(runnable, <span class="string">&quot;DPosMiner&quot;</span>);</span><br><span class="line">  produceThread.start();</span><br><span class="line">  logger.info(<span class="string">&quot;DPoS task started.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>核心逻辑produceBlock()</strong></p><p>这段代码体现的是产块逻辑中的时间轮机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> State <span class="title">produceBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  State state = stateManager.getState();</span><br><span class="line">  <span class="keyword">if</span> (!State.OK.equals(state)) &#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">synchronized</span> (dposService.getBlockHandle().getLock()) &#123;</span><br><span class="line">    <span class="comment">//获得一个slot，细节在下面说明</span></span><br><span class="line">    <span class="keyword">long</span> slot = dposSlot.getSlot(System.currentTimeMillis() + <span class="number">50</span>);</span><br><span class="line">    <span class="keyword">if</span> (slot == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> State.NOT_TIME_YET;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据当前时间轮，判断是否到自己产块</span></span><br><span class="line">    <span class="comment">//根据slot获取自己的信息</span></span><br><span class="line">    ByteString pWitness = dposSlot.getScheduledWitness(slot);</span><br><span class="line">    </span><br><span class="line">    Miner miner = dposService.getMiners().get(pWitness);</span><br><span class="line">    <span class="keyword">if</span> (miner == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> State.NOT_MY_TURN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前的一个时间戳，用作产块时间</span></span><br><span class="line">    <span class="keyword">long</span> pTime = dposSlot.getTime(slot);</span><br><span class="line">    <span class="comment">// int BLOCK_PRODUCE_TIMEOUT_PERCENT = 50; // 50%</span></span><br><span class="line">    <span class="comment">// 3000 / 2 * 50 / 100 = 750(ms) </span></span><br><span class="line">    <span class="comment">// 所以产块时间只有750豪秒</span></span><br><span class="line">    <span class="keyword">long</span> timeout =</span><br><span class="line">        pTime + BLOCK_PRODUCED_INTERVAL / <span class="number">2</span> * dposService.getBlockProduceTimeoutPercent() / <span class="number">100</span>;</span><br><span class="line">    BlockCapsule blockCapsule = dposService.getBlockHandle().produce(miner, pTime, timeout);</span><br><span class="line">    <span class="keyword">if</span> (blockCapsule == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> State.PRODUCE_BLOCK_FAILED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BlockHeader.raw raw = blockCapsule.getInstance().getBlockHeader().getRawData();</span><br><span class="line">    logger.info(<span class="string">&quot;Produce block successfully, num: &#123;&#125;, time: &#123;&#125;, witness: &#123;&#125;, ID:&#123;&#125;, parentID:&#123;&#125;&quot;</span>,</span><br><span class="line">        raw.getNumber(),</span><br><span class="line">        <span class="keyword">new</span> DateTime(raw.getTimestamp()),</span><br><span class="line">        ByteArray.toHexString(raw.getWitnessAddress().toByteArray()),</span><br><span class="line">        <span class="keyword">new</span> Sha256Hash(raw.getNumber(), Sha256Hash.of(CommonParameter</span><br><span class="line">            .getInstance().isECKeyCryptoEngine(), raw.toByteArray())),</span><br><span class="line">        ByteArray.toHexString(raw.getParentHash().toByteArray()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> State.OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间槽机制getSlot</strong></p><p>这个方法看似简单，实际上很有意思，这实际上是时间槽的实现。包括像<code>EOS</code>也是这个机制，很多DPOS的项目都是Slot机制。<br>Slot机制，简单的说就是把时间按单位进行分片，每3秒一个Slot，是不是很熟悉，在缓存分片中有一种方案叫<strong>哈希环</strong>也有Slot的概念。<br>一个是对时间进行分片，一个是对空间进行分片。Tron 是怎么实现的，看代码说明。</p><p>下面这段代码是获取一个slot，一个slot是3000ms。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSlot</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> firstSlotTime = getTime(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (time &lt; firstSlotTime) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (time - firstSlotTime) / BLOCK_PRODUCED_INTERVAL + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">(<span class="keyword">long</span> slot)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 上面调用传入 1 不可能为0</span></span><br><span class="line">  <span class="keyword">if</span> (slot == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// BLOCK_PRODUCED_INTERVAL = 3000; 这个常量贯穿很多地方，注意这个常量</span></span><br><span class="line">  <span class="keyword">long</span> interval = BLOCK_PRODUCED_INTERVAL;</span><br><span class="line">  <span class="comment">// 程序刚启动 getLatestBlockHeaderNumbe=0，接收到新区块更新这个值</span></span><br><span class="line">  <span class="keyword">if</span> (consensusDelegate.getLatestBlockHeaderNumber() == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> dposService.getGenesisBlockTime() + slot * interval;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (consensusDelegate.lastHeadBlockIsMaintenance()) &#123;</span><br><span class="line">    slot += consensusDelegate.getMaintenanceSkipSlots();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 注意这里，获取的是最新高度的区块头时间戳</span></span><br><span class="line">  <span class="keyword">long</span> time = consensusDelegate.getLatestBlockHeaderTimestamp();</span><br><span class="line">  <span class="comment">// GenesisBlockTime = 0 这个值在配置文件 config.conf 中配置的</span></span><br><span class="line">  time = time - ((time - dposService.getGenesisBlockTime()) % interval);</span><br><span class="line">  <span class="comment">// 返回当前时间戳 + 3000 * 1</span></span><br><span class="line">  <span class="keyword">return</span> time + interval * slot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到下个时间节点的 slot 之后，就可以判断是不是自己轮到自己产块了。<br>实现方式：使用当前块高对27进行取模。在启动时将27个SR加入列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteString <span class="title">getScheduledWitness</span><span class="params">(<span class="keyword">long</span> slot)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> currentSlot = getAbSlot(consensusDelegate.getLatestBlockHeaderTimestamp()) + slot;</span><br><span class="line">  <span class="keyword">if</span> (currentSlot &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;current slot should be positive.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> size = consensusDelegate.getActiveWitnesses().size();</span><br><span class="line">  <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;active witnesses is null.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> witnessIndex = (<span class="keyword">int</span>) currentSlot % (size * SINGLE_REPEAT);</span><br><span class="line">  witnessIndex /= SINGLE_REPEAT;</span><br><span class="line">  <span class="keyword">return</span> consensusDelegate.getActiveWitnesses().get(witnessIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>产块逻辑</strong></p><p>终于到了这个最核心的部分了。细节都在代码注释当中，有几个小点提一下：</p><ol><li>产块是有时间限制的，不超过750ms</li><li>区块大小有限制：不会超过2MB</li><li>如果没有交易，是会产出空块的</li><li>产块后，立即处理区块，在<code>PendingManager</code>中清空<code>pending</code>队列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a block.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> BlockCapsule <span class="title">generateBlock</span><span class="params">(Miner miner, <span class="keyword">long</span> blockTime, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> postponedTrxCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建一个空的 BlockCapsule 对象三个参数：</span></span><br><span class="line">  <span class="comment">// chainBaseManager.getHeadBlockNum() 前一个区块高度</span></span><br><span class="line">  <span class="comment">// chainBaseManager.getHeadBlockId() 前一个区块hash</span></span><br><span class="line">  <span class="comment">// 本节点公钥</span></span><br><span class="line">  BlockCapsule blockCapsule = <span class="keyword">new</span> BlockCapsule(chainBaseManager.getHeadBlockNum() + <span class="number">1</span>,</span><br><span class="line">      chainBaseManager.getHeadBlockId(),</span><br><span class="line">      blockTime, miner.getWitnessAddress());</span><br><span class="line">  blockCapsule.generatedByMyself = <span class="keyword">true</span>;</span><br><span class="line">  <span class="comment">// 这个注意！！reset 是将当前数据快照回退！！</span></span><br><span class="line">  <span class="comment">// 这是一个很精随又很复杂的操作，可以理解为将上一个区块到这一行代码之前的所有数据库的所有操作回滚！！</span></span><br><span class="line">  session.reset();</span><br><span class="line">  session.setValue(revokingStore.buildSession());</span><br><span class="line"></span><br><span class="line">  accountStateCallBack.preExecute(blockCapsule);</span><br><span class="line">  <span class="comment">// 判断是否多签</span></span><br><span class="line">  <span class="keyword">if</span> (getDynamicPropertiesStore().getAllowMultiSign() == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] privateKeyAddress = miner.getPrivateKeyAddress().toByteArray();</span><br><span class="line">    AccountCapsule witnessAccount = getAccountStore()</span><br><span class="line">        .get(miner.getWitnessAddress().toByteArray());</span><br><span class="line">    <span class="keyword">if</span> (!Arrays.equals(privateKeyAddress, witnessAccount.getWitnessPermissionAddress())) &#123;</span><br><span class="line">      logger.warn(<span class="string">&quot;Witness permission is wrong&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TransactionRetCapsule transactionRetCapsule = <span class="keyword">new</span> TransactionRetCapsule(blockCapsule);</span><br><span class="line"></span><br><span class="line">  Set&lt;String&gt; accountSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  AtomicInteger shieldedTransCounts = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// pendingTransactions 交易池</span></span><br><span class="line">  <span class="comment">// rePushTransactions，上次打包 和 本次打包中pendingTransactions中没执行完的交易移入 rePushTransactions</span></span><br><span class="line">  <span class="comment">// 所以每次打包并不一定会将pendingTransactions 中的所有交易打包完，毕竟只有750ms的打包时间</span></span><br><span class="line">  <span class="keyword">while</span> (pendingTransactions.size() &gt; <span class="number">0</span> || rePushTransactions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> fromPending = <span class="keyword">false</span>;</span><br><span class="line">    TransactionCapsule trx;</span><br><span class="line">    <span class="keyword">if</span> (pendingTransactions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 注意这里是 peek 不是 poll，为了防止本次执行异常交易丢失</span></span><br><span class="line">      trx = pendingTransactions.peek();</span><br><span class="line">      <span class="comment">//交易排序，默认不开启</span></span><br><span class="line">      <span class="keyword">if</span> (Args.getInstance().isOpenTransactionSort()) &#123;</span><br><span class="line">        TransactionCapsule trxRepush = rePushTransactions.peek();</span><br><span class="line">        <span class="keyword">if</span> (trxRepush == <span class="keyword">null</span> || trx.getOrder() &gt;= trxRepush.getOrder()) &#123;</span><br><span class="line">          fromPending = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          trx = rePushTransactions.poll();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fromPending = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      trx = rePushTransactions.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否 &gt; 750ms</span></span><br><span class="line">    <span class="keyword">if</span> (System.currentTimeMillis() &gt; timeout) &#123;</span><br><span class="line">      logger.warn(<span class="string">&quot;Processing transaction time exceeds the producing time.&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check the block size</span></span><br><span class="line">    <span class="comment">// ChainConstant.BLOCK_SIZE = 2_000_000</span></span><br><span class="line">    <span class="comment">// 检验区块是否大于 2MB，也就是说，一块 block 不会超过2MB</span></span><br><span class="line">    <span class="keyword">if</span> ((blockCapsule.getInstance().getSerializedSize() + trx.getSerializedSize() + <span class="number">3</span>)</span><br><span class="line">        &gt; ChainConstant.BLOCK_SIZE) &#123;</span><br><span class="line">      postponedTrxCount++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//shielded transaction</span></span><br><span class="line">    <span class="comment">// 是否允许匿名交易</span></span><br><span class="line">    <span class="keyword">if</span> (isShieldedTransaction(trx.getInstance())</span><br><span class="line">        &amp;&amp; shieldedTransCounts.incrementAndGet() &gt; SHIELDED_TRANS_IN_BLOCK_COUNTS) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//multi sign transaction</span></span><br><span class="line">    <span class="comment">// 判断多签交易，如果是自己的多签交易跳过去</span></span><br><span class="line">    <span class="comment">// 否则就添加到 accountSet 中</span></span><br><span class="line">    Contract contract = trx.getInstance().getRawData().getContract(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] owner = TransactionCapsule.getOwner(contract);</span><br><span class="line">    String ownerAddress = ByteArray.toHexString(owner);</span><br><span class="line">    <span class="keyword">if</span> (accountSet.contains(ownerAddress)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isMultiSignTransaction(trx.getInstance())) &#123;</span><br><span class="line">        accountSet.add(ownerAddress);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ownerAddressSet.contains(ownerAddress)) &#123;</span><br><span class="line">      trx.setVerified(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// apply transaction</span></span><br><span class="line">    <span class="comment">// 构建一个内存快照，目的是如果执行失败了，回滚所有交易状态</span></span><br><span class="line">    <span class="keyword">try</span> (ISession tmpSession = revokingStore.buildSession()) &#123;</span><br><span class="line">      accountStateCallBack.preExeTrans();</span><br><span class="line">      <span class="comment">// 又执行一遍交易，实际上接收效易的时候已经执行过一次</span></span><br><span class="line">      TransactionInfo result = processTransaction(trx, blockCapsule);</span><br><span class="line">      accountStateCallBack.exeTransFinish();</span><br><span class="line">      <span class="comment">// 合并当前快照状态，这个不用记较，后面转门说一下这个快照功能，非常经典，即便不做区块链</span></span><br><span class="line">      <span class="comment">// 这个功能也可以用在别的场景</span></span><br><span class="line">      tmpSession.merge();</span><br><span class="line">      <span class="comment">// 将这笔交易添加到区块中！！！这样区块中就有了交易了</span></span><br><span class="line">      blockCapsule.addTransaction(trx);</span><br><span class="line">      <span class="keyword">if</span> (Objects.nonNull(result)) &#123;</span><br><span class="line">        transactionRetCapsule.addTransactionInfo(result);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (fromPending) &#123;</span><br><span class="line">        <span class="comment">// 上面已经添加到 block中了，弹出这一笔交易</span></span><br><span class="line">        <span class="comment">// 因为中间如果执行时间超时了，这笔交易就丢了，所以到这里才poll</span></span><br><span class="line">        <span class="comment">// 那如果，执行到这里，这个节点挂了，交易不还是丢失了?</span></span><br><span class="line">        <span class="comment">// 本节点交易是会丢失，但是其他26个节点还保留着完整的数据。</span></span><br><span class="line">        pendingTransactions.poll();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot;Process trx &#123;&#125; failed when generating block: &#123;&#125;&quot;</span>, trx.getTransactionId(),</span><br><span class="line">          e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建状态根</span></span><br><span class="line">  accountStateCallBack.executeGenerateFinish();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 回滚快照，这个地方很容易让人疑惑，都打完包了，为什么还要回滚一次?</span></span><br><span class="line">  <span class="comment">// 那之前的状态不就全回去了，比如 A 给 B 转10块钱，回滚后相当于这个操作没有执行过？</span></span><br><span class="line">  <span class="comment">// 其实，这里回滚是为了后继步骤自己处理区块的时候数据库状态回退到原始状态，这么做的原因，后续单独讲为什么，也是一个很经典的设计。</span></span><br><span class="line">  <span class="comment">// 但是我个人感觉这样的处理非常费性能，因为 reset 操作遍历层级太多，也比较费时。</span></span><br><span class="line">  session.reset();</span><br><span class="line"></span><br><span class="line">  logger.info(<span class="string">&quot;Generate block &#123;&#125; success, pendingCount: &#123;&#125;, rePushCount: &#123;&#125;, postponedCount: &#123;&#125;&quot;</span>,</span><br><span class="line">      blockCapsule.getNum(),</span><br><span class="line">      pendingTransactions.size(), rePushTransactions.size(), postponedTrxCount);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 默克尔根</span></span><br><span class="line">  blockCapsule.setMerkleRoot();</span><br><span class="line">  <span class="comment">// 对整个区块签名</span></span><br><span class="line">  blockCapsule.sign(miner.getPrivateKey());</span><br><span class="line"></span><br><span class="line">  BlockCapsule capsule = <span class="keyword">new</span> BlockCapsule(blockCapsule.getInstance());</span><br><span class="line">  capsule.generatedByMyself = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">return</span> capsule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="产块后做什么"><a href="#产块后做什么" class="headerlink" title="产块后做什么"></a>产块后做什么</h3><p>主要就是几件事</p><ol><li>广播区块</li><li>处理区块</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BlockCapsule <span class="title">produce</span><span class="params">(Miner miner, <span class="keyword">long</span> blockTime, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1.产块</span></span><br><span class="line">  BlockCapsule blockCapsule = manager.generateBlock(miner, blockTime, timeout);</span><br><span class="line">  <span class="keyword">if</span> (blockCapsule == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    consensus.receiveBlock(blockCapsule);</span><br><span class="line">    <span class="comment">// 2.构建广播消息</span></span><br><span class="line">    BlockMessage blockMessage = <span class="keyword">new</span> BlockMessage(blockCapsule);</span><br><span class="line">    <span class="comment">// 3.广播区块</span></span><br><span class="line">    tronNetService.broadcast(blockMessage);</span><br><span class="line">    <span class="comment">// 4.处理区块，自己生产的区块并没有在产块阶段直接入库，而是调用处理区块方法，处理并入库</span></span><br><span class="line">    manager.pushBlock(blockCapsule);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;Handle block &#123;&#125; failed.&quot;</span>, blockCapsule.getBlockId().getString(), e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> blockCapsule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="产块异常怎么处理"><a href="#产块异常怎么处理" class="headerlink" title="产块异常怎么处理"></a>产块异常怎么处理</h3><p>场景复现，假设只有三个节点，分别在以下假设的时间节点产块:<br>A 在 16000000 产块<br>B 在 16003000 产块<br>C 在 16006000 产块</p><p>A 在 16000000 时产了个块高为 10000 的块后广播给 B、C<br>B 在 16003000 时产了个块高为 10001 的块后广播给 A、C，但是由于网络原因这个区块没有广播出去<br>特殊场景来了：C 没有接到到 B 的区块，只接收到了 A 的区块高度，所以：<br>C 在 16006000 时产了个块高为 10001，向A、B广播</p><p>此时A的区块链为 10000(A)--&gt;10001(C)<br>此时B的区块链为 10000(A)--&gt;10001(B)<br>此时C的区块链为 10000(A)--&gt;10001(C)</p><p>但是这个时候，B的网络恢复了，向 A、C 广播出块高为 10001(B) 的块，那么A、C 都会收到 B 的块，这个时候就分叉<br>B 也会收到 C 广播出去的块高。</p><p>此时A的区块链为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">10000(A)--&gt;</span><span class="bash">10001(C)</span></span><br><span class="line">        \-&gt;10001&#x27;(B)</span><br></pre></td></tr></table></figure><p>此时B的区块链为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">10000(A)--&gt;</span><span class="bash">10001(B)</span></span><br><span class="line">        \-&gt;10001&#x27;(C)</span><br></pre></td></tr></table></figure><p>此时C的区块链为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">10000(A)--&gt;</span><span class="bash">10001<span class="string">&#x27;(B)</span></span></span><br><span class="line">        \-&gt;10001(C)</span><br></pre></td></tr></table></figure><p>这么乱，怎么搞？<br>这个时候，就会泛及到区块链的另一个经典问题：分叉和切链。<br>先说解决方案：切链。<br>切链是走最长链原则，有分叉不要仅，继续接收分叉的区块，最后看谁的链条长，就切到到谁的链上。</p><h2 id="处理产块后的区块"><a href="#处理产块后的区块" class="headerlink" title="处理产块后的区块"></a>处理产块后的区块</h2><p>产块是产完了，产完之后怎么处理。处理在专门的<code>Manager.pushBlock</code>中进行处理。<br>这个过程比较长，这里只说产块后需要共识的处理部份：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manager.pushBlock()</span><br><span class="line"> \-processBlock()   <span class="comment">//方法中的共识处理部分</span></span><br></pre></td></tr></table></figure><p>processBlock() 中处理共识的部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   <span class="keyword">if</span> (!consensus.applyBlock(block)) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> BadBlockException(<span class="string">&quot;consensus apply block failed&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>到<code>DposService.applyBlock()</code> 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">applyBlock</span><span class="params">(BlockCapsule blockCapsule)</span> </span>&#123;</span><br><span class="line">  statisticManager.applyBlock(blockCapsule);</span><br><span class="line">  <span class="comment">// 计算维护期</span></span><br><span class="line">  maintenanceManager.applyBlock(blockCapsule);</span><br><span class="line">  <span class="comment">// 更新固化块高度</span></span><br><span class="line">  updateSolidBlock();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>更新固化块高度</strong>的逻辑在<strong>updateSolidBlock()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateSolidBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到所有 SR 节点的最新区块高度</span></span><br><span class="line">  <span class="comment">// 一个新的块广播到其他26个SR节点中，SR处理成功则更新最新区块高度，否则丢弃区块</span></span><br><span class="line">  List&lt;Long&gt; numbers = consensusDelegate.getActiveWitnesses().stream()</span><br><span class="line">      .map(address -&gt; consensusDelegate.getWitness(address.toByteArray()).getLatestBlockNum())</span><br><span class="line">      <span class="comment">// 注里这里 排序了一下，从小到大排序，这个很重要，影响到下面取区块高度</span></span><br><span class="line">      .sorted()</span><br><span class="line">      .collect(Collectors.toList());</span><br><span class="line">  <span class="keyword">long</span> size = consensusDelegate.getActiveWitnesses().size();</span><br><span class="line">  <span class="comment">// position=30%的位置，由于上面从小到大排序，所有 30%的位置，就是70%的结果</span></span><br><span class="line">  <span class="comment">// 不理解的话，自己写个 List 打印一下就知道了</span></span><br><span class="line">  <span class="keyword">int</span> position = (<span class="keyword">int</span>) (size * (<span class="number">1</span> - SOLIDIFIED_THRESHOLD * <span class="number">1.0</span> / <span class="number">100</span>));</span><br><span class="line">  <span class="keyword">long</span> newSolidNum = numbers.get(position);</span><br><span class="line">  <span class="keyword">long</span> oldSolidNum = consensusDelegate.getLatestSolidifiedBlockNum();</span><br><span class="line">  <span class="keyword">if</span> (newSolidNum &lt; oldSolidNum) &#123;</span><br><span class="line">    logger.warn(<span class="string">&quot;Update solid block number failed, new: &#123;&#125; &lt; old: &#123;&#125;&quot;</span>, newSolidNum, oldSolidNum);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  CommonParameter.getInstance()</span><br><span class="line">      .setOldSolidityBlockNum(consensusDelegate.getLatestSolidifiedBlockNum());</span><br><span class="line">  consensusDelegate.saveLatestSolidifiedBlockNum(newSolidNum);</span><br><span class="line">  logger.info(<span class="string">&quot;Update solid block number to &#123;&#125;&quot;</span>, newSolidNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TRON 的链结合了 DPOS 的机制，这种机制的优点是产块效率高，低功耗只有27个产块节点，问题也很明显，27个节点被控制，那整条链就被控制，大部分区块链的社区都希望链更加透明化公开化。<br>总的来说在国产链的应用上算是很广了，手续费非常便宜，值得一用。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
          <category> sr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> tron </tag>
            
            <tag> 共识 </tag>
            
            <tag> 波场 </tag>
            
            <tag> sr </tag>
            
            <tag> suppernode </tag>
            
            <tag> dpos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocksdb arm 架构下编译全过程记录</title>
      <link href="posts/8ab317a.html"/>
      <url>posts/8ab317a.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近公司项目需要适配arm64架构机器，特意整了两台arm64架构的<strong>CentOS7/8</strong>的机器来构建。<br>x86、x64架构下的应用在arm64下面需要解决各种环境和依赖问题。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>Linux internal 4.18.0-147.8.1.el7.aarch64 #1 SMP Wed Apr 15 18:13:44 UTC 2020 aarch64 aarch64 aarch64 GNU/Linux</p></blockquote><blockquote><p>CentOS Linux release 7.8.2003 (AltArch)</p></blockquote><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在 Linux - CentOS / RHEL 环境下编译，可以选择安装官方完整的依赖或者只安装自己需要的部分。有什么区别？</p><p>环境准备：</p><ul><li>gcc升级到至少7的版本，以获得C++17的支持</li></ul><p>获取 RocksDB</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get clone https://github.com/facebook/rocksdb.git</span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>这些插件可以选择性安装，你需要哪个，在使用时自行安装，也可以一次性装好。</p><p>Install gflags:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/gflags/gflags.git</span><br><span class="line">cd gflags</span><br><span class="line">git checkout v2.0</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>Install snappy:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install snappy snappy-devel</span><br></pre></td></tr></table></figure><p>Install zlib:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install zlib zlib-devel</span><br></pre></td></tr></table></figure><p>Install bzip2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install bzip2 bzip2-devel</span><br></pre></td></tr></table></figure><p>Install lz4:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install lz4-devel</span><br></pre></td></tr></table></figure><p>Install ASAN (optional for debugging):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install libasan</span><br></pre></td></tr></table></figure><p>Install zstandard:</p><p>With EPEL:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install libzstd-devel</span><br></pre></td></tr></table></figure><h3 id="编译静态库"><a href="#编译静态库" class="headerlink" title="编译静态库"></a>编译静态库</h3><p>编译使用<code>make</code>，如果直接使用<code>make</code> 或 <code>make install</code>编译出来的会是debug模式的程序，会打印一堆日志。<br>真正需要是一个RocksDB的静态库librocksdb.a<br><code>make static_lib</code>将编译librocksdb.a，RocksDB静态库。当前是 arm 架构下直接使用 make 是编译出不来的，需要加上跨平台参数<code>PORTABLE=1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd rocksdb</span><br><span class="line">PORTABLE=1 make static_lib</span><br></pre></td></tr></table></figure><p>正常输出日志，截取部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GEN      util&#x2F;build_version.cc</span><br><span class="line">GEN      util&#x2F;build_version.cc</span><br><span class="line">CC       cache&#x2F;clock_cache.o</span><br><span class="line">CC       cache&#x2F;lru_cache.o</span><br><span class="line">CC       cache&#x2F;sharded_cache.o</span><br><span class="line">CC       db&#x2F;builder.o</span><br><span class="line">CC       db&#x2F;c.o</span><br><span class="line">CC       db&#x2F;column_family.o</span><br><span class="line">CC       db&#x2F;compacted_db_impl.o</span><br><span class="line">CC       db&#x2F;compaction.o</span><br><span class="line">CC       db&#x2F;compaction_iterator.o</span><br><span class="line">CC       db&#x2F;compaction_job.o</span><br><span class="line">CC       db&#x2F;compaction_picker.o</span><br><span class="line">CC       db&#x2F;compaction_picker_universal.o</span><br><span class="line">CC       db&#x2F;convenience.o</span><br><span class="line">CC       db&#x2F;db_filesnapshot.o</span><br><span class="line">CC       db&#x2F;db_impl.o</span><br><span class="line">CC       db&#x2F;db_impl_compaction_flush.o</span><br></pre></td></tr></table></figure><p>查看一下这个库的结构，这些对应上面的的插件，如果少装一个，这里查看就会少一个。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">linux-vdso.so.1 =&gt;  (0x0000ffff973d0000)</span><br><span class="line">libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x0000ffff96d40000)</span><br><span class="line">librt.so.1 =&gt; /lib64/librt.so.1 (0x0000ffff96d10000)</span><br><span class="line">libsnappy.so.1 =&gt; /lib64/libsnappy.so.1 (0x0000ffff96ce0000)</span><br><span class="line">libz.so.1 =&gt; /lib64/libz.so.1 (0x0000ffff96ca0000)</span><br><span class="line">libbz2.so.1 =&gt; /lib64/libbz2.so.1 (0x0000ffff96c80000)</span><br><span class="line">liblz4.so.1 =&gt; /lib64/liblz4.so.1 (0x0000ffff96c50000)</span><br><span class="line">libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x0000ffff96b20000)</span><br><span class="line">libm.so.6 =&gt; /lib64/libm.so.6 (0x0000ffff96a60000)</span><br><span class="line">libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x0000ffff96a20000)</span><br><span class="line">libc.so.6 =&gt; /lib64/libc.so.6 (0x0000ffff96890000)</span><br><span class="line">/lib/ld-linux-aarch64.so.1 (0x0000ffff973e0000)</span><br></pre></td></tr></table></figure><h3 id="编译-rocksdbjni"><a href="#编译-rocksdbjni" class="headerlink" title="编译 rocksdbjni"></a>编译 rocksdbjni</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PORTABLE=1 DEBUG_LEVEL=0 make -j8 rocksdbjava</span><br></pre></td></tr></table></figure><p>获得: librocksdbjni-linux64.so</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x. 3 root root 4.0K 3月  10 10:44 apidocs</span><br><span class="line">drwxr-xr-x. 3 root root   17 3月  10 10:44 classes</span><br><span class="line">-rwxr-xr-x. 1 root root 140M 3月  10 10:45 librocksdbjni-linux64.so</span><br><span class="line">-rw-r--r--. 1 root root 140M 3月  10 10:50 librocksdbjni.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root  49M 3月  10 10:46 rocksdbjni-5.15.10-linux64.jar</span><br><span class="line">drwxr-xr-x. 3 root root   17 3月  10 10:44 test-classes</span><br></pre></td></tr></table></figure><h3 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h3><p>编译 rocksdbjni，执行编译<code>PORTABLE=1 DEBUG_LEVEL=0 make -j8 rocksdbjava</code> 命令报错</p><blockquote><p>jni.h: No such file or directory</p></blockquote><p>修改/etc/profile 或者 ~/.bashrc，添加 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export CPATH=$CPATH:$JAVA_HOME/include:$JAVA_HOME/include/linux</span><br><span class="line">export C_INCLUDE_PATH=$C_INCLUDE_PATH:$JAVA_HOME/include:$JAVA_HOME/include/linux</span><br><span class="line">export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$JAVA_HOME/include:$JAVA_HOME/include/linux</span><br></pre></td></tr></table></figure><h3 id="精简库文件"><a href="#精简库文件" class="headerlink" title="精简库文件"></a>精简库文件</h3><p>编译出来的 librocksdb.a 文件，发现有140兆，业务程序都没这么大，这个整这么大。<br>由于刚编译出来的 librocksdb.a 库文件，包含 debug信息，需要手动给他瘦身一下，提取关键部分：<br>先看一段 strip 命令的介绍：</p><blockquote><p>strip 命令从 XCOFF 对象文件里有选择地除去行号信息、重定位信息、调试段、typchk 段、凝视段、文件头以及全部或部分符号表。 一旦您使用该命令，则非常难调试文件的符号；因此，通常应该仅仅在已经调试和測试过的生成模块上使用 strip 命令。使用 strip 命令降低对象文件所需的存储量开销。</p></blockquote><p><strong>查看文件概要</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file librocksdbjni-linux64.so</span><br></pre></td></tr></table></figure><blockquote><p>librocksdbjni-linux64.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=43a90c7ba9000ef6a27ba47ac786b7d00d703d83, not stripped</p></blockquote><p><strong>文件瘦身</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strip librocksdbjni-linux64.so</span><br></pre></td></tr></table></figure><blockquote><p>librocksdbjni-linux64.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=43a90c7ba9000ef6a27ba47ac786b7d00d703d83, stripped</p></blockquote><p>瘦射后，140M的文件就只剩下6M!!!!</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 arm 架构通常是在移动端下面使用的比较多，由于苹果M1架构也是基于arm64上构建，所以带动了一波arm架构的热潮，社区开发者纷纷要求提供arm版本的程序，有M1本的程序员就是任性。当然间接带动了linux arm架构下的应用。</p><p><strong>RocksDB静态库</strong><br>PORTABLE=1 make static_lib</p><p><strong>RocksDB的共享库</strong><br>PORTABLE=1 make shared_lib</p><p><strong>RocksDB JNI</strong><br>PORTABLE=1 DEBUG_LEVEL=0 make -j8 rocksdbjava</p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://github.com/facebook/rocksdb/blob/main/INSTALL.md">https://github.com/facebook/rocksdb/blob/main/INSTALL.md</a><br><a href="https://github.com/facebook/rocksdb/wiki">https://github.com/facebook/rocksdb/wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> rocksdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arm </tag>
            
            <tag> centos8 </tag>
            
            <tag> rocksdb </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker arm架构下安装docker</title>
      <link href="posts/dbc3a7fe.html"/>
      <url>posts/dbc3a7fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="arm-架构下安装"><a href="#arm-架构下安装" class="headerlink" title="arm 架构下安装"></a>arm 架构下安装</h2><p>做arm下的应用迁移，包括应用在docker环境下的表现。所以在 centos arm环境安装docker。</p><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><blockquote><p>curl <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a> -o /etc/yum.repos.d/docker-ce.repo</p></blockquote><h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><blockquote><p>yum install -y docker-ce docker-ce-cli containerd.io</p></blockquote><h3 id="开启docker服务"><a href="#开启docker服务" class="headerlink" title="开启docker服务"></a>开启docker服务</h3><blockquote><p>systemctl enable docker<br>systemctl start docker</p></blockquote><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><blockquote><p>docker ps</p></blockquote><p>如果报错，说明当前用户没有权限，给当前用户授权</p><blockquote><p>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</p></blockquote><p>几种修改方式，思路是一样的，就是给权限：</p><p>1.加 sudo 执行<br>2.把当前用户修改用户组<br>3.直接改文件归属</p><blockquote><p>sudo chown $USER /var/run/docker.sock</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> arm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-CentOS8 arm64架构 使用Centos8打包报错 No URLs in mirrorlis</title>
      <link href="posts/bd92445f.html"/>
      <url>posts/bd92445f.html</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近在为应用打包 arm64架构应用环境的docker包。基于:</p><blockquote><p>Linux aarch64 aarch64 aarch64 GNU/Linux</p></blockquote><p>基础镜象使用 CentOS8，过包过程中报错。</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>虽说 CentOS8 已经不维护了，但是很多项目还是基于CentoOS8构建。<br>使用阿里云基于CentOS8构建 CentOS8 镜像构建过程中报错：</p><blockquote><p>#5 5.239 CentOS Linux 8 - AppStream                      8.9  B/s |  38  B     00:04<br>#5 5.241 Error: Failed to download metadata for repo &#39;appstream&#39;: Cannot prepare internal mirrorlist: No URLs in mirrorlist</p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在 Dockerfile 中使用到了yum 进行安装。阿里云官方给出解释：</p><blockquote><p>CentOS 8操作系统版本结束了生命周期（EOL），Linux社区已不再维护该操作系统版本。建议您切换到Anolis或Alinux。如果您的业务过渡期仍需要使用CentOS 8系统中的一些安装包，请根据下文切换CentOS 8的源。</p></blockquote><p>文档：<a href="https://help.aliyun.com/document_detail/405635.html?spm=5176.smartservice_service_chat.0.0.712c3f1bBoZ19I">https://help.aliyun.com/document_detail/405635.html?spm=5176.smartservice_service_chat.0.0.712c3f1bBoZ19I</a></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>上面官方已经给出了解决方案：切换源。<br>那就来切一切。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:centos8</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> UNZIP_DISABLE_ZIPBOMB_DETECTION=TRUE</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /etc/yum.repos.d/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br></pre></td></tr></table></figure><p>切换源之后，再打包没有问题。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> linux </category>
          
          <category> centos8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> centos8 </tag>
            
            <tag> dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Action 自动构建并推送 DockerHub</title>
      <link href="posts/69c41eb0.html"/>
      <url>posts/69c41eb0.html</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>Github Action 这个东西，是小成本和自动化持续集成的福音，如果想要小成本的使用持续集成，省去自己搭建服务器做自动构建，Git Action 就是个好东西。<br>没有这个的时候，你可以自己加 hook 触发，服务可以自己搭，也可以用第三方的。<br>Github Action 最好的优执我个人觉得是在白嫖，什么东西不要钱的都是最好的，除了玩游戏。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>我的需求很简单，当代码正式发版后，发布tag后，自动触发通过我的指定的Dockerfile构建镜像后，推送我们指定的 DockerHub。<br>Github Action 提供的操作，可以理解为你在 <strong>jenkins</strong> 的服务器上写的 Pipline 脚本，一个作用，说到这发现<strong>Github Action</strong>又把 <strong>jenkins</strong>的饭碗抢了。</p><h2 id="使用-Github-Action"><a href="#使用-Github-Action" class="headerlink" title="使用 Github Action"></a>使用 Github Action</h2><p>照例，先告诉你怎么用，能搜到我博客的都是来解决问题的，如果还还有耐心，在解决完问题后，接着往下看。</p><p>我使用是官方推荐配置，看了一下，没有什么可以改的地方。你点开 Action 一看，它能搞的实在太多了，基本上能满足你的所有日常构建。</p><p><img src="/posts/69c41eb0/github-action%E5%85%A5%E5%8F%A3.png" alt="github-action入口"></p><p><strong>找到publish Docker Container</strong></p><p><img src="/posts/69c41eb0/github-action%E5%8F%91%E5%B8%83docker.png" alt="github-action发布docker"></p><p>来看看这个文件<strong>docker-publish.yml</strong>，截图篇幅有限，直接把内容粘出来。</p><p><img src="/posts/69c41eb0/github-action%E9%85%8D%E7%BD%AEdocker-publish.yml.png" alt="github-action配置docker-publish.yml"></p><p>看下面这个配置</p><p><strong>schedule:</strong> 自动调度，这个我是不需要的。<br><strong>tags:</strong> 这个才是我需的正解，那么构建只构建一次，这个前提是能保证的。<br><strong>env:</strong> 这项注意，这里默认的是<strong>ghcr.io</strong>，这个是 Github 提供的白嫖的Docker仓库，功能基本和DockerHub无异。这里目前项目用的还是DockerHub，这里改成DockerHub。<br><strong>username:</strong> 用户名，取的环境变量，一会说在哪里配<br><strong>password:</strong> 密码，取环境变量</p><p>docker-publish.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This workflow uses actions that are not certified by GitHub.</span></span><br><span class="line"><span class="comment"># They are provided by a third-party and are governed by</span></span><br><span class="line"><span class="comment"># separate terms of service, privacy policy, and support</span></span><br><span class="line"><span class="comment"># documentation.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;v*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="comment"># Use docker.io for Docker Hub if empty</span></span><br><span class="line">  <span class="attr">REGISTRY:</span> <span class="string">docker.io</span></span><br><span class="line">  <span class="comment"># github.repository as &lt;account&gt;/&lt;repo&gt;</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line">      <span class="attr">packages:</span> <span class="string">write</span></span><br><span class="line">      <span class="comment"># This is used to complete the identity challenge</span></span><br><span class="line">      <span class="comment"># with sigstore/fulcio when running outside of PRs.</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Install the cosign tool except on PR</span></span><br><span class="line">      <span class="comment"># https://github.com/sigstore/cosign-installer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">cosign</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">github.event_name</span> <span class="type">!=</span> <span class="string">&#x27;pull_request&#x27;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">sigstore/cosign-installer@1e95c1de343b5b0c23352d6417ee3e48d5bcd422</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">cosign-release:</span> <span class="string">&#x27;v1.4.0&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Workaround: https://github.com/docker/build-push-action/issues/461</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Docker</span> <span class="string">buildx</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Login against a Docker registry except on PR</span></span><br><span class="line">      <span class="comment"># https://github.com/docker/login-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Log</span> <span class="string">into</span> <span class="string">registry</span> <span class="string">$&#123;&#123;</span> <span class="string">env.REGISTRY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">github.event_name</span> <span class="type">!=</span> <span class="string">&#x27;pull_request&#x27;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">registry:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.REGISTRY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Extract metadata (tags, labels) for Docker</span></span><br><span class="line">      <span class="comment"># https://github.com/docker/metadata-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Extract</span> <span class="string">Docker</span> <span class="string">metadata</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">meta</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">images:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.REGISTRY</span> <span class="string">&#125;&#125;/$&#123;&#123;</span> <span class="string">env.IMAGE_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Build and push Docker image with Buildx (don&#x27;t push on PR)</span></span><br><span class="line">      <span class="comment"># https://github.com/docker/build-push-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">build-and-push</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">push:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event_name</span> <span class="type">!=</span> <span class="string">&#x27;pull_request&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">labels:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.labels</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sign</span> <span class="string">the</span> <span class="string">published</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event_name</span> <span class="type">!=</span> <span class="string">&#x27;pull_request&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">COSIGN_EXPERIMENTAL:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="comment"># This step uses the identity token to provision an ephemeral certificate</span></span><br><span class="line">        <span class="comment"># against the sigstore community Fulcio instance.</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cosign</span> <span class="string">sign</span> <span class="string">$&#123;&#123;</span> <span class="string">env.REGISTRY</span> <span class="string">&#125;&#125;/$&#123;&#123;</span> <span class="string">env.IMAGE_NAME</span> <span class="string">&#125;&#125;@$&#123;&#123;</span> <span class="string">steps.build-and-push.outputs.digest</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置用户名密码"><a href="#配置用户名密码" class="headerlink" title="配置用户名密码"></a>配置用户名密码</h2><p>配置上面的配置当中需要用户名和密码。</p><p><img src="/posts/69c41eb0/github-action%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE.png" alt="github-action安全配置"></p><p><img src="/posts/69c41eb0/github-action%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81.png" alt="github-action用户名密码"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>上面的设定是发布tag之后自动构建，可以从 Release 中创建一个 Release、创建 Tag、发版，查看构建情况。<br>那我们去创建一个Tag</p><p><img src="/posts/69c41eb0/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AARelease.png" alt="创建一个Release"></p><p>点击创建 <strong>Draft a new release</strong>，看不见这个按钮的话，是权限问题。<br><img src="/posts/69c41eb0/%E5%88%9B%E5%BB%BARelease.png" alt="创建Release"></p><p><strong>注意，Tag 名必须以v开头</strong>，因为上面脚本中我指定了以v开头，你当然可以自定义。<br><img src="/posts/69c41eb0/%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AATag%E6%B2%A1%E6%9C%89%E5%B0%B1%E5%88%9B%E5%BB%BA.png" alt="指定一个Tag没有就创建"></p><p><strong>查看构建情况</strong></p><p><img src="/posts/69c41eb0/%E6%9F%A5%E7%9C%8B%E6%9E%84%E5%BB%BA%E6%83%85%E5%86%B5.png" alt="查看构建情况"></p><p><strong>查看完整构建步骤</strong></p><p><img src="/posts/69c41eb0/%E6%9F%A5%E7%9C%8B%E5%AE%8C%E6%95%B4%E6%9E%84%E5%BB%BA%E6%AD%A5%E9%AA%A4.png" alt="查看完整构建步骤"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用<strong>GitHub Action</strong> 构建相对还是比较友好的，官方文档比较清晰，再配合官方示例，基本上可以满足需求，还有完整的示例。<br>有个好处就是更加简化了构建的流程，相较于写Jenkins的Pipline脚本，Gihub Action 是配置化的参数，了解参数即可，没有执行脚本，这个好处坏处见仁见智。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> github </category>
          
          <category> github </category>
          
          <category> actoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> github </tag>
            
            <tag> github action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go import导包关键字</title>
      <link href="posts/7cd82d54.html"/>
      <url>posts/7cd82d54.html</url>
      
        <content type="html"><![CDATA[<h2 id="import-导包"><a href="#import-导包" class="headerlink" title="import 导包"></a>import 导包</h2><p>有相对路径 和 绝对路径，推荐使用绝对路径。<br>GoLand 中导包如果不用，会报错。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>导入单个路径</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./model&quot;</span>  <span class="comment">//不建议这种方式import</span></span><br></pre></td></tr></table></figure><p>导入多个路径</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;./model&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/forfreeday/go-learning&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>相对路径:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./model&quot;</span>  <span class="comment">//不建议这种方式import</span></span><br></pre></td></tr></table></figure><p>绝对路径:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;shorturl/model&quot;</span>  <span class="comment">//加载GOPATH/src/shorturl/model模块</span></span><br></pre></td></tr></table></figure><h3 id="点操作"><a href="#点操作" class="headerlink" title="点操作"></a>点操作</h3><p>这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>( . <span class="string">&quot;fmt&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">  <span class="comment">//可以省略的写成 </span></span><br><span class="line">  Println(<span class="string">&quot;hello world&quot;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(test <span class="string">&quot;fmt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   <span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span>;</span><br><span class="line">   test.Print(<span class="string">&quot;a address is % :&quot;</span>, &amp;a)</span><br><span class="line">   pointer.Add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行init"><a href="#执行init" class="headerlink" title="_ 执行init"></a>_ 执行init</h3><p>作用：当导入一个包时，该包下的文件里所有init()函数都会被执行，<br>使用下划线<code>_</code>导的包，不使用也不报错</p><p>如：import _ hello/imp</p><p>场景：<br>有些时候我们并不需要把整个包都导入进来，仅仅是是希望它执行init()函数而已。<br>这个时候就可以使用 <code>import _</code>引用该包，即使用<code>import _ 包路径</code>只是引用该包，仅仅是为了调用init()函数，所以无法通过包名来调用包中的其他函数。</p><p>目录结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;--src</span><br><span class="line">&gt;  |</span><br><span class="line">&gt;  |--main.<span class="keyword">go</span></span><br><span class="line">&gt;  \--hello</span><br><span class="line">&gt;      \--imp</span><br><span class="line">&gt;         |--init.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><h3 id="验证初始化"><a href="#验证初始化" class="headerlink" title="验证初始化"></a>验证初始化</h3><p>这里可以执行 init()，但是不能调用这个包内的函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;hello/imp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// imp.Print() 编译报错，说：undefined: imp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imp</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;imp-init() come here.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">()</span></span> &#123;</span><br><span class="line">     fmt.Println(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：imp-init() come here.</p></blockquote><p>如果需要即要初始化 init() 函数，又要调用其他函数，就必须再导入一次不带下划线的包就可以。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>go 的 import，还是比较中规中规矩，实际使用当中 import() 使用的比较多，毕竟不会只导入一两个包。<br><code>_</code> 的用法在很多框架低层中很常用，要注意。</p><p>项目练习代码: <a href="https://github.com/forfreeday/go-learning">https://github.com/forfreeday/go-learning</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 关键字 </tag>
            
            <tag> import </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-自动发布脚本</title>
      <link href="posts/7aeb1e41.html"/>
      <url>posts/7aeb1e41.html</url>
      
        <content type="html"><![CDATA[<h2 id="这个脚本有什么用"><a href="#这个脚本有什么用" class="headerlink" title="这个脚本有什么用"></a>这个脚本有什么用</h2><p>先说说我的场景，最近写博客勤快了，偶尔会在公司写文档。<br>发现在公司和家里两台电脑是写东西的时候总是会发现忘记提交写的markdown文档，这样如果在公司写了一半没有提交，在家里就写不了了，所以想了一个办法，写一个脚本，每次自动提交文档，然后自动发布。<br>我是在 github 上创建了一个私有仓库，将未生成的原始文档添加到仓库中，这样可以方便在不同设备之间进行同步，哪怕在网吧当中，想写文章了，git clone 一下就可以开始写文章。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ol><li>自动提交markdown到github</li><li>自动发布到 github.io</li><li>自动替换 source/ 文件到 public/</li></ol><p>在 hexo/ 目录下创建脚本文件</p><blockquote><p>touch deploy.sh</p></blockquote><p>复制以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> commit 内容就是日期</span></span><br><span class="line">DATA=`date +%Y-%m-%d_%H:%M:%S`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有修改，就不需要提交到 github。</span></span><br><span class="line">if [ -n &quot;$(git status -s)&quot; ];then</span><br><span class="line">    git add .</span><br><span class="line">    git commit -m $DATA</span><br><span class="line">    git push origin master</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">hexo clean &amp;&amp; hexo g</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> SEO 相关key，如果直接放 <span class="built_in">source</span>，会生成对应样式的页面，而非空白页面，所需要在</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hexo clean 之后、hexo deploy 之前，复制到 public/ 目录下</span></span><br><span class="line">touch public/xxxxxxxxxxxxxxxxxxxxxx.html</span><br><span class="line">echo &#x27;google-site-verification: xxxxxxxxxxxxxxxxxxxxxx.html&#x27; &gt; public/xxxxxxxxxxxxxxxxxxxxxx.html</span><br><span class="line"></span><br><span class="line">touch public/bbbbbbbbbbbbbbbbbbbbbbbbbbbb.html</span><br><span class="line">echo &#x27;abcdefgafsefaasdfasdfasdfasdfasdf&#x27; &gt; public/bbbbbbbbbbbbbbbbbbbbbbbbbbbb.html</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>在根目录下使用：</p><p>sh deploy.sh</p><p>效果就不演示了，下次回家写作之前，先<code>git pull</code>，保证数据的同步。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当一个码农，总是习惯的掌控自己的数据，数据同步的问题就比较突出，自己的数据自掌握。通过代码适配自己的需求。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 服务大量外部连接导至异常</title>
      <link href="posts/8b6db28c.html"/>
      <url>posts/8b6db28c.html</url>
      
        <content type="html"><![CDATA[<p>相信很多小伙伴都碰到过一个问题，服务运行过程中，产生大量的未关闭的TCP链接，导至服务不可用直至服务异常。<br>该如何定位、排查这些未关闭的链接?<br>之前碰到过这个问题，解决了，今天有小伙伴又聊到这个问题，就将这个问题复现出来，如果有人看到这个问题，可以帮助解决这个问题。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>通过 jmeter 复制问题，由于问题已经被解决，但是可以通过 jmeter 100%复现该问题。</p><p>复现流程：</p><ol><li>通过 jmeter 发起 http 请求，并且不释放请求。</li><li>停止 jmeter 后查看状态</li></ol><blockquote><p>java.net.NoRouteToHostException: Can&#39;t assign requested address (Address not available)<br>  at java.net.PlainSocketImpl.socketConnect(Native Method)<br>  at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</p></blockquote><p>报的错是<code>Can&#39;t assign requested address</code>，推测是调用IP地址问题。</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>如果是IP地址的问题那么验证一下是不是IP地址的连接是不是有问题。<br>排查网络问题，第一个想到<code>netstat</code>。</p><h3 id="jmeter发起大量请求"><a href="#jmeter发起大量请求" class="headerlink" title="jmeter发起大量请求"></a>jmeter发起大量请求</h3><p>命令：</p><blockquote><p>netstat -nt | awk &#39;/^tcp/ {++state[$NF]} END {for(key in state) print key,&quot;t&quot;,state[key]}&#39;</p></blockquote><p>结果如下：</p><blockquote><p>CLOSE_WAIT t 1<br>ESTABLISHED t 50<br>TIME_WAIT t 13006</p></blockquote><p>TIME_WAIT t 是 13006 这么多的连接。<br>TIME_WAIT表示处理完毕，等待超时结束的请求数。<br>这个时候外部再调接口就会报错。</p><h3 id="停止jmeter请求"><a href="#停止jmeter请求" class="headerlink" title="停止jmeter请求"></a>停止jmeter请求</h3><blockquote><p>netstat -nt | awk &#39;/^tcp/ {++state[$NF]} END {for(key in state) print key,&quot;t&quot;,state[key]}&#39;</p></blockquote><p>结果如下：</p><blockquote><p>CLOSE_WAIT t 1<br>ESTABLISHED t 48<br>FIN_WAIT1 t 1<br>TIME_WAIT t 40</p></blockquote><p>这个时候 TIME_WAIT 只有 40，外部调用接口，不报错。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>这种问题原因是因为有大量的外部请求进来后不释放，正常业务调用没有问题，但是如果遇到恶意的请求就会有问题。<br>解决：设置 http 请求超时时间，不让请求无限的等待下去，就可以避免这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 异常 </tag>
            
            <tag> 服务 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron-节点-轻节点搭建</title>
      <link href="posts/a5ccc906.html"/>
      <url>posts/a5ccc906.html</url>
      
        <content type="html"><![CDATA[<h2 id="轻节点"><a href="#轻节点" class="headerlink" title="轻节点"></a>轻节点</h2><p>轻节点，只包含部分数据，节点轻量化，所以叫轻节点，BTC、ETH都支持轻节点功能，在tron网络中轻节点数据，只保留一天的数据，从这一天的数据为<strong>起点</strong>，同步后续数据。<br>开发一般使用轻节点来进行开发和调试是比较方便的，全量数据需要很大的磁盘空间。</p><h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p>快照有<strong>全量</strong>数据快照和<strong>轻节点</strong>数据快照。<br>全量数据快照，就是全部的数据，比较大。<br>轻节点数据快照是可以指定某一天的数据快照。</p><p><img src="/posts/a5ccc906/%E6%89%80%E6%9C%89%E5%88%97%E8%A1%A8.jpg" alt="所有列表"></p><p>看下单天的数据量很小，只有10G，全量数据就比较大，有442G：</p><p><img src="/posts/a5ccc906/%E8%AF%A6%E6%83%85.jpg" alt="详情"></p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>搭建看之前的搭建方式: <a href="https://liukay.com/posts/632243fb.html">FullNode搭建</a>，唯一的区别在于，FullNode并没有指定数据快照，从零开同步，轻节点或全量节点，是指定的数据快照，这样就不需从零开始同步。</p><p>项目结构:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FullNode.jar</span><br><span class="line">config.conf</span><br><span class="line">output-directory</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar FullNode.jar -c config.conf -d output-directory</span><br></pre></td></tr></table></figure><p>优化参数自行指定，这里只说怎么启动轻节点。<br>还有一点，轻节点默认不启用查询功能，需要在<code>config.conf</code>中修改参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openHistoryQueryWhenLiteFN &#x3D; true</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>快照下载地址：<a href="http://47.89.178.46/">http://47.89.178.46/</a></p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> tron </tag>
            
            <tag> 快照 </tag>
            
            <tag> 节点 </tag>
            
            <tag> litenode </tag>
            
            <tag> 轻节点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-插件10-代码注释插件nerdcommenter</title>
      <link href="posts/b642061c.html"/>
      <url>posts/b642061c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作用：对代码进行注释，<code>NERD_commenter</code>插件需要<code>VIM7.0</code>以上版本。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可查看该符号的说明文档</span><br><span class="line">:<span class="keyword">help</span> <span class="symbol">&lt;Leader&gt;</span></span><br></pre></td></tr></table></figure><p>命令<code>\cc</code> 中的斜杠：<code>\</code> 为<code>&lt;Leader&gt;</code>符，<code>&lt;Leader&gt;</code>也就是常说的Leader键<br>在.vimrc中添加let mapleader = &quot;,&quot;可将<code>&lt;Leader&gt;</code>符变为<code>,</code>或者其实键。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>注释插件 NERD_commenter<br>通过<code>Plug</code>插件进行安装。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;scrooloose/nerdcommenter&#x27;</span></span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:PlugInstall</span><br></pre></td></tr></table></figure><p>就可以安装完成。</p><h2 id="使用注释"><a href="#使用注释" class="headerlink" title="使用注释"></a>使用注释</h2><p>主要就两个操作：<br><code>\cc</code> 注释当前行和选中行<br><code>\cu</code> 取消注释</p><p>这个插件包括 <code>html</code> 也可以注释<br>有用的就这两个，其它大同小异。</p><p><img src="/posts/b642061c/%E6%B3%A8%E9%87%8Ahtml.jpg" alt="注释html"></p><h2 id="其他注释"><a href="#其他注释" class="headerlink" title="其他注释"></a>其他注释</h2><table><thead><tr><th align="center">操作</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>\cn</code></td><td align="center">没有发现和<code>\cc</code>有区别</td></tr><tr><td align="center"><code>\c&lt;空格&gt;</code></td><td align="center">如果被选区域有部分被注释，则对被选区域执行取消注释操作，其它情况执行反转注释操作</td></tr><tr><td align="center"><code>\cm</code></td><td align="center">对被选区域用一对注释符进行注释，前面的注释对每一行都会添加注释</td></tr><tr><td align="center"><code>\ci</code></td><td align="center">执行反转注释操作，选中区域注释部分取消注释，非注释部分添加注释</td></tr><tr><td align="center"><code>\cs</code></td><td align="center">添加性感的注释，代码开头介绍部分通常使用该注释</td></tr><tr><td align="center"><code>\cy</code></td><td align="center">添加注释，并复制被添加注释的部分</td></tr><tr><td align="center"><code>\c$</code></td><td align="center">注释当前光标到改行结尾的内容</td></tr><tr><td align="center"><code>\cA</code></td><td align="center">跳转到该行结尾添加注释，并进入编辑模式</td></tr><tr><td align="center"><code>\ca</code></td><td align="center">\ca 转换注释的方式，比如： <code>/**/</code>和<code>//</code></td></tr><tr><td align="center"><code>\cl</code>、<code>\cb</code></td><td align="center">左对齐和左右对其，左右对其主要针对<code>/**/</code></td></tr></tbody></table><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; nerdcommenter 代码注释，主要\cc \cu</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot;add spaces after comment delimiters by default</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDSpaceDelims</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot; python 自动的会多加一个空格</span></span><br><span class="line"><span class="keyword">au</span> FileType <span class="keyword">python</span> <span class="keyword">let</span> <span class="variable">g:NERDSpaceDelims</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Use compact syntax for prettified multi-line comments</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDCompactSexyComs</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Align line-wise comment delimiters flush left instead of following code indentation</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDDefaultAlign</span> = <span class="string">&#x27;left&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Set a language to use its alternate delimiters by default</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDAltDelims_java</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自定义格式</span></span><br><span class="line"><span class="comment">&quot; let g:NERDCustomDelimiters = &#123; &#x27;c&#x27;: &#123; &#x27;left&#x27;: &#x27;/**&#x27;,&#x27;right&#x27;: &#x27;*/&#x27; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Allow commenting and inverting empty lines (useful when commenting a region)</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDCommentEmptyLines</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Enable trimming of trailing whitespace when uncommenting</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTrimTrailingWhitespace</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Enable NERDCommenterToggle to check all selected lines is commented or not</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDToggleCheckAllLines</span> = <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>接下来就是搞特定ide的代码提示、运行等环境的配置。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> plugin </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 插件 </tag>
            
            <tag> nvim </tag>
            
            <tag> code </tag>
            
            <tag> nerdcommenter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-IDE进化09 tagbar</title>
      <link href="posts/2be8ba26.html"/>
      <url>posts/2be8ba26.html</url>
      
        <content type="html"><![CDATA[<h2 id="tagbar-作用"><a href="#tagbar-作用" class="headerlink" title="tagbar 作用"></a>tagbar 作用</h2><p>实现函数之前的跳转，看下效果图，右侧那部分就是：</p><p><img src="/posts/2be8ba26/ctags.png" alt="tagbar效果"></p><p>右侧的列表就是ctags的显示的中间代码部分的函数列表，选择对应的函数，就可以在源码中进行跳转。</p><h2 id="tagbar-安装"><a href="#tagbar-安装" class="headerlink" title="tagbar 安装"></a>tagbar 安装</h2><p>添加插件部份，使用<code>Plug</code>安装就比较简单的，把下面部份的代码复制到<code>~/.config/nviminit.vim</code>下面，执行安装</p><blockquote><p>:PlugInstall</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; 展示当前文件的一些函数</span></span><br><span class="line"><span class="comment">&quot; 查看当前代码文件中的变量和函数列表的插件，</span></span><br><span class="line"><span class="comment">&quot; 可以切换和跳转到代码中对应的变量和函数的位置</span></span><br><span class="line"><span class="comment">&quot; 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持</span></span><br><span class="line">Plug <span class="string">&#x27;majutsushi/tagbar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; tagbar</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; 将tagbar的开关按键设置为 F5</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;F5&gt;</span> :TagbarToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置tagbar的宽度</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_width</span>=<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 可选，在某些情况下自动打开tagbar</span></span><br><span class="line"><span class="comment">&quot; autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()</span></span><br></pre></td></tr></table></figure><h3 id="插件地址"><a href="#插件地址" class="headerlink" title="插件地址"></a>插件地址</h3><p>插件地址: <a href="https://www.vim.org/scripts/script.php?script_id=3465">https://www.vim.org/scripts/script.php?script_id=3465</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代这里，代码注释插件也添加完成了，接下来先从<code>java</code>的语法高亮提示开始，添加上<code>java</code>的功能，后续可以再添加<code>go</code>和其实常用的语法提示。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ide </tag>
            
            <tag> vim </tag>
            
            <tag> 插件 </tag>
            
            <tag> plugin </tag>
            
            <tag> taglist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-IDE进化08-ranger文件管理</title>
      <link href="posts/1fd45dea.html"/>
      <url>posts/1fd45dea.html</url>
      
        <content type="html"><![CDATA[<p>这又是一个非常好用的插件，可以快速的浏览本地文件打开本地文件。如果是不同类型的文件如pdf，会调用本地系统的应用打开，就是这么好用，在习惯了vim后有个毛病，就是想要什么都可能通过命令行去操作，如果你也是这样，那这个插件非常适合你。</p><p>老规距，先上效果图</p><p><img src="/posts/1fd45dea/ranger%E6%95%88%E6%9E%9C.png" alt="ranger效果"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要先安装到系统中，首次安装不需要初始化也能使用，但是会比较丑，也没有预览功能，所以安装完成后，需要一些配置。</p><h3 id="验证安装效果"><a href="#验证安装效果" class="headerlink" title="验证安装效果"></a>验证安装效果</h3><blockquote><p>brew install ranger</p></blockquote><h3 id="iterm2插件"><a href="#iterm2插件" class="headerlink" title="iterm2插件"></a>iterm2插件</h3><p>mac 我使用的是 iter2 来使用nvim，所以能不能预览需要iterm2的支持，iterm2官方可以支持。<br>添加图片插件</p><blockquote><p>curl <a href="https://iterm2.com/utilities/imgcat">https://iterm2.com/utilities/imgcat</a> &gt; imgcat<br>chmod +x imgcat<br>mv imgcat /usr/local/bin</p></blockquote><p>这步是装上iterm2的图片预览插件，还需要配置 ranger 的预览功能。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>如何果不初始化将没有图片预览、边框等。</p><h3 id="生成配置"><a href="#生成配置" class="headerlink" title="生成配置"></a>生成配置</h3><blockquote><p>ranger --copy-config=all</p></blockquote><p>~/.config/ranger 目录生成以下5个文件:</p><ol><li>commands.py 与以下命令一起启动的命令</li><li>commands_full.py 全套命令</li><li>rc.conf 配置和绑定</li><li>rifle.conf 文件关联（用于打开文件的程序）</li><li>scope.sh 负责各种文件预览</li></ol><h3 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h3><p>修改 rc.conf，ranger 将可以直接在终端预览图片</p><blockquote><p>set preview_images true<br>set preview_images_method iterm2</p></blockquote><p><img src="/posts/1fd45dea/ranger%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88.png" alt="ranger图片预览"></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><blockquote><p>:help 里有所有快捷键<br>l 进入当前当标目录<br>h 后退<br>回车 打开应用</p></blockquote><p>g 快速跳转</p><blockquote><p>gh 跳至home<br>gd<br>gu</p></blockquote><h2 id="vim-集成"><a href="#vim-集成" class="headerlink" title="vim 集成"></a>vim 集成</h2><p>添加插件：</p><blockquote><p>Plug &#39;francoiscabrol/ranger.vim&#39;</p></blockquote><p>执行: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:PlugInstall 进行安装</span><br></pre></td></tr></table></figure><p>安装完成后，验证一下，调用ranger：</p><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首字母大写</span></span><br><span class="line">:Ranger</span><br></pre></td></tr></table></figure><p>也可以通过快捷键就行调用：<br>\ + f<br>这个操作就是先按一下 \ 后放开，再按一下f。</p><p>vim 对应插件官网: <a href="https://github.com/francoiscabrol/ranger.vim">https://github.com/francoiscabrol/ranger.vim</a></p><h3 id="当前完整配置"><a href="#当前完整配置" class="headerlink" title="当前完整配置"></a>当前完整配置</h3><p><code>vim-IDE</code>已经进化到了这一阶段，完成了：</p><ol><li>系统基础环境安装</li><li>vim 安装、基本配置</li><li>左侧文列表</li><li>状态栏</li><li>模糊搜索</li><li>文件浏览</li></ol><p>对于文本编辑是完全够用了。</p><h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; VIM 自身配置</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 编码设置</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line"><span class="keyword">set</span> enc=utf8</span><br><span class="line"><span class="keyword">set</span> fencs=utf8,gbk,gb2312,gb18030</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 启用插件</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">filetype</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Tab 转空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 列高亮</span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 记录上次光标位置</span></span><br><span class="line"><span class="keyword">au</span> BufReadPost * <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) | <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 分屏设置</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向右边</span></span><br><span class="line"><span class="keyword">map</span> td :<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向左边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ta</span> :<span class="keyword">set</span> nosplitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向上边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ts</span> :<span class="keyword">set</span> nosplitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向下边</span></span><br><span class="line"><span class="keyword">map</span> tw :<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 替换方向键为调节分屏大小</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-up&gt;</span> :<span class="keyword">res</span> -<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-down&gt;</span> :<span class="keyword">res</span> +<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-left&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>-<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-right&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>+<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按键映射</span></span><br><span class="line"><span class="keyword">map</span> W :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :<span class="keyword">wq</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> tq :q!<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">te</span> :terminal<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置 buff、空白字符的视觉提示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span> listchars=<span class="built_in">extend</span><span class="variable">s:</span>❯,precede<span class="variable">s:</span>❮,<span class="keyword">ta</span><span class="variable">b:</span>▸\</span><br><span class="line"><span class="comment">&quot; 这个提示在复制的时候是个问题</span></span><br><span class="line"><span class="comment">&quot; set list listchars=extends:❯,precedes:❮,tab:▸\,trail:˽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 其他的一些配置</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>   <span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>      <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="string">&quot;set relativenumber    &quot;</span> 相对行号</span><br><span class="line"><span class="keyword">set</span> wildmenu    <span class="comment">&quot;  让vim命令可用Tab补全</span></span><br><span class="line"><span class="keyword">set</span> hlsearch      <span class="comment">&quot; 变输入搜索词边高亮</span></span><br><span class="line"><span class="keyword">set</span> incsearch      <span class="comment">&quot; 光标自动跳转到搜索结果上</span></span><br><span class="line"><span class="keyword">set</span> t_ut=  <span class="comment">&quot;防止vim背景颜色错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 复制系统到 vim</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;C-y&gt;</span> <span class="comment">&quot;+y</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-p&gt;</span> <span class="comment">&quot;*p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--开始</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;mhinz/vim-startify&#x27;</span></span><br><span class="line"></span><br><span class="line"># ranger 插件</span><br><span class="line">Plug <span class="string">&#x27;francoiscabrol/ranger.vim&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--结束</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开关闭 NERDTree</span></span><br><span class="line"><span class="keyword">map</span> tt :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开vim时自动打开NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * NERDTree</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; \ + r 定位当前文件所在目录，这个很有用</span></span><br><span class="line"><span class="comment">&quot; 当前从左树进入，又要将当前目录定位到当前位置用这个</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span>r :NERDTreeFind<span class="symbol">&lt;cr&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="symbol">&lt;C-w&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;显示书签&quot;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span></span><br><span class="line"><span class="comment">&quot; 是否显示隐藏文件</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowHidden=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 忽略一下文件的显示</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore=[<span class="string">&#x27;\.pyc&#x27;</span>,<span class="string">&#x27;\~$&#x27;</span>,<span class="string">&#x27;\.swp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeGitStatusIndicatorMapCustom</span> = &#123;</span><br><span class="line">    \ <span class="string">&quot;Modified&quot;</span>  : <span class="string">&quot;✹&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Staged&quot;</span>    : <span class="string">&quot;✚&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Untracked&quot;</span> : <span class="string">&quot;✭&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Renamed&quot;</span>   : <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unmerged&quot;</span>  : <span class="string">&quot;═&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Deleted&quot;</span>   : <span class="string">&quot;✖&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Dirty&quot;</span>     : <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Clean&quot;</span>     : <span class="string">&quot;✔︎&quot;</span>,</span><br><span class="line">    \ <span class="string">&#x27;Ignored&#x27;</span>   : <span class="string">&#x27;☒&#x27;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unknown&quot;</span>   : <span class="string">&quot;?&quot;</span></span><br><span class="line">    \ &#125;</span><br><span class="line"><span class="comment">&quot; &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; Startify 设置</span></span><br><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; 修改其中的内容去获得更好的体验。</span></span><br><span class="line"><span class="comment">&quot;设置书签</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_bookmarks</span>= [</span><br><span class="line">            \ <span class="string">&#x27;~/workspaces/&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;~/.config/nvim/init.vim&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="comment">&quot;起始页显示的列表长度</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_files_number</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">&quot;自动加载session</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_session_autoload</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot;过滤列表，支持正则表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_skiplist</span> = [</span><br><span class="line">       \ <span class="string">&#x27;^/tmp&#x27;</span>,</span><br><span class="line">       \ ]</span><br><span class="line"><span class="comment">&quot;自定义Header和Footer</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_header</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|    Still waters run deep!    |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_footer</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|     Keep an open mind!       |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自己完成的脚本，判断打开文件是否存在。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">SomeCheck</span><span class="params">()</span></span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">filereadable</span>(<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;SpecificFile exists&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">autocmd</span> VimEnter * Startify</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> SomeCheck()</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;==============================================================================</span></span><br><span class="line"><span class="comment">&quot; ranger 插件</span></span><br><span class="line"><span class="comment">&quot;==============================================================================</span></span><br><span class="line"><span class="comment">&quot; 设置 leader 打开</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ranger_map_keys</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">f</span> :Ranger<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; bclose 插件</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeHijackNetrw</span> = <span class="number">0</span> <span class="comment">&quot; add this line if you use NERDTree</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ranger_replace_netrw</span> = <span class="number">1</span> <span class="comment">&quot; open ranger when vim open a directory</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这一步，可以有完成日常文件编译、脱离鼠标的大部份操作，但是对于开发来说还是不够的，尤其每一种编程语言的特点还不太相同。<br>相信大部分使用vim的朋友都是IT领域的从业人员，小部分是出于真爱使用vim，那是真爱。有很大一部份是为了装X。<br>但是如果能坚持研究到这一步，也是从路人到喜欢。</p><p>后面开始向着编程IDE方向继续进化，演示如何集成各种编程需要的插件，还可以开发自己的插件。<br>目前工作中大部分时间都是使用vim，已经完成能胜任90%的工作需要。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> plugin </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 插件 </tag>
            
            <tag> plugin </tag>
            
            <tag> ranger </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-IDE进化07-fzf搜索文件</title>
      <link href="posts/baaaf58b.html"/>
      <url>posts/baaaf58b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前已经介绍过了<code>ctrlp</code>这个工具为什么还需要<code>fzf</code>这个工具。<br>因为这两者在使用方式上有一些区别。<br><code>fzf</code>是可以直接在<code>mac</code>的终端上使用，并且还能够集成到<code>vim</code>当中使用。</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://github.com/junegunn/fzf">https://github.com/junegunn/fzf</a></p><p>FZF的Vim插件：</p><p><a href="https://github.com/junegunn/fzf.vim">https://github.com/junegunn/fzf.vim</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>fzf 这个工具，本身是mac下就可以使用的一个功能，而vim是可以调用外部应用来使用的。<br>所以需要新安装 fzf，再安装 vim 插件端。</p><h3 id="fzf-本机安装"><a href="#fzf-本机安装" class="headerlink" title="fzf 本机安装"></a>fzf 本机安装</h3><p>必须先安装，vim才能调用该插件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf</span><br><span class="line">~/.fzf/install</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>验证一下效果：</p><p>直接在 iterm2 下输入:fzf，就可以打开</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fzf</span><br></pre></td></tr></table></figure><p><img src="/posts/baaaf58b/fzf-mac%E7%AB%AF%E6%95%88%E6%9E%9C.png" alt="fzf-mac端效果"></p><p>control-j 和 control-k 上移和下移</p><p>带预览</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fzf --preview &#x27;cat &#123;&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/baaaf58b/fzf-mac%E5%B8%A6%E9%A2%84%E8%A7%88.png" alt="fzf-mac带预览"></p><p>使用这个工具完全可以代替<code>find</code>这个工具。</p><h2 id="结合vim中使用"><a href="#结合vim中使用" class="headerlink" title="结合vim中使用"></a>结合vim中使用</h2><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; fzf#install() 确保你安装了最新的 fzf</span></span><br><span class="line">Plug <span class="string">&#x27;junegunn/fzf&#x27;</span>, &#123; <span class="string">&#x27;do&#x27;</span>: &#123; -&gt; fzf#install() &#125; &#125;</span><br><span class="line">Plug <span class="string">&#x27;junegunn/fzf.vim&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><p>有很多命令很好用，下面是全部命令列表，然后一个一个介结。</p><table><thead><tr><th>Command</th><th>List</th></tr></thead><tbody><tr><td><code>:Files [PATH]</code></td><td>搜索文件</td></tr><tr><td><code>:GFiles [OPTS]</code></td><td>搜索 Git files (<code>git ls-files</code>)</td></tr><tr><td><code>:GFiles?</code></td><td>查看Git文件状态 (<code>git status</code>)</td></tr><tr><td><code>:Buffers</code></td><td>查看打开的buffer</td></tr><tr><td><code>:Colors</code></td><td>选择样式，这个超好用</td></tr><tr><td><code>:Ag [PATTERN]</code></td><td><a href="https://github.com/ggreer/the_silver_searcher">ag</a> search result (<code>ALT-A</code> to select all, <code>ALT-D</code> to deselect all)</td></tr><tr><td><code>:Rg [PATTERN]</code></td><td><a href="https://github.com/BurntSushi/ripgrep">rg</a> search result (<code>ALT-A</code> to select all, <code>ALT-D</code> to deselect all)</td></tr><tr><td><code>:Lines [QUERY]</code></td><td>Lines in loaded buffers</td></tr><tr><td><code>:BLines [QUERY]</code></td><td>Lines in the current buffer</td></tr><tr><td><code>:Tags [QUERY]</code></td><td>Tags in the project (<code>ctags -R</code>)</td></tr><tr><td><code>:BTags [QUERY]</code></td><td>Tags in the current buffer</td></tr><tr><td><code>:Marks</code></td><td>Marks，查看<code>vim</code>的mark，这个有点好用</td></tr><tr><td><code>:Windows</code></td><td>Windows</td></tr><tr><td><code>:Locate PATTERN</code></td><td><code>locate</code> command output</td></tr><tr><td><code>:History</code></td><td>查看文件打开历史</td></tr><tr><td><code>:History:</code></td><td>查看命令历史，和上面那个不一样</td></tr><tr><td><code>:History/</code></td><td>搜索命令历史</td></tr><tr><td><code>:Snippets</code></td><td>Snippets (<a href="https://github.com/SirVer/ultisnips">UltiSnips</a>)</td></tr><tr><td><code>:Commits</code></td><td>Git commits (requires <a href="https://github.com/tpope/vim-fugitive">fugitive.vim</a>)</td></tr><tr><td><code>:BCommits</code></td><td>Git commits for the current buffer; visual-select lines to track changes in the range</td></tr><tr><td><code>:Commands</code></td><td>Commands</td></tr><tr><td><code>:Maps</code></td><td>Normal mode mappings</td></tr><tr><td><code>:Helptags</code></td><td>Help tags <a href="https://github.com/junegunn/fzf.vim#helptags">1</a></td></tr><tr><td><code>:Filetypes</code></td><td>File types</td></tr></tbody></table><h3 id="查询文件-Files"><a href="#查询文件-Files" class="headerlink" title="查询文件 :Files"></a>查询文件 :Files</h3><p>查询文件，这个就是最普通的文件搜索。</p><p><img src="/posts/baaaf58b/vim-fzf%E4%BD%BF%E7%94%A8.png" alt="vim-fzf使用"></p><h3 id="查询git文件-GFiles"><a href="#查询git文件-GFiles" class="headerlink" title="查询git文件 :GFiles"></a>查询git文件 :GFiles</h3><p>查询被git跟踪的文件，这个我不常用，因为有更别的更好用的工具如<code>lzaygit</code>。</p><p><img src="/posts/baaaf58b/GFiles%E6%95%88%E6%9E%9C.jpg" alt="GFiles效果"></p><h3 id="查询命令列表-Commands"><a href="#查询命令列表-Commands" class="headerlink" title="查询命令列表 :Commands"></a>查询命令列表 :Commands</h3><p>查看所有<code>vim</code>已安装的插件的命令，这个很强！！</p><p><img src="/posts/baaaf58b/Commands%E6%95%88%E6%9E%9C.jpg" alt="Commands效果"></p><h3 id="查看最近打开历史-History"><a href="#查看最近打开历史-History" class="headerlink" title="查看最近打开历史 :History"></a>查看最近打开历史 :History</h3><p>查看执行过的历史命令，自行偿试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:History</span><br><span class="line">:History:</span><br><span class="line">::History/</span><br></pre></td></tr></table></figure><h3 id="查看Marks标记"><a href="#查看Marks标记" class="headerlink" title="查看Marks标记"></a>查看Marks标记</h3><p>把通过<code>m</code>标记过的位置罗列出来，比如平时用的最多的<code>ma</code>，因为多了也记不住，这个就解决了标记多了记不住的问题。</p><p><img src="/posts/baaaf58b/Marks%E6%95%88%E6%9E%9C.jpg" alt="Marks效果"></p><h3 id="查询错误提示"><a href="#查询错误提示" class="headerlink" title="查询错误提示"></a>查询错误提示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">space a</span><br></pre></td></tr></table></figure><p>展示后，可以模糊搜索，也可以直接回车跳到想去的位置，这些都是<code>markdown</code>的表格当中包含了一些检查认为有问题的地方。<br>检查根据打开的文件类型进行检查，如果打开的是<code>.java</code>或<code>.go</code>的文件，也会进行对应的语法检查。</p><p><img src="/posts/baaaf58b/%E6%9F%A5%E7%9C%8B%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA.jpg" alt="查看错误提示"></p><h3 id="样式选择-Colors"><a href="#样式选择-Colors" class="headerlink" title="样式选择 :Colors"></a>样式选择 :Colors</h3><p>这个有点意思，可以选择需要的样式，当然这些校式是我之前就安装过的，但是可以这样直接选择，方便不少。<br>选3种效果看下：</p><p><img src="/posts/baaaf58b/Colors%E6%95%88%E6%9E%9C1.jpg" alt="Colors效果1"></p><p><img src="/posts/baaaf58b/Colors%E6%95%88%E6%9E%9C2.jpg" alt="Colors效果2"></p><p><img src="/posts/baaaf58b/Colors%E6%95%88%E6%9E%9C3.jpg" alt="Colors效果3"></p><h3 id="查看普通模式下按键映射-Maps"><a href="#查看普通模式下按键映射-Maps" class="headerlink" title="查看普通模式下按键映射 :Maps"></a>查看普通模式下按键映射 :Maps</h3><p>F5-12是我设置的<code>go</code>的快键键，包括运行和debug的键键。</p><p><img src="/posts/baaaf58b/Maps%E6%95%88%E6%9E%9C.jpg" alt="Maps效果"></p><p>到这里，我们的<code>vim-IDE</code>进化在文本操作这块基本已经差不多了，接下来就是关于编程方面的配置。<br><code>fzf</code>还是非常强大的，不论是使用，还是可视化的窗口，用起来还是比较爽。</p><h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><p>到了一这步的完整配置如下，后续基于这个配置，继续往下进行配置。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; VIM 自身配置</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 编码设置</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line"><span class="keyword">set</span> enc=utf8</span><br><span class="line"><span class="keyword">set</span> fencs=utf8,gbk,gb2312,gb18030</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 启用插件</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">filetype</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Tab 转空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 列高亮</span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 记录上次光标位置</span></span><br><span class="line"><span class="keyword">au</span> BufReadPost * <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) | <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 分屏设置</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向右边</span></span><br><span class="line"><span class="keyword">map</span> td :<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向左边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ta</span> :<span class="keyword">set</span> nosplitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向上边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ts</span> :<span class="keyword">set</span> nosplitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向下边</span></span><br><span class="line"><span class="keyword">map</span> tw :<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 替换方向键为调节分屏大小</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-up&gt;</span> :<span class="keyword">res</span> -<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-down&gt;</span> :<span class="keyword">res</span> +<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-left&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>-<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-right&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>+<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按键映射</span></span><br><span class="line"><span class="keyword">map</span> W :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :<span class="keyword">wq</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> tq :q!<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">te</span> :terminal<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置 buff、空白字符的视觉提示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span> listchars=<span class="built_in">extend</span><span class="variable">s:</span>❯,precede<span class="variable">s:</span>❮,<span class="keyword">ta</span><span class="variable">b:</span>▸\</span><br><span class="line"><span class="comment">&quot; 这个提示在复制的时候是个问题</span></span><br><span class="line"><span class="comment">&quot; set list listchars=extends:❯,precedes:❮,tab:▸\,trail:˽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 其他的一些配置</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>   <span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>      <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="string">&quot;set relativenumber    &quot;</span> 相对行号</span><br><span class="line"><span class="keyword">set</span> wildmenu    <span class="comment">&quot;  让vim命令可用Tab补全</span></span><br><span class="line"><span class="keyword">set</span> hlsearch      <span class="comment">&quot; 变输入搜索词边高亮</span></span><br><span class="line"><span class="keyword">set</span> incsearch      <span class="comment">&quot; 光标自动跳转到搜索结果上</span></span><br><span class="line"><span class="keyword">set</span> t_ut=  <span class="comment">&quot;防止vim背景颜色错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 复制系统到 vim</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;C-y&gt;</span> <span class="comment">&quot;+y</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-p&gt;</span> <span class="comment">&quot;*p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--开始</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;mhinz/vim-startify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--结束</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开关闭 NERDTree</span></span><br><span class="line"><span class="keyword">map</span> tt :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开vim时自动打开NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * NERDTree</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; \ + r 定位当前文件所在目录，这个很有用</span></span><br><span class="line"><span class="comment">&quot; 当前从左树进入，又要将当前目录定位到当前位置用这个</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span>r :NERDTreeFind<span class="symbol">&lt;cr&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="symbol">&lt;C-w&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;显示书签&quot;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span></span><br><span class="line"><span class="comment">&quot; 是否显示隐藏文件</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowHidden=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 忽略一下文件的显示</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore=[<span class="string">&#x27;\.pyc&#x27;</span>,<span class="string">&#x27;\~$&#x27;</span>,<span class="string">&#x27;\.swp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeGitStatusIndicatorMapCustom</span> = &#123;</span><br><span class="line">    \ <span class="string">&quot;Modified&quot;</span>  : <span class="string">&quot;✹&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Staged&quot;</span>    : <span class="string">&quot;✚&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Untracked&quot;</span> : <span class="string">&quot;✭&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Renamed&quot;</span>   : <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unmerged&quot;</span>  : <span class="string">&quot;═&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Deleted&quot;</span>   : <span class="string">&quot;✖&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Dirty&quot;</span>     : <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Clean&quot;</span>     : <span class="string">&quot;✔︎&quot;</span>,</span><br><span class="line">    \ <span class="string">&#x27;Ignored&#x27;</span>   : <span class="string">&#x27;☒&#x27;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unknown&quot;</span>   : <span class="string">&quot;?&quot;</span></span><br><span class="line">    \ &#125;</span><br><span class="line"><span class="comment">&quot; &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; Startify 设置</span></span><br><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; 修改其中的内容去获得更好的体验。</span></span><br><span class="line"><span class="comment">&quot;设置书签</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_bookmarks</span>= [</span><br><span class="line">            \ <span class="string">&#x27;~/workspaces/&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;~/.config/nvim/init.vim&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="comment">&quot;起始页显示的列表长度</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_files_number</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">&quot;自动加载session</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_session_autoload</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot;过滤列表，支持正则表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_skiplist</span> = [</span><br><span class="line">       \ <span class="string">&#x27;^/tmp&#x27;</span>,</span><br><span class="line">       \ ]</span><br><span class="line"><span class="comment">&quot;自定义Header和Footer</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_header</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|    Still waters run deep!    |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_footer</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|     Keep an open mind!       |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自己完成的脚本，判断打开文件是否存在。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">SomeCheck</span><span class="params">()</span></span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">filereadable</span>(<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;SpecificFile exists&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">autocmd</span> VimEnter * Startify</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> SomeCheck()</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/junegunn/fzf">https://github.com/junegunn/fzf</a><br><a href="https://github.com/junegunn/fzf/wiki/Examples">https://github.com/junegunn/fzf/wiki/Examples</a><br><a href="https://github.com/junegunn/fzf.vim">https://github.com/junegunn/fzf.vim</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> plugin </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ide </tag>
            
            <tag> vim </tag>
            
            <tag> 插件 </tag>
            
            <tag> plugin </tag>
            
            <tag> fzf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron-节点-SR单节点搭建</title>
      <link href="posts/fca30821.html"/>
      <url>posts/fca30821.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>波场的产块节点称为 Supper Node，官方文档称之为SR。</p></blockquote><p>波场使用DPOS共识算法，这个算法的特点是并不基于算力，而是基于股权证明来实现共识和产块。<br>DPOS共识算法后面会专门讲到一期。</p><h2 id="Supper-Node-SR"><a href="#Supper-Node-SR" class="headerlink" title="Supper Node(SR)"></a>Supper Node(SR)</h2><p>以下称Supper Node 为SR，官方SR节点为产块节点，共有<code>27</code>个SR节点。<br>这27个SR节点每隔3秒轮流负责产块，注意是<code>轮流</code>产块，即：节点A产块--&gt;节点B产块...依次类推。<br>这种产块方式相较于POW的共识，更加的节能省电，但是缺点也很明显，就是节点理论是更容易被控制作恶，只要半数节点被控制或者半数节点掌握在某个团队中，对于社区来说，并不为是一件好事，缺乏透明度。</p><p>成为 SR 的好处是，SR负责产块，产块后会获得产块奖励，SR可以产块后，再将奖励<code>分发</code>给投票者。</p><h2 id="产块"><a href="#产块" class="headerlink" title="产块"></a>产块</h2><h3 id="超级代表"><a href="#超级代表" class="headerlink" title="超级代表"></a>超级代表</h3><p>产块者由所有用户投票，得票最多的<code>128个超级代表</code>成员中选出27个进行产块，实际官方的27个产块SR是在配置文件中写死的。<br>这27个SR节点即为产块者，如果其中一个节点挂掉后，会从超级代表中的成员节点顶上，继续进行产块。</p><h3 id="如何产块"><a href="#如何产块" class="headerlink" title="如何产块"></a>如何产块</h3><p>27个SR节点，分别进行产块。<br>27个节点分属于不同的机器上，如何确定严格的产块顺序。<br>这个是DPOS的灵魂，如果节点无法按照严格的顺序进行产块，那整个DPOS将无法成立。</p><p>通过确认创世块的时间点，并在启动时，通过Hash算法，算出自己的Slot来排序。</p><h3 id="维护期"><a href="#维护期" class="headerlink" title="维护期"></a>维护期</h3><p>出块轮：波场设定每6个小时作为一个出块轮，称为一个Epoch。每个出块轮最后的2个出块时间是一个维护期。每个出块轮的维护期决定下一个出块轮的出块顺序。</p><p>维护期：波场设定是2个区块时间，即6秒钟。这段时间用于统计候选人得票数。因为24个小时有4个出块轮，自然就有4个维护期，维护期中不进行区块生产，主要用来确定下个出块轮的出块顺序。</p><p><a href="https://tronscan.org/#/sr/representatives">查看超级代表</a></p><h2 id="搭建SR"><a href="#搭建SR" class="headerlink" title="搭建SR"></a>搭建SR</h2><p>搭建私有网络，可以验证SR节点的产块相关的原理和流程，甚至可以通过源码自己塔建一条自己的链。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>具备至少两个钱包账户的私钥与地址；</li><li>至少部署一个SuperNode用于出块；</li><li>至少部署一个FullNode节点用于同步区块、广播交易；</li><li>SuperNode与FullNode组成了私有网络，可以进行网络发现、区块同步、广播交易；</li></ol><p>波场的 SupperNode 是不对外暴露，最少需要一个FullNode成为一个对外的入口，将交易和区块转发到SupperNode节点当中。</p><h3 id="生成钱包账户"><a href="#生成钱包账户" class="headerlink" title="生成钱包账户"></a>生成钱包账户</h3><p>钱包账户通过TRON提供的钱包进行生成，有移动端和浏览器插件。<br>为了截图文件，直接通过浏览器插件进行生成账户和私钥。</p><img src="/posts/fca30821/创建钱包.png" width="50%" height="50%"><p>导出私钥</p><img src="/posts/fca30821/导出私钥.png" width="50%" height="50%"><h3 id="准备文件和程序"><a href="#准备文件和程序" class="headerlink" title="准备文件和程序"></a>准备文件和程序</h3><p>以下程序和配置文件放在同一个目录下，推荐直接下载官方源码进行编译，这样可以直接从项目中获得所有需要的文件、配置文件等，主要需要包含:</p><ol><li>配置文件 private_net_config.conf</li><li>主程序 FullNode.jar</li><li>启动脚本 start.sh(可选)</li></ol><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>获取官方提供的配置文件，可以单击这条链接查看配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/tronprotocol/tron-deployment/master/private_net_config.conf</span><br></pre></td></tr></table></figure><h4 id="private-net-config-conf"><a href="#private-net-config-conf" class="headerlink" title="private_net_config.conf"></a>private_net_config.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line">net &#123;</span><br><span class="line">  type &#x3D; mainnet</span><br><span class="line">  # type &#x3D; testnet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">storage &#123;</span><br><span class="line">  # Directory for storing persistent data</span><br><span class="line"></span><br><span class="line">  db.version &#x3D; 2,</span><br><span class="line">  db.engine &#x3D; &quot;LEVELDB&quot;,</span><br><span class="line">  db.directory &#x3D; &quot;database&quot;,</span><br><span class="line">  index.directory &#x3D; &quot;index&quot;,</span><br><span class="line"></span><br><span class="line">  # You can custom these 14 databases&#39; configs:</span><br><span class="line"></span><br><span class="line">  # account, account-index, asset-issue, block, block-index,</span><br><span class="line">  # block_KDB, peers, properties, recent-block, trans,</span><br><span class="line">  # utxo, votes, witness, witness_schedule.</span><br><span class="line"></span><br><span class="line">  # Otherwise, db configs will remain defualt and data will be stored in</span><br><span class="line">  # the path of &quot;output-directory&quot; or which is set by &quot;-d&quot; (&quot;--output-directory&quot;).</span><br><span class="line"></span><br><span class="line">  # Attention: name is a required field that must be set !!!</span><br><span class="line">  properties &#x3D; [</span><br><span class="line">    &#x2F;&#x2F;    &#123;</span><br><span class="line">    &#x2F;&#x2F;      name &#x3D; &quot;account&quot;,</span><br><span class="line">    &#x2F;&#x2F;      path &#x3D; &quot;storage_directory_test&quot;,</span><br><span class="line">    &#x2F;&#x2F;      createIfMissing &#x3D; true,</span><br><span class="line">    &#x2F;&#x2F;      paranoidChecks &#x3D; true,</span><br><span class="line">    &#x2F;&#x2F;      verifyChecksums &#x3D; true,</span><br><span class="line">    &#x2F;&#x2F;      compressionType &#x3D; 1,        &#x2F;&#x2F; compressed with snappy</span><br><span class="line">    &#x2F;&#x2F;      blockSize &#x3D; 4096,           &#x2F;&#x2F; 4  KB &#x3D;         4 * 1024 B</span><br><span class="line">    &#x2F;&#x2F;      writeBufferSize &#x3D; 10485760, &#x2F;&#x2F; 10 MB &#x3D; 10 * 1024 * 1024 B</span><br><span class="line">    &#x2F;&#x2F;      cacheSize &#x3D; 10485760,       &#x2F;&#x2F; 10 MB &#x3D; 10 * 1024 * 1024 B</span><br><span class="line">    &#x2F;&#x2F;      maxOpenFiles &#x3D; 100</span><br><span class="line">    &#x2F;&#x2F;    &#125;,</span><br><span class="line">    &#x2F;&#x2F;    &#123;</span><br><span class="line">    &#x2F;&#x2F;      name &#x3D; &quot;account-index&quot;,</span><br><span class="line">    &#x2F;&#x2F;      path &#x3D; &quot;storage_directory_test&quot;,</span><br><span class="line">    &#x2F;&#x2F;      createIfMissing &#x3D; true,</span><br><span class="line">    &#x2F;&#x2F;      paranoidChecks &#x3D; true,</span><br><span class="line">    &#x2F;&#x2F;      verifyChecksums &#x3D; true,</span><br><span class="line">    &#x2F;&#x2F;      compressionType &#x3D; 1,        &#x2F;&#x2F; compressed with snappy</span><br><span class="line">    &#x2F;&#x2F;      blockSize &#x3D; 4096,           &#x2F;&#x2F; 4  KB &#x3D;         4 * 1024 B</span><br><span class="line">    &#x2F;&#x2F;      writeBufferSize &#x3D; 10485760, &#x2F;&#x2F; 10 MB &#x3D; 10 * 1024 * 1024 B</span><br><span class="line">    &#x2F;&#x2F;      cacheSize &#x3D; 10485760,       &#x2F;&#x2F; 10 MB &#x3D; 10 * 1024 * 1024 B</span><br><span class="line">    &#x2F;&#x2F;      maxOpenFiles &#x3D; 100</span><br><span class="line">    &#x2F;&#x2F;    &#125;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># this part of config is used to node discovery.</span><br><span class="line">node.discovery &#x3D; &#123;</span><br><span class="line">  enable &#x3D; false  # you should set this entry value with ture if you want your node can be discovered by other node.</span><br><span class="line">  persist &#x3D; true  # this entry is used to determined to whether storing the peers in the database or not.</span><br><span class="line">  bind.ip &#x3D; &quot;&quot;</span><br><span class="line">  external.ip &#x3D; 127.0.0.1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># this part of config is used to set backup node for witness service.</span><br><span class="line">node.backup &#123;</span><br><span class="line">  port &#x3D; 10001</span><br><span class="line">  priority &#x3D; 8</span><br><span class="line">  members &#x3D; [</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">  # trust node for solidity node</span><br><span class="line">  # trustNode &#x3D; &quot;ip:port&quot;</span><br><span class="line">  trustNode &#x3D; &quot;127.0.0.1:50051&quot;</span><br><span class="line"></span><br><span class="line">  # expose extension api to public or not</span><br><span class="line">  walletExtensionApi &#x3D; true</span><br><span class="line"></span><br><span class="line">  listen.port &#x3D; 16666</span><br><span class="line"></span><br><span class="line">  connection.timeout &#x3D; 2</span><br><span class="line"></span><br><span class="line">  tcpNettyWorkThreadNum &#x3D; 0</span><br><span class="line"></span><br><span class="line">  udpNettyWorkThreadNum &#x3D; 1</span><br><span class="line"></span><br><span class="line">  # Number of validate sign thread, default availableProcessors &#x2F; 2</span><br><span class="line">  # validateSignThreadNum &#x3D; 16</span><br><span class="line"></span><br><span class="line">  maxActiveNodes &#x3D; 30</span><br><span class="line"></span><br><span class="line">  maxActiveNodesWithSameIp &#x3D; 2</span><br><span class="line"></span><br><span class="line">  minParticipationRate &#x3D; 0</span><br><span class="line"></span><br><span class="line">  # check the peer data transfer ,disconnect factor</span><br><span class="line">  disconnectNumberFactor &#x3D; 0.4</span><br><span class="line">  maxConnectNumberFactor &#x3D; 0.8</span><br><span class="line">  receiveTcpMinDataLength &#x3D; 2048</span><br><span class="line">  isOpenFullTcpDisconnect &#x3D; true</span><br><span class="line"></span><br><span class="line">  p2p &#123;</span><br><span class="line">    version &#x3D; 1 # 11111: mainnet; 20180622: testnet; you can set other number when you deploy one private net, but the node must have the same number in some private net. </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  active &#x3D; [</span><br><span class="line">    # Active establish connection in any case</span><br><span class="line">    # Sample entries:</span><br><span class="line">    # &quot;ip:port&quot;,</span><br><span class="line">    # &quot;ip:port&quot;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  passive &#x3D; [</span><br><span class="line">    # Passive accept connection in any case</span><br><span class="line">    # Sample entries:</span><br><span class="line">    # &quot;ip:port&quot;,</span><br><span class="line">    # &quot;ip:port&quot;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  http &#123;</span><br><span class="line">    fullNodePort &#x3D; 16667</span><br><span class="line">    solidityPort &#x3D; 16668</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rpc &#123;</span><br><span class="line">    port &#x3D; 16669</span><br><span class="line"></span><br><span class="line">    # Number of gRPC thread, default availableProcessors &#x2F; 2</span><br><span class="line">    # thread &#x3D; 16</span><br><span class="line"></span><br><span class="line">    # The maximum number of concurrent calls permitted for each incoming connection</span><br><span class="line">    # maxConcurrentCallsPerConnection &#x3D;</span><br><span class="line"></span><br><span class="line">    # The HTTP&#x2F;2 flow control window, default 1MB</span><br><span class="line">    # flowControlWindow &#x3D;</span><br><span class="line"></span><br><span class="line">    # Connection being idle for longer than which will be gracefully terminated</span><br><span class="line">    maxConnectionIdleInMillis &#x3D; 60000</span><br><span class="line"></span><br><span class="line">    # Connection lasting longer than which will be gracefully terminated</span><br><span class="line">    # maxConnectionAgeInMillis &#x3D;</span><br><span class="line"></span><br><span class="line">    # The maximum message size allowed to be received on the server, default 4MB</span><br><span class="line">    # maxMessageSize &#x3D;</span><br><span class="line"></span><br><span class="line">    # The maximum size of header list allowed to be received, default 8192</span><br><span class="line">    # maxHeaderListSize &#x3D;</span><br><span class="line"></span><br><span class="line">    # Transactions can only be broadcast if the number of effective connections is reached.</span><br><span class="line">    minEffectiveConnection &#x3D; 0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seed.node &#x3D; &#123;</span><br><span class="line">  # List of the seed nodes. This is used to enable the node can connect when join one net at first.</span><br><span class="line">  # If you deploy one private net, you must add some &quot;ip:port&quot; here for other node connecting.</span><br><span class="line">  # Seed nodes are stable full nodes, and the first SuperNode must be inclued in.</span><br><span class="line">  # example:</span><br><span class="line">  # ip.list &#x3D; [</span><br><span class="line">  #   &quot;ip:port&quot;,</span><br><span class="line">  #   &quot;ip:port&quot;</span><br><span class="line">  # ]</span><br><span class="line">  ip.list &#x3D; [</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">genesis.block &#x3D; &#123;</span><br><span class="line">  # Reserve balance</span><br><span class="line">  assets &#x3D; [</span><br><span class="line">    &#123;</span><br><span class="line">      accountName &#x3D; &quot;Zion&quot;</span><br><span class="line">      accountType &#x3D; &quot;AssetIssue&quot;</span><br><span class="line">      address &#x3D; &quot;TPL66VK2gCXNCD7EJg9pgJRfqcRazjhUZY&quot;</span><br><span class="line">      balance &#x3D; &quot;95000000000000000&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      accountName &#x3D; &quot;Sun&quot;</span><br><span class="line">      accountType &#x3D; &quot;AssetIssue&quot;</span><br><span class="line">      address &#x3D; &quot;TWsm8HtU2A5eEzoT8ev8yaoFjHsXLLrckb&quot;</span><br><span class="line">      balance &#x3D; &quot;5000000000000000&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      accountName &#x3D; &quot;Blackhole&quot;</span><br><span class="line">      accountType &#x3D; &quot;AssetIssue&quot;</span><br><span class="line">      address &#x3D; &quot;TSJD5rdu6wZXP7F2m3a3tn8Co3JcMjtBip&quot;</span><br><span class="line">      balance &#x3D; &quot;-9223372036854775808&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      accountName &#x3D; &quot;TestA&quot;</span><br><span class="line">      accountType &#x3D; &quot;AssetIssue&quot;</span><br><span class="line">      address &#x3D; &quot;TVdyt1s88BdiCjKt6K2YuoSmpWScZYK1QF&quot;</span><br><span class="line">      balance &#x3D; &quot;1000000000000000&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      accountName &#x3D; &quot;TestB&quot;</span><br><span class="line">      accountType &#x3D; &quot;AssetIssue&quot;</span><br><span class="line">      address &#x3D; &quot;TCNVmGtkfknHpKSZXepZDXRowHF7kosxcv&quot;</span><br><span class="line">      balance &#x3D; &quot;1000000000000000&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      accountName &#x3D; &quot;TestC&quot;</span><br><span class="line">      accountType &#x3D; &quot;AssetIssue&quot;</span><br><span class="line">      address &#x3D; &quot;TAbzgkG8p3yF5aywKVgq9AaAu6hvF2JrVC&quot;</span><br><span class="line">      balance &#x3D; &quot;1000000000000000&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      accountName &#x3D; &quot;TestD&quot;</span><br><span class="line">      accountType &#x3D; &quot;AssetIssue&quot;</span><br><span class="line">      address &#x3D; &quot;TMmmvwvkBPBv3Gkw9cGKbZ8PLznYkTu3ep&quot;</span><br><span class="line">      balance &#x3D; &quot;1000000000000000&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      accountName &#x3D; &quot;TestE&quot;</span><br><span class="line">      accountType &#x3D; &quot;AssetIssue&quot;</span><br><span class="line">      address &#x3D; &quot;TBJHZu4Sm86aWHtt6VF6KQSzot8vKTuTKx&quot;</span><br><span class="line">      balance &#x3D; &quot;1000000000000000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  witnesses &#x3D; [</span><br><span class="line">    &#123;</span><br><span class="line">      address: TPL66VK2gCXNCD7EJg9pgJRfqcRazjhUZY,</span><br><span class="line">      url &#x3D; &quot;http:&#x2F;&#x2F;tronstudio.com&quot;,</span><br><span class="line">      voteCount &#x3D; 10000</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  timestamp &#x3D; &quot;0&quot; #2017-8-26 12:00:00</span><br><span class="line"></span><br><span class="line">  parentHash &#x3D; &quot;957dc2d350daecc7bb6a38f3938ebde0a0c1cedafe15f0edae4256a2907449f6&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">localwitness &#x3D; [</span><br><span class="line">  da146374a75310b9666e834ee4ad0866d6f4035967bfc76217c5a495fff9f0d0  # you must enable this value and the witness address are match.</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">#localwitnesskeystore &#x3D; [</span><br><span class="line">#  &quot;src&#x2F;main&#x2F;resources&#x2F;localwitnesskeystore.json&quot;  # if you do not set the localwitness above, you must set this value.Otherwise,your SuperNode can not produce the block. </span><br><span class="line">#]</span><br><span class="line"></span><br><span class="line">block &#x3D; &#123;</span><br><span class="line">  needSyncCheck &#x3D; false # first node : false, other : true</span><br><span class="line">  maintenanceTimeInterval &#x3D; 21600000 &#x2F;&#x2F; 1 day: 86400000(ms), 6 hours: 21600000(ms)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vm &#x3D; &#123;</span><br><span class="line">  supportConstant &#x3D; true</span><br><span class="line">  minTimeRatio &#x3D; 0.0</span><br><span class="line">  maxTimeRatio &#x3D; 5.0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">committee &#x3D; &#123;</span><br><span class="line">  allowCreationOfContracts &#x3D; 1  &#x2F;&#x2F;mainnet:0 (reset by committee),test:1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">event.subscribe &#x3D; &#123;</span><br><span class="line">  native &#x3D; &#123;</span><br><span class="line">    useNativeQueue &#x3D; true &#x2F;&#x2F; if true, use native message queue, else use event plugin.</span><br><span class="line">    bindport &#x3D; 5555 &#x2F;&#x2F; bind port</span><br><span class="line">    sendqueuelength &#x3D; 1000 &#x2F;&#x2F;max length of send queue</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  path &#x3D; &quot;&quot; &#x2F;&#x2F; absolute path of plugin</span><br><span class="line">  server &#x3D; &quot;&quot; &#x2F;&#x2F; target server address to receive event triggers</span><br><span class="line">  dbconfig &#x3D; &quot;&quot; &#x2F;&#x2F; dbname|username|password</span><br><span class="line">  contractParse &#x3D; true,</span><br><span class="line">  topics &#x3D; [</span><br><span class="line">    &#123;</span><br><span class="line">      triggerName &#x3D; &quot;block&quot; &#x2F;&#x2F; block trigger, the value can&#39;t be modified</span><br><span class="line">      enable &#x3D; false</span><br><span class="line">      topic &#x3D; &quot;block&quot; &#x2F;&#x2F; plugin topic, the value could be modified</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      triggerName &#x3D; &quot;transaction&quot;</span><br><span class="line">      enable &#x3D; false</span><br><span class="line">      topic &#x3D; &quot;transaction&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      triggerName &#x3D; &quot;contractevent&quot;</span><br><span class="line">      enable &#x3D; false</span><br><span class="line">      topic &#x3D; &quot;contractevent&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      triggerName &#x3D; &quot;contractlog&quot;</span><br><span class="line">      enable &#x3D; false</span><br><span class="line">      topic &#x3D; &quot;contractlog&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      triggerName &#x3D; &quot;solidity&quot; &#x2F;&#x2F; solidity block event trigger, the value can&#39;t be modified</span><br><span class="line">      enable &#x3D; true            &#x2F;&#x2F; the default value is true</span><br><span class="line">      topic &#x3D; &quot;solidity&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  filter &#x3D; &#123;</span><br><span class="line">    fromblock &#x3D; &quot;&quot; &#x2F;&#x2F; the value could be &quot;&quot;, &quot;earliest&quot; or a specified block number as the beginning of the queried range</span><br><span class="line">    toblock &#x3D; &quot;&quot; &#x2F;&#x2F; the value could be &quot;&quot;, &quot;latest&quot; or a specified block number as end of the queried range</span><br><span class="line">    contractAddress &#x3D; [</span><br><span class="line">      &quot;&quot; &#x2F;&#x2F; contract address you want to subscribe, if it&#39;s set to &quot;&quot;, you will receive contract logs&#x2F;events with any contract address.</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    contractTopic &#x3D; [</span><br><span class="line">      &quot;&quot; &#x2F;&#x2F; contract topic you want to subscribe, if it&#39;s set to &quot;&quot;, you will receive contract logs&#x2F;events with any contract topic.</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要改几处配置</p><ol><li>在localwitness中添加自己的私钥</li><li>设置genesis.block.witnesses为私钥对应的地址</li><li>设置p2p.version为除了11111之外的任意正整数，如33333</li><li>第1个SR设置needSyncCheck为false，其他可以设置为true</li><li>设置node.discovery.enable为true</li></ol><p>解释一下上面的配置，官方没有说明，从源码中去分析出来的：</p><ol><li>如果自己是SR时，需要配置localwitness，开启本地模式，将自己初始化为witness</li></ol><img src="/posts/fca30821/localwitness.png" width="70%"><ol start="2"><li>配置自己成为默认的 witnesses，源码中分析，当轮到节点产块时，程序会从SR列表中获得默认SR，所以需要先进行配置</li><li>p2p.version，TRON官方主链中使用的是11111，为了不跟主链冲突<img src="/posts/fca30821/p2p_version.png" width="80%"></li><li>needSyncCheck 用来控制是否需要同步区块，当前只有一个节点，不会需要同步区块的</li></ol><img src="/posts/fca30821/needSyncCheck.png" width="70%"><ol start="5"><li>node.discovery.enable 这项是开启节点发现:</li></ol><img src="/posts/fca30821/node.discovery.enable配置.png" width="70%"><p>对源码有兴趣的朋友自行查看官方源码。</p><h4 id="获取最新的程序"><a href="#获取最新的程序" class="headerlink" title="获取最新的程序"></a>获取最新的程序</h4><p>从官方github上选择最新的release版本，选择<code>FullNode.jar</code>。</p><p>官方github: <a href="https://github.com/tronprotocol/java-tron">https://github.com/tronprotocol/java-tron</a></p><p>release: <a href="https://github.com/tronprotocol/java-tron/releases">https://github.com/tronprotocol/java-tron/releases</a></p><img src="/posts/fca30821/tron-release.png"><h4 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h4><p>获取官方启动脚本，这个脚本里对内存做了限制，最少不能低于8G内存，否则脚本限制不让启动。<br>如果内存低于这个配置的话，建议直接使用命令启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/tronprotocol/java-tron/develop/start.sh</span><br></pre></td></tr></table></figure><p>准备工作就完成了，然后就可以启动程序了。</p><h2 id="启动私链"><a href="#启动私链" class="headerlink" title="启动私链"></a>启动私链</h2><p>配置好之后，就可以进行本地私链部署并生产区块了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh start.sh -w</span><br></pre></td></tr></table></figure><p>如果不想使用脚本，直接手动启动，直接使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -Xmx6g -jar FullNode.jar  --witness  -c private_net_config.conf &amp;&gt;/dev/null &amp;</span><br></pre></td></tr></table></figure><p>启动后会生成 logs/tron.log，查看日志，关键日志: <code>generated by myself</code>说明这块是自己产的块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ hash&#x3D;0000000000000055cf5362a54801104d9d261b652e9db7b099c99247527b833d</span><br><span class="line">number&#x3D;85</span><br><span class="line">parentId&#x3D;000000000000005413ae634329790c4b944b18591a1a1b1705d65a3b6819f2a7</span><br><span class="line">witness address&#x3D;41763087eab1c1387954698d451ff9c6215b189430</span><br><span class="line">generated by myself&#x3D;true</span><br><span class="line">generate time&#x3D;2022-02-04 01:19:57.0</span><br><span class="line">account root&#x3D;0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">txs are empty</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>查看SR完整产块日志</p><p><img src="/posts/fca30821/SR%E4%BA%A7%E5%9D%97%E6%97%A5%E5%BF%97.png" alt="SR产块日志"></p><p>如果看到 <code>generate time</code> 这个日志，说明已经成功产块了，但是FullNode还没有部署，怎么就产块了，没有问题吗。<br>FullNode 的<code>主要</code>做用是转发，如果没有FullNode，SR接收不到交易和区块，产的块都是空块，在实际使用中需要测试SR的产块相关的功能，最好是部署上FullNode，搭建成一个完整的链。<br>节点个数的话，FullNode不限个数，SR最多27个，当然可以改源码调整个数，只要保证最终有2/3个节点来保证能完成共识就OK。有兴趣的话，可以一直探讨这个问题。</p><p>最大witness个数，即SR节点个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ACTIVE_WITNESS_NUM = <span class="number">27</span></span><br></pre></td></tr></table></figure><p>参考文档：</p><p><a href="https://tronprotocol.github.io/documentation-zh/architecture/network/">https://tronprotocol.github.io/documentation-zh/architecture/network/</a><br>官方文档中的 private_net_config.conf 地址有误，可以参考我文章中的配置。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
          <category> sr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> tron </tag>
            
            <tag> 波场 </tag>
            
            <tag> witness </tag>
            
            <tag> sr </tag>
            
            <tag> 分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron-交易-交易构建</title>
      <link href="posts/16ca69ce.html"/>
      <url>posts/16ca69ce.html</url>
      
        <content type="html"><![CDATA[<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>区块链当中要发起一笔交易，需要考虑更多的是这笔交易的安全性。<br>在分布式、<strong>去中心化</strong>的环境当中，如何保证交易的安全性？<br>需要考虑几个问题：</p><ol><li>如何保证交易正确性</li><li>交易不可篡改</li><li>非中心化场景下，交易的验证</li></ol><h3 id="构建TRX转账交易"><a href="#构建TRX转账交易" class="headerlink" title="构建TRX转账交易"></a>构建TRX转账交易</h3><p>构建交易需要最重要的东西就是<strong>私钥</strong>。<br>需要了解TRON的ECKey的使用，<a href="https://liukay.com/posts/ea9f814b.html">tron ECC使用及项目中的应用</a></p><p>这里假设，你已经有了一套TRON的账户，包括：私钥、base58Check地址、公钥等。<br>如果在图形界面操作的话，完全不需要理解它的原理，这里说的是它在代码中是如何构建出一笔交易的。<br>构建交易需要跟<strong>FullNode</strong>产生交互。</p><p>需要准备好：</p><ol><li>测试用的私钥</li><li>owner的地址</li><li>to的地址</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>构建一笔交易，需要以下步骤：</p><ol><li>构建交易<code>protobuf</code></li><li>生成签名</li><li>发送交易</li></ol><p>tron 链使用的是<code>protobuf</code>进行序列化和反序列人。<br>如果是在测试阶段完全可以自己搭一个FullNode进行测试。</p><h3 id="构建交易protobuf"><a href="#构建交易protobuf" class="headerlink" title="构建交易protobuf"></a>构建交易protobuf</h3><p>交易在本地构建后，最终是需要广播到链上，需要经过网络传输。所以需要序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Transaction <span class="title">createTransaction</span><span class="params">(com.google.protobuf.Message message,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     ContractType contractType)</span> </span>&#123;</span><br><span class="line">  Transaction.raw.Builder transactionBuilder = Transaction.raw.newBuilder().addContract(</span><br><span class="line">          Transaction.Contract.newBuilder()</span><br><span class="line">                  .setType(contractType)</span><br><span class="line">                  .setParameter(Any.pack(message))</span><br><span class="line">                  .build()</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  Transaction transaction = Transaction.newBuilder().setRawData(transactionBuilder.build())</span><br><span class="line">          .build();</span><br><span class="line">  <span class="keyword">long</span> gTime = count.incrementAndGet() + time;</span><br><span class="line">  String ref = <span class="string">&quot;&quot;</span> + gTime;</span><br><span class="line">  transaction = setReference(transaction, gTime, ByteArray.fromString(ref));</span><br><span class="line">  transaction = setExpiration(transaction, gTime);</span><br><span class="line">  <span class="keyword">return</span> transaction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.protobuf.ByteString;</span><br><span class="line"><span class="keyword">import</span> org.tron.common.crypto.ECKey;</span><br><span class="line"><span class="keyword">import</span> org.tron.common.utils.ByteArray;</span><br><span class="line"><span class="keyword">import</span> org.tron.common.utils.Commons;</span><br><span class="line"><span class="keyword">import</span> org.tron.protos.Protocol;</span><br><span class="line"><span class="keyword">import</span> org.tron.protos.Protocol.Transaction.Contract.ContractType;</span><br><span class="line"><span class="keyword">import</span> org.tron.protos.contract.BalanceContract.TransferContract;</span><br><span class="line"><span class="keyword">import</span> org.tron.stress.design.factory.Creator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Creator(type = &quot;transfer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferCreator</span> <span class="keyword">extends</span> <span class="title">AbstractTransactionCreator</span> <span class="keyword">implements</span> <span class="title">TransactionCreator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String ownerAddress = <span class="string">&quot;TXtrbmfwZ2LxtoCveEhZT86fTss1w8rwJE&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String privateKey = <span class="string">&quot;0528dc17428585fc4dece68b79fa7912270a1fe8e85f244372f59eb7e8925e04&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> amount = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Protocol.<span class="function">Transaction <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TransferContract contract = TransferContract.newBuilder()</span><br><span class="line">            .setOwnerAddress(ByteString.copyFrom(Commons.decodeFromBase58Check(ownerAddress)))</span><br><span class="line">            .setToAddress(ByteString.copyFrom(Commons.decodeFromBase58Check(GenerateTransaction.accountQueue.poll())))</span><br><span class="line">            .setAmount(amount)</span><br><span class="line">            .build();</span><br><span class="line">    Protocol.Transaction transaction = createTransaction(contract, ContractType.TransferContract);</span><br><span class="line">    <span class="keyword">return</span> sign(transaction, ECKey.fromPrivate(ByteArray.fromHexString(privateKey)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>测试账号可以自行申请两个测试账号，自己给自己转账。<br><a href="https://liukay.com/posts/53993e75.html">base58Check转byte</a><br>交易构建到这里就实现，如果需要构建交易，可以通过这种方式构建、签名，生成后的交易可以通过<code>gRPC</code>或<code>HTTP</code>的方试广播到链上，也可以把交易持久化到磁盘进行测试。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> tron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo markdown 单眼号变成中文单眼号解决</title>
      <link href="posts/8b5e960f.html"/>
      <url>posts/8b5e960f.html</url>
      
        <content type="html"><![CDATA[<p>最近写文章发现 markdown 中的单眼号被转换成了中文，查了一下发现是hexo的markdown插件的自动转换功能被开启了。<br>输入的是 <code>&#39;</code>（U+0027），被自动转换成了<code>’</code>（U+2019）</p><h2 id="问题插件"><a href="#问题插件" class="headerlink" title="问题插件"></a>问题插件</h2><p>在 <code>node_modules/</code> 目录中查看当前所使用的插件是哪个markdown插件，并修改配置文件<code>_config.yml</code><br>我这边使用到的是：</p><blockquote><p>hexo-renderer-marked</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">smartypants:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>如果使用的时以下两个插件，修改方式如下:</p><blockquote><p>hexo-renderer-markdown-it 和 hexo-renderer-markdown-it-plus</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>如果没有这些配置，手动添加上配置就可以起效果。</p><p>参考链接: <a href="https://github.com/theme-next/hexo-theme-next/issues/462">https://github.com/theme-next/hexo-theme-next/issues/462</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-IDE进化06-模糊搜索ctrlpvim</title>
      <link href="posts/c5a1c2e0.html"/>
      <url>posts/c5a1c2e0.html</url>
      
        <content type="html"><![CDATA[<p>模糊搜索工具有很多，但是推荐装一下这个工具，这个工具是一个很好用的工具，而且如果你使用go开发中话，vim-go的跳转了依赖于这个工具，所以推荐装该插件。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>Plug &#39;ctrlpvim/ctrlp.vim&#39;</p></blockquote><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>普通模式下输入</p><blockquote><p>control + p</p></blockquote><p>直接在键盘上输入就可以进行模糊匹配，无需过多的配置。<br>上下选择</p><blockquote><p>control + j / k</p></blockquote><p><img src="/posts/c5a1c2e0/%E4%BD%BF%E7%94%A8.png" alt="使用"></p><p>查看最近使用</p><blockquote><p>:CtrlPMRUFiles</p></blockquote><p>一般使用的时候只需要记住常用的几个操作的，更多的操作，通过提示或者帮助来了解，我一般都用提示功能，输入:CtrlP 然后 table</p><p><img src="/posts/c5a1c2e0/%E6%8F%90%E7%A4%BA.jpeg" alt="提示"></p><h2 id="查看说明"><a href="#查看说明" class="headerlink" title="查看说明"></a>查看说明</h2><p>每个vim的完整功能几乎都可以在说明文档中找到完整说明。</p><blockquote><p>:help ctrlp.txt</p></blockquote><p><img src="/posts/c5a1c2e0/%E5%B8%AE%E5%8A%A9%E8%AF%B4%E6%98%8E1.png" alt="帮助说明1.png"><br><img src="/posts/c5a1c2e0/%E5%B8%AE%E5%8A%A9%E8%AF%B4%E6%98%8E2.png" alt="帮助说明2.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里 vim 已经具备了搜索功能，可以在 vim 的界面中，直接搜索文档，直接打开编辑，不用先进到目录再去打开文档。对于文本编辑来说又进一步的方便了操作。</p><h3 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; VIM 自身配置</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 编码设置</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line"><span class="keyword">set</span> enc=utf8</span><br><span class="line"><span class="keyword">set</span> fencs=utf8,gbk,gb2312,gb18030</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 启用插件</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">filetype</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Tab 转空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 列高亮</span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 记录上次光标位置</span></span><br><span class="line"><span class="keyword">au</span> BufReadPost * <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) | <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 分屏设置</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向右边</span></span><br><span class="line"><span class="keyword">map</span> td :<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向左边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ta</span> :<span class="keyword">set</span> nosplitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向上边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ts</span> :<span class="keyword">set</span> nosplitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向下边</span></span><br><span class="line"><span class="keyword">map</span> tw :<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 替换方向键为调节分屏大小</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-up&gt;</span> :<span class="keyword">res</span> -<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-down&gt;</span> :<span class="keyword">res</span> +<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-left&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>-<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-right&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>+<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按键映射</span></span><br><span class="line"><span class="keyword">map</span> W :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :<span class="keyword">wq</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> tq :q!<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">te</span> :terminal<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置 buff、空白字符的视觉提示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span> listchars=<span class="built_in">extend</span><span class="variable">s:</span>❯,precede<span class="variable">s:</span>❮,<span class="keyword">ta</span><span class="variable">b:</span>▸\</span><br><span class="line"><span class="comment">&quot; 这个提示在复制的时候是个问题</span></span><br><span class="line"><span class="comment">&quot; set list listchars=extends:❯,precedes:❮,tab:▸\,trail:˽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 其他的一些配置</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>   <span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>      <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="string">&quot;set relativenumber    &quot;</span> 相对行号</span><br><span class="line"><span class="keyword">set</span> wildmenu    <span class="comment">&quot;  让vim命令可用Tab补全</span></span><br><span class="line"><span class="keyword">set</span> hlsearch      <span class="comment">&quot; 变输入搜索词边高亮</span></span><br><span class="line"><span class="keyword">set</span> incsearch      <span class="comment">&quot; 光标自动跳转到搜索结果上</span></span><br><span class="line"><span class="keyword">set</span> t_ut=  <span class="comment">&quot;防止vim背景颜色错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 复制系统到 vim</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;C-y&gt;</span> <span class="comment">&quot;+y</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-p&gt;</span> <span class="comment">&quot;*p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--开始</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;mhinz/vim-startify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--结束</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开关闭 NERDTree</span></span><br><span class="line"><span class="keyword">map</span> tt :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开vim时自动打开NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * NERDTree</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; \ + r 定位当前文件所在目录，这个很有用</span></span><br><span class="line"><span class="comment">&quot; 当前从左树进入，又要将当前目录定位到当前位置用这个</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span>r :NERDTreeFind<span class="symbol">&lt;cr&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="symbol">&lt;C-w&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;显示书签&quot;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span></span><br><span class="line"><span class="comment">&quot; 是否显示隐藏文件</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowHidden=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 忽略一下文件的显示</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore=[<span class="string">&#x27;\.pyc&#x27;</span>,<span class="string">&#x27;\~$&#x27;</span>,<span class="string">&#x27;\.swp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeGitStatusIndicatorMapCustom</span> = &#123;</span><br><span class="line">    \ <span class="string">&quot;Modified&quot;</span>  : <span class="string">&quot;✹&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Staged&quot;</span>    : <span class="string">&quot;✚&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Untracked&quot;</span> : <span class="string">&quot;✭&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Renamed&quot;</span>   : <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unmerged&quot;</span>  : <span class="string">&quot;═&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Deleted&quot;</span>   : <span class="string">&quot;✖&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Dirty&quot;</span>     : <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Clean&quot;</span>     : <span class="string">&quot;✔︎&quot;</span>,</span><br><span class="line">    \ <span class="string">&#x27;Ignored&#x27;</span>   : <span class="string">&#x27;☒&#x27;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unknown&quot;</span>   : <span class="string">&quot;?&quot;</span></span><br><span class="line">    \ &#125;</span><br><span class="line"><span class="comment">&quot; &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; Startify 设置</span></span><br><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; 修改其中的内容去获得更好的体验。</span></span><br><span class="line"><span class="comment">&quot;设置书签</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_bookmarks</span>= [</span><br><span class="line">            \ <span class="string">&#x27;~/workspaces/&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;~/.config/nvim/init.vim&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="comment">&quot;起始页显示的列表长度</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_files_number</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">&quot;自动加载session</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_session_autoload</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot;过滤列表，支持正则表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_skiplist</span> = [</span><br><span class="line">       \ <span class="string">&#x27;^/tmp&#x27;</span>,</span><br><span class="line">       \ ]</span><br><span class="line"><span class="comment">&quot;自定义Header和Footer</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_header</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|    Still waters run deep!    |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_footer</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|     Keep an open mind!       |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自己完成的脚本，判断打开文件是否存在。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">SomeCheck</span><span class="params">()</span></span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">filereadable</span>(<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;SpecificFile exists&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">autocmd</span> VimEnter * Startify</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> SomeCheck()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> plugin </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 插件 </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 图床失效问题解决</title>
      <link href="posts/dafd8d71.html"/>
      <url>posts/dafd8d71.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近发现很多 github 上的文档图片变成红❌，不是一个两个文档，是大部分不同开源文档的图片都成了红❌。<br>估计是官方的问题。<br>一般情况下域名不用轻易弃用，因为域名可以用来切换IP，只要域名定下来了，IP可以根据需求来换。</p><p>这个问题，是由于域名也的新IP没有更新到DNS服务器上导致。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>手动配置一下IP。<br>怎么知道新的图床的IP？ping一下就可以知道。</p><blockquote><p>ping avatars.githubusercontent.com</p></blockquote><p><img src="/posts/dafd8d71/ping%E5%9B%BE%E5%BA%8A%E5%9C%B0%E5%9D%80.png" alt="ping图床地址"></p><p>把下面的IP手动更新到 <code>/etc/hosts</code> 上，再刷新一下就可以解决这个问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GitHub Start </span></span><br><span class="line">140.82.113.3      github.com</span><br><span class="line">140.82.114.20     gist.github.com</span><br><span class="line"></span><br><span class="line">151.101.184.133    assets-cdn.github.com</span><br><span class="line">151.101.184.133    raw.githubusercontent.com</span><br><span class="line">199.232.28.133     raw.githubusercontent.com </span><br><span class="line">151.101.184.133    gist.githubusercontent.com</span><br><span class="line">151.101.184.133    cloud.githubusercontent.com</span><br><span class="line">151.101.184.133    camo.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars0.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars0.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars0.githubusercontent.com </span><br><span class="line">199.232.28.133     avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.108.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars2.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars3.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars4.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars5.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars6.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars7.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars8.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars8.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars9.githubusercontent.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub End</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-IDE进化 05 vim-startify</title>
      <link href="posts/a6430b8b.html"/>
      <url>posts/a6430b8b.html</url>
      
        <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>今天介绍一下vim的别一个非常好用的插件，启动界面插件 vim-startify。<br>这个插件有什么用呢，看效果：</p><p><img src="/posts/a6430b8b/%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2.png" alt="启动界面"></p><p>中间是最近打开的文件，可能通过数字快数打开文件，界面可以设置找开和关闭。</p><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="1-vim插件安装"><a href="#1-vim插件安装" class="headerlink" title="1.vim插件安装"></a>1.vim插件安装</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line">Plug <span class="string">&#x27;mhinz/vim-startify&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>配置不是必须项目，当然一般情况下，都会习惯自己一的快捷键。<br>另外书签功能是个很好用的功能，把常用的文件直接加入书签，如果书签加入是个目录，也安装了ranger 插件，可以直接调用 ranger 这个插件。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; Startify 设置</span></span><br><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; 修改其中的内容去获得更好的体验。</span></span><br><span class="line"><span class="comment">&quot;设置书签</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_bookmarks</span>= [</span><br><span class="line">            \ <span class="string">&#x27;~/workspaces/&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;~/.config/nvim/init.vim&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="comment">&quot;起始页显示的列表长度</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_files_number</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">&quot;自动加载session</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_session_autoload</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot;过滤列表，支持正则表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_skiplist</span> = [</span><br><span class="line">       \ <span class="string">&#x27;^/tmp&#x27;</span>,</span><br><span class="line">       \ ]</span><br><span class="line"><span class="comment">&quot;自定义Header和Footer</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_header</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|    Still waters run deep!    |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_footer</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|     Keep an open mind!       |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自己完成的脚本，判断打开文件是否存在。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">SomeCheck</span><span class="params">()</span></span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">filereadable</span>(<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;SpecificFile exists&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">autocmd</span> VimEnter * Startify</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> SomeCheck()</span><br></pre></td></tr></table></figure><p>脚本中的代码部分是解决，在不同位置启动后，找不到文件时会报错<br>function!<br>endfunction 固定一对</p><p>内置函数，% 表示当前路径，也表示当前文件路径<br>expand(&quot;%&quot;)<br>call 执行函数</p><p>可以自行偿试注释掉脚本部份复现问题。</p><p>到这一步vim的IDE进行启动界面就完成了，通过这些插件提高平时写文档的效率是够用的。</p><h3 id="书签功能"><a href="#书签功能" class="headerlink" title="书签功能"></a>书签功能</h3><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p><a href="https://github.com/mhinz/vim-startify">https://github.com/mhinz/vim-startify</a></p><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><blockquote><p>:h startify<br>:h startify-faq</p></blockquote><h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; VIM 自身配置</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 编码设置</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line"><span class="keyword">set</span> enc=utf8</span><br><span class="line"><span class="keyword">set</span> fencs=utf8,gbk,gb2312,gb18030</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 启用插件</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">filetype</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Tab 转空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 列高亮</span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 记录上次光标位置</span></span><br><span class="line"><span class="keyword">au</span> BufReadPost * <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) | <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 分屏设置</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向右边</span></span><br><span class="line"><span class="keyword">map</span> td :<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向左边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ta</span> :<span class="keyword">set</span> nosplitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向上边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ts</span> :<span class="keyword">set</span> nosplitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向下边</span></span><br><span class="line"><span class="keyword">map</span> tw :<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 替换方向键为调节分屏大小</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-up&gt;</span> :<span class="keyword">res</span> -<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-down&gt;</span> :<span class="keyword">res</span> +<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-left&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>-<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-right&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>+<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按键映射</span></span><br><span class="line"><span class="keyword">map</span> W :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :<span class="keyword">wq</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> tq :q!<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">te</span> :terminal<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置 buff、空白字符的视觉提示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span> listchars=<span class="built_in">extend</span><span class="variable">s:</span>❯,precede<span class="variable">s:</span>❮,<span class="keyword">ta</span><span class="variable">b:</span>▸\</span><br><span class="line"><span class="comment">&quot; 这个提示在复制的时候是个问题</span></span><br><span class="line"><span class="comment">&quot; set list listchars=extends:❯,precedes:❮,tab:▸\,trail:˽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 其他的一些配置</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>   <span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>      <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="string">&quot;set relativenumber    &quot;</span> 相对行号</span><br><span class="line"><span class="keyword">set</span> wildmenu    <span class="comment">&quot;  让vim命令可用Tab补全</span></span><br><span class="line"><span class="keyword">set</span> hlsearch      <span class="comment">&quot; 变输入搜索词边高亮</span></span><br><span class="line"><span class="keyword">set</span> incsearch      <span class="comment">&quot; 光标自动跳转到搜索结果上</span></span><br><span class="line"><span class="keyword">set</span> t_ut=  <span class="comment">&quot;防止vim背景颜色错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 复制系统到 vim</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;C-y&gt;</span> <span class="comment">&quot;+y</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-p&gt;</span> <span class="comment">&quot;*p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--开始</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;mhinz/vim-startify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--结束</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开关闭 NERDTree</span></span><br><span class="line"><span class="keyword">map</span> tt :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开vim时自动打开NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * NERDTree</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; \ + r 定位当前文件所在目录，这个很有用</span></span><br><span class="line"><span class="comment">&quot; 当前从左树进入，又要将当前目录定位到当前位置用这个</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span>r :NERDTreeFind<span class="symbol">&lt;cr&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="symbol">&lt;C-w&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;显示书签&quot;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span></span><br><span class="line"><span class="comment">&quot; 是否显示隐藏文件</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowHidden=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 忽略一下文件的显示</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore=[<span class="string">&#x27;\.pyc&#x27;</span>,<span class="string">&#x27;\~$&#x27;</span>,<span class="string">&#x27;\.swp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeGitStatusIndicatorMapCustom</span> = &#123;</span><br><span class="line">    \ <span class="string">&quot;Modified&quot;</span>  : <span class="string">&quot;✹&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Staged&quot;</span>    : <span class="string">&quot;✚&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Untracked&quot;</span> : <span class="string">&quot;✭&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Renamed&quot;</span>   : <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unmerged&quot;</span>  : <span class="string">&quot;═&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Deleted&quot;</span>   : <span class="string">&quot;✖&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Dirty&quot;</span>     : <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Clean&quot;</span>     : <span class="string">&quot;✔︎&quot;</span>,</span><br><span class="line">    \ <span class="string">&#x27;Ignored&#x27;</span>   : <span class="string">&#x27;☒&#x27;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unknown&quot;</span>   : <span class="string">&quot;?&quot;</span></span><br><span class="line">    \ &#125;</span><br><span class="line"><span class="comment">&quot; &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; Startify 设置</span></span><br><span class="line"><span class="comment">&quot;=========================================</span></span><br><span class="line"><span class="comment">&quot; 修改其中的内容去获得更好的体验。</span></span><br><span class="line"><span class="comment">&quot;设置书签</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_bookmarks</span>= [</span><br><span class="line">            \ <span class="string">&#x27;~/workspaces/&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;~/.config/nvim/init.vim&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="comment">&quot;起始页显示的列表长度</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_files_number</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">&quot;自动加载session</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_session_autoload</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot;过滤列表，支持正则表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_skiplist</span> = [</span><br><span class="line">       \ <span class="string">&#x27;^/tmp&#x27;</span>,</span><br><span class="line">       \ ]</span><br><span class="line"><span class="comment">&quot;自定义Header和Footer</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_header</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|    Still waters run deep!    |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|                              |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:startify_custom_footer</span> = [</span><br><span class="line">            \ <span class="string">&#x27;+------------------------------+&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;|     Keep an open mind!       |&#x27;</span>,</span><br><span class="line">            \ <span class="string">&#x27;+----------------+-------------+&#x27;</span>,</span><br><span class="line">            \]</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自己完成的脚本，判断打开文件是否存在。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">SomeCheck</span><span class="params">()</span></span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">filereadable</span>(<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;SpecificFile exists&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">autocmd</span> VimEnter * Startify</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> SomeCheck()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> plugin </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 插件 </tag>
            
            <tag> plugin </tag>
            
            <tag> IDE </tag>
            
            <tag> startify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethereum-编译geth</title>
      <link href="posts/19c0d607.html"/>
      <url>posts/19c0d607.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>geth</code> 是将计算机变成一个以太坊节点，连接到以太坊网络的客户端。</p><p>对于<code>geth</code>的几个问题：</p><ul><li>有了 <code>geth</code> 之后能做什么？</li><li>该怎么用？</li><li>用了之后能了解到什么？</li></ul><p>能做几件事：</p><ol><li>成为一个以太坊节点，可以是：全节点、矿工节点、归档节点</li><li>可以当在一个gRPC 的查询工具来用</li><li>生成账户等操作</li></ol><p>一句话总结：<code>geth</code>就代表运行在你电脑上的以太坊程序。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>这里说明只基于对开发环境的基础配置，官方要求的配置更高</p><h3 id="最小硬件要求"><a href="#最小硬件要求" class="headerlink" title="最小硬件要求"></a>最小硬件要求</h3><ul><li>CPU 2+ cores</li><li>4GB RAM</li><li>1TB</li><li>8 MBit/sec</li></ul><h3 id="go安装"><a href="#go安装" class="headerlink" title="go安装"></a>go安装</h3><ul><li>go1.16.x <a href="http://liukay.com/posts/33246.html">安装</a></li><li>gcc 编译geth</li></ul><p>注意需要修改一下go代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure><p>安装gcc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>下载源码之后，看一下<code>README.md</code>，使用<code>make geth</code>就行编译，编译一下</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ethereum/go-ethereum.git</span><br><span class="line">cd  go-ethereum</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有分支 git brarnch -a</span></span><br><span class="line">git checkout release/1.9</span><br><span class="line">make geth</span><br><span class="line">make all</span><br></pre></td></tr></table></figure><p>开始编译后输出：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">github.com/ethereum/go-ethereum/eth/filters</span><br><span class="line">github.com/ethereum/go-ethereum/light</span><br><span class="line">github.com/ethereum/go-ethereum/eth/protocols/eth</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/abi/bind/backends</span><br><span class="line">github.com/ethereum/go-ethereum/internal/ethapi</span><br><span class="line">github.com/ethereum/go-ethereum/eth/fetcher</span><br><span class="line">github.com/ethereum/go-ethereum/eth/protocols/snap</span><br><span class="line">github.com/ethereum/go-ethereum/eth/tracers</span><br><span class="line">github.com/ethereum/go-ethereum/graphql</span><br><span class="line">github.com/ethereum/go-ethereum/les/downloader</span><br><span class="line">github.com/ethereum/go-ethereum/eth/downloader</span><br><span class="line">github.com/ethereum/go-ethereum/eth/tracers/js</span><br><span class="line">github.com/ethereum/go-ethereum/eth/tracers/native</span><br><span class="line">github.com/ethereum/go-ethereum/miner</span><br><span class="line">github.com/ethereum/go-ethereum/eth/ethconfig</span><br><span class="line">github.com/ethereum/go-ethereum/eth</span><br><span class="line">github.com/ethereum/go-ethereum/les</span><br><span class="line">github.com/ethereum/go-ethereum/eth/catalyst</span><br><span class="line">github.com/ethereum/go-ethereum/les/catalyst</span><br><span class="line">github.com/ethereum/go-ethereum/ethstats</span><br><span class="line">github.com/ethereum/go-ethereum/cmd/utils</span><br><span class="line">github.com/ethereum/go-ethereum/cmd/geth</span><br><span class="line">Done building.</span><br><span class="line">Run &quot;./build/bin/geth&quot; to launch geth.</span><br></pre></td></tr></table></figure><p>可以看到<code>geth</code>被编译到了: <code>./build/bin/geth</code>，这个路径。</p><p>执行下看看编译是否成功: </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/geth --help</span><br></pre></td></tr></table></figure><p>成功</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">    --txpool.globalqueue value     (default: 1024)</span><br><span class="line">          Maximum number of non-executable transaction slots for all accounts</span><br><span class="line">   </span><br><span class="line">    --txpool.globalslots value     (default: 5120)</span><br><span class="line">          Maximum number of executable transaction slots for all accounts</span><br><span class="line">   </span><br><span class="line">    --txpool.journal value         (default: &quot;transactions.rlp&quot;)</span><br><span class="line">          Disk journal for local transaction to survive node restarts</span><br><span class="line">   </span><br><span class="line">    --txpool.lifetime value        (default: 3h0m0s)</span><br><span class="line">          Maximum amount of time non-executable transaction are queued</span><br><span class="line">   </span><br><span class="line">    --txpool.locals value         </span><br><span class="line">          Comma separated accounts to treat as locals (no flush, priority inclusion)</span><br><span class="line">   </span><br><span class="line">    --txpool.nolocals              (default: false)</span><br><span class="line">          Disables price exemptions for locally submitted transactions</span><br><span class="line">   </span><br><span class="line">    --txpool.pricebump value       (default: 10)</span><br><span class="line">          Price bump percentage to replace an already existing transaction</span><br><span class="line">   </span><br><span class="line">    --txpool.pricelimit value      (default: 1)</span><br><span class="line">          Minimum gas price limit to enforce for acceptance into the pool</span><br><span class="line">   </span><br><span class="line">    --txpool.rejournal value       (default: 1h0m0s)</span><br><span class="line">          Time interval to regenerate the local transaction journal</span><br><span class="line">   </span><br><span class="line">   VIRTUAL MACHINE</span><br><span class="line">   </span><br><span class="line">    --vmdebug                      (default: false)</span><br><span class="line">          Record information useful for VM and contract debugging</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">COPYRIGHT:</span><br><span class="line">   Copyright 2013-2022 The go-ethereum Authors</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果是 windows 机器，建议装个虚拟机操作，在Linux环境下使用起来更顺手一些。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://github.com/ethereum/go-ethereum">https://github.com/ethereum/go-ethereum</a><br><a href="https://geth.ethereum.org/docs/getting-started">https://geth.ethereum.org/docs/getting-started</a></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> ethereum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
            <tag> ethereum </tag>
            
            <tag> blockchain </tag>
            
            <tag> 原理 </tag>
            
            <tag> geth </tag>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm 使用CMS时FGC每次会跳2次</title>
      <link href="posts/1f5573a8.html"/>
      <url>posts/1f5573a8.html</url>
      
        <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>使用<code>jstat -gc</code>观察CMS FullGC的时候，发现每次到阈值回收的时候，FGC每次会跳2次：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">68096.0 68096.0  0.0   16853.2 545344.0 371165.3 8755648.0  5890791.6  62312.0 59746.5 7076.0 6608.5  43879 1312.752  60      5.206 1317.958</span><br><span class="line">68096.0 68096.0 19377.9  0.0   545344.0 420827.3 8755648.0  5891528.9  62312.0 59746.5 7076.0 6608.5  43880 1312.785  60      5.206 1317.991</span><br><span class="line">68096.0 68096.0  0.0   22147.2 545344.0 295435.0 8755648.0  5891577.4  62312.0 59746.5 7076.0 6608.5  43881 1312.816  60      5.206 1318.022</span><br><span class="line">68096.0 68096.0 21257.5  0.0   545344.0 461020.2 8755648.0  5898299.9  62312.0 59746.5 7076.0 6608.5  43882 1312.850  60      5.206 1318.056</span><br><span class="line">68096.0 68096.0  0.0   13895.9 545344.0 419534.8 8755648.0  5901746.3  62312.0 59746.5 7076.0 6608.5  43885 1312.961  60      5.206 1318.167</span><br><span class="line">68096.0 68096.0  0.0   17542.7 545344.0 63902.2  8755648.0  5906856.1  62312.0 59746.5 7076.0 6608.5  43887 1313.028  60      5.206 1318.234</span><br><span class="line">68096.0 68096.0  0.0   17542.7 545344.0 444878.0 8755648.0  5906856.1  62312.0 59746.5 7076.0 6608.5  43887 1313.028  60      5.206 1318.234</span><br><span class="line">68096.0 68096.0 15241.8  0.0   545344.0 403475.0 8755648.0  5909706.0  62312.0 59746.5 7076.0 6608.5  43890 1313.108  60      5.206 1318.314</span><br><span class="line">68096.0 68096.0 24031.2  0.0   545344.0 52019.0  8755648.0  5916571.4  62312.0 59746.5 7076.0 6608.5  43892 1313.174  60      5.206 1318.380</span><br><span class="line">68096.0 68096.0 17381.4  0.0   545344.0 349457.1 8755648.0  5919082.7  62312.0 59746.5 7076.0 6608.5  43894 1313.232  60      5.206 1318.438</span><br><span class="line">68096.0 68096.0  0.0   20887.7 545344.0 442091.1 8755648.0  5919151.3  62312.0 59746.5 7076.0 6608.5  43895 1313.261  60      5.206 1318.467</span><br></pre></td></tr></table></figure><p>看这个日志，无论多过多久，每次FullGC的次数，必然是两次一起出现，也就是说 FullGC 是连续执行两次？！<br>为什么会这样，其实跟CMS这个回收器的特殊工作机制有关。</p><h2 id="CMS的两次标记"><a href="#CMS的两次标记" class="headerlink" title="CMS的两次标记"></a>CMS的两次标记</h2><p>JVM 的FullGC通常需要先<code>stop-the-world</code>才进行回收。一次<code>stop-the-world</code>的时长就是整个GC回收的时长。<br>CMS的工作流程中，有两个阶段是会触发<code>STW</code>的：<code>initial mark</code>与<code>final remark</code>，这两个阶段都是&quot;stop the world&quot;，不过暂停时间较短</p><p>&quot;GC次数&quot;主要关心的其实是应用暂停次数。<br>要注意的是在CMS里&quot;暂停次数&quot;并不等同于&quot;GC次数&quot;，CMS并发GC的一个周期叫&quot;一次GC&quot;但暂停了两次。</p><p>如果CMS并发GC过程中出现了concurrent mode failure的话那么接下来就会做一次mark-sweep-compact的full GC，这个是完全stop-the-world的。</p><p>图右边是CMS的两次标记</p><p><img src="/posts/1f5573a8/cms%E5%9B%9E%E6%94%B6%E6%B5%81%E7%A8%8B.png" alt="cms回收流程"></p><h2 id="GMS的设计特点"><a href="#GMS的设计特点" class="headerlink" title="GMS的设计特点"></a>GMS的设计特点</h2><h3 id="1-低延迟"><a href="#1-低延迟" class="headerlink" title="1.低延迟"></a>1.低延迟</h3><p>为了能达到低延迟的效果，CMS实际是把本来一次FullGC应该消息的时间，能过多次短的GC时间分滩了。就跟吃自助参一样，肚子就那么大，一次性拿一堆吃的可能要吃1个小时。如果一次拿一点点，一次吃10分钟，看上去次数多了，其实吃的量是一样的。</p><h3 id="2-牺牲吞吐量"><a href="#2-牺牲吞吐量" class="headerlink" title="2.牺牲吞吐量"></a>2.牺牲吞吐量</h3><p>这样做的优点是勤拿少取，吃完10分钟可以干别的事，但是每次吃的少。缺点也之这出来了，吞吐量小。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>之前和同事聊到这个问题，做了个实验，补了两张图。<br>CMS在<code>initial mark</code>和<code>remark</code>会<code>stop the world</code>，并切这两次是会记到<code>FullGC</code>里</p><p>先看每一次<br><img src="/posts/1f5573a8/%E8%B7%B3%E4%B8%A4%E6%AC%A11.jpg" alt="跳两次1"><br>第二次，每一次都是<strong>两次FGC</strong>，但是上面的GC log中并未真正触发GC。<br><img src="/posts/1f5573a8/%E8%B7%B3%E4%B8%A4%E6%AC%A12.jpg" alt="跳两次2"><br>第三次<br><img src="/posts/1f5573a8/%E8%B7%B3%E4%B8%A4%E6%AC%A13.jpg" alt="跳两次3"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> cms </tag>
            
            <tag> gc </tag>
            
            <tag> FullGC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMS回收器执行流程</title>
      <link href="posts/ad216ba6.html"/>
      <url>posts/ad216ba6.html</url>
      
        <content type="html"><![CDATA[<h2 id="CMS（Concurrent-Mark-Sweep）"><a href="#CMS（Concurrent-Mark-Sweep）" class="headerlink" title="CMS（Concurrent Mark Sweep）"></a>CMS（Concurrent Mark Sweep）</h2><p>目标：获取最短回收停顿时间为目标的收集器。<br>算法：&quot;标记-清除&quot;算法实现</p><p>CMS是老年代垃圾收集器，在收集过程中可以与用户线程并发操作。<br>它可以与 Serial 收集器 和 Parallel New收集器搭配使用。<br>CMS牺牲了系统的吞吐量来追求收集速度，适合追求垃圾收集速度的服务器上。<br>可以通过JVM启动参数，来开启CMS：</p><blockquote><p>-XX:+UseConcMarkSweepGC</p></blockquote><p>牺牲吞吐量，追求收集速度是什么意思</p><blockquote><p>其实实际使用过程中发现，CMS是将每次收集的时间减少，但是垃圾还是那么多，于是回收的工作方式就变成了跟吃自助餐常听到的一样&quot;勤拿少取&quot;，就是每次回收时间短，也并不完全回收全部的垃圾，通过多次回来处理。</p></blockquote><p><img src="/posts/ad216ba6/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="执行流程"></p><h3 id="1-初始标记（CMS-initial-mark）"><a href="#1-初始标记（CMS-initial-mark）" class="headerlink" title="1.初始标记（CMS initial mark）"></a>1.初始标记（CMS initial mark）</h3><p>单线程，标记新生代可达老年代的对象。<br>为了收集应用程序的对象引用需要暂停应用程序线程，该阶段完成后，应用程序线程再次启动。</p><h3 id="2-并发标记（CMS-concurrent-mark）"><a href="#2-并发标记（CMS-concurrent-mark）" class="headerlink" title="2.并发标记（CMS-concurrent-mark）"></a>2.并发标记（CMS-concurrent-mark）</h3><p>在第一个阶段（Initial Mark）被暂停的应用线程将恢复运行。<br>通过遍历第一个阶段（Initial Mark）标记出来的存活对象，继续递归遍历老年代，并标记可直接或间接到达的所有老年代存活对象。</p><p>这个过程可能存在的问题<br>应用线程和GC线程是并发执行的，因此可能产生新的对象或对象关系发生变化，例如：</p><ol><li>新生代的对象晋升到老年代；</li><li>直接在老年代分配对象；</li><li>老年代对象的引用关系发生变更；<br>对于这些对象，需要重新标记以防止被遗漏。<br>为了提高重新标记的效率，本阶段会把这些发生变化的对象所在的Card标识为Dirty，这样后续就只需要扫描这些Dirty Card的对象，从而避免扫描整个老年代。</li></ol><h3 id="3-并发预清理（CMS-concurrent-preclean）"><a href="#3-并发预清理（CMS-concurrent-preclean）" class="headerlink" title="3.并发预清理（CMS-concurrent-preclean）"></a>3.并发预清理（CMS-concurrent-preclean）</h3><p>这个阶段就是用来处理：前一个阶段因为引用关系改变导致没有标记到的存活对象的，它会扫描所有标记为Dirty的Card<br>将会重新扫描前一个阶段标记的 Dirty 对象，并标记被 Dirty 对象直接或间接引用的对象，然后清除Card标识。<br>也就是让这个标记过后的对象，重新标记为存活。</p><h3 id="3-1-可被终止的预清理（CMS-concurrent-abortable-preclean）"><a href="#3-1-可被终止的预清理（CMS-concurrent-abortable-preclean）" class="headerlink" title="3.1.可被终止的预清理（CMS-concurrent-abortable-preclean）"></a>3.1.可被终止的预清理（CMS-concurrent-abortable-preclean）</h3><p>本阶段尽可能承担更多的并发预处理工作，从而减轻在Final Remark阶段的stop-the-world。<br>主要循环的做两件事：</p><ol><li>处理 From 和 To 区的对象，标记可达的老年代对象；</li><li>和上一个阶段一样，扫描处理Dirty Card中的对象。<br>具体执行多久，取决于许多因素，满足其中一个条件将会中止运行：</li></ol><p>1.执行循环次数达到了阈值；<br>2.执行时间达到了阈值；</p><h3 id="4-重新标记（CMS-Final-Remark）"><a href="#4-重新标记（CMS-Final-Remark）" class="headerlink" title="4.重新标记（CMS Final Remark）"></a>4.重新标记（CMS Final Remark）</h3><p>由于第三阶段是并发的，对象引用可能会发生进一步改变。因此，应用程序线程会再一次<br>被暂停以更新这些变化，并且在进行实际的清理之前确保一个正确的对象引用视图。<br>这一阶段十分重要，因为必须避免收集到仍被引用的对象。</p><h3 id="5-并发清除（CMS-concurrent-sweep）"><a href="#5-并发清除（CMS-concurrent-sweep）" class="headerlink" title="5.并发清除（CMS concurrent sweep）"></a>5.并发清除（CMS concurrent sweep）</h3><p>所有不再被应用的对象将从堆里清除掉。</p><h3 id="6-并发重置-CMS-concurrent-reset"><a href="#6-并发重置-CMS-concurrent-reset" class="headerlink" title="6.并发重置 (CMS-concurrent-reset)"></a>6.并发重置 (CMS-concurrent-reset)</h3><p>状态等待下次CMS的触发<br>做一些收尾的工作，以便下一次GC周期能有一个干净的状态。这是与用户线程同时运行；</p><h2 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h2><p>了解了几个特点之后，可以实际的看看CMS的运行状态。<br>上面说到的CMS的几个状态，我们从gc运行日志中去查看CMS的运行状态。<br>日志中以 CMS 开头的都是CMS各个执行阶段。<br>这里最需要注意的是：</p><ol><li>CMS Initial Mark</li><li>CMS-remark<br>这两个阶段分别会暂停应用，也是会让应用程序短暂的暂停也就是<code>STW</code>。</li></ol><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2022-01-11T05:48:34.975+0800: 1774622.038: [GC (Allocation Failure) 2022-01-11T05:48:34.975+0800: 1774622.038: [ParNew: 2570680K-&gt;58383K(2831168K), 0.0411295 secs] 8357286K-&gt;5848239K(9122624K), 0.0414169 secs] [Times: user=0.2</span><br><span class="line">      7 sys=0.04, real=0.04 secs]</span><br><span class="line">2022-01-11T05:48:35.030+0800: 1774622.093: [GC (CMS Initial Mark) [1 CMS-initial-mark: 5789855K(6291456K)] 5873624K(9122624K), 0.0093763 secs] [Times: user=0.05 sys=0.01, real=0.01 secs]</span><br><span class="line">2022-01-11T05:48:35.039+0800: 1774622.103: [CMS-concurrent-mark-start]</span><br><span class="line">2022-01-11T05:48:38.826+0800: 1774625.889: [CMS-concurrent-mark: 3.785/3.786 secs] [Times: user=8.65 sys=0.18, real=3.79 secs]</span><br><span class="line">2022-01-11T05:48:38.826+0800: 1774625.889: [CMS-concurrent-preclean-start]</span><br><span class="line">2022-01-11T05:48:39.400+0800: 1774626.463: [CMS-concurrent-preclean: 0.572/0.574 secs] [Times: user=0.64 sys=0.14, real=0.57 secs]</span><br><span class="line">2022-01-11T05:48:39.400+0800: 1774626.463: [CMS-concurrent-abortable-preclean-start]</span><br><span class="line">  CMS: abort preclean due to time 2022-01-11T05:48:44.575+0800: 1774631.638: [CMS-concurrent-abortable-preclean: 5.169/5.175 secs] [Times: user=8.49 sys=0.52, real=5.18 secs]</span><br><span class="line">2022-01-11T05:48:44.576+0800: 1774631.640: [GC (CMS Final Remark) [YG occupancy: 1078481 K (2831168 K)]2022-01-11T05:48:44.577+0800: 1774631.640: [Rescan (parallel) , 0.1331046 secs]2022-01-11T05:48:44.710+0800: 1774631.773: [</span><br><span class="line">      weak refs processing, 0.1347760 secs]2022-01-11T05:48:44.844+0800: 1774631.908: [class unloading, 0.0376418 secs]2022-01-11T05:48:44.882+0800: 1774631.945: [scrub symbol table, 0.0092684 secs]2022-01-11T05:48:44.891+0800: 1774</span><br><span class="line">      631.955: [scrub string table, 0.0012191 secs][1 CMS-remark: 5789855K(6291456K)] 6868337K(9122624K), 0.3817515 secs] [Times: user=1.12 sys=0.18, real=0.38 secs]</span><br><span class="line">2022-01-11T05:48:44.959+0800: 1774632.022: [CMS-concurrent-sweep-start]</span><br><span class="line">2022-01-11T05:48:50.297+0800: 1774637.361: [CMS-concurrent-sweep: 5.333/5.339 secs] [Times: user=10.01 sys=1.01, real=5.34 secs]</span><br><span class="line">2022-01-11T05:48:50.298+0800: 1774637.361: [CMS-concurrent-reset-start]</span><br><span class="line">2022-01-11T05:48:50.312+0800: 1774637.375: [CMS-concurrent-reset: 0.014/0.014 secs] [Times: user=0.03 sys=0.01, real=0.02 secs]</span><br><span class="line">2022-01-11T05:48:57.315+0800: 1774644.378: [GC (Allocation Failure) 2022-01-11T05:48:57.315+0800: 1774644.378: [ParNew: 2574991K-&gt;57569K(2831168K), 0.1454595 secs] 4314737K-&gt;1800606K(9122624K), 0.1457231 secs] [Times: user=0.9</span><br><span class="line">      6 sys=0.17, real=0.14 secs]</span><br></pre></td></tr></table></figure><h2 id="CMS缺点"><a href="#CMS缺点" class="headerlink" title="CMS缺点"></a>CMS缺点</h2><p>这个不得不吐槽一下，这几个问题，还全让我碰到了。</p><ol><li>CMS收集器对CPU资源非常敏感</li><li>CMS收集器无法处理浮动垃圾</li><li>浮动垃圾</li></ol><h3 id="CMS收集器对CPU资源非常敏感"><a href="#CMS收集器对CPU资源非常敏感" class="headerlink" title="CMS收集器对CPU资源非常敏感"></a>CMS收集器对CPU资源非常敏感</h3><p>在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。<br>这个的实际产生的问题就是，用户线程在处理业务时，由于停顿导致的停顿时间，刚好使业务线程处理时间超时，导致业务处理超时失败。</p><h3 id="CMS收集器无法处理浮动垃圾"><a href="#CMS收集器无法处理浮动垃圾" class="headerlink" title="CMS收集器无法处理浮动垃圾"></a>CMS收集器无法处理浮动垃圾</h3><p>可能会出现“Concurrent Mode Failure（并发模式故障）”失败而导致Full GC产生。<br>这个问题，是在检查服务性问题的时候发现的，频率一天几十次，最终调优解决。</p><h3 id="浮动垃圾"><a href="#浮动垃圾" class="headerlink" title="浮动垃圾"></a>浮动垃圾</h3><p>由于CMS并发清理阶段用户线程还在运行着，伴随着程序运行自然就会有新的垃圾不断产生，这部分垃圾出现的标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC中再清理。这些垃圾就是“浮动垃圾”。<br>这个就是追求短的低停顿的代价，实际的问题是，内存空间会有大量的对象占用，如果是创建对象比较频繁的应用，就不太友好了，这样也会加大回收的频率。</p><p>CMS是一款“标记--清除”算法实现的收集器，容易出现大量空间碎片。当空间碎片过多，将会给大对象分配带来很大的麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CMS 是一款低可以实现短停顿的回收器，在停顿时间上确实是比较优秀的，一般来说没有最好的应用，只有最合适的应用，在选择GC时，根据自身的需求进行选择并对细节做过调整，来达到最优的效果。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
          <category> cms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> cms </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tendermint-通过goland初始化和启动</title>
      <link href="posts/c43a12b2.html"/>
      <url>posts/c43a12b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对 Tendermint 有了一个的了解之后，我们需要对 Tendermint 进行开发和操作，该如何运行这个项目。<br>Tendermint 使用的是 cobra 这个命令行框架，需要对 cobra 有一定的了解。</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><h3 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h3><p>我使用 goland开发调试，先将项目 clone 到本地，配置好go mod。</p><p><img src="/posts/c43a12b2/gomod.png" alt="goland配置gomod"></p><h3 id="安装内置命令-tendermint"><a href="#安装内置命令-tendermint" class="headerlink" title="安装内置命令: tendermint"></a>安装内置命令: tendermint</h3><p>git clone 之后，找开项目，Tendermint 是go项目，内置的一些功能需要先进行编译。</p><blockquote><p>make install</p></blockquote><p>这一步的操作是为了将内置命令: tendermint，安装到当前系统中。</p><p>验证命令正确安装，执行一下：tendermint</p><!-- ![tendermint命令](tendermint命令.png) --><p><img src="/posts/c43a12b2/tendermint%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85%E9%AA%8C%E8%AF%81.png" alt="tendermint命令安装验证"></p><p>这个图中展示了 tendermint 支持的各种命令，对节点运行来说，需要关注的是</p><ol><li>init</li><li>start</li></ol><h3 id="初始化-validator-节点"><a href="#初始化-validator-节点" class="headerlink" title="初始化 validator 节点"></a>初始化 validator 节点</h3><p>tendermint 可以初始化三种节点类型</p><ol><li>FullNode</li><li>seed</li><li>validator</li></ol><p><img src="/posts/c43a12b2/%E5%88%9D%E5%A7%8B%E5%8C%96%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B.jpeg" alt="初始化节点类型"></p><p>这三种类型是常见的三种节点类型，FullNode 用于区块广播、查询等；seed 是种子节点，用来做节点发现；validator 是验证人节点，也就是产块节点(选举出Propose产块)。节点类型初始化以后，可以通过配置文件进行修改节点类型。</p><blockquote><p>tendermint init [validator|full|seed]</p></blockquote><p>我们初始化为 validator 节点</p><p><img src="/posts/c43a12b2/%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BAvalidator%E8%8A%82%E7%82%B9.png" alt="初始化为validator节点"></p><p>生成了一套配置文件：</p><ol><li>validator 的key文件</li><li>priv_validator的状态文件</li><li>node_key 节点私钥</li><li>genesis 配置文件，实际就是链相关的初始化配置</li></ol><blockquote><p>validator keyFile=/Users/liukai/.tendermint/config/priv_validator_key.json<br>module=main stateFile=/Users/liukai/.tendermint/data/priv_validator_state.json<br>node key module=main path=/Users/liukai/.tendermint/config/node_key.json<br>genesis file module=main path=/Users/liukai/.tendermint/config/genesis.json<br>mode=validator module=main</p></blockquote><p>到这里，初始化工作就差不多完成了，可以直接启动，默认情况下，tendermint 服务会去连接一个 ABCI 的应用，如果没有 tendermint 启动后一直偿试去连接一个应用，这里我使用官方提供的内置<code>KV存储</code>应用，在启动时指定连接该应用。</p><p>完整命令</p><blockquote><p>tendermint node --proxy-app=kvstore</p></blockquote><p><img src="/posts/c43a12b2/%E8%BF%9E%E6%8E%A5%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8.png" alt="连接应用启动"></p><p>看一下这个日志，能从日志中看出什么来，下面的日志是共识模块打印出来的日志。</p><ol><li>Timed out dur: 执行周期，表示本次处理之间经过了多久时间</li><li>received proposal: 这里validator只有它自己一个，所有其实这个 proposal 就是当前节点自己</li><li>finalizing commit of block: 共识了commit阶段打印的日志，来自<code>state.go</code>的finalizeCommit这个方法，往上回溯是共识流程中的<code>commit阶段</code>中最后打印的日志，从这里分析出共识的代码。</li></ol><p>到这里，证明这个项目的代码是能正常初始化并启动的，我们开发的话，使用IDE来启动项目，方便一些。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">2022-01-15T18:09:12+08:00 INFO started node module=main node=Node</span><br><span class="line">2022-01-15T18:09:13+08:00 INFO Timed out dur=955.244 height=1 module=consensus round=0 step=1</span><br><span class="line">2022-01-15T18:09:13+08:00 INFO received proposal module=consensus proposal=&#123;&quot;Type&quot;:32,&quot;block_id&quot;:&#123;&quot;hash&quot;:&quot;602C388864F8CBF5F799ED7AAEE8A71F206F200719187CF6B918101F748F8438&quot;,&quot;parts&quot;:&#123;&quot;hash&quot;:&quot;3DC5C676DC9DAFC0EFB9EA5705D1FEAB57F4B89663FD57D8CA01885931C83C73&quot;,&quot;total&quot;:1&#125;&#125;,&quot;height&quot;:1,&quot;pol_round&quot;:-1,&quot;round&quot;:0,&quot;signature&quot;:&quot;UKRIZf+EKc73YFoDvvvet8pswiR/JWP7WT0ms+hmpqo/NgXX1Z+iLWtTRiryjNNoeTZOFESnyauzKa6z4HGiCQ==&quot;,&quot;timestamp&quot;:&quot;2022-01-15T10:09:13.046562Z&quot;&#125;</span><br><span class="line">2022-01-15T18:09:13+08:00 INFO received complete proposal block hash=602C388864F8CBF5F799ED7AAEE8A71F206F200719187CF6B918101F748F8438 height=1 module=consensus</span><br><span class="line">2022-01-15T18:09:13+08:00 INFO finalizing commit of block hash=602C388864F8CBF5F799ED7AAEE8A71F206F200719187CF6B918101F748F8438 height=1 module=consensus num_txs=0 root=</span><br><span class="line">2022-01-15T18:09:13+08:00 INFO executed block height=1 module=state num_invalid_txs=0 num_valid_txs=0</span><br><span class="line">2022-01-15T18:09:13+08:00 INFO committed state app_hash=0000000000000000 height=1 module=state num_txs=0</span><br><span class="line">2022-01-15T18:09:14+08:00 INFO Timed out dur=903.604 height=2 module=consensus round=0 step=1</span><br><span class="line">2022-01-15T18:09:14+08:00 INFO received proposal module=consensus proposal=&#123;&quot;Type&quot;:32,&quot;block_id&quot;:&#123;&quot;hash&quot;:&quot;5677777BE540DADC8D5C29238FCE04D60B8F37F694C3E2455E7C84211192BCD6&quot;,&quot;parts&quot;:&#123;&quot;hash&quot;:&quot;F14D63CF02B3E24873FB882DD14BB24451AC7C3B727C7E2B701187C4C1E0FB7D&quot;,&quot;total&quot;:1&#125;&#125;,&quot;height&quot;:2,&quot;pol_round&quot;:-1,&quot;round&quot;:0,&quot;signature&quot;:&quot;4dxc7YP4kj3kYxcAA+gVd45gzPm7OR+jjnEO/yysqjtPpNZShz/xNwQ1lGr/ez/VbQ6VYpyiWpfEkZ0yZzQvAw==&quot;,&quot;timestamp&quot;:&quot;2022-01-15T10:09:14.182702Z&quot;&#125;</span><br><span class="line">2022-01-15T18:09:14+08:00 INFO received complete proposal block hash=5677777BE540DADC8D5C29238FCE04D60B8F37F694C3E2455E7C84211192BCD6 height=2 module=consensus</span><br><span class="line">2022-01-15T18:09:14+08:00 INFO finalizing commit of block hash=5677777BE540DADC8D5C29238FCE04D60B8F37F694C3E2455E7C84211192BCD6 height=2 module=consensus num_txs=0 root=0000000000000000</span><br><span class="line">2022-01-15T18:09:14+08:00 INFO executed block height=2 module=state num_invalid_txs=0 num_valid_txs=0</span><br><span class="line">2022-01-15T18:09:14+08:00 INFO committed state app_hash=0000000000000000 height=2 module=state num_txs=0</span><br><span class="line">2022-01-15T18:09:15+08:00 INFO Timed out dur=916.435 height=3 module=consensus round=0 step=1</span><br><span class="line">2022-01-15T18:09:15+08:00 INFO received proposal module=consensus proposal=&#123;&quot;Type&quot;:32,&quot;block_id&quot;:&#123;&quot;hash&quot;:&quot;D0D03A1D4F18E4437BE7DC0A5A5CAEEC4AC60844812925FF49E5D100A1734EA7&quot;,&quot;parts&quot;:&#123;&quot;hash&quot;:&quot;162DFDBEAD99485E176D568C492B166BCB171050FEB687B6126F555920B49E47&quot;,&quot;total&quot;:1&#125;&#125;,&quot;height&quot;:3,&quot;pol_round&quot;:-1,&quot;round&quot;:0,&quot;signature&quot;:&quot;SISLt3TOCH1kMyMvdwzxUgM1Pt+iXcB/7erNo1Hoz/etJ/bES4+yHT/NLpUMxR4/6yuItCl5tLCnn7lAkiOrDA==&quot;,&quot;timestamp&quot;:&quot;2022-01-15T10:09:15.317317Z&quot;&#125;</span><br><span class="line">2022-01-15T18:09:15+08:00 INFO received complete proposal block hash=D0D03A1D4F18E4437BE7DC0A5A5CAEEC4AC60844812925FF49E5D100A1734EA7 height=3 module=consensus</span><br><span class="line">2022-01-15T18:09:15+08:00 INFO finalizing commit of block hash=D0D03A1D4F18E4437BE7DC0A5A5CAEEC4AC60844812925FF49E5D100A1734EA7 height=3 module=consensus num_txs=0 root=0000000000000000</span><br><span class="line">2022-01-15T18:09:15+08:00 INFO executed block height=3 module=state num_invalid_txs=0 num_valid_txs=0</span><br><span class="line">2022-01-15T18:09:15+08:00 INFO committed state app_hash=0000000000000000 height=3 module=state num_txs=0</span><br><span class="line">2022-01-15T18:09:16+08:00 INFO Timed out dur=913.594 height=4 module=consensus round=0 step=1</span><br><span class="line">2022-01-15T18:09:16+08:00 INFO received proposal module=consensus proposal=&#123;&quot;Type&quot;:32,&quot;block_id&quot;:&#123;&quot;hash&quot;:&quot;CBD114A414D57D92273EDCAEE541088B745606B989891B8B486A62846F451146&quot;,&quot;parts&quot;:&#123;&quot;hash&quot;:&quot;752DE3634222AC0150B8A2187D2559149B85599693A52F0BB3539B3C4E3D1573&quot;,&quot;total&quot;:1&#125;&#125;,&quot;height&quot;:4,&quot;pol_round&quot;:-1,&quot;round&quot;:0,&quot;signature&quot;:&quot;kIzWuc2D/0NmQG2n6dIZmD0RFIwSF9Yra9+bPgkpZCS2oM5B1v6yT9HKj71r0lExaVbvNQ66TRKmaSftBUCKBg==&quot;,&quot;timestamp&quot;:&quot;2022-01-15T10:09:16.429801Z&quot;&#125;</span><br><span class="line">2022-01-15T18:09:16+08:00 INFO received complete proposal block hash=CBD114A414D57D92273EDCAEE541088B745606B989891B8B486A62846F451146 height=4 module=consensus</span><br><span class="line">2022-01-15T18:09:16+08:00 INFO finalizing commit of block hash=CBD114A414D57D92273EDCAEE541088B745606B989891B8B486A62846F451146 height=4 module=consensus num_txs=0 root=0000000000000000</span><br><span class="line">2022-01-15T18:09:16+08:00 INFO executed block height=4 module=state num_invalid_txs=0 num_valid_txs=0</span><br><span class="line">2022-01-15T18:09:16+08:00 INFO committed state app_hash=0000000000000000 height=4 module=state num_txs=0</span><br></pre></td></tr></table></figure><h2 id="goland中配置"><a href="#goland中配置" class="headerlink" title="goland中配置"></a>goland中配置</h2><p>添加启动参数: node --proxy-app=kvstore</p><p><img src="/posts/c43a12b2/goland%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.png" alt="goland启动参数配置"></p><p>tendermint的启动依赖于<code>cobra</code>这个命仅行框架，通过源码可以看到，启动命令start的别名就是 node、run，所以使用 start 和 node 是等价就是，node只是start的一个别名。</p><p><img src="/posts/c43a12b2/start%E5%90%AF%E5%8A%A8%E6%BA%90%E7%A0%81.png" alt="start启动源码"></p><h2 id="通过debug启动"><a href="#通过debug启动" class="headerlink" title="通过debug启动"></a>通过debug启动</h2><p>到这里，通过debug就可以正常进行开发调试了。</p><p><img src="/posts/c43a12b2/debug%E5%90%AF%E5%8A%A8.png" alt="debug启动"></p><h2 id="vim-go-启动项目"><a href="#vim-go-启动项目" class="headerlink" title="vim-go 启动项目"></a>vim-go 启动项目</h2><p>有时候，习惯于在vim-go进行开发，我很多时间是用vim-go在开发，这里介绍一个使用vim-go进行启动和调试。</p><h3 id="vim-go启动"><a href="#vim-go启动" class="headerlink" title="vim-go启动"></a>vim-go启动</h3><p>tendermint 的启动服务命令在：<code>cmd/tendermint</code> 目录下。<br>在命令模式下输入:</p><blockquote><p>:GoRun main.go node --proxy-app=kvstore</p></blockquote><p><img src="/posts/c43a12b2/vim-go%E5%90%AF%E5%8A%A8.png" alt="vim-go启动"><br>启动输出<br><img src="/posts/c43a12b2/%E5%90%AF%E5%8A%A8%E8%BE%93%E5%87%BA.png" alt="启动输出.png"></p><h3 id="vim-go-debug启动"><a href="#vim-go-debug启动" class="headerlink" title="vim-go debug启动"></a>vim-go debug启动</h3><blockquote><p>:GoDebug main.go node --proxy-app=kvstore</p></blockquote><p><img src="/posts/c43a12b2/vim-godebug%E5%90%AF%E5%8A%A8tendermint.png" alt="vim-godebug启动tendermint"></p><h3 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h3><blockquote><p>curl -s localhost:26657/status</p></blockquote><p><img src="/posts/c43a12b2/%E6%9F%A5%E7%9C%8B%E8%8A%82%E7%82%B9%E7%8A%B6%E6%80%81.png" alt="查看节点状态"></p><p>OK，基本上 tendermint 项目的启动方式都介绍完毕，使用基于tendermint 开发的小伙伴应该能解决一些小问题。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> tendermint </category>
          
          <category> tendermint </category>
          
          <category> Tendermint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> tendermint </tag>
            
            <tag> 初始化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十步学习法</title>
      <link href="posts/997e4410.html"/>
      <url>posts/997e4410.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在IT行业，学习能力是一种必须的素养</p></blockquote><p>在开发行业中，技术的迭代是非常之快，如何保证自身的技术随之迭代更新，就需在强大的学习能力，我在多年的摸索中总结出自己的一套学习方法，中间参考过各种不同的学习方法，其中的十步学习法是最接近我自身总结的方法。分享出来让更多小伙伴能够从中吸收优秀的方法应用到实际学习中。</p><h2 id="第一步到第六步：概览全局，设定目标，搜寻资源，创建计划"><a href="#第一步到第六步：概览全局，设定目标，搜寻资源，创建计划" class="headerlink" title="第一步到第六步：概览全局，设定目标，搜寻资源，创建计划"></a>第一步到第六步：概览全局，设定目标，搜寻资源，创建计划</h2><p>集中精力完成足够的前期调研，确保自己明确知道学习的内容，以及如何确定自己达成目标，挑选最好的资源来帮助自己实现目标，制定学习计划。</p><h3 id="第一步：了解全局"><a href="#第一步：了解全局" class="headerlink" title="第一步：了解全局"></a>第一步：了解全局</h3><p>首先对需要学习的课题进行一些基础性研究，对该主题有一个全局性的了解。</p><h3 id="第二步：确定范围"><a href="#第二步：确定范围" class="headerlink" title="第二步：确定范围"></a>第二步：确定范围</h3><p>根据自身的需求，决定学习的重点和学习的范围，在此阶段容易犯的一个错误就是：试图解决太大的问题而让自己陷入困境中。结合从第一步中获得的信息，明确自己的学习范围，尽可能的保持专注；同时也需要阐述自己的学习理由来帮助自己界定学习的范围。学习的范围务必大小适当，既能符合学习理由，有能符合自己的时间限制。</p><h3 id="第三步：定义目标"><a href="#第三步：定义目标" class="headerlink" title="第三步：定义目标"></a>第三步：定义目标</h3><p>确定自己的学习目标，明确学习完成后应该达成的效果，根据简明清晰的目标，勾勒出勤奋学习后成功的图景。成功的标准应该是具体的，无二义性的。</p><h3 id="第四步：寻找资源"><a href="#第四步：寻找资源" class="headerlink" title="第四步：寻找资源"></a>第四步：寻找资源</h3><p>尽可能的尝试多种渠道和方式获取尽可能多的和主题相关资源，该阶段无需考虑这些资源的质量。</p><h3 id="第五步：创建学习计划"><a href="#第五步：创建学习计划" class="headerlink" title="第五步：创建学习计划"></a>第五步：创建学习计划</h3><p>需要在最短的时间内找到正确的学习路径，并找到和到达路径中重要的地标。打造自己的学习计划，一个好的方法是观察别人是如何教授你感兴趣的主题的。通览收到到的全部资源，就可以对自己需要那些内容以及如何组织这些内容有更清晰的认识。</p><h3 id="第六步：筛选资源"><a href="#第六步：筛选资源" class="headerlink" title="第六步：筛选资源"></a>第六步：筛选资源</h3><p>对找到的资源进行筛选，挑选出最有价值的几项来帮助你实现自己的目标。</p><hr><h2 id="第七步到第十步：循环往复"><a href="#第七步到第十步：循环往复" class="headerlink" title="第七步到第十步：循环往复"></a>第七步到第十步：循环往复</h2><p>通过 “学习——实践——掌握——教授”(LDLT)的方式来真正领悟知识。通过掌握恰到好处的基础知识开始，通过动手实践来学习，同时通过自我探索收集问题。之后，掌握了足够多的有用知识。最后，将自己所学教给他人，以此来弥补自己在学习过程中的不足，同时通过深入思考巩固知识。</p><h3 id="第七步：开始学习，浅尝辄止"><a href="#第七步：开始学习，浅尝辄止" class="headerlink" title="第七步：开始学习，浅尝辄止"></a>第七步：开始学习，浅尝辄止</h3><p>专注与掌握自己所需，能在下一步动手操作的最小量的知识。</p><h3 id="第八步：动手操作，边玩边学"><a href="#第八步：动手操作，边玩边学" class="headerlink" title="第八步：动手操作，边玩边学"></a>第八步：动手操作，边玩边学</h3><p>在掌握操作动手最小量的知识的情况下亲自操作和亲身体验。通过在探索和实践过程中，会产生的各种问题。这些问题会引导着你走向真正重要的方向。当回头寻找问题的答案时，不只是这些问题迎刃而解，而且你记得的东西比你学习的东西要多得多，因为你所学到的都是对你很重要的东西。</p><p>把那些暂时还没有答案的问题记录下来，在下一步中就会有机会找出这些问题的答案。</p><h3 id="第九步：全面掌握，学以致用"><a href="#第九步：全面掌握，学以致用" class="headerlink" title="第九步：全面掌握，学以致用"></a>第九步：全面掌握，学以致用</h3><p>好奇心是学习特别是自学的重要组成部分。为了有效利用自己选择的资料，为了上一步生产的问题寻求答案（带着问题学习）。不用担心回头再去操作，付出更多，因为这不仅能够让你找到问题的答案，也能让你学习新东西。给自己足够多的时间去深入理解自己的主题，你可以阅读，可以实验，可以观察，也可以操作。试着把自己正在学习的内容与最终目标关联起来。</p><h3 id="第十步：乐为人师，融会贯通"><a href="#第十步：乐为人师，融会贯通" class="headerlink" title="第十步：乐为人师，融会贯通"></a>第十步：乐为人师，融会贯通</h3><p>要想深入掌握一门学问，并且融会贯通，那么必须要做到能够教授给别人，在这一过程中，你要切实刨析并理解自己所学的知识，将其内化到自己的思想；同时，也要用能够让他人理解的方式精心组织这些信息。在这个过程中，你会发现很多自以为明白的知识点，其实并没有你想象的那么透彻。这一过程会将那些以前自己没太明白的东西联系起来，并简化到自己的大脑中已有的信息，将它们浓缩并经常复习。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 学习方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring 源码01 开始阅读</title>
      <link href="posts/8cad0e75.html"/>
      <url>posts/8cad0e75.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在开始源码阅读之前，一定要使用过这个产品，了解这个产品的功能、特点。</p></blockquote><p>在开始源码阅读之前，需要先明白几个事</p><ol><li>是否足够了解</li><li>要阅读到什么程序</li><li>如何开始、从哪里开始</li></ol><h2 id="开始前"><a href="#开始前" class="headerlink" title="开始前"></a>开始前</h2><p>最好是带着问题去阅读源码，不纠结于小细节。<br>我一般读源码就是碰到问题后，带着问题去看，效果更好，不要想着假大空，把源码当小说一样看。<br>单个问题解决后，再向外延伸，就可以把一些点串起来。<br>最后，需要反复看一些重点部份，消失对源码的陌生感之后就会能看进去。<br>熟悉之后就会一种想要了解更多的感觉就会一直往下看，这个就是自动驱动的动力。</p><p>如果看不下去，不要责怪自己懒，人对看不见短期收益的事提不起兴趣这才是正常的一个人，趋利避害是正常的。<br>看不下去，该干嘛干，强迫自己看效果很差。不要骗自己，假装努力是在浪费时间，干IT的都很忙，看不去就看改改bug。</p><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ol><li>对说某个功能，在看之前，可以有自己的推测，想像后续的流程是如何执行的。</li><li>切一个 read_code 分支用来作注释，写上自己的见解，也方便以后再回到这块代码时能快速理解。</li><li>找到真实阅读源码的动力，如：<ul><li>准备跳槽、面试</li><li>想了解原理</li><li>解决项目中的问题</li><li>装逼</li></ul></li><li>跑测试用例，好的开源软件有非常详细的测试用例，可以验证到每一个细节，跑测试用例就可以让人学到不东西。</li><li>阅读后的输出整理，这个不用多说，学习就是输入 + 输出。</li><li>尽量找机会跟同事、同行讨论你看过的源码。<ul><li>如果你看过了，就让你装到了。</li><li>如果你没看过不了解，别人帮你查缺补漏</li></ul></li></ol><h2 id="如何阅读"><a href="#如何阅读" class="headerlink" title="如何阅读"></a>如何阅读</h2><h3 id="从哪里开始"><a href="#从哪里开始" class="headerlink" title="从哪里开始"></a>从哪里开始</h3><p>Spring 模块之么多、项目这么大，到哪里开始合适？<br>如果你是想解决问题，直接定位需要阅读的部份；<br>如果你是想深入了解，那有两种方式：</p><ol><li>从关键最重要的几个概念开始，然后延伸</li><li>了解了整个框架的脉络后，从最基础的部分往上看</li></ol><p>另外，看代码不是看小说，不是要一字一句的陷入到细节，切记。当然如果你就是喜欢这样。</p><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>这个是我比较荐的一个方法，看完一遍之后，通过测试用例可以跟着代码走一遍，调细节。</p><h2 id="阅读安排"><a href="#阅读安排" class="headerlink" title="阅读安排"></a>阅读安排</h2><p>打开 Spring 项目，先来罗列一下整个项目。这个可太多了，分一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">spring-aop</span><br><span class="line">spring-aspects</span><br><span class="line">spring-beans</span><br><span class="line">spring-context</span><br><span class="line">spring-context-indexer</span><br><span class="line">spring-context-support</span><br><span class="line">spring-core</span><br><span class="line">spring-expression</span><br><span class="line">spring-instrument</span><br><span class="line">spring-jcl</span><br><span class="line">spring-jdbc</span><br><span class="line">spring-jms</span><br><span class="line">spring-messaging</span><br><span class="line">spring-orm</span><br><span class="line">spring-oxm</span><br><span class="line">spring-r2dbc</span><br><span class="line">spring-test</span><br><span class="line">spring-tx</span><br><span class="line">spring-web</span><br><span class="line">spring-webflux</span><br><span class="line">spring-webmvc</span><br><span class="line">spring-websocket</span><br></pre></td></tr></table></figure><h3 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h3><blockquote><p>spring-core<br>spring-beans<br>spring-context<br>spring-context-support<br>spring-expression</p></blockquote><h3 id="切面编程"><a href="#切面编程" class="headerlink" title="切面编程"></a>切面编程</h3><blockquote><p>spring-aop<br>spring-aspects</p></blockquote><h3 id="代理模块"><a href="#代理模块" class="headerlink" title="代理模块"></a>代理模块</h3><blockquote><p>spring-instrument</p></blockquote><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><blockquote><p>spring-web<br>spring-webflux<br>spring-webmvc<br>spring-websocket</p></blockquote><p>从最基础的核心模块开始学习，了解最基本的原理，中间会遇到各种其它的基础知识和技术，就可以顺便拓展一下技能树。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> 源码阅读 </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> code </category>
          
          <category> spring </category>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 源码 </tag>
            
            <tag> spring </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shutdownHook 死锁解决</title>
      <link href="posts/247689d4.html"/>
      <url>posts/247689d4.html</url>
      
        <content type="html"><![CDATA[<p>最近碰到一个问题，通过脚本执行<code>kill -15</code>后，程序并没有退出，进程一直都在，最后被退出脚本的通过<code>kill -9</code>，杀死。导致数据完整性被破坏，程序再重启后不可用。通过排查认后发现是在执行<code>shutdownHook</code>时死锁程序死锁。</p><h2 id="复现问题"><a href="#复现问题" class="headerlink" title="复现问题"></a>复现问题</h2><p>导致问题的代码，通过定位发现，程序在退出时卡住，线上代码敏感，写一个demo来复现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Locking&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;Locked&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Exiting&quot;</span>);</span><br><span class="line">      System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>Exiting<br>Locking</p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>排查原因<br>分析一下 addShutdownHook 这个方法是怎么执行的，重点是 ApplicationShutdownHooks，每一个 shutdownHook 都使用一个Thread包装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addShutdownHook</span><span class="params">(Thread hook)</span> </span>&#123;</span><br><span class="line">    SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sm.checkPermission(<span class="keyword">new</span> RuntimePermission(<span class="string">&quot;shutdownHooks&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ApplicationShutdownHooks.add(hook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点：hooks，每个 hook线程put到hooks中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Thread hook)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hooks == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Shutdown in progress&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hook.isAlive())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Hook already running&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hooks.containsKey(hook))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Hook previously registered&quot;</span>);</span><br><span class="line"></span><br><span class="line">    hooks.put(hook, hook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加后谁来处理shutdown这个操作，是 Shutdown.add 这里起了一个线程，处理所以主要的逻辑在 runHooks</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Shutdown.add(<span class="number">1</span> <span class="comment">/* shutdown hook invocation order */</span>,</span><br><span class="line">            <span class="keyword">false</span> <span class="comment">/* not registered if shutdown in progress */</span>,</span><br><span class="line">            <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    runHooks();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        hooks = <span class="keyword">new</span> IdentityHashMap&lt;&gt;();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">        <span class="comment">// application shutdown hooks cannot be added if</span></span><br><span class="line">        <span class="comment">// shutdown is in progress.</span></span><br><span class="line">        hooks = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中 hook.start(); 调用执行 hook的方法，之后调用 hook.join释放执行权。<br>问题就出在 hook.join上，程序执行到这里之后，卡住死锁，出不去了。<br>为什么，因为 join 实际就是 wait(0)，一旦当前线程调用wait(0)，就相当于释放执行权，等待其实线程notify()才能继续执行。<br>但是main线程调用System.exit(0)后，synchronized 当前线程为 main，hook.join拿不到被main未释放的锁，所以卡住</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runHooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Collection&lt;Thread&gt; threads;</span><br><span class="line">    <span class="keyword">synchronized</span>(ApplicationShutdownHooks.class) &#123;</span><br><span class="line">        threads = hooks.keySet();</span><br><span class="line">        hooks = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Thread hook : threads) &#123;</span><br><span class="line">        hook.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Thread hook : threads) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hook.join();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过工具排查，可以清楚的看到，Thread-0 即shutdown线程去引用已经被main线程持有的锁对象，而导至被 BLOCKED 住</p><p><img src="/posts/247689d4/%E6%AD%BB%E9%94%81.png" alt="死锁"></p><p>再看线程状态</p><p><img src="/posts/247689d4/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png" alt="线程状态"></p><p>通过代码线程堆栈来确认就是这个原因</p><ol><li>main 方法是：WAIT 状态</li><li>Thread-0是：RUNNING 状态，但是进入synchronized之后就会BLOCKED住</li></ol><p>这里就对应上图的两个线程的状态</p><p><img src="/posts/247689d4/%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88.png" alt="线程堆栈"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>即然已经知道原因了，那就好办：</p><ol><li>移除 shutdownHook 中不必要的加锁，shutdown 场景中很不需要用到加锁</li><li>使用不同的加锁对象，如果一定需要加锁，可以在 shutdownHook 的线程内使用一把新的锁，这样即可以保证安全性，又不会死锁。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
            <tag> shutdownshutdownHook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matic checkpoint作用</title>
      <link href="posts/8ca79094.html"/>
      <url>posts/8ca79094.html</url>
      
        <content type="html"><![CDATA[<h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="/posts/8ca79094/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.svg" alt="整体架构"></p><h2 id="检查点-Checkpoint"><a href="#检查点-Checkpoint" class="headerlink" title="检查点 Checkpoint"></a>检查点 Checkpoint</h2><blockquote><p>RootHash is the Merkle hash of Bor block hashes from StartBlock to EndBlock<br>checkpoint 就是一开始区块到结束区块构建成的Merkle根hash。</p></blockquote><p>其实就是一组block区块的<code>keccak256</code>，再组装起来，生成一个<code>Merkle</code>的<code>Hash</code>。<br>然后提交到主链给合约验证合法性，以更新侧链状态。</p><p><img src="/posts/8ca79094/%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B.svg" alt="总体流程"></p><h2 id="两个作用"><a href="#两个作用" class="headerlink" title="两个作用"></a>两个作用</h2><p>先说两个概念：</p><ol><li>铸币</li><li>燃烧</li></ol><p>用户从 ETH-&gt;MATIC 即，在ETH链上质押ETH到Matic链上，是存款操作，matic链上会进行相关的铸币操作。<br>用户从 MATIC-&gt;ETH 即，从Matic链上提现到ETH链上，是取款操作，Matic链上就会先燃烧Matic代币，再从ETH中释放对应ETH，就是燃烧。</p><p>1.通过提交到以太坊主链上的 checkpoint来决定，侧链上block的最终性(finality)。<br>2.在用户提现资产到主链上时，可以提供燃烧证明。</p><p>检查点很重要，因为它们在以太坊链上提供了最终性。<br>Heimdall 层允许将 Bor 生成的区块聚合到单个 Merkle 根中，并定期将其发布到以太坊主链。此已发布状态也称为检查点，因此整个过程称为检查点。</p><p>除了在主链上提供最终性之外，检查点（checkpoint）在取款中还可以发挥非常重要的作用，因为它们包含在用户取款时代币燃烧证明（取款）。<br>它允许用户使用 Patricia Merkle 证明和头块证明在根和约上证明其剩余代币。<br>注意，要证明剩余代币，必须通过PoS（权益持有人，就是 validtor）将头块提交到根链。<br>提款过程将照常收取以太坊gas费。<br>这些信息包含了用来验证用户在侧链上真实燃烧了一定数量代币的所需要的所有信息。</p><h2 id="燃烧证明"><a href="#燃烧证明" class="headerlink" title="燃烧证明"></a>燃烧证明</h2><p>取款，核心 Merkle 根<br>燃烧证明是什么：<br>简单说就是证明用户在侧链上确实发生了一笔资产提现的交易，验证这个燃烧证明有效的话，会将资产打到用户的地址，反之，如果验证不通过，则用户的这笔提现将失败。</p><p>用户等待checkpoint提交到主链上后，在侧链通过bttc sdk可以获取燃烧证明（the proof of burn trx）。</p><p>这里燃烧证明解决的是上面的第三个问题，即目标链上的信息传递到主链上的有效性问题。</p><h2 id="形成一个-checkpoint（工作原理）"><a href="#形成一个-checkpoint（工作原理）" class="headerlink" title="形成一个 checkpoint（工作原理）"></a>形成一个 checkpoint（工作原理）</h2><blockquote><p>RootHash is the Merkle hash of Bor block hashes from StartBlock to EndBlock</p></blockquote><p>一个区块内的多笔交易计算出blockhash</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blockHash = keccak256([number, time, tx hash, receipt hash]) </span><br></pre></td></tr></table></figure><p>所有block hash参于生成 Merkle Hash</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Pseudocode <span class="keyword">for</span> the root hash <span class="keyword">for</span> <span class="number">1</span> to n Bor blocks:</span><br><span class="line"></span><br><span class="line">B(<span class="number">1</span>) := keccak256([number, time, tx hash, receipt hash])</span><br><span class="line">B(<span class="number">2</span>) := keccak256([number, time, tx hash, receipt hash])</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">B(n) := keccak256([number, time, tx hash, receipt hash])</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkpoint is Merkle root of all block hash</span></span><br><span class="line">checkpoint<span class="string">&#x27;s root hash = Merkel[B(1), B(2), ....., B(n)]</span></span><br></pre></td></tr></table></figure><p>而上面提到的这笔用来申请提现的燃烧交易，就被包含在这个区块当中，并且被用来计算出这个块的blockhash.当累计了一定数量的块之后(从startblock到endblock，参见上面checkpoint结构)，这些块被计算出各自的blockhash，然后用这些blockhash来计算出root hash,如下面共识所示:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Checkpoint block header struct</span></span><br><span class="line"><span class="keyword">type</span> Checkpoint <span class="keyword">struct</span> &#123;</span><br><span class="line">        Proposer   HeimdallAddress <span class="string">`json:&quot;proposer&quot;`</span></span><br><span class="line">        StartBlock <span class="keyword">uint64</span>          <span class="string">`json:&quot;start_block&quot;`</span></span><br><span class="line">        EndBlock   <span class="keyword">uint64</span>          <span class="string">`json:&quot;end_block&quot;`</span></span><br><span class="line">        RootHash   HeimdallHash    <span class="string">`json:&quot;root_hash&quot;`</span></span><br><span class="line">        BorChainID <span class="keyword">string</span>          <span class="string">`json:&quot;bor_chain_id&quot;`</span></span><br><span class="line">        TimeStamp  <span class="keyword">uint64</span>          <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码上看默认是5分钟提一次checkpoint。<br>目前 侧链(BOR) 是2s 一个块，checkpoint最低提交256个快，checkpoint_poll_interval 最低合理值为8m32s，<br>最大值为1024<code>*</code>2s ，34m8s，可设置[9,30]分钟，如果有多条主链的的情况下，可根据各主链手续费不同，可以拆分此checkpoint_poll_interval分别设置。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DefaultCheckpointerPollInterval = <span class="number">5</span> * time.Minute</span><br><span class="line">DefaultSyncerPollInterval       = <span class="number">1</span> * time.Minute</span><br><span class="line">DefaultNoACKPollInterval        = <span class="number">1010</span> * time.Second</span><br><span class="line">DefaultClerkPollInterval        = <span class="number">10</span> * time.Second</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> polygon </category>
          
          <category> polygon </category>
          
          <category> matic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> matic </tag>
            
            <tag> polygon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 5.8 安装</title>
      <link href="posts/3d0988b0.html"/>
      <url>posts/3d0988b0.html</url>
      
        <content type="html"><![CDATA[<h2 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h2><p>mysql 这里通过rpm的方式安装，使用 MySQL 官方提供的安装包选择适合自己系统的包进行安装<br>到这个页面下选择适合自己系统的版本：<br><a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a></p><p>Select Operating System: 选择系统，如果是Linux CentOS 选 Red Hat即可，如果没有你的版本，选 Linux-generic。</p><p>Select OS Version: 选对应的版本，CentOS 7 选 Enterprise 7 x86, 64-bit。</p><p>最近添新增了一些CentOS7 的机器，就使用 Red Hat 的版本进行安装。</p><p><img src="/posts/3d0988b0/%E9%80%89%E6%8B%A9%E7%89%88%E6%9C%AC.png" alt="选择版本"></p><h2 id="御载旧版本"><a href="#御载旧版本" class="headerlink" title="御载旧版本"></a>御载旧版本</h2><p>一定要御载干净，否则安装过程中有版本问题！！！<br>yum 和 rpm 两种方式二选一:<br>列出所有已安装的，但不在rpm中的包<br>yum list installed mysql<br>结果</p><blockquote><p>mysql-libs.x86_64<br>yum -y remove mysql-libs.x86_64</p></blockquote><p>等价于上面的命令<br>rpm -qa | grep mysql<br>结果</p><blockquote><p>mysql80-community-release-el7-4.noarch<br>mysql-community-common-8.0.27-1.el7.x86_64</p></blockquote><p>阿里去自带 MariaDB，并不是需要的直接御载。<br>移除</p><blockquote><p>rpm -e mariadb-libs-5.5.60-1.el7_5.x86_64</p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>wget <a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-1.el7.x86_64.rpm-bundle.tar">https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-1.el7.x86_64.rpm-bundle.tar</a></p></blockquote><p>EL是Red Hat Enterprise Linux的简写</p><ul><li>EL6 软件包用于在Red Hat 6.x, CentOS 6.x, and CloudLinux 6.x进行安装</li><li>EL7 软件包用于在Red Hat 7.x, CentOS 7.x, and CloudLinux 7.x的安装</li></ul><p><img src="/posts/3d0988b0/%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6.png" alt="下载文件"></p><p>必须安装(注意顺序)</p><blockquote><p>yum install libaio<br>sudo rpm -ivh mysql-community-common-8.0.27-1.el7.x86_64.rpm<br>sudo rpm -ivh mysql-community-client-plugins-8.0.27-1.el7.x86_64.rpm<br>sudo rpm -ivh mysql-community-libs-8.0.27-1.el7.x86_64.rpm<br>sudo rpm -ivh mysql-community-client-8.0.27-1.el7.x86_64.rpm<br>sudo rpm -ivh mysql-community-server-8.0.27-1.el7.x86_64.rpm</p></blockquote><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p>systemctl start  mysqld.service</p></blockquote><p>查看服务状态</p><blockquote><p>systemctl status mysqld.service</p></blockquote><p><img src="/posts/3d0988b0/%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81.png" alt="查看状态"></p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>查看默认密码，这是一个生成的随机密码，复制出来后，修改成己的密码。</p><blockquote><p>grep &quot;password&quot; /var/log/mysqld.log</p></blockquote><blockquote><p>mysql -u root -p</p></blockquote><p>输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库<br>格式：</p><blockquote><p>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;;</p></blockquote><p>输入：</p><blockquote><p>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;abcdefg1234567&#39;;</p></blockquote><p>成功提示：Query OK, 0 rows affected (0.01 sec)</p><p>如果提示：</p><blockquote><p>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p></blockquote><p>说明密码不满足默认安全策略，把密码搞复杂一点，就是那种自己也记不住，只能靠复制粘贴的那种。<br>也可以调低安全策略：</p><blockquote><p>set global validate_password_policy=0;<br>set global validate_password_length=1;</p></blockquote><h2 id="安全策略，非常有必要"><a href="#安全策略，非常有必要" class="headerlink" title="安全策略，非常有必要"></a>安全策略，非常有必要</h2><p>要启动mysql服务的时候，有一些提示说明，在那里有一些有用的信息。<br>其中就有开启安全策略的方式:</p><blockquote><p>/usr/bin/mysql_secure_installation</p></blockquote><p>下面有很多选项，不用头疼：</p><p>Remove anonymous users? y 移除<br>移除 anonymous 用户</p><p>Disallow root login remotely? y<br>是否开启 root 远程访问？<br>选 Y 开启远程访问，这个需要考虑一下，如果是本地开发的话，不需要开，如果是不同机器上做主从复制的话，就开启</p><p>Remove test database? y<br>自带的测试数据库，移除。</p><p>Reload privilege tables now? y<br>重启数据库权限表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Enter password for user root:</span><br><span class="line">The &#39;validate_password&#39; component is installed on the server.</span><br><span class="line">The subsequent steps will run with the existing configuration</span><br><span class="line">of the component.</span><br><span class="line">Using existing password for root.</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 100</span><br><span class="line">Change the password for root ? ((Press y|Y for Yes, any other key for No) : n</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&#39;localhost&#39;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">By default, MySQL comes with a database named &#39;test&#39; that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br></pre></td></tr></table></figure><h2 id="开启远程登陆"><a href="#开启远程登陆" class="headerlink" title="开启远程登陆"></a>开启远程登陆</h2><blockquote><p>use mysql;</p></blockquote><p>host里指定ip，%是通配符，可以添加多条</p><blockquote><p>update user set host = &#39;%&#39; where user = &#39;root&#39;;<br>#刷新，否则不成功<br>flush privileges;</p></blockquote><p>查看当前用户的 host</p><blockquote><p>select host, user from user;</p></blockquote><p><img src="/posts/3d0988b0/%E6%9F%A5%E7%9C%8Bhost.png" alt="查看host"></p><p>退出</p><blockquote><p>quit;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> database </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tron-节点-FullNode节点启动</title>
      <link href="posts/632243fb.html"/>
      <url>posts/632243fb.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>tron 有三种节点类型：</p><ol><li>SuperNode：负责生产区块。tron链是DPOS共识，只有27个SR能够产块。</li><li>FullNode: 节点负责广播区块，不进行产块，网络中的FullNode转发区块、广播区块。</li><li>SolidityNode: 该节点类型已经合并为其它两种节点类型，不会单独运行或部署，所以不再单独部署。</li></ol><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>保证以下环境正常使用</p><ol><li>JDK 1.8<ul><li>注意不能高于或低于<code>1.8</code>版本，否则会有问题</li></ul></li><li>FullNode.jar</li></ol><h2 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a>启动节点</h2><p>项目的启动方式：</p><ol><li>官方脚本启动</li><li>手动指定参数启动</li><li>docker 启动</li></ol><h3 id="脚本方式"><a href="#脚本方式" class="headerlink" title="脚本方式"></a>脚本方式</h3><p>这种方式最简单，不过一般使用区块链的开发者都需要debug代码，所以一般在部署的时候使用脚本启动。<br>需要用到的文件，都可以从 <code>java-tron</code> 这个项目中获得。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tronprotocol/java-tron.git</span><br><span class="line">cd java-tron</span><br><span class="line">git checkout -t origin/master</span><br><span class="line">./gradlew build -x test</span><br></pre></td></tr></table></figure><p><code>gradlew</code>是在java-tron项目中的<code>gradle-wrapper.jar</code>提供的功能<code>Mave</code>也有类型的功能。</p><p>使用gradle编译后，把主要的关键文件拿出来:</p><ol><li>配置文件 config.conf</li><li>主程序 FullNode.jar</li><li>启动脚本 start.sh，在项目根目录</li></ol><p>FullNode.jar</p><p>使用 gradle 编译后会在<code>java-tron/build</code>目录下生成 FullNode.jar文件。</p><blockquote><p>java-tron/build/libs/FullNode.jar</p></blockquote><p>config.conf</p><blockquote><p>java-tron/framework/src/main/resources/config.conf</p></blockquote><p>start.sh</p><blockquote><p>java-tron/start.sh</p></blockquote><p>准备好以上文件后，准备启动FullNode.jar，并查看日志</p><blockquote><p>sh start.sh</p></blockquote><p><img src="/posts/632243fb/FullNode%E5%90%AF%E5%8A%A8.png" alt="FullNode启动"></p><p>产块日志，到这个阶段大概卡了30秒左右</p><p><img src="/posts/632243fb/%E4%BA%A7%E5%9D%97%E6%97%A5%E5%BF%97.png" alt="产块日志"></p><p>所有启动前和启动后的文件</p><p><img src="/posts/632243fb/%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E6%96%87%E4%BB%B6.png" alt="所有节点文件"></p><h2 id="手动启动"><a href="#手动启动" class="headerlink" title="手动启动"></a>手动启动</h2><p>手动启动服务，就是jar包启动，先排除JVM相关的优化参数，看看哪些是必须的参数。<br>至于JVM的优化参数，可以参考启动脚本当中官方给出的调优参数。</p><p><strong>-c</strong>: config配置文件路径<br><strong>-d</strong>: 指定数据库存放路径</p><blockquote><p>java -jar FullNode.jar -c config.conf</p></blockquote><hr><h2 id="docker-方式启动"><a href="#docker-方式启动" class="headerlink" title="docker 方式启动"></a>docker 方式启动</h2><p>在系统中先保证 docker 正常使用。</p><h3 id="取拉项目代码"><a href="#取拉项目代码" class="headerlink" title="取拉项目代码"></a>取拉项目代码</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tronprotocol/java-tron.git</span><br><span class="line">cd java-tron</span><br></pre></td></tr></table></figure><h3 id="构建本地镜象"><a href="#构建本地镜象" class="headerlink" title="构建本地镜象"></a>构建本地镜象</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t tronprotocol/java-tron .</span><br></pre></td></tr></table></figure><p><img src="/posts/632243fb/docker%E6%9E%84%E5%BB%BA.png" alt="docker构建"></p><h3 id="查看本地镜象"><a href="#查看本地镜象" class="headerlink" title="查看本地镜象"></a>查看本地镜象</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="/posts/632243fb/%E6%9F%A5%E7%9C%8Bdocker_images.png" alt="查看docker_images"></p><h3 id="启动镜象"><a href="#启动镜象" class="headerlink" title="启动镜象"></a>启动镜象</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 8090:8090 -p 8091:8091 -p 18888:18888 -p 50051:50051 --restart always tronprotocol/java-tron</span><br></pre></td></tr></table></figure><p><img src="/posts/632243fb/%E8%BF%90%E8%A1%8Cjava-tron%E7%9A%84docker%E9%95%9C%E8%B1%A1.png" alt="运行java-tron的docker镜象"></p><p>查看镜象运行情况，动行成功，状态 STATUS 是 Up 17 hours，这是因为我启动之后过了17个小时才回来查看状态。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE                    COMMAND                  CREATED        STATUS        PORTS                                                                                  NAMES</span><br><span class="line">f181fab2948f   tronprotocol/java-tron   &quot;./bin/docker-entryp…&quot;   17 hours ago   Up 17 hours   0.0.0.0:8090-8091-&gt;8090-8091/tcp, 0.0.0.0:18888-&gt;18888/tcp, 0.0.0.0:50051-&gt;50051/tcp   optimistic_khayyam</span><br></pre></td></tr></table></figure><p>查看下日志，容器ID是: <code>f181fab2948f</code>，<code>number=26981</code> 这个是当前处理的块高，跑了17个小时才处理到这里。</p><blockquote><p>docker exec -it f181fab2948f tail -f /java-tron/logs/tron.log</p></blockquote><p><img src="/posts/632243fb/%E6%9F%A5%E7%9C%8Bjava-tron_docker%E8%BF%90%E8%A1%8C%E6%97%A5%E5%BF%97.png" alt="查看java-tron_docker运行日志"></p><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><blockquote><p>docker container kill f181fab2948f</p></blockquote><p><img src="/posts/632243fb/%E5%81%9C%E6%AD%A2java-tron%E7%9A%84docker%E9%95%9C%E8%B1%A1.png" alt="停止java-tron的docker镜象"></p><p>如果不使用了可以把容器和镜象完全删除，容器运行会产生很多的数据占磁盘空间。</p>]]></content>
      
      
      <categories>
          
          <category> tron </category>
          
          <category> blockchain </category>
          
          <category> tron </category>
          
          <category> fullNode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> java-tron </tag>
            
            <tag> FullNode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea 2021 Debug卡住一直提示Collecting data</title>
      <link href="posts/ff7fe1c0.html"/>
      <url>posts/ff7fe1c0.html</url>
      
        <content type="html"><![CDATA[<p>还是IDEA 的问题 mac M1 加 IDEA2021的问题还真不少，debug时发现会一直卡住，在调用底层jar包时，创建一个对象就一直提示 Collecting data，并没有断点。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><img src="/posts/ff7fe1c0/%E8%A7%A3%E5%86%B3.png" alt="解决"></p><p>把 <code>Enable toString()</code> 去掉即可解决。</p><p>另外，彻底解决卡顿问题，还是要换 zulu JDK和IDEA(ideaIU-2021.2.2-aarch64.dmg)，这样一套搞下来就不卡了。</p><p>Zulu JDK<br><a href="https://www.azul.com/downloads/?package=jdk">https://www.azul.com/downloads/?package=jdk</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ide </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring 源码阅读环境</title>
      <link href="posts/992b6df6.html"/>
      <url>posts/992b6df6.html</url>
      
        <content type="html"><![CDATA[<p>要进行源码阅读之前，强调需要先对一个产品有熟悉的使用，就好像你想要造车，要先会开车，再去学习如何造车，否则一切都是停在理轮上，完全不了解这个车是如何运行的，没有概念。<br>推荐对需要阅读的源码先保存在自己仓库中，并创建一个源码分支，可以在阅读分析的过程中对重要点进行注释帮助加深理解。</p><h2 id="fork源码"><a href="#fork源码" class="headerlink" title="fork源码"></a>fork源码</h2><p>Spring 官方github源码仓库</p><p><a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p><p><img src="/posts/992b6df6/fork%E6%BA%90%E7%A0%81.jpg" alt="fork源码"></p><h2 id="构建源码阅读环境"><a href="#构建源码阅读环境" class="headerlink" title="构建源码阅读环境"></a>构建源码阅读环境</h2><p>将代码 clone 到本地，克隆完成后，IDEA自动打开项目。</p><p><img src="/posts/992b6df6/clone%E4%BB%A3%E7%A0%81.jpg" alt="clone代码"></p><p>报错处理，首次打开会报个错，别慌这是因为IDEA缺少必要插件，点右侧 gradle 的构建按钮构建一次。<br><img src="/posts/992b6df6/%E6%8A%A5%E9%94%99.jpg" alt="报错"></p><p>首次构建需要下载的包比较多，</p><p><img src="/posts/992b6df6/%E6%9E%84%E5%BB%BA.jpg" alt="构建"></p><h2 id="直接使用-git-clone-方式"><a href="#直接使用-git-clone-方式" class="headerlink" title="直接使用 git clone 方式"></a>直接使用 git clone 方式</h2><p>直接使用命令行git clone 项目的话，拉完代码后，IDEA 通过导入的方式导入项目。</p><blockquote><p>file---&gt;new---&gt;Project from Exisitings Sources</p></blockquote><p>后续步骤相同。</p><h2 id="gradle-问题"><a href="#gradle-问题" class="headerlink" title="gradle 问题"></a>gradle 问题</h2><p>spring 是基于gradle进行构建的，如果没有安装gradle也没有关系，IDEA会在启动时，自动根据当前环境下载gradle及插件。</p><p><img src="/posts/992b6df6/gradle.jpg" alt="gradle"></p><h2 id="构建成功"><a href="#构建成功" class="headerlink" title="构建成功"></a>构建成功</h2><p><img src="/posts/992b6df6/%E6%88%90%E5%8A%9F.jpg" alt="成功"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> 源码分析 </category>
          
          <category> code </category>
          
          <category> spring </category>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 源码 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gradle 安装</title>
      <link href="posts/d723a7c4.html"/>
      <url>posts/d723a7c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网</p><p><a href="https://gradle.org/">https://gradle.org/</a></p><p>下载页面<br><a href="https://gradle.org/releases/">https://gradle.org/releases/</a></p><p>选择自己需要的版本，下载已经编译好的二进制文件<br>Download: binary-only</p><p><img src="/posts/d723a7c4/%E5%AE%89%E8%A3%85.jpg" alt="安装"></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>设置 <code>.bash_profile</code> 文件添加</p><blockquote><p>export PATH=$PATH:/Users/liukai/workspaces/application/gradle-6.6.1/bin</p></blockquote><p>验证一下</p><p><img src="/posts/d723a7c4/%E9%AA%8C%E8%AF%81.jpg" alt="验证"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 安装 </tag>
            
            <tag> gradle </tag>
            
            <tag> 项目构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA2021使用tomcat启动时间超长</title>
      <link href="posts/719ff018.html"/>
      <url>posts/719ff018.html</url>
      
        <content type="html"><![CDATA[<p>最近换了 mac M1 加 IDEA2021 后，发现问题还真不少，先是解决了卡顿问题后，tomcat 启动时间从原来的十几秒，变成20分钟！！！超不正常。</p><p>新电脑问题多。</p><p>直接说怎么解决的。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><blockquote><p>scutil --set HostName &quot;localhost&quot;</p></blockquote><h2 id="无效的偿试-修改生成随机数"><a href="#无效的偿试-修改生成随机数" class="headerlink" title="无效的偿试-修改生成随机数"></a>无效的偿试-修改生成随机数</h2><p>IDEA2021 添加tomcat启动参数，JRE默认使用 /dev/random作为随机数来源，当熵池大小不够的时候，random会很慢，造成随机数生成调用阻塞。</p><blockquote><p>JAVA_OPTS=&quot;-Djava.security.egd=file:/dev/urandom&quot;<br>无效，依然该怎么慢还怎么慢。</p></blockquote><h2 id="真正原因-Jvm需要很长时间解析localhost的IP地址"><a href="#真正原因-Jvm需要很长时间解析localhost的IP地址" class="headerlink" title="真正原因 Jvm需要很长时间解析localhost的IP地址"></a>真正原因 Jvm需要很长时间解析localhost的IP地址</h2><p>原因分析<br><a href="https://www.codenong.com/39636792/">https://www.codenong.com/39636792/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 分类或标签单词开头大写出现404</title>
      <link href="posts/4631c4c2.html"/>
      <url>posts/4631c4c2.html</url>
      
        <content type="html"><![CDATA[<p>最近搬运笔记到博客，编辑的文章多了，今天突然发现，有一个分类点进去404，本地运行正常没有问题。查了一圈发现是git的大小写区分问题。</p><p>将大写字母改成小写，hexo 部署正确，但是博客上还是不正确出现404</p><p>网上查了许多资料，才发现，git中设置了大小写不敏感。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>修改 git 设置不忽略大小写</p><p>进入博客文件夹，进入 git 目录：<code>.deploy_git</code>，修改 .git 文件中的配置文件 config，将ignorecase=true 改为 ignorecase=false</p><blockquote><p>vim . deploy_git/.git/config<br>ignorecase = false</p></blockquote><p>重写清空部署项目</p><p>如果还没有解决，清空部署到 github 上的文件，重新发布：</p><blockquote><p>cd .deploy_git<br>git rm -rf *<br>git commit -m &#39;clean all file&#39;<br>git push</p></blockquote><p>进入博客文件夹，用 hexo 重新生成部署</p><blockquote><p>hexo clean &amp;&amp; hexo g -d</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 2021 CPU 超100% 问题解决</title>
      <link href="posts/f271493a.html"/>
      <url>posts/f271493a.html</url>
      
        <content type="html"><![CDATA[<p>用了IDEA 2021之后cpu超过200，打开一个类文件就卡住一会，起初以为是语法检查的问题，把所有语法检查一个不留全关闭，还是没解决。</p><p>最终解决方式，配置IDEA 的JVM参数：</p><p><img src="/posts/f271493a/1.png" alt="修改参数"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#堆栈设置</span><br><span class="line">-Xms4096m</span><br><span class="line">-Xmx4096m</span><br><span class="line">-Xmn3072m</span><br><span class="line">-XX:MetaspaceSize&#x3D;1024m</span><br><span class="line">-XX:MaxMetaspaceSize&#x3D;1024m</span><br><span class="line">-XX:+AlwaysPreTouch</span><br><span class="line">-XX:InitialCodeCacheSize&#x3D;1200m</span><br><span class="line">-XX:ReservedCodeCacheSize&#x3D;1200m</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line">-Dfile.encoding&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line"># 采用何种垃圾回收参数</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:ParallelGCThreads&#x3D;4</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB&#x3D;50</span><br><span class="line">-ea</span><br><span class="line"># JIT 参数</span><br><span class="line">-XX:CICompilerCount&#x3D;2</span><br><span class="line">-XX:TieredStopAtLevel&#x3D;1</span><br><span class="line">-XX:MaxInlineLevel&#x3D;3</span><br><span class="line">-XX:Tier4MinInvocationThreshold&#x3D;100000</span><br><span class="line">-XX:Tier4InvocationThreshold&#x3D;110000</span><br><span class="line">-XX:Tier4CompileThreshold&#x3D;120000</span><br><span class="line"></span><br><span class="line">-Dsun.io.useCanonPrefixCache&#x3D;false</span><br><span class="line">-Djava.net.preferIPv4Stack&#x3D;true</span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes&#x3D;&quot;&quot;</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Djdk.attach.allowAttachSelf</span><br><span class="line">-Xverify:none</span><br><span class="line"></span><br><span class="line">-XX:ErrorFile&#x3D;$USER_HOME&#x2F;java_error_in_idea_%p.log</span><br><span class="line">-XX:HeapDumpPath&#x3D;$USER_HOME&#x2F;java_error_in_idea.hprof</span><br></pre></td></tr></table></figure><p>立杆见影，原因不是垃圾回收造成的cpu负载过高 而是由于JIT Compiler 及时编译将class文件编译成本地机器代码占用了大量的cpu资源导致的卡顿。</p><p>具体请参考国外idea bug追踪他们的idea cpu 100% 讨论<br><a href="https://youtrack.jetbrains.com/issue/IDEA-207243">https://youtrack.jetbrains.com/issue/IDEA-207243</a></p><p>参考：<a href="https://www.jianshu.com/p/ac72a14afc24">https://www.jianshu.com/p/ac72a14afc24</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 数组</title>
      <link href="posts/f3eb126.html"/>
      <url>posts/f3eb126.html</url>
      
        <content type="html"><![CDATA[<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>Go 语言数组声明有两种方式:</p><ol><li>定长数组</li><li>不定长度数组</li></ol><p>注意：<br>1.如果没有赋值，会有默认值</p><ul><li>int 数组，默认初始化为: 0</li><li>string 就是空串</li></ul><p>2.数据类型必须相同，不能混用，int数组不能包含float 等，已验证<br>3.boolean 是false<br>4.数组越界是 panic 异常<br>5.数组是值类型，默认情况下是值拷贝，也就是说每次拷贝后是一个独立副本，数组间互不影响。<br>6.可以使用指针来实现引用传递</p><p>长度用内置函数 len() 即可。</p><h2 id="定长数组"><a href="#定长数组" class="headerlink" title="定长数组"></a>定长数组</h2><p>即，开始就确定长度的数组。<br>语法还是比较灵活的，可以设置定长 和 不定长度的数组，直接通过赋值初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> P01var</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest3</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hens [<span class="number">6</span>]<span class="keyword">int</span></span><br><span class="line">  hens[<span class="number">0</span>] = <span class="number">111</span></span><br><span class="line">  hens[<span class="number">1</span>] = <span class="number">222</span></span><br><span class="line">  hens[<span class="number">2</span>] = <span class="number">333</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(hens); i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;打印数组i=%d, 数据=%d\n&quot;</span>, i, hens[i])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><blockquote><p>打印数组i=0, 数据=111<br>打印数组i=1, 数据=222<br>打印数组i=2, 数据=333<br>打印数组i=3, 数据=0<br>打印数组i=4, 数据=0<br>打印数组i=5, 数据=0</p></blockquote><p>如果输入，证明数组越界:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hens[<span class="number">9</span>] = <span class="number">999</span></span><br></pre></td></tr></table></figure><blockquote><p>../ArrayTest.go:11:6: invalid array index 9 (out of bounds for 6-element array)</p></blockquote><p>另一种初始化，和java相同的语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest4</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> balance [<span class="number">10</span>] <span class="keyword">float32</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> balance = [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//一般用这种方式</span></span><br><span class="line">  balance := [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不定数组长度"><a href="#不定数组长度" class="headerlink" title="不定数组长度"></a>不定数组长度</h2><p>如果数组长度不确定，可以使用 <code>...</code> 代替数组的长度，编译器会根据元素个数自行推断数组的长度：</p><p>格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest6</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> balance1 = [...]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 等价写法</span></span><br><span class="line">  balance2 := [...]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 [5]int 后，[...]int 后的元素个数要对上，否则报错</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span>  &#123;</span><br><span class="line">  <span class="keyword">var</span> arr [<span class="number">5</span>]<span class="keyword">int</span> = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过下标初始化"><a href="#通过下标初始化" class="headerlink" title="通过下标初始化"></a>通过下标初始化</h3><p>如果设置了数组的长度，我们还可以通过指定下标来初始化元素：<br>格式：</p><blockquote><p>{index1:value1, index2:value2}</p></blockquote><p>举例<br>初始化第 <code>1</code> 和 <code>3</code> 两个元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest5</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//  将索引为 1 和 3 的元素初始化</span></span><br><span class="line">  balance := [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1</span>:<span class="number">2.0</span>, <span class="number">3</span>:<span class="number">7.0</span>&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化 balance[4]</span></span><br><span class="line">  balance[<span class="number">4</span>] = <span class="number">50.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> n [<span class="number">10</span>]<span class="keyword">int</span> <span class="comment">/* n 是一个长度为 10 的数组 */</span></span><br><span class="line">   <span class="keyword">var</span> i,j <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 为数组 n 初始化元素 */</span>        </span><br><span class="line">   <span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      n[i] = i + <span class="number">100</span> <span class="comment">/* 设置元素为 i + 100 */</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">   <span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;Element[%d] = %d\n&quot;</span>, j, n[j] )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>Element[0] = 100<br>Element[1] = 101<br>Element[2] = 102<br>Element[3] = 103<br>Element[4] = 104<br>Element[5] = 105<br>Element[6] = 106<br>Element[7] = 107<br>Element[8] = 108<br>Element[9] = 109</p></blockquote><h3 id="声明数组的同时快速初始化数组"><a href="#声明数组的同时快速初始化数组" class="headerlink" title="声明数组的同时快速初始化数组"></a>声明数组的同时快速初始化数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest2</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> i,j,k <span class="keyword">int</span></span><br><span class="line">  <span class="comment">// 声明数组的同时快速初始化数组</span></span><br><span class="line">  balance := [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 输出数组元素 */</span></span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;balance[%d] = %f\n&quot;</span>, i, balance[i] )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  balance2 := [...]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line">  <span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">  <span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;balance2[%d] = %f\n&quot;</span>, j, balance2[j] )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  将索引为 1 和 3 的元素初始化</span></span><br><span class="line">  balance3 := [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1</span>:<span class="number">2.0</span>,<span class="number">3</span>:<span class="number">7.0</span>&#125;</span><br><span class="line">  <span class="keyword">for</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;balance3[%d] = %f\n&quot;</span>, k, balance3[k] )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数组的声明和初始化的几种写法，大概罗列了这几种，后面再聊聊切片。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 函数多个返回值</title>
      <link href="posts/b9c503bd.html"/>
      <url>posts/b9c503bd.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>结构和别的语言略有不同。<br>go 的特点，返回可以有多个返回值。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( [parameter list] )</span> [<span class="title">return_types</span>]</span> &#123;</span><br><span class="line">   函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单个返回值方法"><a href="#单个返回值方法" class="headerlink" title="单个返回值方法"></a>单个返回值方法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数返回两个数的最大值 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 声明局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">      result = num1</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = num2</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个返回值方法"><a href="#两个返回值方法" class="headerlink" title="两个返回值方法"></a>两个返回值方法</h2><p>实际上可以返回多个值，这里演示，所以只写两个返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a, b := swap(<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>)</span><br><span class="line">   fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 语法 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 函数介绍</title>
      <link href="posts/b9c503bd.html"/>
      <url>posts/b9c503bd.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>函数是基本的代码块。<br>Go是编译型语言，函数编写的顺序是无关紧要的；鉴于可读性的需求，最好把 main() 函数写在文件的底部，类似于C语言的习惯。</p><p>Go 语言函数定义格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( [parameter list] )</span> [<span class="title">return_types</span>]</span> &#123;</span><br><span class="line">   函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>func：函数声明关键字，函数由 func 开始声明</li><li>function_name：函数名称，参数列表和返回值类型构成了函数签名。</li><li>parameter list：参数列表。</li><li>return_types：返回类型，函数返回一列值。<br>return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。</li><li>函数体：函数定义的代码集合。</li></ul><h2 id="Go-里面拥三种类型的函数"><a href="#Go-里面拥三种类型的函数" class="headerlink" title="Go 里面拥三种类型的函数"></a>Go 里面拥三种类型的函数</h2><ul><li>普通函数</li><li>匿名函数或者lambda函数</li><li>方法（Methods）<br>说下方法，确实有这种类型。go是为了兼容面向对象的特性，实现了方法这种特性。</li></ul><h2 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    getTest()</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带入参返回值"><a href="#带入参返回值" class="headerlink" title="带入参返回值"></a>带入参返回值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">   <span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">200</span></span><br><span class="line">   <span class="keyword">var</span> ret <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 调用函数并返回最大值 */</span></span><br><span class="line">   ret = max(a, b)</span><br><span class="line"></span><br><span class="line">   fmt.Printf( <span class="string">&quot;最大值是 : %d\n&quot;</span>, ret )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数返回两个数的最大值 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">      result = num1</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = num2</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go defer关键字</title>
      <link href="posts/20130.html"/>
      <url>posts/20130.html</url>
      
        <content type="html"><![CDATA[<h1 id="defer-延时机制"><a href="#defer-延时机制" class="headerlink" title="defer 延时机制"></a>defer 延时机制</h1><p>在函数执行过后执行。<br>作用：在函数执行过后及时释放资源。<br>最佳的实践在于，做一些执行后的操作，释放资源，比如：数据库连接、文件句柄、锁等。</p><p>在 golang 中的通常做法是，创建资源后，立即使用 defer 进行释放。</p><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h2><p>原理是使用了 defer 关键字后，会将修饰语句加入到一个栈中，这里称为 defer 栈中，直到程序执行后，最后执行，当函数执行完毕后，在从 defer 栈中，依次从栈顶取出语句执行，先入后出的机制。<br>defer对执行流程的改变，只是在本函数内有用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span>  &#123;</span><br><span class="line">  <span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;n1=%d, n2=%d\n&quot;</span>,n1, n2)</span><br><span class="line">  res := n1 + n2</span><br><span class="line">  <span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;res1=%d\n&quot;</span>, res)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  res := sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;res2=%d&quot;</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>res1=30<br>n1=10, n2=20<br>res2=30</p></blockquote><h2 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项"></a>2.注意事项</h2><p>defer 拷贝入栈后，值是拷贝进去的，后续的操作，不影响已拷贝的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum2</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span>  &#123;</span><br><span class="line">  <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;n1=&quot;</span>, n1)</span><br><span class="line">  <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;n2=&quot;</span>, n2)</span><br><span class="line">  n1++</span><br><span class="line">  n2++</span><br><span class="line">  res := n1 + n2</span><br><span class="line">  <span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;res1=%d\n&quot;</span>, res)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  res2 := sum2(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;res2=%d&quot;</span>, res2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>res1=32<br>n2= 20<br>n1= 10<br>res2=32</p></blockquote><h2 id="3-defer-的意义"><a href="#3-defer-的意义" class="headerlink" title="3.defer 的意义"></a>3.defer 的意义</h2><p>在于可以及时的释放函数创建的资源。很多时间在开发中，打开了资源后，就忘了关闭，defer 的机制可以让程序员在开发时，使用资源后立即加上关闭操作，也不影响后续的代码执行。类似于 java 的<code>finally</code>的作用，不同在于语法上defer可以写在前面。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> go </tag>
            
            <tag> defer </tag>
            
            <tag> 关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 空白标识符</title>
      <link href="posts/29773.html"/>
      <url>posts/29773.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>用于抛弃不需要接收的变量值</p></blockquote><h1 id="空白标识符"><a href="#空白标识符" class="headerlink" title="空白标识符 _"></a>空白标识符 _</h1><p>作用：在接收多个变量返回时，抛弃不需要的返回值<br><code>_</code> 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  _,numb,strs := numbers() <span class="comment">//只获取函数返回值的后两个</span></span><br><span class="line">  fmt.Println(numb, strs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个可以返回多个值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numbers</span><span class="params">()</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">  a , b , c := <span class="number">1</span> , <span class="number">2</span> , <span class="string">&quot;str&quot;</span></span><br><span class="line">  <span class="keyword">return</span> a,b,c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>2 str</p><p>a 因为使用 _ 被抛弃</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 语法 </tag>
            
            <tag> 空白标识符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tendermint 共识源码分析</title>
      <link href="posts/4334.html"/>
      <url>posts/4334.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Tendermint的共识算法可以看成是POS+BFT，Tendermint在进行BFT共识算法确认区块前，首先使用POS算法从Validators中选举出Proposer。<br>然后由Proposer进行提案，最后使用BFT算法生成区块。Tendermint 的共识协议使用的gossip协议。</p><p>另外，源码分析部分由于代码篇幅太长，会省略部分源码，不影响阅读。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>Tendermint 共识网络中有两个重要角色</p><ol><li><strong>Validator</strong>: 网络的参与者，也是区块的验证者（预先配置的网络中的一般验证者账户们）</li><li><strong>Proposer</strong>: 从validator中选举出一个节点成为出块人（选举出的出块人），选举不需要网络通信，这点后面从源码中说明。</li></ol><h2 id="共识5个阶段"><a href="#共识5个阶段" class="headerlink" title="共识5个阶段"></a>共识5个阶段</h2><ol><li>NewHeight</li><li>propose</li><li>prevote</li><li>precommit</li><li>commit</li></ol><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">                        +--------------------------------------+</span><br><span class="line">                        v                                      |(Wait til `CommmitTime+timeoutCommit`)</span><br><span class="line">                   +-----------+                         +-----+-----+</span><br><span class="line">      +----------&gt; |  Propose  +--------------+          | NewHeight |</span><br><span class="line">      |            +-----------+              |          +-----------+</span><br><span class="line">      |                                       |                ^</span><br><span class="line">      |(Else, after timeoutPrecommit)         v                |</span><br><span class="line">+-----+-----+                           +-----------+          |</span><br><span class="line">| Precommit |  &lt;------------------------+  Prevote  |          |</span><br><span class="line">+-----+-----+                           +-----------+          |</span><br><span class="line">      |(When +2/3 Precommits for block found)                  |</span><br><span class="line">      v                                                        |</span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">|  Commit                                                            |</span><br><span class="line">|                                                                    |</span><br><span class="line">|  * Set CommitTime = now;                                           |</span><br><span class="line">|  * Wait for block, then stage/save/commit block;                   |</span><br><span class="line">+--------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>阶段：Propose阶段、Prevote阶段、Precommit阶段<br>投票种类：prevote、precommit、commit</p><h2 id="round-based-协议"><a href="#round-based-协议" class="headerlink" title="round-based 协议"></a>round-based 协议</h2><p>整个Tendermint区块链网络需要通过Round-based协议来决定下一个区块，在区块链中共识的直接目的就是确定下一个区块内容、链接下一个区块</p><p>round-based 协议是一个状态机，主要有:</p><blockquote><p>NewHeigh -&gt; Propose -&gt; Prevote -&gt; Precommit -&gt; Commit</p></blockquote><p>上述每个状态都被称为一个 Step。首尾的 NewHeigh 和 Commit ，这两个 Steps 被称为特殊的 Step。</p><h3 id="Round"><a href="#Round" class="headerlink" title="Round"></a>Round</h3><p>而中间循环三个 Steps则被称为一个 <code>Round</code>(<code>Propose</code> -&gt; <code>Prevote</code> -&gt; <code>Precommit</code>)，是<code>共识阶段</code>，也是算法的核心原理所在。</p><p>一个块的最终提交（Commit）可能需要多个 Round 过程，这是因为有许多原因可能会导致当前 Round 不成功（比如出块节点 Offline，提出的块是无效块，收到的 Prevote 或者 Precommit 票数不够 +2/3 等等）。</p><h3 id="共识失败怎么办"><a href="#共识失败怎么办" class="headerlink" title="共识失败怎么办"></a>共识失败怎么办</h3><p>如果出块节点 Offline，提出的块是无效块，收到的 Prevote 或者 Precommit 票数不够 +2/3<br>出现这些情况的话，解决方案就是移步到下一轮，或者增加 timeout 时间。</p><h3 id="共识流程"><a href="#共识流程" class="headerlink" title="共识流程"></a>共识流程</h3><ol><li><strong>NewHeight 阶段：</strong>当区块链达到一个新的高度时进入 NewHeight 阶段。</li><li><strong>propose 阶段：</strong>接下来 Propose 阶段会提交一个 proposal ，</li><li><strong>prevote 阶段：</strong>prevote 阶段会对收到的 proposal 进行 prevote 投票。</li><li><strong>precommit 阶段：</strong>在 precommit 阶段收集到+⅔ prevote 投票后，对 block 进行 precommit 投票。</li><li><strong>commit阶段：</strong></li></ol><ul><li>如果收集到+⅔ precommit 投票后则进入 commit 阶段，</li><li>如果没有收集到+⅔ precommit 投票，会再次进入 propose 段。<br>在共识阶段期间如果收到+⅔ commit 投票那么直接进入 commit 阶段。<br>以上就是算法运行的整体过程，接下来分阶段来阐述各个阶段。</li></ul><h2 id="Round0-首轮共识分析"><a href="#Round0-首轮共识分析" class="headerlink" title="Round0 首轮共识分析"></a>Round0 首轮共识分析</h2><p>服务刚启动时，节点进入第一轮状态共识，Tendenmint 称之为<code>Round0</code>。<br>启动流程如下</p><p><img src="/posts/4334/%E5%90%AF%E5%8A%A8%E9%A6%96%E8%AE%BA%E5%85%B1%E8%AF%86.png" alt="启动首论共识"></p><h3 id="Round0-是什么做用？做了哪些事"><a href="#Round0-是什么做用？做了哪些事" class="headerlink" title="Round0 是什么做用？做了哪些事"></a>Round0 是什么做用？做了哪些事</h3><p>主要是通过监听消息，来处理对应消息类型携带的事件。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol><li>OnStart</li><li>receiveRoutine 启动接收程序<br>go cs.receiveRoutine</li><li>scheduleRound0: 注意，这个发送的是内部消息，不是 peer消息</li><li>scheduleTimeout 发送<code>round0</code> 的事件，事件类型：<code>receiveRoutine</code></li><li>receiveRoutine: 处理事件</li></ol><h4 id="共识核心方法说明"><a href="#共识核心方法说明" class="headerlink" title="共识核心方法说明"></a>共识核心方法说明</h4><p>receiveRoutine 核心方法<br>这个函数就比较重要了，它处理了可能导致状态转换的消息。<br>其中超时消息、完成一个提案和超过2/3的投票都会导致状态转换。<br>通过监听各种 Queue 的消息类型来处理</p><p>state.go 源码分析</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OnStart loads the latest state via the WAL, and starts the timeout and</span></span><br><span class="line"><span class="comment">// receive routines.</span></span><br><span class="line"><span class="comment">// OnStart通过WAL加载最新状态，并启动超时和接收程序。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *State)</span> <span class="title">OnStart</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// We may set the WAL in testing before calling Start, so only OpenWAL if its</span></span><br><span class="line"><span class="comment">// still the nilWAL.</span></span><br><span class="line"><span class="comment">// 在测试中，我们可能会在调用Start之前设置WAL，所以只有在其仍然是nilWAL的情况下才会打开WAL。</span></span><br><span class="line"><span class="keyword">if</span> _, ok := cs.wal.(nilWAL); ok &#123;</span><br><span class="line"><span class="keyword">if</span> err := cs.loadWalFile(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We may have lost some votes if the process crashed reload from consensus</span></span><br><span class="line"><span class="comment">// log to catchup.</span></span><br><span class="line"><span class="comment">// 如果从共识日志到追赶的过程中崩溃重新加载，我们可能会失去一些票数。</span></span><br><span class="line"><span class="keyword">if</span> cs.doWALCatchup &#123;</span><br><span class="line">repairAttempted := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">LOOP:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">err := cs.catchupReplay(cs.Height)</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> err == <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">break</span> LOOP</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> !IsDataCorruptionError(err):</span><br><span class="line">cs.Logger.Error(<span class="string">&quot;error on catchup replay; proceeding to start state anyway&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line"><span class="keyword">break</span> LOOP</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> repairAttempted:</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs.Logger.Error(<span class="string">&quot;the WAL file is corrupted; attempting repair&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1) prep work</span></span><br><span class="line"><span class="keyword">if</span> err := cs.wal.Stop(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repairAttempted = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2) backup original WAL file</span></span><br><span class="line">corruptedFile := fmt.Sprintf(<span class="string">&quot;%s.CORRUPTED&quot;</span>, cs.config.WalFile())</span><br><span class="line"><span class="keyword">if</span> err := tmos.CopyFile(cs.config.WalFile(), corruptedFile); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs.Logger.Debug(<span class="string">&quot;backed up WAL file&quot;</span>, <span class="string">&quot;src&quot;</span>, cs.config.WalFile(), <span class="string">&quot;dst&quot;</span>, corruptedFile)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3) try to repair (WAL file will be overwritten!)</span></span><br><span class="line"><span class="keyword">if</span> err := repairWalFile(corruptedFile, cs.config.WalFile()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">cs.Logger.Error(<span class="string">&quot;the WAL repair failed&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs.Logger.Info(<span class="string">&quot;successful WAL repair&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reload WAL file</span></span><br><span class="line"><span class="keyword">if</span> err := cs.loadWalFile(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EventSwitch 只监听 EventNewRoundStep、EventValidBlock和EventVote 这三种事件</span></span><br><span class="line"><span class="keyword">if</span> err := cs.evsw.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we need the timeoutRoutine for replay so</span></span><br><span class="line"><span class="comment">// we don&#x27;t block on the tick chan.</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> we will get a build up of garbage go routines</span></span><br><span class="line"><span class="comment">// firing on the tockChan until the receiveRoutine is started</span></span><br><span class="line"><span class="comment">// to deal with them (by that point, at most one will be valid)</span></span><br><span class="line"><span class="comment">// 我们需要重放的timeoutRoutine，这样我们就不会在tick chan上阻塞。</span></span><br><span class="line"><span class="comment">// 注意：我们将得到大量的垃圾程序</span></span><br><span class="line"><span class="comment">// 直到receiveRoutine开始处理它们（到那时，最多只有一个是有效的）来处理它们（到那时，最多只有一个是有效的）。</span></span><br><span class="line"><span class="keyword">if</span> err := cs.timeoutTicker.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Double Signing Risk Reduction</span></span><br><span class="line"><span class="comment">// 检查双重验签</span></span><br><span class="line"><span class="keyword">if</span> err := cs.checkDoubleSigningRisk(cs.Height); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// now start the receiveRoutine</span></span><br><span class="line"><span class="comment">// 启动接收程序</span></span><br><span class="line"><span class="keyword">go</span> cs.receiveRoutine(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// schedule the first round!</span></span><br><span class="line"><span class="comment">// use GetRoundState so we don&#x27;t race the receiveRoutine for access</span></span><br><span class="line"><span class="comment">// 安排第一轮!</span></span><br><span class="line"><span class="comment">// 使用GetRoundState，这样我们就不会和receiveRoutine争夺访问权了。</span></span><br><span class="line">cs.scheduleRound0(cs.GetRoundState())</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送内部消息-cs-scheduleRound0"><a href="#发送内部消息-cs-scheduleRound0" class="headerlink" title="发送内部消息 cs.scheduleRound0"></a>发送内部消息 cs.scheduleRound0</h2><p>scheduleRound0 的作用是将消息发送到内部的 chan 当中，receiveRoutine 负责监听不同类型事件，会监听到这个事件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// enterNewRound(height, 0) at cs.StartTime.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *State)</span> <span class="title">scheduleRound0</span><span class="params">(rs *cstypes.RoundState)</span></span> &#123;</span><br><span class="line"><span class="comment">// cs.Logger.Info(&quot;scheduleRound0&quot;, &quot;now&quot;, tmtime.Now(), &quot;startTime&quot;, cs.StartTime)</span></span><br><span class="line">sleepDuration := rs.StartTime.Sub(tmtime.Now())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一轮是发送了 cstypes.RoundStepNewHeight 事件类型</span></span><br><span class="line">cs.scheduleTimeout(sleepDuration, rs.Height, <span class="number">0</span>, cstypes.RoundStepNewHeight)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送内部消息，最终将消息发送到 chan</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ScheduleTimeout schedules a new timeout by sending on the internal tickChan.</span></span><br><span class="line"><span class="comment">// The timeoutRoutine is always available to read from tickChan, so this won&#x27;t block.</span></span><br><span class="line"><span class="comment">// The scheduling may fail if the timeoutRoutine has already scheduled a timeout for a later height/round/step.</span></span><br><span class="line"><span class="comment">// ScheduleTimeout通过在内部tickChan上发送来安排一个新的超时。</span></span><br><span class="line"><span class="comment">// timeoutRoutine总是可以从tickChan中读取，所以这不会阻塞。</span></span><br><span class="line"><span class="comment">// 如果timeoutRoutine已经为以后的高度/轮次/步长安排了一个超时，则调度可能会失败。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *timeoutTicker)</span> <span class="title">ScheduleTimeout</span><span class="params">(ti timeoutInfo)</span></span> &#123;</span><br><span class="line">t.tickChan &lt;- ti</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="核心处理逻辑"><a href="#核心处理逻辑" class="headerlink" title="核心处理逻辑"></a>核心处理逻辑</h2><h3 id="主要是-receiveRoutine-处理"><a href="#主要是-receiveRoutine-处理" class="headerlink" title="主要是 receiveRoutine 处理"></a>主要是 receiveRoutine 处理</h3><p>receiveRoutine 处理消息类型</p><ol><li>peerMsgQueue 来自节点的消息</li><li>internalMsgQueue 内部消息</li><li>timeoutTicker 超时的消息<br>timeoutTicker 这个消息，就是被上面流程中<code>scheduleRound0</code>发出的消息</li></ol><h3 id="receiveRoutine-处理流程"><a href="#receiveRoutine-处理流程" class="headerlink" title="receiveRoutine 处理流程"></a>receiveRoutine 处理流程</h3><ol><li>根据类型选把处理器<br>cs.timeoutTicker.Chan()</li><li>handleTimeout 处理<br>处理具体类型</li></ol><h3 id="handleTimeout-处理具体事件类型"><a href="#handleTimeout-处理具体事件类型" class="headerlink" title="handleTimeout 处理具体事件类型"></a>handleTimeout 处理具体事件类型</h3><ol><li>监听<code>RoundStepNewHeight</code>事件<br>case cstypes.RoundStepNewHeight:</li><li>进入 Round 流程<br>这个就重点了，概据官方文档说明，每一次共识都有 5 个步骤，这个是第一步。<br>cs.enterNewRound(ti.Height, 0)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------------------------------</span></span><br><span class="line"><span class="comment">// the main go routines</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// receiveRoutine handles messages which may cause state transitions.</span></span><br><span class="line"><span class="comment">// it&#x27;s argument (n) is the number of messages to process before exiting - use 0 to run forever</span></span><br><span class="line"><span class="comment">// It keeps the RoundState and is the only thing that updates it.</span></span><br><span class="line"><span class="comment">// Updates (state transitions) happen on timeouts, complete proposals, and 2/3 majorities.</span></span><br><span class="line"><span class="comment">// State must be locked before any internal state is updated.</span></span><br><span class="line"><span class="comment">// receiveRoutine处理可能导致状态转换的消息。</span></span><br><span class="line"><span class="comment">// 它的参数(n)是退出前要处理的消息的数量--用0表示永远运行。</span></span><br><span class="line"><span class="comment">// 它保持RoundState，并且是唯一能更新它的东西。</span></span><br><span class="line"><span class="comment">// 更新（状态转换）发生在超时、完整提案和2/3多数的情况下。</span></span><br><span class="line"><span class="comment">// 在任何内部状态被更新之前，状态必须被锁定。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *State)</span> <span class="title">receiveRoutine</span><span class="params">(maxSteps <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line"><span class="comment">// 拿到当前链状态</span></span><br><span class="line">rs := cs.RoundState</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，这个是接收的 reactor 的消息</span></span><br><span class="line"><span class="keyword">var</span> mi msgInfo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理三种类型的消息</span></span><br><span class="line"><span class="comment">// 1.peerMsgQueue 来自节点的消息</span></span><br><span class="line"><span class="comment">// 2.internalMsgQueue 内部消息</span></span><br><span class="line"><span class="comment">// 3.timeoutTicker 超时的消息</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-cs.txNotifier.TxsAvailable():</span><br><span class="line">cs.handleTxsAvailable()</span><br><span class="line"></span><br><span class="line"><span class="comment">// peer 节点消息</span></span><br><span class="line"><span class="keyword">case</span> mi = &lt;-cs.peerMsgQueue:</span><br><span class="line"><span class="keyword">if</span> err := cs.wal.Write(mi); err != <span class="literal">nil</span> &#123;</span><br><span class="line">cs.Logger.Error(<span class="string">&quot;failed writing to WAL&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handles proposals, block parts, votes</span></span><br><span class="line"><span class="comment">// may generate internal events (votes, complete proposals, 2/3 majorities)</span></span><br><span class="line">cs.handleMsg(mi)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听内部队列消息</span></span><br><span class="line"><span class="keyword">case</span> mi = &lt;-cs.internalMsgQueue:</span><br><span class="line">err := cs.wal.WriteSync(mi) <span class="comment">// <span class="doctag">NOTE:</span> fsync</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(</span><br><span class="line"><span class="string">&quot;failed to write %v msg to consensus WAL due to %v; check your file system and restart the node&quot;</span>,</span><br><span class="line">mi, err,</span><br><span class="line">))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handles proposals, block parts, votes</span></span><br><span class="line"><span class="comment">// 核心的状态逻辑处理，处理 proposals, block parts, votes</span></span><br><span class="line">cs.handleMsg(mi)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这个监听，ScheduleTimeout 的 channel</span></span><br><span class="line"><span class="keyword">case</span> ti := &lt;-cs.timeoutTicker.Chan(): <span class="comment">// tockChan:</span></span><br><span class="line"><span class="keyword">if</span> err := cs.wal.Write(ti); err != <span class="literal">nil</span> &#123;</span><br><span class="line">cs.Logger.Error(<span class="string">&quot;failed writing to WAL&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the timeout is relevant to the rs</span></span><br><span class="line"><span class="comment">// go to the next step</span></span><br><span class="line">cs.handleTimeout(ti, rs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> &lt;-cs.Quit():</span><br><span class="line">onExit(cs)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="handleTimeout-分析"><a href="#handleTimeout-分析" class="headerlink" title="handleTimeout 分析"></a>handleTimeout 分析</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入新一轮</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *State)</span> <span class="title">enterNewRound</span><span class="params">(height <span class="keyword">int64</span>, round <span class="keyword">int32</span>)</span></span> &#123;</span><br><span class="line">logger := cs.Logger.With(<span class="string">&quot;height&quot;</span>, height, <span class="string">&quot;round&quot;</span>, round)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cs.Height != height || round &lt; cs.Round || (cs.Round == round &amp;&amp; cs.Step != cstypes.RoundStepNewHeight) &#123;</span><br><span class="line">logger.Debug(</span><br><span class="line"><span class="string">&quot;entering new round with invalid args&quot;</span>,</span><br><span class="line"><span class="string">&quot;current&quot;</span>, fmt.Sprintf(<span class="string">&quot;%v/%v/%v&quot;</span>, cs.Height, cs.Round, cs.Step),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> now := tmtime.Now(); cs.StartTime.After(now) &#123;</span><br><span class="line">logger.Debug(<span class="string">&quot;need to set a buffer and log message here for sanity&quot;</span>, <span class="string">&quot;start_time&quot;</span>, cs.StartTime, <span class="string">&quot;now&quot;</span>, now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.Debug(<span class="string">&quot;entering new round&quot;</span>, <span class="string">&quot;current&quot;</span>, fmt.Sprintf(<span class="string">&quot;%v/%v/%v&quot;</span>, cs.Height, cs.Round, cs.Step))</span><br><span class="line"></span><br><span class="line"><span class="comment">// increment validators if necessary</span></span><br><span class="line"><span class="comment">// 必要时增加 validator</span></span><br><span class="line">validators := cs.Validators</span><br><span class="line"><span class="keyword">if</span> cs.Round &lt; round &#123;</span><br><span class="line">validators = validators.Copy()</span><br><span class="line">validators.IncrementProposerPriority(tmmath.SafeSubInt32(round, cs.Round))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup new round</span></span><br><span class="line"><span class="comment">// we don&#x27;t fire newStep for this step,</span></span><br><span class="line"><span class="comment">// but we fire an event, so update the round step first</span></span><br><span class="line"><span class="comment">// 只是 set 值，并没有接口调用</span></span><br><span class="line">cs.updateRoundStep(round, cstypes.RoundStepNewRound)</span><br><span class="line">    ...<span class="comment">//省略部分代码</span></span><br><span class="line">cs.Votes.SetRound(tmmath.SafeAddInt32(round, <span class="number">1</span>)) <span class="comment">// also track next round (round+1) to allow round-skipping</span></span><br><span class="line">cs.TriggeredTimeoutPrecommit = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件？？</span></span><br><span class="line"><span class="keyword">if</span> err := cs.eventBus.PublishEventNewRound(cs.NewRoundEvent()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">cs.Logger.Error(<span class="string">&quot;failed publishing new round&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs.metrics.Rounds.Set(<span class="keyword">float64</span>(round))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for txs to be available in the mempool</span></span><br><span class="line"><span class="comment">// before we enterPropose in round 0. If the last block changed the app hash,</span></span><br><span class="line"><span class="comment">// we may need an empty &quot;proof&quot; block, and enterPropose immediately.</span></span><br><span class="line"><span class="comment">// 进入 round0 之前，等待mempool中的txs可用。</span></span><br><span class="line"><span class="comment">// 如果最后一个区块改变了应用程序的哈希值，我们可能需要一个空的 &quot;证明 &quot;区块，并立即输入Propose。</span></span><br><span class="line">waitForTxs := cs.config.WaitForTxs() &amp;&amp; round == <span class="number">0</span> &amp;&amp; !cs.needProofBlock(height)</span><br><span class="line"><span class="keyword">if</span> waitForTxs &#123;</span><br><span class="line"><span class="keyword">if</span> cs.config.CreateEmptyBlocksInterval &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 构建空块证明，进入下一个阶段</span></span><br><span class="line">cs.scheduleTimeout(cs.config.CreateEmptyBlocksInterval, height, round,</span><br><span class="line">cstypes.RoundStepNewRound)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 进入 propose 阶段</span></span><br><span class="line">cs.enterPropose(height, round)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> tendermint </category>
          
          <category> tendermint </category>
          
          <category> 源码分析 </category>
          
          <category> Tendermint </category>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Tendermint </tag>
            
            <tag> BlockChain </tag>
            
            <tag> 共识 </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tendermint 启动流程</title>
      <link href="posts/11173.html"/>
      <url>posts/11173.html</url>
      
        <content type="html"><![CDATA[<h1 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h1><p>Tendermint 的启动流程比较清析明了，各业务启动流程都在对应的实现代码，主启动流程加载所需配置，由各启动实现类启动自己对应业务，如节点启动相关在 nodeImpl，共识相关处理是 state 中进行处理。</p><p>流程大致：</p><ol><li>加载配置 <code>node.NewDefault</code></li><li>启动运行 <code>Start</code></li><li>启动相关实现的 <code>OnStart</code></li></ol><p>先看启动流程</p><p><img src="/posts/11173/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8.png" alt="服务启动"></p><p>启动入口代码，这里使用到了一个命令行工具：<code>cobra</code>。<br>代码位置：<code>cmd/tendermint/main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ...省略部份代码</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span></span></span><br><span class="line"><span class="comment">// Users wishing to:</span></span><br><span class="line"><span class="comment">//* Use an external signer for their validators</span></span><br><span class="line"><span class="comment">//* Supply an in-proc abci app</span></span><br><span class="line"><span class="comment">//* Supply a genesis doc file from another source</span></span><br><span class="line"><span class="comment">//* Provide their own DB implementation</span></span><br><span class="line"><span class="comment">// can copy this file and use something other than the</span></span><br><span class="line"><span class="comment">// node.NewDefault function</span></span><br><span class="line">    <span class="comment">// 创建节点为默认动行节点，这里是函数引用，并未执行</span></span><br><span class="line">    <span class="comment">// 在 cmd.NewRunNodeCmd 调用</span></span><br><span class="line">nodeFunc := node.NewDefault</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create &amp; start node</span></span><br><span class="line">    <span class="comment">// 主要方法 cmd.NewRunNodeCmd</span></span><br><span class="line">rootCmd.AddCommand(cmd.NewRunNodeCmd(nodeFunc))</span><br><span class="line"></span><br><span class="line">cmd := cli.PrepareBaseCmd(rootCmd, <span class="string">&quot;TM&quot;</span>, os.ExpandEnv(filepath.Join(<span class="string">&quot;$HOME&quot;</span>, config.DefaultTendermintDir)))</span><br><span class="line"><span class="keyword">if</span> err := cmd.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建运行节点"><a href="#创建运行节点" class="headerlink" title="创建运行节点"></a>创建运行节点</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewRunNodeCmd returns the command that allows the CLI to start a node.</span></span><br><span class="line"><span class="comment">// It can be used with a custom PrivValidator and in-process ABCI application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRunNodeCmd</span><span class="params">(nodeProvider cfg.ServiceProvider)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="comment">// 添加到命令行</span></span><br><span class="line">cmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:     <span class="string">&quot;start&quot;</span>,</span><br><span class="line">Aliases: []<span class="keyword">string</span>&#123;<span class="string">&quot;node&quot;</span>, <span class="string">&quot;run&quot;</span>&#125;,</span><br><span class="line">Short:   <span class="string">&quot;Run the tendermint node&quot;</span>,</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := checkGenesisHash(config); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里调用 node.NewDefault 这个方法实现</span></span><br><span class="line">            <span class="comment">// 创建了节点</span></span><br><span class="line">n, err := nodeProvider(config, logger)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create node: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line"><span class="keyword">if</span> err := n.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to start node: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.Info(<span class="string">&quot;started node&quot;</span>, <span class="string">&quot;node&quot;</span>, n.String())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop upon receiving SIGTERM or CTRL-C.</span></span><br><span class="line">tmos.TrapSignal(logger, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n.IsRunning() &#123;</span><br><span class="line"><span class="keyword">if</span> err := n.Stop(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Error(<span class="string">&quot;unable to stop the node&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run forever.</span></span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AddNodeFlags(cmd)</span><br><span class="line"><span class="keyword">return</span> cmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动需的默认配置一目了然</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultConfig returns a default configuration for a Tendermint node</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultConfig</span><span class="params">()</span> *<span class="title">Config</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Config&#123;</span><br><span class="line">BaseConfig:      DefaultBaseConfig(),</span><br><span class="line">RPC:             DefaultRPCConfig(),</span><br><span class="line">P2P:             DefaultP2PConfig(),</span><br><span class="line">Mempool:         DefaultMempoolConfig(),</span><br><span class="line">StateSync:       DefaultStateSyncConfig(),</span><br><span class="line">BlockSync:       DefaultBlockSyncConfig(),</span><br><span class="line">Consensus:       DefaultConsensusConfig(),</span><br><span class="line">TxIndex:         DefaultTxIndexConfig(),</span><br><span class="line">Instrumentation: DefaultInstrumentationConfig(),</span><br><span class="line">PrivValidator:   DefaultPrivValidatorConfig(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>启动服务接口 <code>Service</code> 主要实现类是<code>BaseService</code>。</p><p>service.go</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service defines a service that can be started, stopped, and reset.</span></span><br><span class="line"><span class="keyword">type</span> Service <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Start the service.</span></span><br><span class="line"><span class="comment">// If it&#x27;s already started or stopped, will return an error.</span></span><br><span class="line"><span class="comment">// If OnStart() returns an error, it&#x27;s returned by Start()</span></span><br><span class="line">Start() error</span><br><span class="line">OnStart() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-node"><a href="#启动-node" class="headerlink" title="启动 node"></a>启动 node</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start implements Service by calling OnStart (if defined). An error will be</span></span><br><span class="line"><span class="comment">// returned if the service is already running or stopped. Not to start the</span></span><br><span class="line"><span class="comment">// stopped service, you need to call Reset.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bs *BaseService)</span> <span class="title">Start</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapUint32(&amp;bs.started, <span class="number">0</span>, <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> atomic.LoadUint32(&amp;bs.stopped) == <span class="number">1</span> &#123;</span><br><span class="line">bs.Logger.Error(<span class="string">&quot;not starting service; already stopped&quot;</span>, <span class="string">&quot;service&quot;</span>, bs.name, <span class="string">&quot;impl&quot;</span>, bs.impl.String())</span><br><span class="line">atomic.StoreUint32(&amp;bs.started, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ErrAlreadyStopped</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bs.Logger.Info(<span class="string">&quot;starting service&quot;</span>, <span class="string">&quot;service&quot;</span>, bs.name, <span class="string">&quot;impl&quot;</span>, bs.impl.String())</span><br><span class="line">        <span class="comment">// 启动节点。BaseService 有很多实，都实现 OnStart。</span></span><br><span class="line">        <span class="comment">// 服务启动是：node.go OnStart</span></span><br><span class="line">        <span class="comment">// 共识启动是: state.go OnStart</span></span><br><span class="line"><span class="keyword">if</span> err := bs.impl.OnStart(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// revert flag</span></span><br><span class="line">atomic.StoreUint32(&amp;bs.started, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bs.Logger.Debug(<span class="string">&quot;not starting service; already started&quot;</span>, <span class="string">&quot;service&quot;</span>, bs.name, <span class="string">&quot;impl&quot;</span>, bs.impl.String())</span><br><span class="line"><span class="keyword">return</span> ErrAlreadyStarted</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nodeImpl 实现启动流程，总的来说还是比较清晰。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// OnStart starts the Node. It implements service.Service.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *nodeImpl)</span> <span class="title">OnStart</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">now := tmtime.Now()</span><br><span class="line">genTime := n.genesisDoc.GenesisTime</span><br><span class="line"><span class="keyword">if</span> genTime.After(now) &#123;</span><br><span class="line">n.Logger.Info(<span class="string">&quot;Genesis time is in the future. Sleeping until then...&quot;</span>, <span class="string">&quot;genTime&quot;</span>, genTime)</span><br><span class="line">time.Sleep(genTime.Sub(now))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the RPC server before the P2P server</span></span><br><span class="line"><span class="comment">// so we can eg. receive txs for the first block</span></span><br><span class="line"><span class="comment">// 这里顺带说下，tendermint 的3种节点为类型</span></span><br><span class="line"><span class="comment">// ModeFull      = &quot;full&quot; 数据转发节点</span></span><br><span class="line"><span class="comment">//ModeValidator = &quot;validator&quot;  数据验证节点</span></span><br><span class="line"><span class="comment">//ModeSeed      = &quot;seed&quot;   用来做节点发现</span></span><br><span class="line"><span class="keyword">if</span> n.config.RPC.ListenAddress != <span class="string">&quot;&quot;</span> &amp;&amp; n.config.Mode != config.ModeSeed &#123;</span><br><span class="line"><span class="comment">// 启动 RPC</span></span><br><span class="line">listeners, err := n.startRPC()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">n.rpcListeners = listeners</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n.config.Instrumentation.Prometheus &amp;&amp;</span><br><span class="line">n.config.Instrumentation.PrometheusListenAddr != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">n.prometheusSrv = n.startPrometheusServer(n.config.Instrumentation.PrometheusListenAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the transport.</span></span><br><span class="line">addr, err := types.NewNetAddressString(n.nodeKey.ID.AddressString(n.config.P2P.ListenAddress))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := n.transport.Listen(p2p.NewEndpoint(addr)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n.isListening = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p2p 路由</span></span><br><span class="line"><span class="keyword">if</span> err = n.router.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n.config.Mode != config.ModeSeed &#123;</span><br><span class="line"><span class="keyword">if</span> n.config.BlockSync.Enable &#123;</span><br><span class="line"><span class="comment">// 开启区块同步</span></span><br><span class="line"><span class="keyword">if</span> err := n.bcReactor.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the real consensus reactor separately since the switch uses the shim.</span></span><br><span class="line"><span class="keyword">if</span> err := n.consensusReactor.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the real state sync reactor separately since the switch uses the shim.</span></span><br><span class="line"><span class="keyword">if</span> err := n.stateSyncReactor.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the real mempool reactor separately since the switch uses the shim.</span></span><br><span class="line"><span class="keyword">if</span> err := n.mempoolReactor.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the real evidence reactor separately since the switch uses the shim.</span></span><br><span class="line"><span class="keyword">if</span> err := n.evidenceReactor.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := n.pexReactor.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run state sync</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> We shouldn&#x27;t run state sync if we already have state that has a</span></span><br><span class="line"><span class="comment">// LastBlockHeight that is not InitialHeight</span></span><br><span class="line"><span class="keyword">if</span> n.stateSync &#123;</span><br><span class="line">bcR, ok := n.bcReactor.(consensus.BlockSyncReactor)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;this blockchain reactor does not support switching from state sync&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we need to get the genesis state to get parameters such as</span></span><br><span class="line">state, err := sm.MakeGenesisState(n.genesisDoc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;unable to derive state: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> we may want to move these events within the respective</span></span><br><span class="line"><span class="comment">// reactors.</span></span><br><span class="line"><span class="comment">// At the beginning of the statesync start, we use the initialHeight as the event height</span></span><br><span class="line"><span class="comment">// because of the statesync doesn&#x27;t have the concreate state height before fetched the snapshot.</span></span><br><span class="line">d := types.EventDataStateSyncStatus&#123;Complete: <span class="literal">false</span>, Height: state.InitialHeight&#125;</span><br><span class="line"><span class="keyword">if</span> err := n.eventBus.PublishEventStateSyncStatus(d); err != <span class="literal">nil</span> &#123;</span><br><span class="line">n.eventBus.Logger.Error(<span class="string">&quot;failed to emit the statesync start event&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">FIXME:</span> We shouldn&#x27;t allow state sync to silently error out without</span></span><br><span class="line"><span class="comment">// bubbling up the error and gracefully shutting down the rest of the node</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">n.Logger.Info(<span class="string">&quot;starting state sync&quot;</span>)</span><br><span class="line">state, err := n.stateSyncReactor.Sync(context.TODO())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">n.Logger.Error(<span class="string">&quot;state sync failed; shutting down this node&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line"><span class="comment">// stop the node</span></span><br><span class="line"><span class="keyword">if</span> err := n.Stop(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">n.Logger.Error(<span class="string">&quot;failed to shut down node&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n.consensusReactor.SetStateSyncingMetrics(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">d := types.EventDataStateSyncStatus&#123;Complete: <span class="literal">true</span>, Height: state.LastBlockHeight&#125;</span><br><span class="line"><span class="keyword">if</span> err := n.eventBus.PublishEventStateSyncStatus(d); err != <span class="literal">nil</span> &#123;</span><br><span class="line">n.eventBus.Logger.Error(<span class="string">&quot;failed to emit the statesync start event&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Some form of orchestrator is needed here between the state</span></span><br><span class="line"><span class="comment">// advancing reactors to be able to control which one of the three</span></span><br><span class="line"><span class="comment">// is running</span></span><br><span class="line"><span class="keyword">if</span> n.config.BlockSync.Enable &#123;</span><br><span class="line"><span class="comment">// FIXME Very ugly to have these metrics bleed through here.</span></span><br><span class="line">n.consensusReactor.SetBlockSyncingMetrics(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err := bcR.SwitchToBlockSync(state); err != <span class="literal">nil</span> &#123;</span><br><span class="line">n.Logger.Error(<span class="string">&quot;failed to switch to block sync&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d := types.EventDataBlockSyncStatus&#123;Complete: <span class="literal">false</span>, Height: state.LastBlockHeight&#125;</span><br><span class="line"><span class="keyword">if</span> err := n.eventBus.PublishEventBlockSyncStatus(d); err != <span class="literal">nil</span> &#123;</span><br><span class="line">n.eventBus.Logger.Error(<span class="string">&quot;failed to emit the block sync starting event&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">n.consensusReactor.SwitchToConsensus(state, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> tendermint </category>
          
          <category> tendermint </category>
          
          <category> Tendermint </category>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Tendermint </tag>
            
            <tag> BlockChain </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 启动流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tendermint ABCI概述</title>
      <link href="posts/6715.html"/>
      <url>posts/6715.html</url>
      
        <content type="html"><![CDATA[<h1 id="ABCI-概述-Application-BlockChain-Interface"><a href="#ABCI-概述-Application-BlockChain-Interface" class="headerlink" title="ABCI 概述 (Application BlockChain Interface)"></a>ABCI 概述 (Application BlockChain Interface)</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>让<code>应用程序层</code> 和 <code>共识层进行</code>解耦。可以理解为一套应用程序的接口标准，是<code>应用程序层</code>和<code>共识层进行</code>的桥梁。</p><p>应用程序区块链接口（ABCI） 允许用任何编程语言实现应用程序拜占庭容错复制。<br>区块链是多主状态机复制的系统。ABCI是一个接口，定义了复制引擎（区块链）和状态机（应用程序）之间的边界。使用Socket协议，运行在一个进程中的共识引擎可以管理运行在另一个进程中的应用程序状态。<br>以前，ABCI被称为TMSP。</p><p>官方github：<a href="https://github.com/tendermint/tendermint/tree/master/abci">ABCI</a></p><p><img src="/posts/6715/abci.png" alt="abci"></p><h2 id="开发动机"><a href="#开发动机" class="headerlink" title="开发动机"></a>开发动机</h2><p>目前为止，所有的区块链“技术栈”（如比特币）都是作为一个紧耦合的整体进行设计的。 换句话说，每一个区块链技术栈都是一个单独的程序，处理分布式账本的所有问题。 这些问题包括P2P连接、交易内存池广播、最新区块共识、账户余额、图灵完备合约、用户级权限管理等。</p><p>在计算机科学中，过高耦合度的程序架构通常不是好做法。 因为耦合度高会导致程序难以复用，并且这样做易导致代码库分叉进而维护困难。 当开发者没有对代码库进行模块化设计并遭受“意大利面代码”的困扰时，这种设计方式导致的问题更加明显。</p><p>高耦合度设计导致的另一个问题是所使用的开发语言受限于区块链技术栈（反之亦然）。在以太坊中，它提供一个图灵完备的字节码合约虚拟机，这就把开发者限制在了对应的合约语言上；<br>目前，这个合约语言是Serpent和Solidity。</p><p>相比之下，Tendermint分离了共识引擎和P2P层与特定区块链程序的应用状态细节。 Tendermint将应用程序的状态管理细节抽象到一个接口，并将该接口以socket协议的形式实现了出来。</p><p>所以，Tendermint拥有接口规范，即应用程序区块链接口（ABCI），并有了一个主要实现Tendermint socket协议（也叫TSP或Teaspoon）。</p><h2 id="ABCI介绍"><a href="#ABCI介绍" class="headerlink" title="ABCI介绍"></a>ABCI介绍</h2><p>ABCI 与 Tendermint Core 通信<br>Tendermint Core （“共识引擎”）通过满足<code>ABCI规范</code>的socket协议与应用程序通信。</p><h2 id="ABCI-应用"><a href="#ABCI-应用" class="headerlink" title="ABCI 应用"></a>ABCI 应用</h2><p>如果有人想在ABCI上创建一个类似比特币的系统，</p><h3 id="Tendermint-Core将会实现"><a href="#Tendermint-Core将会实现" class="headerlink" title="Tendermint Core将会实现"></a>Tendermint Core将会实现</h3><ul><li>在节点之间共享区块和交易</li><li>建立交易标准/不可更改的顺序（即区块链）</li></ul><h3 id="应用程序将会实现"><a href="#应用程序将会实现" class="headerlink" title="应用程序将会实现"></a>应用程序将会实现</h3><ul><li>维护UTXO数据库</li><li>验证交易签名</li><li>防止使用未产生的交易</li><li>允许客户端查询UTXO数据库</li></ul><p>Tendermint通过在应用程序进程和共识进程之间提供非常简单的API（即ABCI）来分解区块链设计。</p><p>ABI由3种主要消息类型组成，它们从Tendermint核心传递到应用程序，应用程序用相应的响应消息进行回复。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> tendermint </category>
          
          <category> tendermint </category>
          
          <category> Tendermint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 概念 </tag>
            
            <tag> 概述 </tag>
            
            <tag> Tendermint </tag>
            
            <tag> 快速入门 </tag>
            
            <tag> ABCI </tag>
            
            <tag> BlockChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 数组</title>
      <link href="posts/10187.html"/>
      <url>posts/10187.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>Go 语言数组声明有两种方式</p><ol><li>定长数组</li><li>不定长度数组</li></ol><p>go数组几个注意事项：</p><ol><li>默认值：如果没有赋值，会有默认值<ul><li>int 数组，默认初始化为 <code>0</code></li><li>string 就是空串</li></ul></li><li>数据类型必须相同，不能混用，int数组不能包含float 等，已验证</li><li>boolean 是false</li><li>数组越界是 panic 异常</li><li>数组是值类型，默认情况下是值拷贝，也就是说每次拷贝后是一个独立副本，数组间互不影响。</li><li>可以使用指针来实现引用传递</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>格式：</p><blockquote><p>var  数组名 [数组大小]数据类型</p></blockquote><h3 id="1-定长数组"><a href="#1-定长数组" class="headerlink" title="1.定长数组"></a>1.定长数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> P01var</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest3</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> hens [<span class="number">6</span>]<span class="keyword">int</span></span><br><span class="line">   hens[<span class="number">0</span>] = <span class="number">111</span></span><br><span class="line">   hens[<span class="number">1</span>] = <span class="number">222</span></span><br><span class="line">   hens[<span class="number">2</span>] = <span class="number">333</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(hens); i++ &#123;</span><br><span class="line">       fmt.Printf(<span class="string">&quot;打印数组i=%d, 数据=%d\n&quot;</span>, i, hens[i])</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">打印数组i=0, 数据=111</span><br><span class="line">打印数组i=1, 数据=222</span><br><span class="line">打印数组i=2, 数据=333</span><br><span class="line">打印数组i=3, 数据=0</span><br><span class="line">打印数组i=4, 数据=0</span><br><span class="line">打印数组i=5, 数据=0</span><br></pre></td></tr></table></figure><p>如果输入超过实初始化的长度会越界，<br><strong>越界</strong><br>hens[9] = 999</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../ArrayTest.go:11:6: invalid array index 9 (out of bounds for 6-element array)</span><br></pre></td></tr></table></figure><p>初始化二，类似java的语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> balance [<span class="number">10</span>] <span class="keyword">float32</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> balance = [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//一般用这种方式</span></span><br><span class="line">  balance := [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-不定数组长度"><a href="#2-不定数组长度" class="headerlink" title="2.不定数组长度"></a>2.不定数组长度</h3><p>如果数组长度不确定，可以使用 ... 代替数组的长度，编译器会根据元素个数自行推断数组的长度：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> balance = [...]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line">  <span class="comment">//或</span></span><br><span class="line">  balance := [...]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通过下标初始化"><a href="#3-通过下标初始化" class="headerlink" title="3.通过下标初始化"></a>3.通过下标初始化</h3><p>如果设置了数组的长度，我们还可以通过指定下标来初始化元素，<br>语法格式：</p><blockquote><p>array_type{index: value</p></blockquote><p>通过一个例子来验证一下。<br>直接通过一个数组进行初始化两个元素。<br>分别初始化数组索引 1 和 3 两个元素: <code>1:2.0</code> 和 <code>3:7.0</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  将索引为 1 和 3 的元素初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest2</span><span class="params">()</span></span> &#123;</span><br><span class="line">  balance := [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1</span>:<span class="number">2.0</span>,<span class="number">3</span>:<span class="number">7.0</span>&#125;</span><br><span class="line">  <span class="comment">// 实始化元素4</span></span><br><span class="line">  balance[<span class="number">4</span>] = <span class="number">50.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 [5]int 后，[...]int 后的个数要对上，否则报错，已测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span>  &#123;</span><br><span class="line">  <span class="keyword">var</span> arr [<span class="number">5</span>]<span class="keyword">int</span> = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">&#125; <span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 4.遍历数组</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> n [<span class="number">10</span>]<span class="keyword">int</span> <span class="comment">/* n 是一个长度为 10 的数组 */</span></span><br><span class="line">   <span class="keyword">var</span> i,j <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 为数组 n 初始化元素 */</span></span><br><span class="line">   <span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      n[i] = i + <span class="number">100</span> <span class="comment">/* 设置元素为 i + 100 */</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">   <span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;Element[%d] = %d\n&quot;</span>, j, n[j] )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Element[0] = 100</span><br><span class="line">Element[1] = 101</span><br><span class="line">Element[2] = 102</span><br><span class="line">Element[3] = 103</span><br><span class="line">Element[4] = 104</span><br><span class="line">Element[5] = 105</span><br><span class="line">Element[6] = 106</span><br><span class="line">Element[7] = 107</span><br><span class="line">Element[8] = 108</span><br><span class="line">Element[9] = 109</span><br></pre></td></tr></table></figure><h3 id="5-声明数组的同时快速初始化数组"><a href="#5-声明数组的同时快速初始化数组" class="headerlink" title="5.声明数组的同时快速初始化数组"></a>5.声明数组的同时快速初始化数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayTest2</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> i,j,k <span class="keyword">int</span></span><br><span class="line">  <span class="comment">// 声明数组的同时快速初始化数组</span></span><br><span class="line">  balance := [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 输出数组元素 */</span></span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">          fmt.Printf(<span class="string">&quot;balance[%d] = %f\n&quot;</span>, i, balance[i] )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  balance2 := [...]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line">  <span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">  <span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">          fmt.Printf(<span class="string">&quot;balance2[%d] = %f\n&quot;</span>, j, balance2[j] )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  将索引为 1 和 3 的元素初始化</span></span><br><span class="line">  balance3 := [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1</span>:<span class="number">2.0</span>,<span class="number">3</span>:<span class="number">7.0</span>&#125;</span><br><span class="line">  <span class="keyword">for</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++ &#123;</span><br><span class="line">          fmt.Printf(<span class="string">&quot;balance3[%d] = %f\n&quot;</span>, k, balance3[k] )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tendermint概述</title>
      <link href="posts/51570.html"/>
      <url>posts/51570.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单理解为一个分布式状态机</p></blockquote><h1 id="什么是Tendermint"><a href="#什么是Tendermint" class="headerlink" title="什么是Tendermint"></a>什么是Tendermint</h1><p>Tenermint是个能够在多机器上安全一致地复制应用的软件。 安全是指无论多达1/3的机器出现何种类型的故障，Tendermint都可以正常工作。<br>一致是指每个正确运行的机器都可以获取完全相同的交易日志并计算相同的状态。 在分布式系统中，安全一致地复制至关重要；从货币到选举再到基础设施管理等广泛应用容错方面，它都有着着重要作用。</p><p>拜占庭容错（BFT）指的是系统能够容忍机器以任意方式出现故障，包括机器故意危害系统的方式。<br>拜占庭容错理论已有几十年的历史，但最近由于比特币和以太坊等“区块链技术”的成功，其软件实现才逐渐流行。<br>区块链技术是在更现代的环境下对BFT的一种改造，重点引入了点对点网络和密码认证等技术。<br>区块链的名称来源于交易的处理方式，交易被打包在每一个区块中，每一个区块存储前一个区块的哈希值，形成了一个链的结构。 实际上，区块链数据结构优化了BFT设计。</p><p>Tendermint包括两个主要技术组件：<code>区块链共识引擎</code>和<code>通用应用程序接口</code>。<br>共识引擎，被称作Tendermint Core，保证所有的机器按照相同的顺序记录相同的交易。<br>应用程序接口，被称为应用程序区块链接口ABCI，实现任意编程语言处理交易的功能。<br>其他区块链和共识解决方案通常预置内部状态机，比如使用键值存储不常见的脚本语言来完成功能，而Tendermint支持开发者用任意编程语言实现拜占庭容错的状态机复制功能，并且开发环境也非常友好。</p><p>Tendermint的目标是易使用、便理解、高性能并适用各种分布式应用场景。</p><h1 id="Tendermint-和其他技术对比"><a href="#Tendermint-和其他技术对比" class="headerlink" title="Tendermint 和其他技术对比"></a>Tendermint 和其他技术对比</h1><p>Tendermint大体上类似于两类软件。<br>第一类是非BFT一致性的分布式键值存储系统，包括Zookeeper、etcd和consul。<br>第二类是“区块链技术”，包括比特币和以太坊等加密货币和Hyperledger Burrow等分布式账本。</p><h2 id="Zookeeper、etcd和consul"><a href="#Zookeeper、etcd和consul" class="headerlink" title="Zookeeper、etcd和consul"></a>Zookeeper、etcd和consul</h2><p>Zookeeper、etcd和consul都基于经典非拜占庭容错一致性算法，实现了分布式键值存储。<br>Zookeeper使用了Zookeeper Atomic Broadcast版本的的Paxos共识算法，而etcd和consul使用了更新更简单的Raft共识算法。一个典型的集群包含3-5台机器，并且可以容忍多达1/2台机器的故障，但是只要出现一个拜占庭错误机器，系统就会崩溃。</p><p>虽然这些软件都提供了各有特色的键值存储功能，但都关注为分布式系统提供基础服务，如动态配置、服务发现、锁定、领导人选举等。</p><p>Tendermint虽然在本质上和以上软件类似，但是具有两点关键不同：</p><ul><li><p>它实现了拜占庭容错。虽然只能够容忍系统1/3节点的故障，但是可以容忍任意类型的，包括黑客和恶意攻击的错误。</p></li><li><p>它不像键值存储那样只指定一种特定的应用，而是侧重于任意状态机复制。因此从键值存储到加密货币，再到电子投票平台，开发人员可以构建适合他们的任意应用程序逻辑。</p></li></ul><h2 id="Bitcoin-Ethereum-etc"><a href="#Bitcoin-Ethereum-etc" class="headerlink" title="Bitcoin, Ethereum, etc"></a>Bitcoin, Ethereum, etc</h2><p>Tendermint诞生于比特币、以太坊等传统加密货币，目标是提供比比特币的PoW算法更高效、更安全的共识算法。在早期，Tendermint内置了一种简单的货币，为了参与共识，用户必须将货币“绑定”到一个保证金中， 如果他们行为不当，保证金可能会被撤销——这就是Tendermint成为PoS算法的原因。</p><p>从那时起，Tendermint已经发展成为一个通用的区块链共识引擎，可以承载任意的应用程序状态。 这表示它可以成为其他区块链软件的共识引擎的即插即用替代品。 因此，当前的以太坊代码库，无论是Rust、Go还是Haskell，都可以作为一个ABCI应用程序运行在Tendermint共识引擎之上。<br>Tendermint 已经实现了以太坊。Tendermint 接下来准备对比特币、ZCash和其他各种确定性应用完成类似的开发实现。</p><p>目前，另外一个已实现的基于Tendermint的虚拟货币应用程序是Cosmos 网络。</p><p><a href="https://github.com/cosmos/ethermint">Tendermint 实现 Ethermint</a></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> tendermint </category>
          
          <category> tendermint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> 概述 </tag>
            
            <tag> Tendermint </tag>
            
            <tag> 快速入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leveldb-整体架构</title>
      <link href="posts/18926.html"/>
      <url>posts/18926.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目中使用leveldb做为存储，使用过一段时间后，对leveldb进行一个深入的学习，让录本人学习过程中理解。过程中参照网上文章以经实际应用，进行文章输出，如果错漏，还望指正。</p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>leveldb是一个写性能十分优秀的存储引擎，是典型的LSM树(Log Structured-Merge Tree)实现。<br>LSM树的核心思想就是放弃部分读的性能，换取最大的写入能力。这个很重要，后续深入会发现的leveldb的原理都是基于最大的写入性能去设计的。</p><p><img src="/posts/18926/leveldb_arch.jpg" alt="leveldb-整体架构"></p><p>LSM树写性能极高的原理，简单地来说就是尽量减少随机写的次数。对于每次写入操作，并不是直接将最新的数据驻留在磁盘中，而是将其拆分成<br>（1）一次日志文件的顺序写<br>（2）一次内存中的数据插入。<br>leveldb正是实践了这种思想，将数据首先更新在内存中，当内存中的数据达到一定的阈值，将这部分数据真正刷新到磁盘文件中，因而获得了极高的写性能（顺序写60MB/s, 随机写45MB/s）。</p><p>从图里能看出 LevelDB 主要结构包括：<br><strong>1.内存结构</strong></p><ol><li>MemTable</li><li>Immutable MemTable 不可变内存结构</li></ol><p><strong>2.磁盘文件</strong></p><ol><li>Current 文件</li><li>Manifest 文件</li><li>log 文件</li><li>SSTable 文件</li></ol><h3 id="Memtable"><a href="#Memtable" class="headerlink" title="Memtable"></a>Memtable</h3><blockquote><p>使用 leveldb，数据先写入内存，最终落入磁盘。</p></blockquote><p>leveldb的一次写入操作并不是直接将数据刷新到磁盘文件，而是首先写入到内存中作为代替，memtable就是一个在内存中进行数据组织与维护的结构。<br>memtable中，所有的数据按用户定义的排序方法排序之后按序存储，等到其存储内容的容量达到阈值时（默认为4MB），便将其转换成一个不可修改的memtable，与此同时创建一个新的memtable，供用户继续进行读写操作。<br>memtable底层使用了一种跳表数据结构，这种数据结构效率可以比拟二叉查找树，绝大多数操作的时间复杂度为<code>O(log n)</code>。</p><h3 id="Immutable-Memtable"><a href="#Immutable-Memtable" class="headerlink" title="Immutable Memtable"></a>Immutable Memtable</h3><p>memtable的容量到达阈值时，便会转换成一个不可修改的memtable，也称为immutable memtable。<br>这两者的结构定义完全一样，区别只是immutable memtable是只读的。当一个immutable memtable被创建时，leveldb的后台压缩进程便会将利用其中的内容，创建一个sstable，持久化到磁盘文件中。</p><p>所有 KV 数据都是存储在 Memtable，Immutable Memtable 和 SSTable 中的，Immutable Memtable 从结构上讲和 Memtable 是完全一样的，区别仅仅在于其是只读的，不允许写入操作，而 Memtable 则是允许写入和读取的。当 Memtable 写入的数据占用内存到达指定数量，则自动转换为 Immutable Memtable，等待 Dump 到磁盘中，系统会自动生成新的 Memtable 供写操作写入新数据，理解了 Memtable，那么 Immutable Memtable 自然不在话下。</p><h3 id="Log-文件"><a href="#Log-文件" class="headerlink" title="Log 文件"></a>Log 文件</h3><p>写入内存前先写 log 文件，这个文件是磁盘文件，类似于 MySQL 的 binlog。</p><p>leveldb的写操作并不是直接写入磁盘的，而是首先写入到内存。假设写入到内存的数据还未来得及持久化，leveldb进程发生了异常，抑或是宿主机器发生了宕机，会造成用户的写入发生丢失。因此leveldb在写内存之前会首先将所有的写操作写到日志文件中，也就是log文件。当以下异常情况发生时，均可以通过日志文件进行恢复：</p><ol><li>写log期间进程异常；</li><li>写log完成，写内存未完成；</li><li>write动作完成（即log、内存写入都完成）后，进程异常；</li><li>Immutable memtable持久化过程中进程异常；</li><li>其他压缩异常（较为复杂，首先不在这里介绍）；</li></ol><p>当第一类情况发生时，数据库重启读取log时，发现异常日志数据，抛弃该条日志数据，即视作这次用户写入失败，保障了数据库的一致性；</p><p>当第二类，第三类，第四类情况发生了，均可以通过redo日志文件中记录的写入操作完成数据库的恢复。</p><p>每次日志的写操作都是一次顺序写，因此写效率高，整体写入性能较好。</p><p>此外，leveldb的<code>用户写操作的原子性</code>同样通过日志来实现。</p><h3 id="SSTable-Sorted-String-Table"><a href="#SSTable-Sorted-String-Table" class="headerlink" title="SSTable (Sorted String Table)"></a>SSTable (Sorted String Table)</h3><p>这个是数据存储的文件。</p><p>虽然leveldb采用了先写内存的方式来提高写入效率，但是内存中数据不可能无限增长，且日志中记录的写入操作过多，会导致异常发生时，恢复时间过长。因此内存中的数据达到一定容量，就需要将数据持久化到磁盘中。除了某些元数据文件，leveldb的数据主要都是通过sstable来进行存储。</p><p>虽然在内存中，所有的数据都是按序排列的，但是当多个memetable数据持久化到磁盘后，对应的不同的sstable之间是存在交集的，在读操作时，需要对所有的sstable文件进行遍历，严重影响了读取效率。因此leveldb后台会“定期“整合这些sstable文件，该过程也称为compaction。随着compaction的进行，sstable文件在逻辑上被分成若干层，由内存数据直接dump出来的文件称为level 0层文件，后期整合而成的文件为level i 层文件，这也是leveldb这个名字的由来。</p><p>注意，所有的sstable文件本身的内容是不可修改的，这种设计哲学为leveldb带来了许多优势，简化了很多设计。具体将在接下来的文章中具体解释。</p><p>看下sst的整体结构</p><p>注意，sst 是逻辑上的结构，实际物理文件会有序号进行排序，但并不代表其层级。</p><p><img src="/posts/18926/sst%E5%B1%82%E7%BA%A72.jpg" alt="sst层级"></p><h3 id="manifest-文件"><a href="#manifest-文件" class="headerlink" title="manifest 文件"></a>manifest 文件</h3><p>leveldb中有个版本的概念，一个版本中主要记录了每一层中所有文件的元数据，元数据包括<br>（1）文件大小<br>（2）最大key值<br>（3）最小key值<br>该版本信息十分关键，除了在查找数据时，利用维护的每个文件的最大／小key值来加快查找，还在其中维护了一些进行compaction的统计值，来控制compaction的进行。</p><p>SSTable 中的某个文件属于特定层级，而且其存储的记录是 key 有序的，那么必然有文件中的最小 key 和最大 key，这是非常重要的信息，LevelDB 应该记下这些信息。manifest 就是干这个的，它记载了 SSTable 各个文件的管理信息，比如属于哪个 level，文件名称叫啥，最小 key 和最大 key 各自是多少。</p><p><img src="/posts/18926/manifest.png" alt="manifest"></p><p>图中只显示了两个文件（manifest 会记载所有 SSTable 文件的这些信息），即 level 0 的 Test1.sst 和 Test2.sst 文件，同时记载了这些文件各自对应的 key 范围，比如 Test1.sst 的 key 范围是 “abc” 到 “hello”，而文件 Test2.sst 的 key 范围是 “bbc” 到 “world”，可以看出两者的 key 范围是有重叠的。</p><h3 id="current-文件"><a href="#current-文件" class="headerlink" title="current 文件"></a>current 文件</h3><p>这个文件的内容只有一个信息，就是记载当前的 manifest 文件名。因为在 LevleDB 的运行过程中，随着 compaction 的进行，SSTable 文件会发生变化，会有新的文件产生，老的文件被废弃，manifest 也会跟着反映这种变化，此时往往会新生成 manifest 文件来记载这种变化，而 current 则用来指出哪个 manifest 文件才是我们关心的那个 manifest 文件。</p><p>注意，每次leveldb启动时，也都会创建一个新的Manifest文件。</p>]]></content>
      
      
      <categories>
          
          <category> leveldb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> leveldb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang tar包和脚本安装</title>
      <link href="posts/33246.html"/>
      <url>posts/33246.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>golang 的安装还是比较友好，两种方式安装：</p><ul><li>tar包安装</li><li>脚本安装</li></ul><h2 id="tar包安装"><a href="#tar包安装" class="headerlink" title="tar包安装"></a>tar包安装</h2><p>一般是直接上官网下载安装，不同版本功能还不一样，也可以使用脚本来快速安装。</p><p><a href="https://golang.org/dl">https://golang.org/dl</a></p><p>也可以参考官方安装文档<br><a href="https://golang.org/doc/install#install">https://golang.org/doc/install#install</a></p><p><img src="/posts/33246/go%E5%AE%89%E8%A3%85.jpg" alt="go下载列表"></p><h3 id="如果需要其他版本"><a href="#如果需要其他版本" class="headerlink" title="如果需要其他版本"></a>如果需要其他版本</h3><p>选 Archived versions 可以查看之前的发行版</p><p><img src="/posts/33246/%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC.jpg" alt="其他版本"></p><p>下载和配置环境变量</p><blockquote><p>wget <a href="https://go.dev/dl/go1.19.3.linux-amd64.tar.gz">https://go.dev/dl/go1.19.3.linux-amd64.tar.gz</a><br>rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.19.3.linux-amd64.tar.gz</p></blockquote><p>/etc/profile中添加以下内容</p><blockquote><p>export PATH=$PATH:/usr/local/src/go/bin</p></blockquote><p>验证一下</p><blockquote><p>go version</p></blockquote><h2 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h2><p>开发环境安装通常使用脚本快速安装</p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch install.sh</span><br><span class="line">chmod u+x install.sh</span><br></pre></td></tr></table></figure><h3 id="添加脚本"><a href="#添加脚本" class="headerlink" title="添加脚本"></a>添加脚本</h3><p>脚本会在当前用户下创建 go 目录，写入 .bash_profile 中<br><code>VERSION</code> 是版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; install.sh &lt;&lt;&quot;EOF&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">VERSION=&quot;1.16.4&quot;</span><br><span class="line">[ -z &quot;$GOROOT&quot; ] &amp;&amp; GOROOT=&quot;$HOME/.go&quot;</span><br><span class="line">[ -z &quot;$GOPATH&quot; ] &amp;&amp; GOPATH=&quot;$HOME/go&quot;</span><br><span class="line"></span><br><span class="line">OS=&quot;$(uname -s)&quot;</span><br><span class="line">ARCH=&quot;$(uname -m)&quot;</span><br><span class="line"></span><br><span class="line">case $OS in</span><br><span class="line">    &quot;Linux&quot;)</span><br><span class="line">        case $ARCH in</span><br><span class="line">        &quot;x86_64&quot;)</span><br><span class="line">            ARCH=amd64</span><br><span class="line">            ;;</span><br><span class="line">        &quot;armv6&quot;)</span><br><span class="line">            ARCH=armv6l</span><br><span class="line">            ;;</span><br><span class="line">        &quot;armv8&quot;)</span><br><span class="line">            ARCH=arm64</span><br><span class="line">            ;;</span><br><span class="line">        .*386.*)</span><br><span class="line">            ARCH=386</span><br><span class="line">            ;;</span><br><span class="line">        esac</span><br><span class="line">        PLATFORM=&quot;linux-$ARCH&quot;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;Darwin&quot;)</span><br><span class="line">        PLATFORM=&quot;darwin-amd64&quot;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">print_help() &#123;</span><br><span class="line">    echo &quot;Usage: bash goinstall.sh OPTIONS&quot;</span><br><span class="line">    echo -e &quot;\nOPTIONS:&quot;</span><br><span class="line">    echo -e &quot;  --remove\tRemove currently installed version&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ -n &quot;`$SHELL -c &#x27;echo $ZSH_VERSION&#x27;`&quot; ]; then</span><br><span class="line">    shell_profile=&quot;zshrc&quot;</span><br><span class="line">elif [ -n &quot;`$SHELL -c &#x27;echo $BASH_VERSION&#x27;`&quot; ]; then</span><br><span class="line">    shell_profile=&quot;bashrc&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">PACKAGE_NAME=&quot;go$VERSION.$PLATFORM.tar.gz&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; == &quot;--remove&quot; ]; then</span><br><span class="line">    rm -rf &quot;$GOROOT&quot;</span><br><span class="line">    if [ &quot;$OS&quot; == &quot;Darwin&quot; ]; then</span><br><span class="line">        sed -i &quot;&quot; &#x27;/# GoLang/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &quot;&quot; &#x27;/export GOROOT/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &quot;&quot; &#x27;/$GOROOT\/bin/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &quot;&quot; &#x27;/export GOPATH/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &quot;&quot; &#x27;/$GOPATH\/bin/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">    else</span><br><span class="line">        sed -i &#x27;/# GoLang/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &#x27;/export GOROOT/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &#x27;/$GOROOT\/bin/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &#x27;/export GOPATH/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">        sed -i &#x27;/$GOPATH\/bin/d&#x27; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo &quot;Go removed.&quot;</span><br><span class="line">    exit 0</span><br><span class="line">elif [ &quot;$1&quot; == &quot;--help&quot; ]; then</span><br><span class="line">    print_help</span><br><span class="line">    exit 0</span><br><span class="line">elif [ ! -z &quot;$1&quot; ]; then</span><br><span class="line">    echo &quot;Unrecognized option: $1&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -d &quot;$GOROOT&quot; ]; then</span><br><span class="line">    echo &quot;The Go install directory ($GOROOT) already exists. Exiting.&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;Downloading $PACKAGE_NAME ...&quot;</span><br><span class="line">if hash wget 2&gt;/dev/null; then</span><br><span class="line">    wget https://storage.googleapis.com/golang/$PACKAGE_NAME -O /tmp/go.tar.gz</span><br><span class="line">else</span><br><span class="line">    curl -o /tmp/go.tar.gz https://storage.googleapis.com/golang/$PACKAGE_NAME</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo &quot;Download failed! Exiting.&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;Extracting File...&quot;</span><br><span class="line">mkdir -p &quot;$GOROOT&quot;</span><br><span class="line">tar -C &quot;$GOROOT&quot; --strip-components=1 -xzf /tmp/go.tar.gz</span><br><span class="line">touch &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line">&#123;</span><br><span class="line">    echo &#x27;# GoLang&#x27;</span><br><span class="line">    echo &quot;export GOROOT=$&#123;GOROOT&#125;&quot;</span><br><span class="line">    echo &#x27;export PATH=$GOROOT/bin:$PATH&#x27;</span><br><span class="line">    echo &quot;export GOPATH=$GOPATH&quot;</span><br><span class="line">    echo &#x27;export PATH=$GOPATH/bin:$PATH&#x27;</span><br><span class="line">    echo &quot;export GOBIN=$GOPATH/bin&quot;</span><br><span class="line">&#125; &gt;&gt; &quot;$HOME/.$&#123;shell_profile&#125;&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p $GOPATH/&#123;src,pkg,bin&#125;</span><br><span class="line">echo -e &quot;\nGo $VERSION was installed into $GOROOT.\nMake sure to relogin into your shell or run:&quot;</span><br><span class="line">echo -e &quot;\n\tsource $HOME/.$&#123;shell_profile&#125;\n\nto update your environment variables.&quot;</span><br><span class="line">echo &quot;Tip: Opening a new terminal window usually just works. :)&quot;</span><br><span class="line">rm -f /tmp/go.tar.gz</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh install.sh</span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> go </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq-安装</title>
      <link href="posts/60633.html"/>
      <url>posts/60633.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>RabbitMQ 基于 Erlang，安装前，需要安装对应版本的 Erlang<br>官网 RabbitMQ 与 Erlang 版本对照表 <a href="https://www.rabbitmq.com/which-erlang.html">https://www.rabbitmq.com/which-erlang.html</a><br>CentOS 7 环境下安装</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h3><ol><li><p>查看是否存在旧erlang版本<br><code>erl -version</code></p></li><li><p>若版本低于（version 11.2.2），卸载erlang<br><code>yum -y remove erlang-*</code></p></li><li><p>安装erlang所依赖工具<br><code>yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</code></p></li><li><p>安装 socat<br>erlang内存管理依赖socat<br><code>yum install -y socat</code></p></li><li><p>安装 signing-key，用于和 yum更新源通信<br><code>rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</code></p></li><li><p>更新源<br><code>vi /etc/yum.repos.d/rabbitmq_erlang.repo</code><br>将对应的内容拷贝到文件里面，参考链接：<a href="https://github.com/rabbitmq/erlang-rpm">https://github.com/rabbitmq/erlang-rpm</a><br>使用 Erlang 23.3 配置<br>复制除 begin end 分割线外的中间内容</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[rabbitmq_erlang]</span><br><span class="line">name=rabbitmq-rabbitmq-erlang</span><br><span class="line">baseurl=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/rpm/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/gpg.E495BB49CC4BBE5B.key</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">gpgcheck=1</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line">pkg_gpgcheck=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-noarch]</span><br><span class="line">name=rabbitmq-rabbitmq-erlang-noarch</span><br><span class="line">baseurl=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/rpm/el/7/noarch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/gpg.E495BB49CC4BBE5B.key</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">gpgcheck=1</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line">pkg_gpgcheck=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-source]</span><br><span class="line">name=rabbitmq-rabbitmq-erlang-source</span><br><span class="line">baseurl=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/rpm/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/gpg.E495BB49CC4BBE5B.key</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">gpgcheck=1</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line">pkg_gpgcheck=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br></pre></td></tr></table></figure><ol start="7"><li><p>更新源<br>yum update -y</p></li><li><p>安装erlang<br>yum install -y erlang-23.3.4</p></li></ol><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><ol><li>安装RabbitMQ</li></ol><blockquote><p>yum install -y <a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.22/rabbitmq-server-3.8.22-1.el7.noarch.rpm">https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.22/rabbitmq-server-3.8.22-1.el7.noarch.rpm</a></p></blockquote><ol start="2"><li>systemctl 系统命令操作</li></ol><blockquote><p>systemctl start rabbitmq-server   #启动<br>systemctl restart rabbitmq-server #重启<br>systemctl stop rabbitmq-server    #关闭<br>systemctl status rabbitmq-server  #查看状态</p></blockquote><ol start="3"><li>rabbitmqctl 相关命令</li></ol><blockquote><p>sudo rabbitmqctl status   #查看服务状态<br>sudo rabbitmqctl version  #查看服务版本</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> mq </tag>
            
            <tag> matic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matic checkpoint理解</title>
      <link href="posts/6413.html"/>
      <url>posts/6413.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>checkpoint</code>是<code>Matic</code>协议中最关键的部分。它代表了<code>Bor</code>链状态的快照，应该由⅔+的验证器集证明，然后再验证并提交给部署在以太坊上的合约。</p><p>这里有几个问题：</p><ol><li>checkpoint 是什么</li><li>为什么要提交bor的状态，状态中包含哪些信息</li><li>checkpoint 验证流程</li></ol><h2 id="checkpoint-是什么"><a href="#checkpoint-是什么" class="headerlink" title="checkpoint 是什么"></a>checkpoint 是什么</h2><p><code>checkpoint</code>是<code>Matic</code>协议中最关键的部分。它代表了<code>Bor</code>链状态的快照，应该由⅔+的<code>validator</code>集证明，然后再验证并提交给部署在以太坊上的合约。</p><p>Heimdall 层允许将 Bor 生成的区块聚合到单个 Merkle 根中，并定期将其发布到以太坊主链。<br>此已发布状态也称为检查点，因此整个过程称为<code>validator(检查点)</code>。<br>检查点提议者最初是通过 <code>Tendermint</code> 的加权循环算法选择的。</p><h3 id="checkpoint-结构"><a href="#checkpoint-结构" class="headerlink" title="checkpoint 结构"></a>checkpoint 结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CheckpointBlockHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Proposer is selected based on stake</span></span><br><span class="line">    Proposer        types.HeimdallAddress <span class="string">`json:&quot;proposer&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// StartBlock: The block number on Bor from which this checkpoint starts</span></span><br><span class="line">    StartBlock      <span class="keyword">uint64</span>                <span class="string">`json:&quot;startBlock&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// EndBlock: The block number on Bor from which this checkpoint ends</span></span><br><span class="line">    EndBlock        <span class="keyword">uint64</span>                <span class="string">`json:&quot;endBlock&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RootHash is the Merkle root of all the leaves containing the block</span></span><br><span class="line">    <span class="comment">// headers starting from start to the end block</span></span><br><span class="line">    RootHash        types.HeimdallHash    <span class="string">`json:&quot;rootHash&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Account root hash for each validator</span></span><br><span class="line">    <span class="comment">// Hash of data that needs to be passed from Heimdall to Ethereum chain like slashing, withdraw topup etc.</span></span><br><span class="line">    AccountRootHash types.HeimdallHash    <span class="string">`json:&quot;accountRootHash&quot;`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Timestamp when checkpoint was created on Heimdall</span></span><br><span class="line">    TimeStamp       <span class="keyword">uint64</span>          <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这里 checkpoint 的提交是基于 bor 的<code>StartBlock</code>到<code>EndBlock</code>之间的区块，这点很重要。<br><code>bor</code>是基于<code>Ethereum协议</code>实现的底层链。<a href="https://docs.polygon.technology/docs/contribute/bor/overview">官方定义</a></p><p><img src="/posts/6413/checkpoint.svg" alt="checkpoint"></p><h3 id="blockHash"><a href="#blockHash" class="headerlink" title="blockHash"></a>blockHash</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blockHash = keccak256([number, time, tx hash, receipt hash])</span><br></pre></td></tr></table></figure><h3 id="rootHash"><a href="#rootHash" class="headerlink" title="rootHash"></a>rootHash</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B(<span class="number">1</span>) := keccak256([number, time, tx hash, receipt hash])</span><br><span class="line">B(<span class="number">2</span>) := keccak256([number, time, tx hash, receipt hash])</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">B(n) := keccak256([number, time, tx hash, receipt hash])</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkpoint is Merkle root of all block hash</span></span><br><span class="line">checkpoint<span class="string">&#x27;s root hash = Merkel[B(1), B(2), ....., B(n)]</span></span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>下面是 Bor 链区块创建<code>checkpoint</code>的代码片段，官方代码：<br><a href="https://github.com/maticnetwork/heimdall/blob/develop/checkpoint/types/merkel.go#L60-L114">https://github.com/maticnetwork/heimdall/blob/develop/checkpoint/types/merkel.go#L60-L114</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Golang representation of block data used in checkpoint</span></span><br><span class="line">blockData := crypto.Keccak256(appendBytes32(</span><br><span class="line">    blockHeader.Number.Bytes(),</span><br><span class="line">    <span class="built_in">new</span>(big.Int).SetUint64(blockHeader.Time).Bytes(),</span><br><span class="line">    blockHeader.TxHash.Bytes(),</span><br><span class="line">    blockHeader.ReceiptHash.Bytes(),</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="comment">// array of block hashes of Bor blocks</span></span><br><span class="line">headers := [blockData1, blockData2, ..., blockDataN]</span><br><span class="line"></span><br><span class="line"><span class="comment">// merkel tre</span></span><br><span class="line">tree := merkle.NewTreeWithOpts(merkle.TreeOptions&#123;EnableHashSorting: <span class="literal">false</span>, DisableHashLeaves: <span class="literal">true</span>&#125;)</span><br><span class="line">tree.Generate(convert(headers), sha3.NewLegacyKeccak256())</span><br><span class="line"></span><br><span class="line"><span class="comment">// create checkpoint&#x27;s root hash</span></span><br><span class="line">rootHash := tree.Root().Hash</span><br></pre></td></tr></table></figure><h2 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h2><ol><li>侧链提交 checkpoint</li><li>Validator 接收、验证checkpoint，并提交主链</li><li>主链接收checkpoint，并发送checkpoint-ack</li><li>Validator 接收、验证 checkpoint-ack</li></ol><p><code>Validator</code> 层通过 <code>bridge</code>模块监听<code>主链</code>和<code>侧链</code>上的合约事件。</p><p><strong>质押</strong>：质押链为<code>ETH主链</code></p><p><strong>存款</strong>：发生在<code>ETH主链</code></p><p><strong>取款</strong>：发生在<code>MATIC侧链</code><br>下面的流程图代表了<code>checkpoint</code>的生命周期。<br><img src="/posts/6413/checkpoint%E6%B5%81%E7%A8%8B.png" alt="checkpoint流程"></p><p><code>Heimdall</code>使用与<code>Tendermint</code>相同的<code>共识算法</code>来选择下一个Proposer。<code>Proposer</code> 也就是 <code>Heimdall</code> 层的出块者，在 Matic 中发分起一个 Propose 提案</p><p>在以太坊链上提交<code>checkpoint</code>时，可能会因为多种原因而失败，如<code>gas limit</code>，以太坊拥堵，高<code>gas</code>费用。这就是为什么需要多阶段的<code>checkpoint</code>过程。</p><p>因为每个<code>checkpoint</code>都<code>Proposer</code>提起的，而每个<code>validator</code>都有机会被选举为<code>Proposer</code>。<br>如果提交以太坊链上的<code>checkpoint</code>成功或失败，将会发送<code>ack</code>和<code>no-ack</code>交易将改变Heimdall上的提议者，以进行下一个检查点。</p><h2 id="Checkpoint-流程"><a href="#Checkpoint-流程" class="headerlink" title="Checkpoint 流程"></a>Checkpoint 流程</h2><p>![Checkpoint 流程](checkpointMessage 流程.jpg)</p><p>那么问题来了，Heimdall 链是怎么知道 checkpoint 提交 Ethereum主链成功没成功？</p><p>Heimdall项目中的bor模块，是基于<code>Ethereum</code>实现ETH协议，实际就是包装了EVM，可以接收ETH广播的区块，并监听合约事件，从事件中获取需要的事件信息。</p><h2 id="Checkpoint-事件监听"><a href="#Checkpoint-事件监听" class="headerlink" title="Checkpoint 事件监听"></a>Checkpoint 事件监听</h2><p>看下 checkpoint 相关的事件监听，heimdall 的事件处理通过将监听器监听到的事件，发送到队列当中，由事件处理器进行处理。<br>这些逻辑在 <code>bridge</code> 模块中进行。</p><p>关键事件：</p><ol><li>sendCheckpointToHeimdall</li><li>sendCheckpointToRootchain</li><li>sendCheckpointAckToHeimdall</li></ol><p>Rootchain是<code>Ethereum</code><br>Heimdall是matic的中间层</p><h3 id="获取监听事件"><a href="#获取监听事件" class="headerlink" title="获取监听事件"></a>获取监听事件</h3><p>bridge/setu/listener/heimdall.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ProcessBlockEvent - process Blockevents (BeginBlock, EndBlock events) from heimdall.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(hl *HeimdallListener)</span> <span class="title">ProcessBlockEvent</span><span class="params">(event sdk.StringEvent, blockHeight <span class="keyword">int64</span>)</span></span> &#123;</span><br><span class="line">hl.Logger.Info(<span class="string">&quot;Received block event from Heimdall&quot;</span>, <span class="string">&quot;eventType&quot;</span>, event.Type, <span class="string">&quot;height&quot;</span>, blockHeight)</span><br><span class="line">eventBytes, err := json.Marshal(event)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">hl.Logger.Error(<span class="string">&quot;Error while parsing block event&quot;</span>, <span class="string">&quot;error&quot;</span>, err, <span class="string">&quot;eventType&quot;</span>, event.Type)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> event.Type &#123;</span><br><span class="line"><span class="keyword">case</span> checkpointTypes.EventTypeCheckpoint:</span><br><span class="line">        <span class="comment">//发送事件到队列</span></span><br><span class="line">hl.sendBlockTask(<span class="string">&quot;sendCheckpointToRootchain&quot;</span>, eventBytes, blockHeight)</span><br><span class="line"><span class="keyword">case</span> checkpointTypes.EventTypeCheckpointSync:</span><br><span class="line">hl.sendBlockTask(<span class="string">&quot;sendCheckpointSyncToStakeChain&quot;</span>, eventBytes, blockHeight)</span><br><span class="line"><span class="keyword">case</span> slashingTypes.EventTypeSlashLimit:</span><br><span class="line">hl.sendBlockTask(<span class="string">&quot;sendTickToHeimdall&quot;</span>, eventBytes, blockHeight)</span><br><span class="line"><span class="keyword">case</span> slashingTypes.EventTypeTickConfirm:</span><br><span class="line">hl.sendBlockTask(<span class="string">&quot;sendTickToRootchain&quot;</span>, eventBytes, blockHeight)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> stakingTypes.EventTypeValidatorJoin,</span><br><span class="line">stakingTypes.EventTypeSignerUpdate,</span><br><span class="line">stakingTypes.EventTypeValidatorExit,</span><br><span class="line">stakingTypes.EventTypeStakingSyncAck:</span><br><span class="line">hl.sendBlockTask(<span class="string">&quot;sendStakingSyncToHeimdall&quot;</span>, eventBytes, blockHeight)</span><br><span class="line"><span class="keyword">case</span> stakingTypes.EventTypeStakingSync:</span><br><span class="line">hl.sendBlockTask(<span class="string">&quot;sendStakingSyncToRootChain&quot;</span>, eventBytes, blockHeight)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">hl.Logger.Debug(<span class="string">&quot;BlockEvent Type mismatch&quot;</span>, <span class="string">&quot;eventType&quot;</span>, event.Type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送事件到队列"><a href="#发送事件到队列" class="headerlink" title="发送事件到队列"></a>发送事件到队列</h3><p>hl.queueConnector 是Heimdall的内部队列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(hl *HeimdallListener)</span> <span class="title">sendBlockTask</span><span class="params">(taskName <span class="keyword">string</span>, eventBytes []<span class="keyword">byte</span>, blockHeight <span class="keyword">int64</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// create machinery task</span></span><br><span class="line">signature := &amp;tasks.Signature&#123;</span><br><span class="line">Name: taskName,</span><br><span class="line">Args: []tasks.Arg&#123;</span><br><span class="line">&#123;</span><br><span class="line">Type:  <span class="string">&quot;string&quot;</span>,</span><br><span class="line">Value: <span class="keyword">string</span>(eventBytes),</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Type:  <span class="string">&quot;int64&quot;</span>,</span><br><span class="line">Value: blockHeight,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">signature.RetryCount = <span class="number">3</span></span><br><span class="line">signature.RetryTimeout = <span class="number">3</span></span><br><span class="line">hl.Logger.Info(<span class="string">&quot;Sending block level task&quot;</span>,</span><br><span class="line"><span class="string">&quot;taskName&quot;</span>, taskName, <span class="string">&quot;eventBytes&quot;</span>, eventBytes, <span class="string">&quot;currentTime&quot;</span>, time.Now(), <span class="string">&quot;blockHeight&quot;</span>, blockHeight)</span><br><span class="line"><span class="comment">// send task</span></span><br><span class="line">_, err := hl.queueConnector.Server.SendTask(signature)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">hl.Logger.Error(<span class="string">&quot;Error sending block level task&quot;</span>, <span class="string">&quot;taskName&quot;</span>, taskName, <span class="string">&quot;blockHeight&quot;</span>, blockHeight, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理队列的-checkpoint-事件"><a href="#处理队列的-checkpoint-事件" class="headerlink" title="处理队列的 checkpoint 事件"></a>处理队列的 checkpoint 事件</h3><p>bridge/setu/processor/checkpoint.go</p><ol><li><code>sendCheckpointToHeimdall</code> 监听事件</li><li><code>cp.sendCheckpointToHeimdall</code> 事件处理器</li><li><code>sendCheckpointAckToHeimdall</code> checkpoint-Ack事件</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RegisterTasks - Registers checkpoint related tasks with machinery</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cp *CheckpointProcessor)</span> <span class="title">RegisterTasks</span><span class="params">()</span></span> &#123;</span><br><span class="line">cp.Logger.Info(<span class="string">&quot;Registering checkpoint tasks&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointToHeimdall&quot;</span>, cp.sendCheckpointToHeimdall); err != <span class="literal">nil</span> &#123;</span><br><span class="line">cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointToHeimdall&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointToRootchain&quot;</span>, cp.sendCheckpointToRootchain); err != <span class="literal">nil</span> &#123;</span><br><span class="line">cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointToRootchain&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointAckToHeimdall&quot;</span>, cp.sendCheckpointAckToHeimdall); err != <span class="literal">nil</span> &#123;</span><br><span class="line">cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointAckToHeimdall&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointSyncToStakeChain&quot;</span>, cp.sendCheckpointSyncToStakeChain); err != <span class="literal">nil</span> &#123;</span><br><span class="line">cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointSyncToStakeChain&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := cp.queueConnector.Server.RegisterTask(<span class="string">&quot;sendCheckpointSyncAckToHeimdall&quot;</span>, cp.sendCheckpointSyncAckToHeimdall); err != <span class="literal">nil</span> &#123;</span><br><span class="line">cp.Logger.Error(<span class="string">&quot;RegisterTasks | sendCheckpointSyncAckToHeimdall&quot;</span>, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> polygon </category>
          
          <category> matic </category>
          
          <category> polygon </category>
          
          <category> matic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> matic </tag>
            
            <tag> polygon </tag>
            
            <tag> checkpoint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMS 问题定位与排查</title>
      <link href="posts/28187.html"/>
      <url>posts/28187.html</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近排查一个历史老问题，历史问题就是大家都知道，但是没人愿意处理。<br>线上节点 16 和 32 G 内存频繁的出现GC，并且由于 GC 还导至两个问题，1.CPU使用率在GC时变高，2.业务出现异常。<br>这个问题变得无法忍耐了，跟踪程序线程使用，CMS GC 线程CPU 使用在初始化时都 11-99% 之间，严重影响业务处理。<br>通过 <code>jstat</code> 观察，FullGC 不多，但是 YoungGC 非常频繁，YoungGC 多不影响服务性能吗？也影响。<br>计算一个服务GC的好坏，不是看 FullGC 多少，而是看整体服务的吞吐量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">68096.0 68096.0 16840.1  0.0   545344.0 115481.1 6658496.0  4835834.6  63280.0 60712.9 7084.0 6615.1 1930261 53981.101 4804  1248.371 55229.471</span><br><span class="line">68096.0 68096.0  0.0   17347.7 545344.0 12072.1  6658496.0  4836565.4  63280.0 60712.9 7084.0 6615.1 1930262 53981.125 4804  1248.371 55229.496</span><br><span class="line">68096.0 68096.0  0.0   12854.1 545344.0 252246.5 6658496.0  4838818.8  63280.0 60712.9 7084.0 6615.1 1930264 53981.168 4804  1248.371 55229.539</span><br><span class="line">68096.0 68096.0 19501.0  0.0   545344.0 187933.5 6658496.0  4838869.4  63280.0 60712.9 7084.0 6615.1 1930265 53981.189 4804  1248.371 55229.559</span><br><span class="line">68096.0 68096.0 19501.0  0.0   545344.0 445775.5 6658496.0  4838869.4  63280.0 60712.9 7084.0 6615.1 1930265 53981.189 4804  1248.371 55229.559</span><br><span class="line">68096.0 68096.0 11858.3  0.0   545344.0 515043.9 6658496.0  4845614.9  63280.0 60712.9 7084.0 6615.1 1930267 53981.239 4804  1248.371 55229.610</span><br><span class="line">68096.0 68096.0  0.0   16469.0 545344.0 361227.7 6658496.0  4846356.5  63280.0 60712.9 7084.0 6615.1 1930268 53981.263 4804  1248.371 55229.634</span><br><span class="line">68096.0 68096.0  0.0   20075.6 545344.0 226522.4 6658496.0  4847100.6  63280.0 60712.9 7084.0 6615.1 1930270 53981.316 4804  1248.371 55229.687</span><br><span class="line">68096.0 68096.0 19591.2  0.0   545344.0 325872.6 6658496.0  4852312.8  63280.0 60712.9 7084.0 6615.1 1930271 53981.344 4804  1248.371 55229.715</span><br><span class="line">68096.0 68096.0  0.0   19282.2 545344.0 206195.9 6658496.0  4853497.6  63280.0 60712.9 7084.0 6615.1 1930272 53981.368 4804  1248.371 55229.739</span><br><span class="line">68096.0 68096.0  0.0   16319.6 545344.0 520305.2 6658496.0  4858184.1  63280.0 60712.9 7084.0 6615.1 1930274 53981.414 4804  1248.371 55229.785</span><br><span class="line">68096.0 68096.0 19240.3  0.0   545344.0 349365.5 6658496.0  4859016.3  63280.0 60712.9 7084.0 6615.1 1930275 53981.445 4804  1248.371 55229.815</span><br></pre></td></tr></table></figure><p>计算吞吐量</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>先排除环境原因，从开发环境到线上环境发现情况是相同的，可以初步认定是一个普遍问题。</p><h3 id="定位-16G-内存服务情况"><a href="#定位-16G-内存服务情况" class="headerlink" title="定位 16G 内存服务情况"></a>定位 16G 内存服务情况</h3><p>先从 <strong>16G</strong> 内存开始，收集一些基本信息，再观察运行情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java -Xms9g -Xmx9g</span><br><span class="line">   -XX:+UseConcMarkSweepGC</span><br><span class="line">   -XX:+PrintGCDetails -Xloggc:./gc.log</span><br><span class="line">   -XX:+PrintGCDateStamps</span><br><span class="line">   -XX:+CMSParallelRemarkEnabled</span><br><span class="line">   -XX:ReservedCodeCacheSize=<span class="number">256</span>m</span><br><span class="line">   -XX:+CMSScavengeBeforeRemark</span><br><span class="line">   -XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">   -XX:MaxDirectMemorySize=<span class="number">1</span>g</span><br><span class="line">  -jar Node.jar</span><br><span class="line">  -c config.conf</span><br></pre></td></tr></table></figure><p>从这上面能看到关于 <strong>CMS</strong> 关相的几个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:+CMSParallelRemarkEnabled</span><br><span class="line">-XX:+CMSScavengeBeforeRemark</span><br></pre></td></tr></table></figure><h4 id="内存使用情况"><a href="#内存使用情况" class="headerlink" title="内存使用情况"></a>内存使用情况</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = <span class="number">40</span></span><br><span class="line">   MaxHeapFreeRatio         = <span class="number">70</span></span><br><span class="line">   MaxHeapSize              = <span class="number">9663676416</span> (<span class="number">9216.0</span>MB)</span><br><span class="line">   NewSize                  = <span class="number">697892864</span> (<span class="number">665.5625</span>MB)</span><br><span class="line">   MaxNewSize               = <span class="number">697892864</span> (<span class="number">665.5625</span>MB)</span><br><span class="line">   OldSize                  = <span class="number">8965783552</span> (<span class="number">8550.4375</span>MB)</span><br><span class="line">   NewRatio                 = <span class="number">2</span></span><br><span class="line">   SurvivorRatio            = <span class="number">8</span></span><br><span class="line">   MetaspaceSize            = <span class="number">21807104</span> (<span class="number">20.796875</span>MB)</span><br><span class="line">   CompressedClassSpaceSize = <span class="number">1073741824</span> (<span class="number">1024.0</span>MB)</span><br><span class="line">   MaxMetaspaceSize         = <span class="number">17592186044415</span> MB</span><br><span class="line">   G1HeapRegionSize         = <span class="number">0</span> (<span class="number">0.0</span>MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line"><span class="function">New <span class="title">Generation</span> <span class="params">(Eden + <span class="number">1</span> Survivor Space)</span>:</span></span><br><span class="line"><span class="function">   capacity </span>= <span class="number">628162560</span> (<span class="number">599.0625</span>MB)</span><br><span class="line">   used     = <span class="number">511774816</span> (<span class="number">488.0664978027344</span>MB)</span><br><span class="line">   free     = <span class="number">116387744</span> (<span class="number">110.99600219726562</span>MB)</span><br><span class="line">   <span class="number">81.47171585648148</span>% used</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity = <span class="number">558432256</span> (<span class="number">532.5625</span>MB)</span><br><span class="line">   used     = <span class="number">487164440</span> (<span class="number">464.5962142944336</span>MB)</span><br><span class="line">   free     = <span class="number">71267816</span> (<span class="number">67.9662857055664</span>MB)</span><br><span class="line">   <span class="number">87.23787617311275</span>% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity = <span class="number">69730304</span> (<span class="number">66.5</span>MB)</span><br><span class="line">   used     = <span class="number">24610376</span> (<span class="number">23.47028350830078</span>MB)</span><br><span class="line">   free     = <span class="number">45119928</span> (<span class="number">43.02971649169922</span>MB)</span><br><span class="line">   <span class="number">35.29365941097862</span>% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity = <span class="number">69730304</span> (<span class="number">66.5</span>MB)</span><br><span class="line">   used     = <span class="number">0</span> (<span class="number">0.0</span>MB)</span><br><span class="line">   free     = <span class="number">69730304</span> (<span class="number">66.5</span>MB)</span><br><span class="line">   <span class="number">0.0</span>% used</span><br><span class="line">concurrent mark-sweep generation:</span><br><span class="line">   capacity = <span class="number">8965783552</span> (<span class="number">8550.4375</span>MB)</span><br><span class="line">   used     = <span class="number">4737287088</span> (<span class="number">4517.829025268555</span>MB)</span><br><span class="line">   free     = <span class="number">4228496464</span> (<span class="number">4032.6084747314453</span>MB)</span><br><span class="line">   <span class="number">52.837401890471156</span>% used</span><br><span class="line"></span><br><span class="line"><span class="number">20983</span> interned Strings occupying <span class="number">2039024</span> bytes.</span><br></pre></td></tr></table></figure><p>这里看出一个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = <span class="number">40</span></span><br><span class="line">   MaxHeapFreeRatio         = <span class="number">70</span></span><br><span class="line">   MaxHeapSize              = <span class="number">9663676416</span> (<span class="number">9216.0</span>MB)</span><br><span class="line">   NewSize                  = <span class="number">697892864</span> (<span class="number">665.5625</span>MB)</span><br><span class="line">   MaxNewSize               = <span class="number">697892864</span> (<span class="number">665.5625</span>MB)</span><br><span class="line">   OldSize                  = <span class="number">8965783552</span> (<span class="number">8550.4375</span>MB)</span><br><span class="line">   NewRatio                 = <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>NewRatio=2</strong> 但是实际新生代获得的内存空间只有 <strong>665.5625MB</strong>，这就有点奇怪了，不是说好的老年代:新生代 2 : 1 吗。<br>这是一个问题，另外从当前的 GC 回收时间推算出，当前吞吐量为: 96%，还没有达到最优的情况。</p><h4 id="修复新生代比例大小"><a href="#修复新生代比例大小" class="headerlink" title="修复新生代比例大小"></a>修复新生代比例大小</h4><p>添加启动参数 -XX:NewRatio=2，完整启动命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java -Xms9g -Xmx9g</span><br><span class="line">   -XX:NewRatio=<span class="number">2</span></span><br><span class="line">   -XX:+UseConcMarkSweepGC</span><br><span class="line">   -XX:+PrintGCDetails -Xloggc:./gc.log</span><br><span class="line">   -XX:+PrintGCDateStamps</span><br><span class="line">   -XX:+CMSParallelRemarkEnabled</span><br><span class="line">   -XX:ReservedCodeCacheSize=<span class="number">256</span>m</span><br><span class="line">   -XX:+CMSScavengeBeforeRemark</span><br><span class="line">   -XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">   -XX:MaxDirectMemorySize=<span class="number">1</span>g</span><br><span class="line">  -jar Node.jar</span><br><span class="line">  -c config.conf</span><br></pre></td></tr></table></figure><p>通过 <code>jstat -gc pid 1000</code> 观察一下 GC 情况<br>添加 <code>-XX:NewRatio=2</code> 启动参数的机器情况</p><p>jmap -heap 查看一下调整后的新生代占比，现在 <code>NewSize=3072.0MB</code> <code>OldSize=6144.0MB</code><br>这时比例生效了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         &#x3D; 40</span><br><span class="line">   MaxHeapFreeRatio         &#x3D; 70</span><br><span class="line">   MaxHeapSize              &#x3D; 9663676416 (9216.0MB)</span><br><span class="line">   NewSize                  &#x3D; 3221225472 (3072.0MB)</span><br><span class="line">   MaxNewSize               &#x3D; 3221225472 (3072.0MB)</span><br><span class="line">   OldSize                  &#x3D; 6442450944 (6144.0MB)</span><br><span class="line">   NewRatio                 &#x3D; 2</span><br><span class="line">   SurvivorRatio            &#x3D; 8</span><br><span class="line">   MetaspaceSize            &#x3D; 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize &#x3D; 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         &#x3D; 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         &#x3D; 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">New Generation (Eden + 1 Survivor Space):</span><br><span class="line">   capacity &#x3D; 2899116032 (2764.8125MB)</span><br><span class="line">   used     &#x3D; 2516795744 (2400.2034606933594MB)</span><br><span class="line">   free     &#x3D; 382320288 (364.6090393066406MB)</span><br><span class="line">   86.81252203154317% used</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity &#x3D; 2577006592 (2457.625MB)</span><br><span class="line">   used     &#x3D; 2194686304 (2093.0159606933594MB)</span><br><span class="line">   free     &#x3D; 382320288 (364.6090393066406MB)</span><br><span class="line">   85.16417112836008% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity &#x3D; 322109440 (307.1875MB)</span><br><span class="line">   used     &#x3D; 322109440 (307.1875MB)</span><br><span class="line">   free     &#x3D; 0 (0.0MB)</span><br><span class="line">   100.0% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity &#x3D; 322109440 (307.1875MB)</span><br><span class="line">   used     &#x3D; 0 (0.0MB)</span><br><span class="line">   free     &#x3D; 322109440 (307.1875MB)</span><br><span class="line">   0.0% used</span><br><span class="line">concurrent mark-sweep generation:</span><br><span class="line">   capacity &#x3D; 6442450944 (6144.0MB)</span><br><span class="line">   used     &#x3D; 525052336 (500.7289276123047MB)</span><br><span class="line">   free     &#x3D; 5917398608 (5643.271072387695MB)</span><br><span class="line">   8.149884889523188% used</span><br><span class="line"></span><br><span class="line">13727 interned Strings occupying 1224528 bytes.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">S0C      S1C      S0U    S1U     EC        EU        OC         OU         MC      MU      CCSC   CCSU     YGC   YGCT     FGC    FGCT    GCT</span><br><span class="line">314560.0 314560.0  0.0   85539.9 2516608.0 1975197.4 6291456.0  4613067.7  63012.0 59752.3 7024.0 6520.3   9317  494.820  222    22.566  517.386</span><br><span class="line">314560.0 314560.0  0.0   85539.9 2516608.0 2228635.2 6291456.0  4613067.7  63012.0 59752.3 7024.0 6520.3   9317  494.820  222    22.566  517.386</span><br><span class="line">314560.0 314560.0 87689.1  0.0   2516608.0 681984.2  6291456.0  4621812.0  63012.0 59752.3 7024.0 6520.3   9318  494.875  222    22.566  517.441</span><br><span class="line">314560.0 314560.0 87689.1  0.0   2516608.0 1965292.1 6291456.0  4621812.0  63012.0 59752.3 7024.0 6520.3   9318  494.875  222    22.566  517.441</span><br><span class="line">314560.0 314560.0  0.0   95789.9 2516608.0 145469.7  6291456.0  4629480.3  63012.0 59752.3 7024.0 6520.3   9319  494.928  222    22.566  517.494</span><br><span class="line">314560.0 314560.0  0.0   95789.9 2516608.0 1741481.8 6291456.0  4629480.3  63012.0 59752.3 7024.0 6520.3   9319  494.928  222    22.566  517.494</span><br><span class="line">314560.0 314560.0  0.0   95789.9 2516608.0 1978876.4 6291456.0  4629480.3  63012.0 59752.3 7024.0 6520.3   9319  494.928  222    22.566  517.494</span><br><span class="line">314560.0 314560.0 74735.8  0.0   2516608.0 306828.0  6291456.0  4638677.5  63012.0 59752.3 7024.0 6520.3   9320  494.982  222    22.566  517.549</span><br><span class="line">314560.0 314560.0 74735.8  0.0   2516608.0 1513196.3 6291456.0  4638677.5  63012.0 59752.3 7024.0 6520.3   9320  494.982  222    22.566  517.549</span><br><span class="line">314560.0 314560.0 74735.8  0.0   2516608.0 1941220.4 6291456.0  4638677.5  63012.0 59752.3 7024.0 6520.3   9320  494.982  222    22.566  517.549</span><br><span class="line">314560.0 314560.0 74735.8  0.0   2516608.0 2415940.5 6291456.0  4638677.5  63012.0 59752.3 7024.0 6520.3   9320  494.982  222    22.566  517.549</span><br></pre></td></tr></table></figure><p>对比存在问题的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">S0C     S1C     S0U    S1U     EC       EU       OC         OU         MC      MU      CCSC   CCSU    YGC    YGCT     FGC     FGCT  GCT</span><br><span class="line">68096.0 68096.0  0.0   16853.2 545344.0 371165.3 8755648.0  5890791.6  62312.0 59746.5 7076.0 6608.5  43879 1312.752  60      5.206 1317.958</span><br><span class="line">68096.0 68096.0 19377.9  0.0   545344.0 420827.3 8755648.0  5891528.9  62312.0 59746.5 7076.0 6608.5  43880 1312.785  60      5.206 1317.991</span><br><span class="line">68096.0 68096.0  0.0   22147.2 545344.0 295435.0 8755648.0  5891577.4  62312.0 59746.5 7076.0 6608.5  43881 1312.816  60      5.206 1318.022</span><br><span class="line">68096.0 68096.0 21257.5  0.0   545344.0 461020.2 8755648.0  5898299.9  62312.0 59746.5 7076.0 6608.5  43882 1312.850  60      5.206 1318.056</span><br><span class="line">68096.0 68096.0  0.0   13895.9 545344.0 419534.8 8755648.0  5901746.3  62312.0 59746.5 7076.0 6608.5  43885 1312.961  60      5.206 1318.167</span><br><span class="line">68096.0 68096.0  0.0   17542.7 545344.0 63902.2  8755648.0  5906856.1  62312.0 59746.5 7076.0 6608.5  43887 1313.028  60      5.206 1318.234</span><br><span class="line">68096.0 68096.0  0.0   17542.7 545344.0 444878.0 8755648.0  5906856.1  62312.0 59746.5 7076.0 6608.5  43887 1313.028  60      5.206 1318.234</span><br><span class="line">68096.0 68096.0 15241.8  0.0   545344.0 403475.0 8755648.0  5909706.0  62312.0 59746.5 7076.0 6608.5  43890 1313.108  60      5.206 1318.314</span><br><span class="line">68096.0 68096.0 24031.2  0.0   545344.0 52019.0  8755648.0  5916571.4  62312.0 59746.5 7076.0 6608.5  43892 1313.174  60      5.206 1318.380</span><br><span class="line">68096.0 68096.0 17381.4  0.0   545344.0 349457.1 8755648.0  5919082.7  62312.0 59746.5 7076.0 6608.5  43894 1313.232  60      5.206 1318.438</span><br><span class="line">68096.0 68096.0  0.0   20887.7 545344.0 442091.1 8755648.0  5919151.3  62312.0 59746.5 7076.0 6608.5  43895 1313.261  60      5.206 1318.467</span><br></pre></td></tr></table></figure><p>这两组数据能看出什么?</p><blockquote><p>YGC : 新生代垃圾回收次数<br>YGCT : 新生代垃圾回收时间<br>FGC : 老年代垃圾回收次数<br>FGCT : 老年代垃圾回收时间<br>GCT : 垃圾回收总消耗时间</p></blockquote><p>对比两组GC回收时间数据</p><ol><li>YGC <code>9320 : 43895</code>，次数减少 4.7倍</li><li>YGCT <code>494.982 : 1313.261</code>， 减少 2.6倍</li><li>GCT <code>517.549: 1318.467</code>，减少 2.5 倍</li><li>FGC <code>222 : 60</code> 却增加了 3.7 倍的次数</li></ol><p>这有点出乎意料，如果新生代空间够大之后，对象有足够的新生代空间可以分配对象，保证尽可能多的对象在新生代中被回收，熬不到老年代。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> cms </tag>
            
            <tag> gc </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitcoin-06-bitcore钱包使用</title>
      <link href="posts/30302.html"/>
      <url>posts/30302.html</url>
      
        <content type="html"><![CDATA[<h2 id="比特币钱包"><a href="#比特币钱包" class="headerlink" title="比特币钱包"></a>比特币钱包</h2><p>不管是开发者，还是投资者，比特币钱包都是一个不错的学习工具，和常用的电子钱包相差不大。<br>开发者可以很好的从这个工具是学习比特币在客户端的应用，非常值得借鉴，包括现在很多项目都有比特币的影子，有些甚致直接拿到比特币的代码改改就发行自己加密货币。</p><p>比特币官网: <a href="https://bitcoin.org/zh_CN/">https://bitcoin.org/zh_CN/</a></p><p>直接跳到钱包选择页面: <a href="https://bitcoin.org/zh_CN/choose-your-wallet?step=5&amp;platform=mac">https://bitcoin.org/zh_CN/choose-your-wallet?step=5&amp;platform=mac</a></p><p>我这里使用的时 BitCore 钱包，这个钱包比较成熟。<br><a href="https://bitcoin.org/zh_CN/wallets/desktop/mac/bitcoincore/?step=5&amp;platform=mac">https://bitcoin.org/zh_CN/wallets/desktop/mac/bitcoincore/?step=5&amp;platform=mac</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-同步数据"><a href="#1-同步数据" class="headerlink" title="1.同步数据"></a>1.同步数据</h3><p>初次使用比特币钱包，会进行一次全量数据同步，大概在 500G 左右，所以硬盘要保证够大，同步完成后，会进行裁剪。大几2G左右大小。</p><p><img src="/posts/30302/1.jpg" alt="同步数据"></p><h3 id="2-创建钱包"><a href="#2-创建钱包" class="headerlink" title="2.创建钱包"></a>2.创建钱包</h3><p>同步完成后，才能进行后续的操作。<br>先创建钱包密码，这个密码会需要记住，不能忘记，否则会使用不了钱包。</p><p><img src="/posts/30302/2.jpg" alt="创建密码"></p><p><img src="/posts/30302/3.jpg" alt="创建钱包"></p><h3 id="3-导出私钥"><a href="#3-导出私钥" class="headerlink" title="3.导出私钥"></a>3.导出私钥</h3><p>私钥非常重要，保证你的钱包可以在不同设置之间进行使用，那么需要保存好私钥，不能丢失或泄露。大部份丢失的钱包都是因为丢失了私钥，找不回钱包。<br>在 &quot;窗口&quot;--&gt;&quot;控制台&quot; 通过命令行提取私钥。<br><img src="/posts/30302/4.jpg" alt="控制台"></p><h4 id="解锁提取操作-walletpassphrase"><a href="#解锁提取操作-walletpassphrase" class="headerlink" title="解锁提取操作 walletpassphrase"></a>解锁提取操作 walletpassphrase</h4><blockquote><p>格式: walletpassphrase 密码 超时时间</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">walletpassphrase test 120</span><br></pre></td></tr></table></figure><p>在 <code>120</code> 秒超时时间内进行操作，如果超时了，重新执行一下上面的命令。</p><h4 id="提取私钥-dumpprivkey"><a href="#提取私钥-dumpprivkey" class="headerlink" title="提取私钥 dumpprivkey"></a>提取私钥 dumpprivkey</h4><blockquote><p>格式: dumpprivkey 钱包地址</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpprivkey 2testzjylkq9ldnvqwwtest</span><br></pre></td></tr></table></figure><p>通过这个操作，就可以得到钱包的私钥，一定保存好这个私钥。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 比特币 </tag>
            
            <tag> 钱包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitcoin-05-比特币区块同步机制</title>
      <link href="posts/15476.html"/>
      <url>posts/15476.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>一个区块生产出来之后，需要进行同步给其它的节点。由于区块链是去中心化的，所以所有节点都保留相同的全量数据。<br>当一个区块打包好一个区块后，需要同步给其它节点，进行校验 和 上链。<br>只有上链的成功的区块，才算是区块链上的一个块。换句话说，区块可能上链成功，也有可能上链不成功。</p></blockquote><h2 id="同步区块中的问题"><a href="#同步区块中的问题" class="headerlink" title="同步区块中的问题"></a>同步区块中的问题</h2><ol><li>为什么要同步区块</li><li>如何保证同步</li><li>网络延迟如何解决</li><li>同时收到相同高度的块，该同步谁的块</li><li>如何得知块已被确认</li><li>被丢块的节点会怎么样</li></ol><h2 id="区块打包"><a href="#区块打包" class="headerlink" title="区块打包"></a>区块打包</h2><h2 id="区块广播"><a href="#区块广播" class="headerlink" title="区块广播"></a>区块广播</h2><h2 id="区块验证"><a href="#区块验证" class="headerlink" title="区块验证"></a>区块验证</h2><h2 id="区块上链"><a href="#区块上链" class="headerlink" title="区块上链"></a>区块上链</h2><h2 id="区块回滚"><a href="#区块回滚" class="headerlink" title="区块回滚"></a>区块回滚</h2>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> btc </tag>
            
            <tag> 比特币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitcoin-04-coinbase交易</title>
      <link href="posts/3428.html"/>
      <url>posts/3428.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>coinbase交易，也是被打包在区块中的第一笔交易，只是这笔是区块的第一笔交易，是挖矿产生的奖励。</p></blockquote><h2 id="查看-coinbase交易"><a href="#查看-coinbase交易" class="headerlink" title="查看 coinbase交易"></a>查看 coinbase交易</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.blockcypher.com/v1/btc/main/txs/1a44cb6551af919652eac49d953c50ab2acb1ebdfe7d2b20ed3c1944bd37ac96</span><br></pre></td></tr></table></figure><h2 id="coinbase-结构"><a href="#coinbase-结构" class="headerlink" title="coinbase 结构"></a>coinbase 结构</h2><p>可以很明显的看到，除了公共字段外，有 outputs、inputs 两个字段。</p><ol><li>outputs: 交易输出</li><li>inputs: 交易输入</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  block_hash: &quot;00000000000000000000bca6ccc2ef309fd814f80a55b3e08a4212326137d7d2&quot;,</span><br><span class="line">  block_height: 681181,</span><br><span class="line">  block_index: 0,</span><br><span class="line">  hash: &quot;1a44cb6551af919652eac49d953c50ab2acb1ebdfe7d2b20ed3c1944bd37ac96&quot;,</span><br><span class="line">  addresses: [</span><br><span class="line">    <span class="string">&quot;1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  total: 680382463,</span><br><span class="line">  fees: 0,</span><br><span class="line">  size: 378,</span><br><span class="line">  vsize: 351,</span><br><span class="line">  preference: &quot;low&quot;,</span><br><span class="line">  confirmed: &quot;2021-04-30T05:03:17.197Z&quot;,</span><br><span class="line">  received: &quot;2021-04-30T05:03:17.197Z&quot;,</span><br><span class="line">  ver: 1,</span><br><span class="line">  lock_time: 1241604347,</span><br><span class="line">  double_spend: false,</span><br><span class="line">  vin_sz: 1,</span><br><span class="line">  vout_sz: 4,</span><br><span class="line">  opt_in_rbf: true,</span><br><span class="line">  data_protocol: &quot;unknown&quot;,</span><br><span class="line">  confirmations: 3552,</span><br><span class="line">  confidence: 1,</span><br><span class="line">  inputs: [</span><br><span class="line">    &#123;</span><br><span class="line">      output_index: -1,</span><br><span class="line">      script: &quot;03dd640a2cfabe6d6ddc65590fdf47b7f8d0805179ce336bb1dfb8fc6697e67bac15286de7910b4a7610000000f09f909f082f4632506f6f6c2f114d696e6564206279206c67316467737472000000000000000000000000000000000000050000000000&quot;,</span><br><span class="line">      sequence: 420554726,</span><br><span class="line">      script_type: &quot;empty&quot;,</span><br><span class="line">      age: 681181</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  outputs: [</span><br><span class="line">    &#123;</span><br><span class="line">      value: 680382463,</span><br><span class="line">      script: &quot;76a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac&quot;,</span><br><span class="line">      spent_by: &quot;e80511c1ed5deec12f50d918614a94145d3089f269e33522a0aa72b0054a5c96&quot;,</span><br><span class="line">      addresses: [</span><br><span class="line">        <span class="string">&quot;1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      script_type: &quot;pay-to-pubkey-hash&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: 0,</span><br><span class="line">      script: &quot;6a24aa21a9ed24ea773c9b58e4a4ad4c14ae4b75ff79cb1adbb08b0d3960d532d655414030dc&quot;,</span><br><span class="line">      addresses: null,</span><br><span class="line">      script_type: &quot;null-data&quot;,</span><br><span class="line">      data_hex: &quot;aa21a9ed24ea773c9b58e4a4ad4c14ae4b75ff79cb1adbb08b0d3960d532d655414030dc&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: 0,</span><br><span class="line">      script: &quot;6a3448617468ae18c94d8ebfbebe1e8a6567fee08b7023579133e65a4ad2ac48ef7c13b6f444a3bf7eac9e8b418186649d337d64fee1&quot;,</span><br><span class="line">      addresses: null,</span><br><span class="line">      script_type: &quot;null-data&quot;,</span><br><span class="line">      data_hex: &quot;48617468ae18c94d8ebfbebe1e8a6567fee08b7023579133e65a4ad2ac48ef7c13b6f444a3bf7eac9e8b418186649d337d64fee1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: 0,</span><br><span class="line">      script: &quot;6a24b9e11b6d267720bd57a3442dd397de915eb9c2d46e3dc90633755d504e5458ef23804ff2&quot;,</span><br><span class="line">      addresses: null,</span><br><span class="line">      script_type: &quot;null-data&quot;,</span><br><span class="line">      data_hex: &quot;b9e11b6d267720bd57a3442dd397de915eb9c2d46e3dc90633755d504e5458ef23804ff2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总体结构说明"><a href="#总体结构说明" class="headerlink" title="总体结构说明"></a>总体结构说明</h2><table><thead><tr><th align="center">字节</th><th align="center">字段</th><th align="center">字段说明</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">4</td><td align="center">ver</td><td align="center">交易版本号</td><td align="center">明确这笔交易参照的规则</td></tr><tr><td align="center">1-9</td><td align="center">vin_sz</td><td align="center">输入计数器</td><td align="center">包含的交易输入数量</td></tr><tr><td align="center">不定</td><td align="center">inputs</td><td align="center">交易输入</td><td align="center">一个或多个交易输入</td></tr><tr><td align="center">1-9</td><td align="center">vout_sz</td><td align="center">输出计数器</td><td align="center">包含的交易输出数量</td></tr><tr><td align="center">不定</td><td align="center">outputs</td><td align="center">交易输出</td><td align="center">一个或多个交易输出</td></tr><tr><td align="center">4</td><td align="center">lock_time</td><td align="center">锁定时间</td><td align="center">一个区块号或UNIX时间戳</td></tr></tbody></table><h3 id="inputs-交易输入"><a href="#inputs-交易输入" class="headerlink" title="inputs 交易输入"></a>inputs 交易输入</h3><table><thead><tr><th align="center">字节长度</th><th align="center">字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">32</td><td align="center">交易哈希值</td><td align="center">固定为全0</td></tr><tr><td align="center">4</td><td align="center">输出索引</td><td align="center">固定为全1</td></tr><tr><td align="center">1-9</td><td align="center">Coinbase脚本长度</td><td align="center">coinbase的脚本字节长度</td></tr><tr><td align="center">不定</td><td align="center">coinbase脚本</td><td align="center">coinbase脚本，可以任意填充</td></tr><tr><td align="center">4</td><td align="center">序列号</td><td align="center">固定值0xFFFFFFFF</td></tr></tbody></table><h3 id="outputs-交易输出"><a href="#outputs-交易输出" class="headerlink" title="outputs 交易输出"></a>outputs 交易输出</h3><table><thead><tr><th align="center">字节长度</th><th align="center">字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">字节长度</td><td align="center">字段</td><td align="center">说明</td></tr><tr><td align="center">8</td><td align="center">总量</td><td align="center">用聪表示的比特币值</td></tr><tr><td align="center">1-9</td><td align="center">锁定脚本大小</td><td align="center">用字节表示的后面的锁定脚本长度</td></tr><tr><td align="center">不定</td><td align="center">锁定脚本</td><td align="center">一个定义了支付输出所需条件的脚本</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> btc </tag>
            
            <tag> 比特币 </tag>
            
            <tag> coinbase交易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitcoin-03-比特币区块结构</title>
      <link href="posts/38615.html"/>
      <url>posts/38615.html</url>
      
        <content type="html"><![CDATA[<h2 id="区块结构"><a href="#区块结构" class="headerlink" title="区块结构"></a>区块结构</h2><blockquote><p>区块链开发之前，先了解比特币的区块结构，有利于了解后续比特币的各种数据结构的做用。</p></blockquote><p>本文要介结几个重要概念：</p><ol><li>区块结构</li><li>区块头</li><li>区块体</li><li>区块查看工具</li></ol><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块是比特币的核心。<br>当前比特币网络，每10分产一个块。<br>区块的作用: 比特币最核心的数据结构，包含了交易的重要标识，包括：区块头、区块体、区块大小等数据。</p><h3 id="一个完整的区块结构"><a href="#一个完整的区块结构" class="headerlink" title="一个完整的区块结构"></a>一个完整的区块结构</h3><table><thead><tr><th align="center">数据项</th><th align="center">字节</th><th align="center">字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Magic NO</td><td align="center">4</td><td align="center">魔数</td><td align="center">常数0xD9B4BEF9</td></tr><tr><td align="center">Blocksize</td><td align="center">4</td><td align="center">区块大小</td><td align="center">用字节表示的该字段之后的区块大小</td></tr><tr><td align="center">Blockheader</td><td align="center">80</td><td align="center">区块头</td><td align="center">组成区块头的几个字段</td></tr><tr><td align="center">Transaction counter</td><td align="center">1-9</td><td align="center">交易计数器</td><td align="center">该区块包含的交易数量，包含coinbase交易</td></tr><tr><td align="center">Transactions</td><td align="center">不定</td><td align="center">交易</td><td align="center">记录在区块里的交易信息，使用原生的交易信息格式，并且交易在数据流中的位置必须与Merkle树的叶子节点顺序一致</td></tr></tbody></table><p><img src="/posts/38615/%E5%8C%BA%E5%9D%97.jpeg" alt="区块"></p><p>这里最典型的要数 <strong>区块头</strong>和 <strong>区块体</strong> 了，因为它们通常在学习区块链的时候，比较能说明区块链的重要特性。</p><p>另外区块链不看不见摸不着的东西，人往往需要可视化的模型会更有助于理解抽象的概念。</p><p>这里介绍一个工具，区块链浏览器：<br><a href="https://blockchain.info/">https://blockchain.info/</a></p><p> 通过这个浏览器，可以查看区块内的信息。<br> 为什么这个站点可以查看区块信息？<br> 因为区块链的服务，也就是个服务，提供了查询接口，机构或个人，只需要运行区块链服务，在本地运行就可以访问区块链信息，前提是要同步好区块数据。<br> 之前的文章就强调过，鼓励大家运行区块链服务是区块链的特点，币是奖励，算是一种副产物，是被金融机构炒起来的。</p><h3 id="区块头"><a href="#区块头" class="headerlink" title="区块头"></a>区块头</h3><p><strong>查看区块信息</strong>￼</p><blockquote><p>getblock  00000000000000000000bca6ccc2ef309fd814f80a55b3e08a4212326137d7d2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;hash&quot;: &quot;00000000000000000000bca6ccc2ef309fd814f80a55b3e08a4212326137d7d2&quot;,</span><br><span class="line">  &quot;confirmations&quot;: 30,</span><br><span class="line">  &quot;strippedsize&quot;: 884103,</span><br><span class="line">  &quot;size&quot;: 1345977,</span><br><span class="line">  &quot;weight&quot;: 3998286,</span><br><span class="line">  &quot;height&quot;: 681181,</span><br><span class="line">  &quot;version&quot;: 536870912,</span><br><span class="line">  &quot;versionHex&quot;: &quot;20000000&quot;,</span><br><span class="line">  &quot;merkleroot&quot;: &quot;574dfd1961a53bb1fd307d7345b2aff6a196cce29a824b9029d454e1f61cfb35&quot;,</span><br><span class="line">  &quot;tx&quot;: [</span><br><span class="line">    &quot;1a44cb6551af919652eac49d953c50ab2acb1ebdfe7d2b20ed3c1944bd37ac96&quot;,</span><br><span class="line">    &quot;3e06d35f7f550068a72991d62dd32281a13e1492867b1c8531a4aa12f591cff8&quot;,</span><br><span class="line">    &quot;9d66b3a4b6b683aa4d03d8186d31d33e41e73bd96692cbf33a152b99100b326a&quot;,</span><br><span class="line">    &quot;ae6fdde3a16e91d587a5d3c1500d5828a01e69c02b6832cde132111fd90c4760&quot;,</span><br><span class="line">    &quot;91a5aa20c0582695a90cfdf4dab5540406c9b78fba4a20f6cd6cb96445d31be5&quot;,</span><br><span class="line">    &quot;471ce26f56eb1c164315704b923a1095145256c0e43a77ccd72254265c950b0f&quot;,</span><br><span class="line">    &quot;fb56a184da1cff5e8c0cc65c13392c68517713754338f87047bef07c1a43b032&quot;,</span><br><span class="line">    &quot;8be8b938eff96313ee9e61c287fdffea2779c0537d2f0ccd7fc1e973693fd12b&quot;,</span><br><span class="line">    &quot;d12faee60ec1f46f2bdd6a490b1c92c2e804955786a014b56d8fb9e6d2a35eef&quot;,</span><br><span class="line">    &quot;819f0fb4a16a3f88079bf35f6f03c0b032879a75f56b412baedfe525e19708f4&quot;,</span><br><span class="line">    &quot;dcc9e980cd345e9a6e136d76a4cd36a36bb7e3217b3685ad9ca577acc8019bf8&quot;,</span><br><span class="line">    &quot;6a1a122610ff86d6037d46e57c49183960bcefad04ea233a387fc3d8a0db997b&quot;,</span><br><span class="line">    &quot;23dab800d04d100b2748b2addec5237b75ad6da992de80984f95d8decd546859&quot;</span><br><span class="line">    &#x2F;&#x2F;省略部份交易</span><br><span class="line">  ],</span><br><span class="line">  &quot;time&quot;: 1619758979,</span><br><span class="line">  &quot;mediantime&quot;: 1619755004,</span><br><span class="line">  &quot;nonce&quot;: 32721792,</span><br><span class="line">  &quot;bits&quot;: &quot;170bef93&quot;,</span><br><span class="line">  &quot;difficulty&quot;: 23581981443663.85,</span><br><span class="line">  &quot;chainwork&quot;: &quot;00000000000000000000000000000000000000001cb2cd894a35651ba07be168&quot;,</span><br><span class="line">  &quot;nTx&quot;: 2158,</span><br><span class="line">  &quot;previousblockhash&quot;: &quot;00000000000000000004cabf7ba2626c0da40182c19324ea12c13b2aac8ade98&quot;,</span><br><span class="line">  &quot;nextblockhash&quot;: &quot;000000000000000000058960a47748b02e4b659ba529a0e9c6fb9e1991158f6f&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含以下数据:</p><table><thead><tr><th align="center">字节长度</th><th align="center">字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">4</td><td align="center">version</td><td align="center">区块版本号</td></tr><tr><td align="center">32</td><td align="center">previousblockhash</td><td align="center">前一个区块头的哈希值</td></tr><tr><td align="center">32</td><td align="center">merkleroot</td><td align="center">Merkle根哈希，交易列表生成的默克尔树根哈希</td></tr><tr><td align="center">4</td><td align="center">time</td><td align="center">时间戳，该区块产生的近似时间，精确到秒的UNIX时间戳</td></tr><tr><td align="center">4</td><td align="center">bits</td><td align="center">难度目标，挖矿难度值</td></tr><tr><td align="center">4</td><td align="center">Nonce</td><td align="center">挖矿过程中使用的随机值</td></tr></tbody></table><p>区块头中的数据分成三不同的意义：</p><ol><li>区块元数据</li><li>打包相关元数据</li><li>交易树据根</li></ol><h4 id="1-区块元数据"><a href="#1-区块元数据" class="headerlink" title="1.区块元数据"></a>1.区块元数据</h4><ol><li>父哈希(前一个块）</li><li>版本号<br>即前区块的上一个区块，就是父区块(前一个块)的哈希值，父哈希值用来将该区块与它的前一区块相连接；</li></ol><h4 id="2-打包相关元数据"><a href="#2-打包相关元数据" class="headerlink" title="2.打包相关元数据"></a>2.打包相关元数据</h4><ol><li>难度</li><li>时间戳</li><li>Nonce(随机数）</li></ol><h4 id="3-交易树据根"><a href="#3-交易树据根" class="headerlink" title="3.交易树据根"></a>3.交易树据根</h4><p>这个根在区块头中就是根哈希值，即区块体中的默克尔树的根。</p><h3 id="区块体"><a href="#区块体" class="headerlink" title="区块体"></a>区块体</h3><p>区块体包括当前区块经过验证的、 区块创建过程中生成的所有交易记录。这些记录通过默克尔（Merkle）树的哈希过程生成唯一的默克尔，根并记入区块头。<br>区块体，包含交易数据。<br>比特币中的交易比较简单，就是转账，A -&gt; B 转账，这笔交易从比特币客户端发起后，就会进行广播。<br>比特币的节点收到交易后，会将交易存储到交易队列当中，直到进行打包时才会将交易队列中的交易，打包其实是构建一个数据结构，包括：</p><p><strong>默克尔树</strong><br>当前区块的交易集合而生成的一颗树，目的是通过每一笔交易，从下往上生成一树哈希树。<br>自下往上看：<br><img src="/posts/38615/%E9%BB%98%E5%85%8B%E5%B0%94%E6%A0%91.jpeg" alt="默克尔树"></p><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>就是字面意思，由一个个区块组成的链条。<br>创世块：比特币网络中的第一个块。几乎所有的区块链服务，都有创有块。<br>学习区块链，就必须了解区块的本质，区块链的是由一个一个区块组成的链条。</p><p>区块链是逻辑上的链条，每一个区块之间通过确认父哈希的形式，来确定自己的父块。<br><img src="/posts/38615/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BB%93%E6%9E%84.jpeg" alt="区块链结构"></p><p>那么这样就会产生几个问题？</p><ol><li>区块链网络中有很多的节点同时产块，该确认谁才是下一个节点？</li><li>如果 A 先产块，B 后产块，但是 A 的网速有延迟，传输比 B 后到达，其他节点怎么处理 A 的区块？</li><li>如何保证传输过来的块一定是合法块，不是一个恶意节点广播过来的块 或者 没有被恶意修过过的块？</li></ol><p>比特币是如何解决上述这些问题的。</p><p>综上，比特币的区块头 和 区块体 是紧密相连的数据结构，缺一不可。</p><h2 id="bitcore-区块链钱包"><a href="#bitcore-区块链钱包" class="headerlink" title="bitcore 区块链钱包"></a>bitcore 区块链钱包</h2><p>比特币的工具有很多，PC端常用的工具就是比特币钱包。钱包的种类也有不少，可以查看比特币官网，这里用的是 bitcore。<br>通过命令行窗口，可以执行一些命令来看查看比特币相关的数据。<br><strong>查看区块信息</strong></p><blockquote><p>getblock 00000000000000000000bca6ccc2ef309fd814f80a55b3e08a4212326137d7d2</p></blockquote><p><img src="/posts/38615/%E5%B7%A5%E5%85%B7.jpg" alt="钱包工具"></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> btc </tag>
            
            <tag> 比特币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitcoin-02-比特币技术体系</title>
      <link href="posts/17877.html"/>
      <url>posts/17877.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习区块链技术，首先应该了解最经典的 比特币。比特币做为最早的分布式去中心化的区块链应用，其经典设计值得学习。</p></blockquote><h2 id="比特币架构"><a href="#比特币架构" class="headerlink" title="比特币架构"></a>比特币架构</h2><p>比特币通过将各项技术进行结合，创造出来的这个产品，其本质的功能是记账，副做用是炒。<br>比特币的设计是为了保证所有数据是分布式的、去中心化的保存数据，防止数据在中心的节点中保存。</p><p><img src="/posts/17877/BTC%E6%9E%B6%E6%9E%84%E5%9B%BE.jpeg" alt="架构图"></p><p>自上而下，共分6层</p><ol><li>应用层</li><li>RPC 层</li><li>网络层</li><li>共识层</li><li>数据层</li><li>存储层</li></ol><h3 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1.应用层"></a>1.应用层</h3><p>包括比特币钱包、客户端等种上层的应用，一般是比特币程序本身的外部应用。<br>以比特币钱包为例，比特币钱包有很多种，可以上官网上下载不同钱包，比如最简单的钱包，早期这个钱包还保留有CPU挖矿功能。现在版本已不支持，可以参考官方 Github 文档:</p><p><a href="https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.0.md">https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.0.md</a><br><img src="/posts/17877/BTC%E9%92%B1%E5%8C%85.jpg" alt="PC钱包"></p><h3 id="2-RPC-层"><a href="#2-RPC-层" class="headerlink" title="2.RPC 层"></a>2.RPC 层</h3><p>RPC 层的作用是进行RPC 通信。测试可以使用 BitCore 这个工具来进行测试。</p><p>测试一个 RPC 命令，查看区块信息: <strong>getblockchaininfo</strong><br><strong>命令行</strong><br><img src="/posts/17877/%E5%91%BD%E4%BB%A4%E8%A1%8C.jpg" alt="钱包"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;chain&quot;</span>: <span class="string">&quot;main&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;blocks&quot;</span>: <span class="number">680816</span>,</span><br><span class="line">  <span class="attr">&quot;headers&quot;</span>: <span class="number">680816</span>,</span><br><span class="line">  <span class="attr">&quot;bestblockhash&quot;</span>: <span class="string">&quot;0000000000000000000133b07fdf287ddca3cca80162b4a06a05d6904190cd37&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span>: <span class="number">23581981443663.85</span>,</span><br><span class="line">  <span class="attr">&quot;mediantime&quot;</span>: <span class="number">1619518237</span>,</span><br><span class="line">  <span class="attr">&quot;verificationprogress&quot;</span>: <span class="number">0.999995596389184</span>,</span><br><span class="line">  <span class="attr">&quot;initialblockdownload&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;chainwork&quot;</span>: <span class="string">&quot;00000000000000000000000000000000000000001c943902d1cf6cdd1387c75c&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;size_on_disk&quot;</span>: <span class="number">1904190175</span>,</span><br><span class="line">  <span class="attr">&quot;pruned&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;pruneheight&quot;</span>: <span class="number">679647</span>,</span><br><span class="line">  <span class="attr">&quot;automatic_pruning&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;prune_target_size&quot;</span>: <span class="number">1999634432</span>,</span><br><span class="line">  <span class="attr">&quot;softforks&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bip34&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">227931</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;bip66&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">363725</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;bip65&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">388381</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;csv&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">419328</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;segwit&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;buried&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;active&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;height&quot;</span>: <span class="number">481824</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;warnings&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3.网络层"></a>3.网络层</h3><p>网络层使用 Peer-to-Peer，即点对点通信。每个BTC网络当中的节点中的通信，没有中心化的节点进行转发，需要通过节点发现，进行通信。<br>这也体现出BTC网络中当，每个节点都是平等的节点，没有哪个节点可以控制其他节点。</p><p>这种去中心化的好处就是可以做到节点之间的平等，但是也存在几个问题。</p><ol><li>网络延迟</li><li>联合作敝</li></ol><p>3.1 网络延迟很好理解，由于节点之间是平等的，每个节点都会呈现为网状的连接，当一个区块被生产出来后，会同步到相邻的网络节点当中，进行相邻转发。并不是通过中心节点订阅或转发的，一个区块到达所有的节点会有网络延迟。</p><p>3.2 联合作敝，去中心化的通信，节点间的数据只能依赖于依赖于各个节点间的验证，那就给做敝留下了空间。</p><h3 id="4-共识层"><a href="#4-共识层" class="headerlink" title="4.共识层"></a>4.共识层</h3><p>什么是共识，这个非常重要，非常重要。<br>因为在平等的网络当中，每个节点都是分散的，该如何保证每个节点的验证、转发是一致？<br>这就需要每个节点与节点之间达成共识。以此来保证所有节点的行为一致。</p><p><strong>什么是共识</strong><br>共识就是，共识即认可，比特币中有很多节点，要让这些节点达成一致性，比特币采用的是：POW 工作量证明。<br>比特币共识：说白点就是大家通过计算一个随机生成的Hash值的方式，来决定谁先打包。是不是感觉没什么，计算这个Hash并不是一件马上就可以算出来的事情。<br>大概流程：</p><ol><li>所有比特币中的交易会向所有节点广播，所有节点接收到交易后，放于交易队列当中</li><li>全世界所有节点通过计算 Hash 来决定谁交这些交易打包，先算出者，打包交易成一个区块并广播区块</li><li>打包者，将一个随机数加处块头中，使得计算的哈希结果小于或等于块头中目标值</li><li>其他节点收到区块后，验证区块和区块内的交易，验证正确保留该区块</li></ol><p><strong>为什么要给一个随机Hash数来给节点计算</strong><br>为了证明这个块的正确性。比特币的区块链当中，第一个节点产生的第一个块叫做：创世块，这个块是比特币运行时产生的第一个块，这个块会产生一个随机Hash数，打包进第一个块的块头中，然后广播。<br>其他节点收到区块后，对这个创世块进行验证。先验出者，证明了这个块是正确的，然后根据这个创建块，将收到的交易进行打包，并链接到这个创世块后面，就成了第二个块，并且这个节点也根据收到的交易产生了个随机Hash，广播给其它节点。<br>其他节点收到后，重复这个流程，证明这个块的正确性，并进行上链。这个就是 POW 的义意。</p><h3 id="5-数据层"><a href="#5-数据层" class="headerlink" title="5.数据层"></a>5.数据层</h3><p>数据层是指比特币的数据结构。比特币的数据结构比较典型，很多后来的区块链都借鉴这些数据模型。</p><ol><li>区块</li><li>区块链</li><li>Merkle树，也称，默克尔树</li><li>Hash</li><li>时间戳</li></ol><h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><p>是指将交易进行打构的区块数据结构，包含：区块头、区块体、哈希、时间戳 等。</p><h4 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h4><p>是指由区块构成的链条，就是指区块链，比较直白。</p><h4 id="Merkle树，也称，默克尔树"><a href="#Merkle树，也称，默克尔树" class="headerlink" title="Merkle树，也称，默克尔树"></a>Merkle树，也称，默克尔树</h4><p>Merkle树的作用：防窜改。<br>这里仅需要知道即可，这些点每一个展开都是一个大点，后续会做很详细的讲解。<br>Merkle树的构成是通过将每一笔交易的哈希，自上而下，相邻两个节点向上构建出一个新的父哈希值，由此来构建一棵哈希树。</p><h3 id="6-存储层"><a href="#6-存储层" class="headerlink" title="6.存储层"></a>6.存储层</h3><p>存储主要使用的是 LevelDB，进行存储，LevelDB 是基于 SSTable 进行设计实现的一个数据引擎。很多数据库都是基 LevelDB 进开发。<br>LevelDB 本身具体高性能读写，通过在内存缓存 和 多层级文件存储而取名 LevelDB。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> btc </tag>
            
            <tag> 比特币 </tag>
            
            <tag> 技术体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitcoin-01-区块链初识</title>
      <link href="posts/64659.html"/>
      <url>posts/64659.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>区块链技术，发展到目前，主流的区块链有两个代表，一个是以 比特币(BTC) 为代表的分布式去中心化记账本，一个是以 以态坊(ETH) 为代表的图灵完备的分布式去中心化计算机。名词解释会放到下面。</p></blockquote><h2 id="为什么写这个文章"><a href="#为什么写这个文章" class="headerlink" title="为什么写这个文章"></a>为什么写这个文章</h2><p>投身加密货币研究有一段时间了，其间了解到了比特币的原理和应用，想把了解到的知识整理成一个简单直白的系列科普文章，希望可以帮助大家轻松简单学习并使用加密货币。<br>本篇作为开篇，仅提一些简单概念，以免概念太多，让人望而却步。</p><h2 id="加密货币"><a href="#加密货币" class="headerlink" title="加密货币"></a>加密货币</h2><p>加密货币当下有两种主流的技术模型：</p><ol><li>比特币</li><li>以太坊</li></ol><p>这两种加密货币有本质的区别，之所以很少听说以太坊，是因为以太坊出现的在比特币之后，出现在人们的视野里比较晚，但是其设计理念相较比特币较超前，当前和比特币并驾齐驱。<br>现在主流的一些币都是基于以太坊的基础上进行设计，还可以基于以太坊发行自己的货币，在这里不用深究，后续会深入讲解。</p><h2 id="比特币-Bitcoin"><a href="#比特币-Bitcoin" class="headerlink" title="比特币(Bitcoin)"></a>比特币(Bitcoin)</h2><blockquote><p>本质是分布式记账本</p></blockquote><p>比特币的宗旨是做为一个去中心化的分布试记账本，仅为了记账而存在。<br>比特币的由来就不赘述，可自行了解。<br>BTC是一种点对点（Peer-2-Peer）传输的数字加密货币。宗旨在于使用点网络节点，构成一个分布式、去中心化的加密货币网络。<br>机器只需要运行 BTC 程序，就可以加入到比特币网络当中，成为一个节点，每个节点同步保存全量数据，所以硬盘容量要大。</p><p><strong>官网</strong> <a href="https://bitcoin.org/zh_CN/">https://bitcoin.org/zh_CN/</a></p><h3 id="1-本质"><a href="#1-本质" class="headerlink" title="1.本质"></a>1.本质</h3><p>是一个分布式、去中心化账本！！<br>记账才是其主要功能，奖励的币仅是副产物。</p><h3 id="2-币是什么"><a href="#2-币是什么" class="headerlink" title="2.币是什么"></a>2.币是什么</h3><p>币，是每个机器运行比特币服务而获得的奖励，鼓励大家都运行节点，保存数据。就像是去玩某个游戏，每日登陆获取积分一样。<br>每个机器节点的硬盘上保留全量数据，就可以不依赖于中心化节点中的数据，从而实现去中心化。<br>每个用户下载 BTC 的钱包服务运行，注册钱包，生成私钥，私钥需要保管好。并配上自己的钱包地址。</p><h3 id="3-如何获得一个比特币"><a href="#3-如何获得一个比特币" class="headerlink" title="3.如何获得一个比特币"></a>3.如何获得一个比特币</h3><p>谁打包谁获得比特币奖励。<br>比特币的将励不是公平的，而是一有套获取奖励的规则，并不是运行的久的节点一定获得奖励。而在于你的计算机的算力。<br>比特币规定，所有记账节点都有资格打包，但是需要算出一道数学题，谁先算出来，谁就有资格打包，打包的节点就会获得奖励。<br>这种模式即：<strong>POW 工作量证明</strong></p><h3 id="4-比特币白皮书"><a href="#4-比特币白皮书" class="headerlink" title="4.比特币白皮书"></a>4.比特币白皮书</h3><p><a href="https://bitcoin.org/bitcoin.pdf">比特币白皮书原版</a><br>当然还有中文版。</p><h3 id="比特币泛汲到的技术"><a href="#比特币泛汲到的技术" class="headerlink" title="比特币泛汲到的技术"></a>比特币泛汲到的技术</h3><p><strong>结构图</strong><br><img src="/posts/64659/BTC.jpeg" alt="结构图"><br>比特币并没有发明什么新技术，而是将已有的技术进行一个融合。</p><ol><li>加密技术</li><li>P2P 通信(点对点)</li><li>共识</li><li>存储</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h2 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a>以太坊</h2><blockquote><p>区块链世界中的计算机。</p></blockquote><p>如果说 比特币 是一个分布式、去中心化账本，那以太坊就是一台分布式去中心化，运行在计算机上的微型计算机。<br>其设计架构就是图灵完备的设计，本质是一套程序，但是它有计算机一样的：输入、输出、执行指令，因此可以说是图灵完备的。</p><h3 id="以太坊架构图"><a href="#以太坊架构图" class="headerlink" title="以太坊架构图"></a>以太坊架构图</h3><p><img src="/posts/64659/%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="架构图"></p><h3 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h3><ol><li>智能合约</li><li>加密技术</li><li>P2P 通信(点对点)</li><li>共识</li><li>存储</li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>以太坊在设计上和比特币目的相同，但是在很多设计上又有很多的不同。</p><h4 id="1-可编程"><a href="#1-可编程" class="headerlink" title="1.可编程"></a>1.可编程</h4><p>以太坊的最大特点就是，它是一个<strong>可编程</strong>的区块链。<br>每个用户可自行编写自己业务逻辑代码，通过接口去触发自己编写的代码，这种代码官方叫做智能合约。<br>通过智能合约(编程代码)，用户可以实现很多功能，比如：分布式去中心化应用(DAPP)、分布式去中心化金融(DeFi) 等。<br>DAPP 包括一些游戏，目前国内 DAPP 数量较多的是波场(Tron)的 DAPP。</p><p>实现这些功能是因为设计了编程语言 Solidity 和 虚拟机EVM</p><p>和BTC 一样也是基于 POW 的区块链。但是 ETH2.0 正在转向 POS。什么是 POS 后面再说。</p><h4 id="2-账户模型"><a href="#2-账户模型" class="headerlink" title="2.账户模型"></a>2.账户模型</h4><p>以太坊的账户模型是基于账户系统，另外还有一个世界状态。这个世界状态也是有利有憋。</p><h4 id="3-奖励机制"><a href="#3-奖励机制" class="headerlink" title="3.奖励机制"></a>3.奖励机制</h4><p>这个和比特币不同，比特币只有产块的节点能获得比特币。以太坊采用叔块（Uncle Block）激励机制，即你产了这个块，但是最后确认不是你所产的这个块，未被确认的这个块叫(Uncle Block),也给你一定的奖励。</p><h4 id="4-燃汽-Gas"><a href="#4-燃汽-Gas" class="headerlink" title="4.燃汽 Gas"></a>4.燃汽 Gas</h4><p>以太坊还引入了 燃汽 Gas 的概念，转账需要消耗 Gas，就这让使用 ETH 币进行转账就需要成本。这个有利也有憋。<br>有了 Gas 之后，对于矿工来说，矿工们就可以选择将转账支付 Gas 较高的订单优先进行上链，矿工们收益好。但是对于用户来说，如果支付的低的话，那就要等上一些时间。<br>这样就造成拥堵。<br>Gas 还有个作用，控制每一次执行合约的消耗，即 GasLimit，看不明白的不用深究，后续都会深入说明。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当下区块链世界各种生态都在雨后春笋一般的建设中，BTC 是当之无愧的价值体现，以太坊也在奋起直追。币圈的运做也可以看做另一个世界的金融运做，币本身构建自己的生态，金融圈大庄操作币价。两相结合，推动币值，一边割韭菜，一边做技术。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 架构 </tag>
            
            <tag> btc </tag>
            
            <tag> 比特币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-解决图片不显示问题</title>
      <link href="posts/3748913f.html"/>
      <url>posts/3748913f.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>由 <code>hexo-asset-image</code> 图片模块和 <code>hexo-abbrlink</code> 不兼容导致的。</p><p>hexo由于浏览器中，中文路径复制到文本中会被转成 unicode 编码，感观上特别不舒服，虽然粘回url后可以decode回来。</p><blockquote><p><a href="https://liukay.com/2020/11/12/linux-%E5%B8%B8%E7%94%A8%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E6%9C%AC%E6%93%8D%E4%BD%9C/">https://liukay.com/2020/11/12/linux-%E5%B8%B8%E7%94%A8%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E6%9C%AC%E6%93%8D%E4%BD%9C/</a></p></blockquote><p>决定把路径改成Hash编码，使用<code>abbrlink</code> 这个插件后发现问题，图片显示不正常，查看一下图片路径发现，多了一个<code>.html</code></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>修改图片输出插件</p></blockquote><p>插件路径：</p><blockquote><p>hexo_home/node_modules/hexo-asset-image/index.js</p></blockquote><p><img src="/posts/3748913f/%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81.png" alt="修改代码"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//24行 -1 改为 -5</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.length<span class="number">-5</span>;</span><br></pre></td></tr></table></figure><p>为什么要 -5，因为<code>.html</code> 刚好5个字符，-5 就是 link 减少5个字符刚好。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 解决 </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oh-my-zsh插件 zsh-autosuggestion自动补全 和 zsh-syntax-highlighting语法高亮</title>
      <link href="posts/2bd7c1ad.html"/>
      <url>posts/2bd7c1ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装-on-my-zsh-插件"><a href="#安装-on-my-zsh-插件" class="headerlink" title="安装 on-my-zsh 插件"></a>安装 on-my-zsh 插件</h2><p>插件在 .zshrc 的 plugins 中进行添加。</p><p>这些插件可以让oh-my-zsh更好用，推荐安装，不安装对使用vim也没什么影响。<br>分两步</p><p><code>$ZSH_CUSTOM</code> 安装完 zsh 后，默认已经存在。</p><h2 id="安装-zsh-autosuggestions"><a href="#安装-zsh-autosuggestions" class="headerlink" title="安装 zsh-autosuggestions"></a>安装 zsh-autosuggestions</h2><p>这是一个超级好用的插件，直接显示命令的操作记录，可以快速使用重复命令。</p><blockquote><p>git clone git://github.com/zsh-users/zsh-autosuggestions <code>$ZSH_CUSTOM</code>/plugins/zsh-autosuggestions</p></blockquote><p>看效果</p><p><img src="/posts/2bd7c1ad/2.jpg" alt="补全效果"></p><h2 id="安装-zsh-syntax-highlighting"><a href="#安装-zsh-syntax-highlighting" class="headerlink" title="安装 zsh-syntax-highlighting"></a>安装 zsh-syntax-highlighting</h2><blockquote><p>git clone <a href="https://github.com/zsh-users/zsh-syntax-highlighting.git">https://github.com/zsh-users/zsh-syntax-highlighting.git</a> <code>$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</code>/plugins/zsh-syntax-highlighting</p></blockquote><p>这个插件会在终端以颜色的方式提示命令是否正确。</p><p>正确命令</p><p><img src="/posts/2bd7c1ad/3.jpg" alt="正确命令"></p><p>不正确的命令</p><p><img src="/posts/2bd7c1ad/4.jpg" alt="不正确的命令"></p><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p><code>zsh-autosuggestion</code> 和 <code>zsh-syntax-highlighting</code></p><p>vim ~/.zshrc 在 plugins 中换行添加即可</p><p><img src="/posts/2bd7c1ad/1.jpg" alt="plugins"></p><p>复制代码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    autojump</span><br><span class="line">    zsh-<span class="keyword">syntax</span>-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> oh-my-zsh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
            <tag> oh-my-zsh </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-IDE进化04 NERD-tree 文件目录管理树插件</title>
      <link href="posts/6f4f7b58.html"/>
      <url>posts/6f4f7b58.html</url>
      
        <content type="html"><![CDATA[<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>这个插件的作用很大，可以方便的管理和打开文件、进入目录一个刚需插件。<br>看效果图，左侧的目录就是插件显示的效果。</p><p><img src="/posts/6f4f7b58/nerd-tree.png" alt="nerd-tree结构"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果还不了解安装插件的话朋友，请移步<a href="http://liukay.com/posts/3d22e482.html">vim-IDE 03 插件管理器plug插件</a>，这里我们进行 vim IDE 化的第一个插件。</p><p>添加插件</p><blockquote><p>vim ~/.config/nvim/init.vim</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; NERDTree文件树</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span>, &#123; <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;NERDTreeToggle&#x27;</span> &#125;</span><br><span class="line"><span class="comment">&quot; NERDTree 中显示git信息</span></span><br><span class="line">Plug <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br></pre></td></tr></table></figure><p>添加保存后执行以下命令安装。</p><blockquote><p>:PlugInstall</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>刚安装后，还需要进行一些配置，可以添加一些个性化的配置，用起来才会顺手。<br>添加 NERDTree 配置</p><blockquote><p>vim ~/.config/nvim/init.vim</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line"><span class="comment">&quot; =================================</span></span><br><span class="line"><span class="comment">&quot; 默认输入 :NERDTreeToggle，调起左侧菜单，但是每是都这样输这谁受的住加个快捷键</span></span><br><span class="line"><span class="comment">&quot; &lt;F3&gt; 代表 F3键</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;F3&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开vim时自动打开NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * NERDTree</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; \ + r 定位当前文件所在目录，这个很有用</span></span><br><span class="line"><span class="comment">&quot; 当前从左树进入，又要将当前目录定位到当前位置用这个</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span>r :NERDTreeFind<span class="symbol">&lt;cr&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="symbol">&lt;C-w&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;显示书签&quot;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 忽略一下文件的显示</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore=[<span class="string">&#x27;\.pyc&#x27;</span>,<span class="string">&#x27;\~$&#x27;</span>,<span class="string">&#x27;\.swp&#x27;</span>]</span><br><span class="line"><span class="comment">&quot; git显示</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeIndicatorMapCustom</span> = &#123;</span><br><span class="line">    \ <span class="string">&quot;Modified&quot;</span>  : <span class="string">&quot;✹&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Staged&quot;</span>    : <span class="string">&quot;✚&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Untracked&quot;</span> : <span class="string">&quot;✭&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Renamed&quot;</span>   : <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unmerged&quot;</span>  : <span class="string">&quot;═&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Deleted&quot;</span>   : <span class="string">&quot;✖&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Dirty&quot;</span>     : <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Clean&quot;</span>     : <span class="string">&quot;✔︎&quot;</span>,</span><br><span class="line">    \ <span class="string">&#x27;Ignored&#x27;</span>   : <span class="string">&#x27;☒&#x27;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unknown&quot;</span>   : <span class="string">&quot;?&quot;</span></span><br><span class="line">    \ &#125;</span><br><span class="line"><span class="comment">&quot; &#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>平时的使用常用的操作，打开、并闭、定位、隐藏等</p><p>说几个常用的</p><ol><li><p>C 改变当前目录<br>大写C。<br>当目录展开很长的时间，你只想让当前目录成为根目录用这个，另外还可以解决，你在别的位置打开是git的项目git显示失效的问题。</p></li><li><p>左右窗口切换<br>Control + w + w，就是按住 Control 不放，再连续按两下。</p></li><li><p>定位打开文件位置<br>这个相当实用，分别输入 <code>\</code> 再输入 <code>r</code>，跳转。这里<code>\</code>是我的leader键。<br>有什么用？当你打开一个文件件，又去了不知名的目录后，想回到这个文件所在的目录，这个就很好用。<br>经常是打开一个工程目录后，到处看代码，要在代侧一行行找着回去特别麻烦，用这个非常方便。</p></li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">o</span>: 打开文件</span><br><span class="line"><span class="keyword">go</span>: 不离开nerdtree焦点打开文件</span><br><span class="line">i: 上下窗口显示文件</span><br><span class="line">gi: 不离开nerdtree焦点的i</span><br><span class="line"><span class="variable">s:</span> 左右分隔窗口显示文件</span><br><span class="line">g<span class="variable">s:</span> 不离开nerdtree焦点的</span><br><span class="line"><span class="keyword">u</span>: 往上一层目录</span><br><span class="line">O: 递归展开目录</span><br><span class="line"><span class="keyword">X</span>: 递归收缩目录</span><br><span class="line"><span class="keyword">P</span>: 到达根目录</span><br><span class="line"><span class="keyword">p</span>: 到达当前的根目录</span><br><span class="line">C: 改变当前目录</span><br><span class="line">r: 刷新</span><br><span class="line">R: 递归刷新</span><br><span class="line">q: 关闭tree窗口</span><br></pre></td></tr></table></figure><h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><p>这个很实现，类拟于快插方式，将常用的目录放到书签下，可以快速定位。</p><p>常用命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:Bookmark <span class="symbol">&lt;name&gt;</span>    将选中结点添加到书签列表中，并命名为name（书签名不可包含空格）；如与现有书签重名，则覆盖现有书签</span><br><span class="line">  Bookmark xxx 可以为当前目录标记为名称为xxx的书签，之后使用 :BookmarkToRoot xxx 命令即可直接跳到该目录下。</span><br><span class="line">:BookmarkToRoot <span class="symbol">&lt;name&gt;</span>    以指定目录书签或文件书签的父目录作为根结点显示NerdTree</span><br><span class="line">:RevealBookmark <span class="symbol">&lt;name&gt;</span>    如果指定书签已经存在于当前目录树下，打开它的上层结点并选中该书签</span><br><span class="line">:OpenBookmark <span class="symbol">&lt;name&gt;</span>    打开指定的文件。（参数必须是文件书签）如果该文件在当前的目录树下，则打开它的上层结点并选中该书签</span><br><span class="line">:ClearBookmarks [<span class="symbol">&lt;names&gt;</span>]    清除指定书签；如未指定参数，则清除所有书签</span><br><span class="line">:ClearAllBookmarks    清除所有书签</span><br></pre></td></tr></table></figure><p>怎么用？</p><p>设置书签，下次在任何目录位置打开后，都可以从书签快速定位<br>在左侧树目录找到你要设置成书签的目录，将光标移动到那个目录。</p><p>格式：</p><blockquote><p>:Bookmark 书签名</p></blockquote><p><img src="/posts/6f4f7b58/bookmarks1.jpg" alt="bookmarks"></p><blockquote><p>:Bookmark java<br>:Bookmark go</p></blockquote><p><img src="/posts/6f4f7b58/bookmarks.jpg" alt="bookmarks"></p><p>可以看到 Bookmarks 就是设置好的书签，可以从上面直接到达目标位置。</p><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><blockquote><p>:help NERDTree</p></blockquote><h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; VIM 自身配置</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 编码设置</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line"><span class="keyword">set</span> enc=utf8</span><br><span class="line"><span class="keyword">set</span> fencs=utf8,gbk,gb2312,gb18030</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 启用插件</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">filetype</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Tab 转空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 列高亮</span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 记录上次光标位置</span></span><br><span class="line"><span class="keyword">au</span> BufReadPost * <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) | <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 分屏设置</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向右边</span></span><br><span class="line"><span class="keyword">map</span> td :<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向左边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ta</span> :<span class="keyword">set</span> nosplitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向上边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ts</span> :<span class="keyword">set</span> nosplitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向下边</span></span><br><span class="line"><span class="keyword">map</span> tw :<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 替换方向键为调节分屏大小</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-up&gt;</span> :<span class="keyword">res</span> -<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-down&gt;</span> :<span class="keyword">res</span> +<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-left&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>-<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-right&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>+<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按键映射</span></span><br><span class="line"><span class="keyword">map</span> W :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :<span class="keyword">wq</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> tq :q!<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">te</span> :terminal<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置 buff、空白字符的视觉提示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span> listchars=<span class="built_in">extend</span><span class="variable">s:</span>❯,precede<span class="variable">s:</span>❮,<span class="keyword">ta</span><span class="variable">b:</span>▸\</span><br><span class="line"><span class="comment">&quot; 这个提示在复制的时候是个问题</span></span><br><span class="line"><span class="comment">&quot; set list listchars=extends:❯,precedes:❮,tab:▸\,trail:˽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 其他的一些配置</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>   <span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>      <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="string">&quot;set relativenumber    &quot;</span> 相对行号</span><br><span class="line"><span class="keyword">set</span> wildmenu    <span class="comment">&quot;  让vim命令可用Tab补全</span></span><br><span class="line"><span class="keyword">set</span> hlsearch      <span class="comment">&quot; 变输入搜索词边高亮</span></span><br><span class="line"><span class="keyword">set</span> incsearch      <span class="comment">&quot; 光标自动跳转到搜索结果上</span></span><br><span class="line"><span class="keyword">set</span> t_ut=  <span class="comment">&quot;防止vim背景颜色错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 复制系统到 vim</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;C-y&gt;</span> <span class="comment">&quot;+y</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-p&gt;</span> <span class="comment">&quot;*p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--开始</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--结束</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开关闭 NERDTree</span></span><br><span class="line"><span class="keyword">map</span> tt :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开vim时自动打开NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * NERDTree</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; \ + r 定位当前文件所在目录，这个很有用</span></span><br><span class="line"><span class="comment">&quot; 当前从左树进入，又要将当前目录定位到当前位置用这个</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span>r :NERDTreeFind<span class="symbol">&lt;cr&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="symbol">&lt;C-w&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;显示书签&quot;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span></span><br><span class="line"><span class="comment">&quot; 是否显示隐藏文件</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowHidden=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 忽略一下文件的显示</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore=[<span class="string">&#x27;\.pyc&#x27;</span>,<span class="string">&#x27;\~$&#x27;</span>,<span class="string">&#x27;\.swp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeGitStatusIndicatorMapCustom</span> = &#123;</span><br><span class="line">    \ <span class="string">&quot;Modified&quot;</span>  : <span class="string">&quot;✹&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Staged&quot;</span>    : <span class="string">&quot;✚&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Untracked&quot;</span> : <span class="string">&quot;✭&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Renamed&quot;</span>   : <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unmerged&quot;</span>  : <span class="string">&quot;═&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Deleted&quot;</span>   : <span class="string">&quot;✖&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Dirty&quot;</span>     : <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Clean&quot;</span>     : <span class="string">&quot;✔︎&quot;</span>,</span><br><span class="line">    \ <span class="string">&#x27;Ignored&#x27;</span>   : <span class="string">&#x27;☒&#x27;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unknown&quot;</span>   : <span class="string">&quot;?&quot;</span></span><br><span class="line">    \ &#125;</span><br><span class="line"><span class="comment">&quot; &#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="要特别提一下上面的配置中的两个快捷键"><a href="#要特别提一下上面的配置中的两个快捷键" class="headerlink" title="要特别提一下上面的配置中的两个快捷键"></a>要特别提一下上面的配置中的两个快捷键</h3><ol><li><p>左侧文件树开关<br>默认输入 :NERDTreeToggle，调起或关才左侧菜单，但是每是都这样输这谁受的住加个快捷键<br>我加了方式为按两次<code>t</code>，也就是<code>tt</code>来按制开关</p></li><li><p>添加快捷定位<br>如果我有个文件在<code>/data/test1/test2/aaa.log</code>，<br>但是在<code>~/Download/</code>这个位置打开的，我想直接定位到<code>/data/test1/test2/</code>这个目录下，可以通过：<br><code>\ + r</code>定位当前文件所在目录，这个很有用</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到了这一部分，打开目录上的文件就有了一个文件的工具。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> plugin </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ide </tag>
            
            <tag> vim </tag>
            
            <tag> vim-IDE </tag>
            
            <tag> nerdtree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-IDE进化03-插件管理器plug插件</title>
      <link href="posts/3d22e482.html"/>
      <url>posts/3d22e482.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>管理插件的插件</p></blockquote><p>vim 如果不添加插件，仅仅只有原来的编译文本等功能，加上插件之后，就可以做更多事情，加快处理效率，比如可以把它打造成一个写作环境、开发IDE，相当之好用。<br>插件可以手动添加，手动添加步骤需要下载、解压、将文件放到对应目录下步骤多一些。可以使用挺件管理，很方便的添加自己需要的插件</p><h2 id="Plug-插件管理"><a href="#Plug-插件管理" class="headerlink" title="Plug 插件管理"></a>Plug 插件管理</h2><p>vim 有很多插件管理器，如Vundle、vim-plug。<br><code>Vundle</code> 是 Vim bundle 的简称。<br><code>vim-plug</code>是一个开源、速度非常快的、极简的vim插件管理器。</p><h2 id="安装-vim-plug"><a href="#安装-vim-plug" class="headerlink" title="安装 vim-plug"></a>安装 vim-plug</h2><p>我是基于 nvim 安装的插件，nvim 默认路径在 <code>~/.config/nvim/</code>，vim-plug 这个插件需要安装在 <code>autoload</code> 这个目录下。</p><h3 id="nvim"><a href="#nvim" class="headerlink" title="nvim"></a>nvim</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><h2 id="管理插件"><a href="#管理插件" class="headerlink" title="管理插件"></a>管理插件</h2><p>安装好之后，就可以使用它管理插件，下面以 nvim 为例管理插件。<br>配置文件路径： <code>~/.config/nvim/init.vim</code><br>从 <code>call plug#begin(PLUGIN_DIRECTORY)</code> 开始，<code>PLUGIN_DIRECTORY</code>表示插件指定下载目录，可以自定义。<br>并以 <code>plug#end()</code> 结束，插件写在中间，如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span>, &#123; <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;NERDTreeToggle&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在命令模式下输入：<code>:PlugInstall</code> 进行安装。图片当中是我已经安装的插件，所以显示<code>Already installed</code>。<br>剩下的就是安装自己需要的插件了，有很多vim插件推荐网站，可以从上面找到自己想要的插件。</p><p><img src="/posts/3d22e482/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.jpg" alt="安装插件"></p><h2 id="插件命令"><a href="#插件命令" class="headerlink" title="插件命令"></a>插件命令</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><code>:PlugInstall</code></p><h3 id="检查状态"><a href="#检查状态" class="headerlink" title="检查状态"></a>检查状态</h3><p><code>:PlugStatus</code></p><h3 id="更新插件"><a href="#更新插件" class="headerlink" title="更新插件"></a>更新插件</h3><p><code>:PlugUpdate</code></p><h3 id="审查插件"><a href="#审查插件" class="headerlink" title="审查插件"></a>审查插件</h3><p><code>:PlugDiff</code></p><p>有时，更新的插件可能有新的 bug 或无法正常工作。要解决这个问题，你可以简单地回滚有问题的插件。<br>输入 <code>:PlugDiff</code>命令，然后按回车键查看上次 <code>:PlugUpdate</code>的更改，并在每个段落上按 X 将每个插件回滚到更新前的前一个状态</p><h3 id="删除插件"><a href="#删除插件" class="headerlink" title="删除插件"></a>删除插件</h3><p>注释之前的插件之后，重新<code>:PlugInstall</code>即可。<br>最后，运行以下命令卸载插件：<br><code>:PlugClean</code><br>该命令将删除 vim 配置文件中所有未声明的插件。</p><h3 id="升级-Vim-plug"><a href="#升级-Vim-plug" class="headerlink" title="升级 Vim-plug"></a>升级 Vim-plug</h3><p>升级vim-plug本身<br><code>:PlugUpgrad</code></p><h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; VIM 自身配置</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 编码设置</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line"><span class="keyword">set</span> enc=utf8</span><br><span class="line"><span class="keyword">set</span> fencs=utf8,gbk,gb2312,gb18030</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 启用插件</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">filetype</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Tab 转空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 列高亮</span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 记录上次光标位置</span></span><br><span class="line"><span class="keyword">au</span> BufReadPost * <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) | <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 分屏设置</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向右边</span></span><br><span class="line"><span class="keyword">map</span> td :<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向左边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ta</span> :<span class="keyword">set</span> nosplitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向上边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ts</span> :<span class="keyword">set</span> nosplitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向下边</span></span><br><span class="line"><span class="keyword">map</span> tw :<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 替换方向键为调节分屏大小</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-up&gt;</span> :<span class="keyword">res</span> -<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-down&gt;</span> :<span class="keyword">res</span> +<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-left&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>-<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;M-right&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>+<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按键映射</span></span><br><span class="line"><span class="keyword">map</span> W :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :<span class="keyword">wq</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> tq :q!<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">te</span> :terminal<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置 buff、空白字符的视觉提示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span> listchars=<span class="built_in">extend</span><span class="variable">s:</span>❯,precede<span class="variable">s:</span>❮,<span class="keyword">ta</span><span class="variable">b:</span>▸\</span><br><span class="line"><span class="comment">&quot; 这个提示在复制的时候是个问题</span></span><br><span class="line"><span class="comment">&quot; set list listchars=extends:❯,precedes:❮,tab:▸\,trail:˽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 其他的一些配置</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>   <span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>      <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="string">&quot;set relativenumber    &quot;</span> 相对行号</span><br><span class="line"><span class="keyword">set</span> wildmenu    <span class="comment">&quot;  让vim命令可用Tab补全</span></span><br><span class="line"><span class="keyword">set</span> hlsearch      <span class="comment">&quot; 变输入搜索词边高亮</span></span><br><span class="line"><span class="keyword">set</span> incsearch      <span class="comment">&quot; 光标自动跳转到搜索结果上</span></span><br><span class="line"><span class="keyword">set</span> t_ut=  <span class="comment">&quot;防止vim背景颜色错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 复制系统到 vim</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;C-y&gt;</span> <span class="comment">&quot;+y</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-p&gt;</span> <span class="comment">&quot;*p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--开始</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; 插件部分--结束</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从这里开始，配置一点一点往这个配置文件里添加，开始打造vim-IDE。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> plugin </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
            <tag> 插件 </tag>
            
            <tag> plugin </tag>
            
            <tag> plug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-IDE进化02-nvim自身配置</title>
      <link href="posts/5d1d762f.html"/>
      <url>posts/5d1d762f.html</url>
      
        <content type="html"><![CDATA[<p>配置好基础环境之后，开始对nvim进行配置，这个配置是非常有必要的，nvim 的默认配置实际上是不附合我们的需求的。</p><p>在本系列文中说提到vim都是指nvim，本人的习惯改不过来。<br>nvim 的配置非常之多，要配置成适我们的IDE，要配置各个细节。<br>从本节开始，每一次的改进都会一点一点随着文章添加进这个配置，每一篇的配置都基于上一篇。</p><p>主要从几个方面进行配置:</p><ol><li>编码设置</li><li>分屏设置</li><li>按键映射</li><li>其他设置</li></ol><p>编辑配置文件</p><blockquote><p><code>~/.config/nvim/init.vim</code></p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"><span class="comment">&quot; VIM 自身配置</span></span><br><span class="line"><span class="comment">&quot;=================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 编码设置</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line"><span class="keyword">set</span> enc=utf8</span><br><span class="line"><span class="keyword">set</span> fencs=utf8,gbk,gb2312,gb18030</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 启用插件</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">filetype</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Tab 转空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 列高亮</span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 其他的一些配置</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>   <span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>      <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="string">&quot;set relativenumber    &quot;</span> 相对行号</span><br><span class="line"><span class="keyword">set</span> wildmenu    <span class="comment">&quot;  让vim命令可用Tab补全</span></span><br><span class="line"><span class="keyword">set</span> hlsearch      <span class="comment">&quot; 变输入搜索词边高亮</span></span><br><span class="line"><span class="keyword">set</span> incsearch      <span class="comment">&quot; 光标自动跳转到搜索结果上</span></span><br><span class="line"><span class="keyword">set</span> t_ut=  <span class="comment">&quot;防止vim背景颜色错误</span></span><br><span class="line"><span class="comment">&quot;--------------------------------------</span></span><br><span class="line"><span class="comment">&quot; 记录上次光标位置，不设置这个，每次打开光标都在第一行</span></span><br><span class="line"><span class="keyword">au</span> BufReadPost * <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) | <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 分屏设置</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向右边</span></span><br><span class="line"><span class="keyword">map</span> td :<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向右分屏并把光标移动向左边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ta</span> :<span class="keyword">set</span> nosplitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向上边</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">ts</span> :<span class="keyword">set</span> nosplitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; 向下分屏并把光标移动向下边</span></span><br><span class="line"><span class="keyword">map</span> tw :<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 替换方向键为调节分屏大小</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;up&gt;</span> :<span class="keyword">res</span> +<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;down&gt;</span> :<span class="keyword">res</span> -<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;left&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>-<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;right&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>+<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按键映射</span></span><br><span class="line"><span class="keyword">map</span> W :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :<span class="keyword">wq</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> tq :q!<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">te</span> :terminal<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 复制系统到 vim</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;C-y&gt;</span> <span class="comment">&quot;+y</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-p&gt;</span> <span class="comment">&quot;*p</span></span><br><span class="line"><span class="comment">&quot;---------------------------------------------</span></span><br><span class="line"><span class="comment">&quot; 设置 buff、空白字符的视觉提示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span> listchars=<span class="built_in">extend</span><span class="variable">s:</span>❯,precede<span class="variable">s:</span>❮,<span class="keyword">ta</span><span class="variable">b:</span>▸\</span><br><span class="line"><span class="comment">&quot; 这个提示在复制的时候是个问题会多出一个˽</span></span><br><span class="line"><span class="comment">&quot; set list listchars=extends:❯,precedes:❮,tab:▸\,trail:˽</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么这个就是 vim-IDE进行的最基础模板，基于这个模板，开始添加各种骚工具，让你的vim，实现强列的个性订制化。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> plugin </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ide </tag>
            
            <tag> vim </tag>
            
            <tag> 插件 </tag>
            
            <tag> nvim </tag>
            
            <tag> 配置 </tag>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-IDE进化01-iterm2、nvim、oh-my-zsh环境配置</title>
      <link href="posts/d4002e27.html"/>
      <url>posts/d4002e27.html</url>
      
        <content type="html"><![CDATA[<p>现在开发、写文章基本上已经离不开 <code>vim</code>了，写 java 使用 <code>IDEA</code>，vim 也能完全胜任，在 IDEA 中添加 <code>ideavim</code>配合开发，写<code>go</code>直接用<code>vim</code>，写文章就是直接上<code>vim</code>。</p><h2 id="配置存放仓库"><a href="#配置存放仓库" class="headerlink" title="配置存放仓库"></a>配置存放仓库</h2><p>不定期更新配置</p><p><a href="https://github.com/forfreeday/vim">https://github.com/forfreeday/vim</a></p><h2 id="先上效果图"><a href="#先上效果图" class="headerlink" title="先上效果图"></a>先上效果图</h2><p><img src="/posts/d4002e27/vim-ide%E6%95%88%E6%9E%9C.png" alt="效果图"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>macOs</li><li>iterm2</li><li>on-my-zsh</li><li>nvim</li></ul><p>这三个是什么关系</p><ol><li>iterm2 是终端工具，负责调用终端命令行工具</li><li>on-my-zsh 是 bash 工具，对bash增加了一些优化</li><li>nvim 是vim的改进版</li></ol><h3 id="插件依赖环境"><a href="#插件依赖环境" class="headerlink" title="插件依赖环境"></a>插件依赖环境</h3><ul><li>python3</li><li>nodejs</li><li>pip3</li></ul><p>如果已经有了相关环境不需要安装，如果没有安装一下依赖环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g neovim</span><br><span class="line">npm install -g typescript</span><br><span class="line"></span><br><span class="line">pip3 install jedi</span><br><span class="line">pip3 install pylint</span><br></pre></td></tr></table></figure><h2 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h2><p>这个是主要的工具，在mac使用shell可以做大量的自定义设置。</p><h3 id="安装-iterm2"><a href="#安装-iterm2" class="headerlink" title="安装 iterm2"></a>安装 iterm2</h3><p>以下两种方式二选一：</p><ol><li><p>下载的是压缩文件安装</p><p> iTerm2下载地址：<a href="https://www.iterm2.com/downloads.html">https://www.iterm2.com/downloads.html</a></p></li><li><p>Homebrew进行安装：</p><blockquote><p>brew cask install iterm2</p></blockquote></li></ol><p>安装完成后，打开 iterm2，看看效果。</p><h3 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h3><p>安装的是vim美化相关的字体，建议安装，这样后面 airline 显示的符号才不会变形。<br>需要用到的字体<code>powerline</code>，将 <code>powerline</code> 的字体也放到项目当中，方便大家直接导入字体。解决 <strong>vim-airline</strong> 下符号显示导常，箭头标志大小异常的问题</p><p>在我的项目中已经集成好字体，直接在项目中双点安装或自行下载安装</p><p><a href="https://github.com/forfreeday/vim/tree/master/font/powerline-fonts">https://github.com/forfreeday/vim/tree/master/font/powerline-fonts</a><br>字线官方github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/supermarin/powerline-fonts.git</span><br></pre></td></tr></table></figure><p>安装 <code>Menlo Regular for Powerline.otf</code> 这个字体，在 iTerm2下显示为 <code>Menlo for Powerline</code>，的字体</p><p><img src="/posts/d4002e27/%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93.jpg" alt="设置字体"></p><h2 id="安装-on-my-zsh"><a href="#安装-on-my-zsh" class="headerlink" title="安装 on-my-zsh"></a>安装 on-my-zsh</h2><p>mac 自带<code>zsh</code>替换成<code>on-my-zsh</code> 安装后，对<code>.zshrc</code>配置文件进行配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果是首次安装 ～目录下没有.zshrc</span></span><br><span class="line">touch .zshrc</span><br><span class="line"></span><br><span class="line">cp ~/.zshrc   ~/.zshrc.orig</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建zsh配置文件</span></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><p>oh-my-zsh 提供、自带很多<code>console</code>的美化样式，可以自很选择<br>查看 <code>～/.oh-my-zsh/themes</code> 目录目录下，并在配置文件.zshrc 中进行配置。</p><p>官方github上的样式介绍</p><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes">https://github.com/ohmyzsh/ohmyzsh/wiki/themes</a></p><h4 id="agnoster"><a href="#agnoster" class="headerlink" title="agnoster"></a>agnoster</h4><p><img src="https://user-images.githubusercontent.com/49100982/108254745-777cb400-716c-11eb-800a-a8cfa612253f.jpg" alt="agnoster"></p><h4 id="bira"><a href="#bira" class="headerlink" title="bira"></a>bira</h4><p><img src="https://user-images.githubusercontent.com/49100982/108254762-7a77a480-716c-11eb-8665-b4f459fd8920.jpg" alt="bira"></p><p>我选 agnoster 这个风格，因为跟 air-line 一样的风格<br>vim ~/.zshrc</p><p><code>ZSH_THEME=&quot;agnoster&quot;</code></p><h2 id="安装-nvim"><a href="#安装-nvim" class="headerlink" title="安装 nvim"></a>安装 nvim</h2><p><a href="https://github.com/neovim/neovim/wiki/Installing-Neovim">官方Github</a></p><blockquote><p>brew install neovim</p></blockquote><h2 id="nvim自动配置"><a href="#nvim自动配置" class="headerlink" title="nvim自动配置"></a>nvim自动配置</h2><p>nvim 默认路径，如果没有就手动创建一个：<code>~/.config/nvim/init.vim</code>。<br>到这，基础的VIM环境就配置好了，平时写作或者练习也够用了。</p><p>让 nvim 替换vim</p><blockquote><p>alias vim=&#39;nvim&#39;<br>alias vi=&#39;nvim&#39;</p></blockquote><p>好的，到这里基本的环境就搞定了，接下来需要对vim进行一番骚操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>安装完这些之后，即使不使用vim，在mac这也是一个很好的shell命令行的使用套件。</p><p>写java项目为什么不使用vim?<br>也能使用，写起效率也快，但是一般写的话还需要使用别工具，像git、maven、gradle、protobuf 等工具配合，IDEA上直接操作，效率更快。不为了vim而vim。<br>go 的构建相对简单，vim 上配合插件基本就能完成。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ide </tag>
            
            <tag> mac </tag>
            
            <tag> vim </tag>
            
            <tag> nvim </tag>
            
            <tag> on-my-zsh </tag>
            
            <tag> zsh </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-283-移动零</title>
      <link href="posts/18609.html"/>
      <url>posts/18609.html</url>
      
        <content type="html"><![CDATA[<p>相当于是使用 for 进行交换的一个小技巧的练习，后面会给出一些算法的小技巧，都是总结的一些算法的小技巧。<br>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote><p>输入: [0,1,0,3,12]<br>输出: [1,3,12,0,0]</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>必须在原数组上操作，不能拷贝额外的数组。<br>尽量减少操作次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">               arr[j] = arr[i];</span><br><span class="line">               arr[i] = temp;</span><br><span class="line">               j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>[1, 3, 5, 7, 8, 9, 0, 0, 0, 0]</p></blockquote><h3 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h3><p><a href="https://leetcode-cn.com/problems/move-zeroes">https://leetcode-cn.com/problems/move-zeroes</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> leetcode </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode007-整数反转</title>
      <link href="posts/5042.html"/>
      <url>posts/5042.html</url>
      
        <content type="html"><![CDATA[<h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x &#x3D; 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x &#x3D; -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x &#x3D; 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x &#x3D; 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>提示：</p><p><code>-231 &lt;= x &lt;= 231 - 1</code></p><p>当所计算数字大于2^30 次方或等于2^31 次方但余下的数大于7或小于-2^30 次方或等于-2^31 次方但余下的数小于-8时，只要再计算一次就溢出。</p><h3 id="解题方式"><a href="#解题方式" class="headerlink" title="解题方式"></a>解题方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pop;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        pop = x % <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;pop: &quot;</span> + pop);</span><br><span class="line">        x = x / <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;x: &quot;</span> + x);</span><br><span class="line">        <span class="keyword">if</span> (res &gt; Integer.MAX_VALUE / <span class="number">10</span> || (res == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; Integer.MIN_VALUE / <span class="number">10</span> || (res == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;res before: &quot;</span> + res);</span><br><span class="line">        res = res * <span class="number">10</span> + pop;</span><br><span class="line">        System.out.println(<span class="string">&quot;res after: &quot;</span> + res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h3><p><a href="https://leetcode-cn.com/problems/reverse-integer">https://leetcode-cn.com/problems/reverse-integer</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> leetcode </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode232-栈stack-用栈实现队列</title>
      <link href="posts/63618.html"/>
      <url>posts/63618.html</url>
      
        <content type="html"><![CDATA[<h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><p>这个是 Leetcode 232 题，用两个栈来实现一个先进先出的队列，实现了一个版本。</p><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p><p>实现 <code>MyQueue</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>你只能使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li>你能否实现每个操作均摊时间复杂度为 <code>O(1)</code> 的队列？换句话说，执行 n 个操作的总时间复杂度为 <code>O(n)</code> ，即使其中一个操作可能花费较长时间。</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyQueue myQueue &#x3D; new MyQueue();</span><br><span class="line">myQueue.push(1); &#x2F;&#x2F; queue is: [1]</span><br><span class="line">myQueue.push(2); &#x2F;&#x2F; queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); &#x2F;&#x2F; return 1</span><br><span class="line">myQueue.pop(); &#x2F;&#x2F; return 1, queue is [2]</span><br><span class="line">myQueue.empty(); &#x2F;&#x2F; return false</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= x &lt;= 9</code></li><li>最多调用 <code>100</code> 次 <code>push</code>、<code>pop</code>、<code>peek</code> 和 <code>empty</code></li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 <code>pop</code> 或者 <code>peek</code> 操作）</li></ul><span id="more"></span><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize your data structure here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Push element x to the back of queue.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack1.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = stack2.pop();</span><br><span class="line">        <span class="keyword">while</span> (!stack2.empty()) &#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the front element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = stack2.peek();</span><br><span class="line">        <span class="keyword">while</span> (!stack2.empty()) &#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns whether the queue is empty.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack1.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原题出处"><a href="#原题出处" class="headerlink" title="原题出处"></a>原题出处</h3><p><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">https://leetcode-cn.com/problems/implement-queue-using-stacks/</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> leetcode </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群容错模式</title>
      <link href="posts/14131.html"/>
      <url>posts/14131.html</url>
      
        <content type="html"><![CDATA[<h3 id="Failfast-Cluster模式"><a href="#Failfast-Cluster模式" class="headerlink" title="Failfast Cluster模式"></a>Failfast Cluster模式</h3><p>这种模式称为快速失败模式，调用只执行一次，失败则立即报错。这种模式适用于非幂等性操作，每次调用的副作用是不同的，如写操作，比如交易系统我们要下订单，如果一次失败就应该让它失败，通常由服务消费方控制是否重新发起下订单操作请求（另一个新的订单）。<br>-Failsafe Cluster模式<br>失败安全模式，如果调用失败， 则直接忽略失败的调用，而是要记录下失败的调用到日志文件，以便后续审计。</p><span id="more"></span><h3 id="Failback-Cluster模式"><a href="#Failback-Cluster模式" class="headerlink" title="Failback Cluster模式"></a>Failback Cluster模式</h3><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p><h3 id="Forking-Cluster模式"><a href="#Forking-Cluster模式" class="headerlink" title="Forking Cluster模式"></a>Forking Cluster模式</h3><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。</p><h3 id="Broadcast-Cluster模式"><a href="#Broadcast-Cluster模式" class="headerlink" title="Broadcast Cluster模式"></a>Broadcast Cluster模式</h3><p>广播调用所有提供者，逐个调用，任意一台报错则报错（2.1.0开始支持）。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p>]]></content>
      
      
      <categories>
          
          <category> arch </category>
          
          <category> 概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 概念 </tag>
            
            <tag> 容错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CocConfig参数设置说明</title>
      <link href="posts/1ca1b354.html"/>
      <url>posts/1ca1b354.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果常用<code>vim</code>的程序员的话，<code>coc</code> 这个插件即使没用过也听说过，这真是个强到没边的插件。<br>之所以写这个文件是因为用了一段<code>coc</code>发现真是个强大的插件，可以对每次项功能做到非常精细的配置。<br>自己在用的过程中每一项都一点一点验证，把这个过程记录下来，可能会有很多朋友能用的上。</p><h2 id="CocConfig"><a href="#CocConfig" class="headerlink" title="CocConfig"></a>CocConfig</h2><p>编辑CocConfig的方式有两种：</p><p>1.在vim输入: <code>:CocConfig</code>，保存后生成文件<br>2.编辑文件，默认不存在该文件:</p><blockquote><p>~/.config/nvim/coc-settings.json</p></blockquote><p>完整配置，下面标逐渐分析每个配置的说明，每个配置都是在使用中，一点一点验证。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;coc.preferences.semanticTokensHighlights&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;coc.preferences.enableFloatHighlight&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;coc.preferences.snippetStatusText&quot;</span>: <span class="string">&quot;Ⓢ &quot;</span>,</span><br><span class="line">    <span class="attr">&quot;coc.preferences.extensionUpdateCheck&quot;</span>: <span class="string">&quot;daily&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;coc.preferences.messageLevel&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;coc.source.around.firstMatch&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;coc.source.buffer.firstMatch&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;coc.source.syntax.firstMatch&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.detailMaxLength&quot;</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.noselect&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.enablePreselect&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.triggerAfterInsertEnter&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.autoTrigger&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.timeout&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.enablePreview&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.floatEnable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.detailField&quot;</span>: <span class="string">&quot;preview&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.snippetIndicator&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.triggerCompletionWait&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.echodocSupport&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;suggest.completionItemKindLabels&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;class&quot;</span>: <span class="string">&quot;\uf0e8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;\ue22b&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;constant&quot;</span>: <span class="string">&quot;\uf8fe&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;default&quot;</span>: <span class="string">&quot;\uf29c&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;enum&quot;</span>: <span class="string">&quot;\uf435&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;enumMember&quot;</span>: <span class="string">&quot;\uf02b&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;event&quot;</span>: <span class="string">&quot;\ufacd&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;\uf93d&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;\uf723&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;folder&quot;</span>: <span class="string">&quot;\uf115&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;function&quot;</span>: <span class="string">&quot;\u0192&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;interface&quot;</span>: <span class="string">&quot;\uf417&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;keyword&quot;</span>: <span class="string">&quot;\uf1de&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;\uf6a6&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;\uf40d&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;\uf915&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;property&quot;</span>: <span class="string">&quot;\ue624&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reference&quot;</span>: <span class="string">&quot;\ufa46&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;snippet&quot;</span>: <span class="string">&quot;\ue60b&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;struct&quot;</span>: <span class="string">&quot;\ufb44&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;\ue612&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;typeParameter&quot;</span>: <span class="string">&quot;\uf728&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;unit&quot;</span>: <span class="string">&quot;\uf475&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;\uf89f&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;variable&quot;</span>: <span class="string">&quot;\ue71b&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;diagnostic.signOffset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic.errorSign&quot;</span>: <span class="string">&quot;\uf467&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic.warningSign&quot;</span>: <span class="string">&quot;\uf071&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic.infoSign&quot;</span>: <span class="string">&quot;\uf129&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic.hintSign&quot;</span>: <span class="string">&quot;\uf864&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic.displayByAle&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic.refreshOnInsertMode&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic.checkCurrentLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic.virtualTextPrefix&quot;</span>: <span class="string">&quot; ❯❯❯ &quot;</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic.virtualText&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;codeLens.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;list.previewHighlightGroup&quot;</span>: <span class="string">&quot;Statement&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;list.nextKeymap&quot;</span>: <span class="string">&quot;&lt;C-e&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;list.previousKeymap&quot;</span>: <span class="string">&quot;&lt;C-u&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;importCost.bundleSizeDecoration&quot;</span>: <span class="string">&quot;both&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;importCost.typescriptExtensions&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;\\.tsx?$&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;importCost.javascriptExtensions&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;\\.jsx?$&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;importCost.showCalculatingDecoration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;importCost.debug&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;snippets.ultisnips.directories&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;$HOME/.config/nvim/Ultisnips/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$HOME/.config/nvim/plugged/vim-snippets/UltiSnips/&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;coc.preferences.formatOnSaveFiletypes&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;css&quot;</span>,</span><br><span class="line">        <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java&quot;</span>,</span><br><span class="line">        <span class="string">&quot;python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;svelte&quot;</span>,</span><br><span class="line">        <span class="string">&quot;c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;prisma&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;yaml.format.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;signature.target&quot;</span>: <span class="string">&quot;float&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;yank.enableCompletion&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;jest.watch&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.width&quot;</span>: <span class="number">38</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.quitOnOpen&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.sources&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;buffer&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;expand&quot;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;expand&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;explorer.file.column.indent.indentLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.file.showHiddenFiles&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.icon.enableNerdfont&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.file.column.git.showIgnored&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.keyMappingMode&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.buffer.showHiddenBuffers&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.keyMappings.global&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;u&quot;</span>: <span class="string">&quot;nodePrev&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;e&quot;</span>: <span class="string">&quot;nodeNext&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;h&quot;</span>: <span class="string">&quot;toggleSelection&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;&lt;tab&gt;&quot;</span>: <span class="string">&quot;actionMenu&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gl&quot;</span>: <span class="string">&quot;expandRecursive&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gh&quot;</span>: <span class="string">&quot;collapseRecursive&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;i&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;wait&quot;</span>,</span><br><span class="line">            <span class="string">&quot;expandable?&quot;</span>,</span><br><span class="line">            <span class="string">&quot;expand&quot;</span>,</span><br><span class="line">            <span class="string">&quot;open&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;&lt;cr&gt;&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;wait&quot;</span>,</span><br><span class="line">            <span class="string">&quot;expandable?&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cd&quot;</span>,</span><br><span class="line">            <span class="string">&quot;open&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;I&quot;</span>: <span class="string">&quot;open:vsplit&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;o&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;wait&quot;</span>,</span><br><span class="line">            <span class="string">&quot;expanded?&quot;</span>,</span><br><span class="line">            <span class="string">&quot;collapse&quot;</span>,</span><br><span class="line">            <span class="string">&quot;expand&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;O&quot;</span>: <span class="string">&quot;open:tab&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;n&quot;</span>: <span class="string">&quot;collapse&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;l&quot;</span>: <span class="string">&quot;gotoParent&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;yp&quot;</span>: <span class="string">&quot;copyFilepath&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;yn&quot;</span>: <span class="string">&quot;copyFilename&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;yy&quot;</span>: <span class="string">&quot;copyFile&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dd&quot;</span>: <span class="string">&quot;cutFile&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;pp&quot;</span>: <span class="string">&quot;pasteFile&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dD&quot;</span>: <span class="string">&quot;deleteForever&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;a&quot;</span>: <span class="string">&quot;addFile&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;k&quot;</span>: <span class="string">&quot;addFile&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;M&quot;</span>: <span class="string">&quot;addDirectory&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cw&quot;</span>: <span class="string">&quot;rename&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;.&quot;</span>: <span class="string">&quot;toggleHidden&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;zh&quot;</span>: <span class="string">&quot;toggleHidden&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;R&quot;</span>: <span class="string">&quot;refresh&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;?&quot;</span>: <span class="string">&quot;help&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;q&quot;</span>: <span class="string">&quot;quit&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;X&quot;</span>: <span class="string">&quot;systemExecute&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gd&quot;</span>: <span class="string">&quot;listDrive&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;f&quot;</span>: <span class="string">&quot;search&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;F&quot;</span>: <span class="string">&quot;searchRecursive&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;B&quot;</span>: <span class="string">&quot;gotoSource:file&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;b&quot;</span>: <span class="string">&quot;gotoSource:buffer&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;[[&quot;</span>: <span class="string">&quot;sourcePrev&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;]]&quot;</span>: <span class="string">&quot;sourceNext&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;[d&quot;</span>: <span class="string">&quot;diagnosticPrev&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;]d&quot;</span>: <span class="string">&quot;diagnosticNext&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;[c&quot;</span>: <span class="string">&quot;gitPrev&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;]c&quot;</span>: <span class="string">&quot;gitNext&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;&lt;&lt;&quot;</span>: <span class="string">&quot;gitStage&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;&gt;&gt;&quot;</span>: <span class="string">&quot;gitUnstage&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tslint.autoFixOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;python.autoComplete.addBrackets&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;python.jediEnabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;python.formatting.provider&quot;</span>: <span class="string">&quot;yapf&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;python.formatting.yapfArgs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;--style&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#123;SPACES_AROUND_POWER_OPERATOR: True, SPACES_BEFORE_COMMENT: 1&#125;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;html.format.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;javascript.referencesCodeLens.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;javascript.showUnused&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;javascript.suggest.names&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;javascript.suggestionActions.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;json.format.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;prettier.printWidth&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">&quot;prettier.disableLanguages&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;prettier.formatterPriority&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;prettier.useTabs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;prettier.trailingComma&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prettier.singleQuote&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;todolist.autoUpload&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;todolist.promptForReminder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;coc-actions.hideCursor&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;coc-actions.showActionKind&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;diagnostic-languageserver.filetypes&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;vim&quot;</span>: <span class="string">&quot;vint&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;languagetool&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;markdown&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;write-good&quot;</span>,</span><br><span class="line">            <span class="string">&quot;markdownlint&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;sh&quot;</span>: <span class="string">&quot;shellcheck&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;elixir&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;mix_credo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;mix_credo_compile&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;eelixir&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;mix_credo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;mix_credo_compile&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;php&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;phpstan&quot;</span>,</span><br><span class="line">            <span class="string">&quot;psalm&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;diagnostic-languageserver.formatFiletypes&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;elixir&quot;</span>: <span class="string">&quot;mix_format&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;eelixir&quot;</span>: <span class="string">&quot;mix_format&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;languageserver&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;lua&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;lua-lsp&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;filetypes&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;lua&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;golang&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;gopls&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;rootPatterns&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;go.mod&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;filetypes&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;go&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;initializationOptions&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;gocodeCompletionEnabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;diagnosticsEnabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;lintTool&quot;</span>: <span class="string">&quot;golint&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;bash&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;bash-language-server&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;start&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;filetypes&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;sh&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;ignoredRootPaths&quot;</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;ccls&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;ccls&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;filetypes&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cuda&quot;</span>,</span><br><span class="line">                <span class="string">&quot;objc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;objcpp&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;rootPatterns&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;.ccls&quot;</span>,</span><br><span class="line">                <span class="string">&quot;.ccls-root&quot;</span>,</span><br><span class="line">                <span class="string">&quot;compile_commands.json&quot;</span>,</span><br><span class="line">                <span class="string">&quot;.git/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;.hg/&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;initializationOptions&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;cache&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;directory&quot;</span>: <span class="string">&quot;/tmp/ccls&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;java.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;java.configuration.runtimes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;JavaSE-17&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/Users/liukai/workspaces/application/jdk-17.0.2.jdk/Contents/Home&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;JavaSE-17&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;default&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;java.configuration.maven.userSettings&quot;</span>: <span class="string">&quot;/Users/liukai/.m2/settings.xml&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;java.import.gradle.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;java.jdt.ls.lombokSupport.enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;java.jdt.ls.statusIcons&quot;</span>: <span class="string">&quot;ready&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;java.imports.gradle.wrapper.checksums&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;sha256&quot;</span>: <span class="string">&quot;6246ebc8a7be938275282bf9c3ec79238e08e6b442d38a66633731ae8daffd5d&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;allowed&quot;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;java.import.gradle.home&quot;</span>: <span class="string">&quot;/Users/liukai/workspaces/application/gradle-6.6.1/bin&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;java.import.gradle.java.home&quot;</span>: <span class="string">&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_261.jdk/Contents/Home&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rust-analyzer.enable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="coc-自身配置"><a href="#coc-自身配置" class="headerlink" title="coc 自身配置"></a>coc 自身配置</h3><table><thead><tr><th align="center">参数名</th><th align="center">作用</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">coc.preferences.semanticTokensHighlights</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">coc.preferences.enableFloatHighlight</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">coc.preferences.snippetStatusText</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">coc.preferences.extensionUpdateCheck</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">coc.preferences.messageLevel</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">coc.source.around.firstMatch</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">coc.source.buffer.firstMatch</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">coc.source.syntax.firstMatch</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="suggest-补全"><a href="#suggest-补全" class="headerlink" title="suggest 补全"></a>suggest 补全</h3><table><thead><tr><th align="center">参数名</th><th align="center">作用</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">suggest.detailMaxLength</td><td align="center">最大详情长度</td><td align="center"></td></tr><tr><td align="center">suggest.noselect</td><td align="center">补全自动选中第一个，很有用！</td><td align="center">false</td></tr><tr><td align="center">suggest.enablePreselect</td><td align="center">关掉预选第一个，这个不关，按tab就会选中第二个</td><td align="center">true</td></tr></tbody></table><p><code>suggest.enablePreselect</code>相关问题: <a href="https://github.com/neoclide/coc.nvim/issues/1339">https://github.com/neoclide/coc.nvim/issues/1339</a></p><h3 id="diagnostic"><a href="#diagnostic" class="headerlink" title="diagnostic"></a>diagnostic</h3><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h3 id="rust"><a href="#rust" class="headerlink" title="rust"></a>rust</h3><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>coc官方文档: <a href="https://github.com/neoclide/coc.nvim/blob/master/doc/coc.txt">https://github.com/neoclide/coc.nvim/blob/master/doc/coc.txt</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
          <category> coc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> coc </tag>
            
            <tag> coc-java </tag>
            
            <tag> nvim </tag>
            
            <tag> coc-go </tag>
            
            <tag> coc-json </tag>
            
            <tag> cocconfig </tag>
            
            <tag> coc-rust </tag>
            
            <tag> 补全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty 构建server和client 服务</title>
      <link href="posts/de290305.html"/>
      <url>posts/de290305.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>编程学习的方法，我认为是以小见大，在理解一个东西之前一定要先会用，并用熟它，这样理解才会快。<br>就跟理解自行车一样，不会骑，然后先开始研究，最终可能会研究明白，但是毕竟还是事倍功半。<br>所以先构建一个可以使自己理解的项目，再一点一点学习原理是一种比较好的方式。</p><h2 id="Server服务端"><a href="#Server服务端" class="headerlink" title="Server服务端"></a>Server服务端</h2><p>构建<code>netty</code>的话，就是一个流程三件套，最基础的三个框架组件摆出来，然后在上面写代码，分别是：</p><ol><li>Server 启动类</li><li>Initializer 实始化组件类</li><li>Handle 请求处理类</li></ol><p>劳记这一个流程三件套，基本netty的开发，你已经入门了，就是这么回事。</p><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><p>套路第一步，写一个启动类，这个是入口，netty服务的话，一般都是先启动服务端，再启动客户端。<br>这个好理解，如果服务端都不提供服务，客户端还有必要连接吗。当然如果是要启动着玩，就另说。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.netty.test02.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-01-03 00:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerNettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        serverBootstrap.group(bossGroup, workGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ServerNettyChannelInitializer02());</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">8889</span>).sync();</span><br><span class="line">            System.out.println(<span class="string">&quot;Netty 服务端启动完毕&quot;</span>);</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>实始化必要组件，这也在其它的编常中也是非常常见的一种模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.netty.test02.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldPrepender;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务 Initializer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-01-03 23:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerNettyChannelInitializer02</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">        <span class="comment">//解码器</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(Integer.MAX_VALUE,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">        <span class="comment">//编码器</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> LengthFieldPrepender(<span class="number">4</span>));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> StringDecoder(CharsetUtil.UTF_8));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> StringEncoder(CharsetUtil.UTF_8));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ServerNettyServerHandle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><p>处理具体业务，其实看下来，就是这个模式，是不是很好理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.netty.test02.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-01-04 22:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerNettyServerHandle</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 表示请求上下文信息。可用于获得channel，远程地址等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 客户端消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020-01-04 22:19</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;server: [remote ip]-&gt; &quot;</span> + ctx.channel().remoteAddress()+<span class="string">&quot;, [msg]-&gt; &quot;</span>+msg);</span><br><span class="line">        <span class="comment">//向客户端发送消息</span></span><br><span class="line">        ctx.channel().writeAndFlush(<span class="string">&quot;server: &quot;</span>+ UUID.randomUUID());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-01-04 22:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            bootstrap.group(eventLoopGroup).channel(NioSocketChannel.class).handler(<span class="keyword">new</span> ClientNettyChannelInitializer());</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;localhost&quot;</span>,<span class="number">8889</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.netty.test02.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldPrepender;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端初始化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-01-04 22:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientNettyChannelInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(Integer.MAX_VALUE,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> LengthFieldPrepender(<span class="number">4</span>));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> StringDecoder(CharsetUtil.UTF_8));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> StringEncoder(CharsetUtil.UTF_8));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ClientNettyHandle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理器-1"><a href="#处理器-1" class="headerlink" title="处理器"></a>处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.netty.test02.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-01-04 22:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientNettyHandle</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收服务器返回消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 表示服务端发来的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client: [remote ip]-&gt;&quot;</span> + ctx.channel().remoteAddress() + <span class="string">&quot;, [msg]-&gt;&quot;</span> + msg);</span><br><span class="line">        <span class="comment">//向服务端发送消息</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        ctx.writeAndFlush(<span class="string">&quot;client：&quot;</span>+ LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果没有这个方法，Client并不会主动发消息给Server</span></span><br><span class="line"><span class="comment">     * 那么Server的channelRead0无法触发，导致Client的channelRead0也无法触发</span></span><br><span class="line"><span class="comment">     * 这个channelActive可以让Client连接后，发送一条消息</span></span><br><span class="line"><span class="comment">     *      但是问题在于，有一这个方法后，服务端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.writeAndFlush(<span class="string">&quot;客户端：发送数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>可以启动看一下这个代码的效果：</p><p>1.启动服务端Server</p><blockquote><p>Netty 服务端启动完毕<br>server: [remote ip]-&gt; /127.0.0.1:65320, [msg]-&gt; 客户端：发送数据<br>server: [remote ip]-&gt; /127.0.0.1:65320, [msg]-&gt; client：2022-05-21T21:49:42.653<br>server: [remote ip]-&gt; /127.0.0.1:65320, [msg]-&gt; client：2022-05-21T21:49:43.657<br>server: [remote ip]-&gt; /127.0.0.1:65320, [msg]-&gt; client：2022-05-21T21:49:44.661<br>server: [remote ip]-&gt; /127.0.0.1:65320, [msg]-&gt; client：2022-05-21T21:49:45.664<br>server: [remote ip]-&gt; /127.0.0.1:65320, [msg]-&gt; client：2022-05-21T21:49:46.668<br>server: [remote ip]-&gt; /127.0.0.1:65320, [msg]-&gt; client：2022-05-21T21:49:47.674<br>server: [remote ip]-&gt; /127.0.0.1:65320, [msg]-&gt; client：2022-05-21T21:49:48.678</p></blockquote><p>2.启动客户端</p><blockquote><p>client: [remote ip]-&gt;localhost/127.0.0.1:8889, [msg]-&gt;server: bd34689c-237a-4499-be9f-be7b55d1f7e2<br>client: [remote ip]-&gt;localhost/127.0.0.1:8889, [msg]-&gt;server: afe29b02-65f8-44c5-8b1b-c5286acd0a72<br>client: [remote ip]-&gt;localhost/127.0.0.1:8889, [msg]-&gt;server: 806f346f-9ae8-4dce-ad20-7a308d8b0c46<br>client: [remote ip]-&gt;localhost/127.0.0.1:8889, [msg]-&gt;server: 670fb4af-15cd-4471-9990-bc86ff07932c<br>client: [remote ip]-&gt;localhost/127.0.0.1:8889, [msg]-&gt;server: b103ed1a-127b-42df-9c86-58f9e5dd2d4a<br>client: [remote ip]-&gt;localhost/127.0.0.1:8889, [msg]-&gt;server: 3948c322-1cb7-4ba0-bade-7f7161fc2712<br>client: [remote ip]-&gt;localhost/127.0.0.1:8889, [msg]-&gt;server: e3daf473-6dd6-4e6c-8bca-27f87e43854f<br>client: [remote ip]-&gt;localhost/127.0.0.1:8889, [msg]-&gt;server: 64bf61e2-4126-4238-b53c-4bf90e1c21d8</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>netyy 的刚开始学习时，只需要了解到它的这个套路，后面的开发其实大同小异，无非是对协议和序列化相关的东西进行处理。实现自己的业务需求。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> network </category>
          
          <category> netty </category>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> netty </tag>
            
            <tag> server </tag>
            
            <tag> client </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty 构建一个简易服务</title>
      <link href="posts/fab0cb81.html"/>
      <url>posts/fab0cb81.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>构建一个只有Server服务端的netty服务，不需要额外的编写client去访问，也就是说使用现在的软件去访问。<br>最简单的就是使用浏览器去访问，浏览是HTTP协议，所以服务必须是一个支持HTTP协议的应用。</p><p>实现使用:<br>IDEA + netty + gradle 构建一个简单的HTTP服务，用来学习netty。</p><h2 id="主要角色"><a href="#主要角色" class="headerlink" title="主要角色"></a>主要角色</h2><p>netty 构建一个服务，需要三个角色参与</p><ol><li>Server 运行服务</li><li>Initializer 组装组件</li><li>Handle 业秋处理</li></ol><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><p>可以创建一个<code>gradle</code>的空项目，这下面的代码复制进到项目中。</p><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>复制内容</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插件管理</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//座标</span></span><br><span class="line"><span class="keyword">group</span> <span class="string">&#x27;com.liukai.netty&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//源和目标编译版本</span></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.8</span></span><br><span class="line"><span class="keyword">targetCompatibility</span> = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//仓库，这里使用 maven 远程仓库，也就是说本没有，就去远程获取</span></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//依赖管理</span></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//测试用名，不用打到生产包中</span></span><br><span class="line">    <span class="comment">//group是 maven 的 group, name 是 artifactId, version 相同</span></span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">&#x27;junit&#x27;</span>, name: <span class="string">&#x27;junit&#x27;</span>, version: <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">    <span class="comment">//等价写法，推荐 group:artifactId:version</span></span><br><span class="line">    testCompile(</span><br><span class="line">            <span class="string">&quot;junit:junit:4.12&quot;</span></span><br><span class="line">            <span class="comment">//多行逗号隔开</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//编译的包</span></span><br><span class="line">    <span class="keyword">compile</span>(</span><br><span class="line">            <span class="string">&quot;io.netty:netty-all:4.1.10.Final&quot;</span></span><br><span class="line">            <span class="comment">//多行逗号隔开</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务端-NettyServer"><a href="#服务端-NettyServer" class="headerlink" title="服务端 NettyServer"></a>服务端 NettyServer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.netty.test01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 http 服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-12-29 22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        bootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> NettyChannelInitializer());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">8889</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组装组件-NettyChannelInitializer"><a href="#组装组件-NettyChannelInitializer" class="headerlink" title="组装组件 NettyChannelInitializer"></a>组装组件 NettyChannelInitializer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.netty.test01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 渠道构建</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-12-29 22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyChannelInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个回调的方法，在channel被注册时被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">        <span class="comment">//这里看一下源码</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;httpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">//增加一个自己定义的处理器handel</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;testHttpServerHandler&quot;</span>, <span class="keyword">new</span> NettyServerHandle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Handle-业务处理器-NettyServerHandle"><a href="#Handle-业务处理器-NettyServerHandle" class="headerlink" title="Handle 业务处理器 NettyServerHandle"></a>Handle 业务处理器 NettyServerHandle</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.netty.test01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-12-29 22:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandle</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承InboundHandler类，代表处理进入的请求，还有OutboundHandler,处理出去请求</span></span><br><span class="line"><span class="comment">     * 其中里面的泛型表示msg的类型，如果指定了HttpObject，表明这是个HTTP连接的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//channelRead0读取客户端请求，并返回响应的方法</span></span><br><span class="line">        <span class="comment">//如果不加这个判断使用curl 测试会报错，使用curl测试命令curl &quot;http://localhost:8899&quot;</span></span><br><span class="line">        <span class="comment">//判断这个是不是httpRequest请求</span></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line">            System.out.println(msg.getClass());</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress());</span><br><span class="line">            HttpRequest httpRequest = (HttpRequest) msg;</span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(httpRequest.getUri());</span><br><span class="line">            ctx.channel().closeFuture();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;/favicon.ico&quot;</span>.equals(uri.getPath())) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;chrome 请求 favicon&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求方法名: &quot;</span> + httpRequest.getMethod().name());</span><br><span class="line">            <span class="comment">//ByteBuf 是netty中的重要概念，代表响应返回的数据</span></span><br><span class="line">            ByteBuf content = Unpooled.copiedBuffer(<span class="string">&quot;Hello World&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">            FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());</span><br><span class="line">            <span class="comment">//如果只是调用write方法，他仅仅是存在缓冲区里，并不会返回客户端</span></span><br><span class="line">            <span class="comment">//调用writeAndFlush可以</span></span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><img src="/posts/fab0cb81/1.jpg" alt="验证"></p><p>控制台输出</p><p><img src="/posts/fab0cb81/2.jpg" alt="控制台输出"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>netty是一个不错的网络通信框架，本身使用起来比较简单，但是越是使用简单的框架底层实现就会比较复杂。<br>就跟String一样，使用简单，原理复杂是一个样的，但是凡事都是先从会用开始学习。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 服务 </tag>
            
            <tag> netty </tag>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker--运行纯linux容器并进入</title>
      <link href="posts/d0c35845.html"/>
      <url>posts/d0c35845.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个为什么单独拿出来说，因为这不是运行一个应用，而是运行一个单独的系统，和运行应用的方式不同。<br>一般运行一个docker，都是运行某个应用如 tomcat、nginx等，直接运行的话很少，一般都是为了手动安装一些应用后，再<code>commit</code>成一个新的镜象。</p><h2 id="运行linux容器"><a href="#运行linux容器" class="headerlink" title="运行linux容器"></a>运行linux容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取centos</span></span><br><span class="line">docker pull centos:centos7</span><br><span class="line"></span><br><span class="line">docker run -d -i -t &lt;imageID&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>注意<br>如果少了<code>/bin/bash</code>的话，Docker会生成一个<code>Container</code>但是马上就停止了，不会一直运行即使有了<code>-d</code>参数。</p><h2 id="进入系统容器"><a href="#进入系统容器" class="headerlink" title="进入系统容器"></a>进入系统容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach &lt;ContainerID&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty 简述</title>
      <link href="posts/9321f70b.html"/>
      <url>posts/9321f70b.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是netty"><a href="#什么是netty" class="headerlink" title="什么是netty"></a>什么是netty</h2><p>Netty是一个异步的基于事件驱动(Reactor)的网络框架。<br>Netty是一个NIO客户服务器框架，它能够快速和容易地开发网络应用，如协议服务器和客户端。它大大简化了网络编程，如TCP和UDP套接字服务器。</p><h2 id="为什么选择netty"><a href="#为什么选择netty" class="headerlink" title="为什么选择netty"></a>为什么选择netty</h2><p>主要原因是 netty 简化了使用nio时对网络编程的复杂性，提供更多的抽象性和功能方便网络编程开发。</p><p>列举一个特点：<br>1.Netty支持三种IO模型同时支持三种Reactor模式。</p><p>2.Netty支持很多应用层的协议，提供了很多decoder和encoder。</p><p>3.Netty能够解决TCP长连接所带来的缺陷（粘包、半包等）</p><p>4.Netty支持应用层的KeepAlive。</p><p>5.Netty规避了JAVA NIO中的很多BUG，性能更好。</p><h2 id="使用-netty-能做什么"><a href="#使用-netty-能做什么" class="headerlink" title="使用 netty 能做什么"></a>使用 netty 能做什么</h2><p>1.实现节点间通信<br>2.实现自己的协议<br> dubbo、rocketmq 等底层都使用 netty 实现自己的协议</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netty </tag>
            
            <tag> 简述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Gateway 静态路由</title>
      <link href="posts/22335.html"/>
      <url>posts/22335.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>以代码 或 配置文件形式进行配置。<br>RewritePath：路径匹配切割<br>StripPrefix： 路径载取</p><p>参数说明</p><blockquote><p>id: 路由ID<br>uri: 目标地址，可以是服务，如果服务Spring推荐用全大写，实际调用大小写不敏感，都可以调通。<br>predicates: 匹配路径，以浏览器请求的端口号后面的第一级路径为起始。<br>filters: 过滤器，包含Spring Gateway 内置过滤器，可以自定义过滤器。</p></blockquote><h2 id="1-请求转发，转发到目标地址"><a href="#1-请求转发，转发到目标地址" class="headerlink" title="1.请求转发，转发到目标地址"></a>1.请求转发，转发到目标地址</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="comment"># 跳转URL</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">163_route</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">http://www.163.com/</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/163</span></span><br></pre></td></tr></table></figure><h2 id="2-切路径"><a href="#2-切路径" class="headerlink" title="2.切路径"></a>2.切路径</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oauth2 认证</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">OAUTH2</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">lb://OAUTH-SERVER</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/oauth-server/**</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>参数说明</p><ol><li>StripPrefix的意思是将路径切掉一级，这个例子中 oauth-server 被剪。</li><li>请求路径：localhost:9000/oauth-server/oauth-center/oauth/token?username=admin</li><li>最终结果：lb://OAUTH-SERVER/oauth-center/oauth/token?username=admin</li></ol><h2 id="3-请求重写"><a href="#3-请求重写" class="headerlink" title="3.请求重写"></a>3.请求重写</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oauth2 认证</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">OAUTH2</span></span><br><span class="line">     <span class="attr">uri:</span> <span class="string">lb://OAUTH-SERVER/</span></span><br><span class="line">     <span class="attr">predicates:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">Path=/oauth-server/**</span></span><br><span class="line">     <span class="attr">filters:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">RewritePath=/oauth-server/(?&lt;path&gt;.*),</span> <span class="string">/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><ol><li>请求路径: localhost:9000/oauth-server/oauth-center/oauth/token?username=admin</li><li>最终结果: lb://OAUTH-SERVER/oauth-center/oauth/token?username=admin</li></ol><h3 id="验证了一下，RewritePath-的处理方式"><a href="#验证了一下，RewritePath-的处理方式" class="headerlink" title="验证了一下，RewritePath 的处理方式"></a>验证了一下，RewritePath 的处理方式</h3><ol><li>RewritePath 找到自己的 <code>/oauth-server/</code> 这一段，从 <code>- Path</code> 中去匹配，如果能匹配的到就是会将路径进行切割，注意是切割</li><li>切割方式将 <code>/oauth-server/(?&lt;path&gt;.*)</code> ，中 <code>&lt;path&gt;</code> 中的路径切出来，也就是 <code>oauth-server/</code>后面的部份。</li><li>并将切的结果赋值到 <code>&#123;path&#125;</code> 中。</li><li>最后的拼接路径为: <code>lb://SPRINGCLOUD-PROVIDER/path</code></li></ol><h3 id="Path-设置多个无效"><a href="#Path-设置多个无效" class="headerlink" title="-Path 设置多个无效"></a>-Path 设置多个无效</h3><p>验证 predicates 的 <code>-Path</code> 设置多个无效，如果 -Path 中的路径匹配对了，但是 RewritePath 中的路径和<code>-Path</code> 匹配不上会报<code>HTTP Status 404</code></p><h2 id="4-路径重定-结果路径多一级"><a href="#4-路径重定-结果路径多一级" class="headerlink" title="4.路径重定--结果路径多一级"></a>4.路径重定--结果路径多一级</h2><p>4.路径重写<br>这个测试，是在请求路径中不存在的url，添加到最终的请求路径中去</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">OAUTH2</span></span><br><span class="line">     <span class="attr">uri:</span> <span class="string">lb://OAUTH-SERVER/</span></span><br><span class="line">     <span class="attr">predicates:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">Path=/oauth-server/**</span></span><br><span class="line">     <span class="attr">filters:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">RewritePath=/oauth-server/(?&lt;path&gt;.*),</span> <span class="string">/oauth-center/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><ul><li>请求路径: localhost:9000/oauth-server/oauth/token?username=admin</li><li>最终结果: lb://OAUTH-SERVER/oauth-center/oauth/token?username=admin<br>oauth-center 在请求的路径中不存在，在 RewritePath 中进行重写，添加了一级路径。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>RewritePath: predicates 中的 - path 路径如果和 RewritePath 匹配则会被 RewritePath 剪切。</li><li>StripPrefix：剪取指定路径位数截取</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">举个示例</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rewritepath_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/a/b/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RewritePath=/a/b/(?&lt;segment&gt;.*),</span> <span class="string">/f/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>请求的时为： /a/b/c<br>最终结果为： /f/c</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> springcloud </category>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> spring gateway </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试-产生线程死锁的原因和处理方式</title>
      <link href="posts/50075.html"/>
      <url>posts/50075.html</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h3><p>线程同步(就是加锁)会有一个问题，就是产生死锁<br>所谓死锁: 是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p><h3 id="帮助理解："><a href="#帮助理解：" class="headerlink" title="帮助理解："></a>帮助理解：</h3><p>地上放着两个桶泡面，一个老坛酸菜，一个小鸡炖磨茹。有两个人：<code>一个产品</code>(线程1)，<code>一个测试</code>(线程2)，同时扑向<code>抢老坛酸菜</code>(锁A)和<code>小鸡炖磨茹</code>(锁B)，产品拿到老坛酸菜，测试拿到小鸡炖磨茹，同一时刻，产品伸要去拽测试怀里的小鸡炖磨茹，测试伸手去拽产品的老坛酸菜，互使剪刀脚两个僵持不下，就卡死在那了，叫这就死锁。如果没有<code>一个开发</code>将他们各打一顿解救出来(中断状态)，它们将无法推进下去。</p><h3 id="发生死锁的具体原因如下"><a href="#发生死锁的具体原因如下" class="headerlink" title="发生死锁的具体原因如下:"></a>发生死锁的具体原因如下:</h3><span id="more"></span><ol><li>因为系统资源不足。</li><li>进程运行推进的顺序不合适。    </li><li>资源分配不当。</li></ol><h3 id="举列说明场景"><a href="#举列说明场景" class="headerlink" title="举列说明场景:"></a>举列说明场景:</h3><p>死锁是因为多线程访问共享资源，由于访问的顺序不当所造成的，通常是一个线程锁定了一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在等待，而无法执行的情况。</p><h3 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h3><p>如果只使用一个锁就不会有死锁的问题，不过复杂场景下不太理实。<br>1.以确定的顺序获得锁</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">线程A</span> <span class="string">---&gt;</span> <span class="string">锁定</span> <span class="string">A</span>  <span class="string">----&gt;</span> <span class="string">偿试锁定</span> <span class="string">B</span></span><br><span class="line"><span class="string">线程B</span> <span class="string">---&gt;</span> <span class="string">锁定</span> <span class="string">A</span>  <span class="string">----&gt;</span> <span class="string">偿试锁定</span> <span class="string">B</span></span><br><span class="line"><span class="string">这样就不会发生死锁</span></span><br></pre></td></tr></table></figure><p>2.超时放弃<br>Lock接口提供了boolean tryLock(long time, TimeUnit unit) throws InterruptedException方法，该方法可以按照固定时长等待锁，因此线程可以在获取锁超时以后，主动释放之前已经获得的所有的锁。通过这种方式，也可以很有效地避免死锁。</p><p>死锁示列:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">packag com.liukai.thread.daed_locl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncDeadLock</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object locka = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lockb = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SyncDeadLock().deadLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 拿到 lock-A!&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 偿试获取 lock-B!&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 已获得 lock-B!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 拿到 lock-B!&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 偿试获取 lock-A!&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 已获得 lock-A!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;thread2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 线程死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用递归实现地址数据菜单</title>
      <link href="posts/2342.html"/>
      <url>posts/2342.html</url>
      
        <content type="html"><![CDATA[<p>跟网上的不同的是，我这种方式是以时间换空间的做法，不会一次性把数据全查出来再慢慢遍历，而是每次查询是否存在子级，有就递归下去查。<br>数据量大时，查库的次数比较多，数据量少时对数据库查询次数少，压力较小，但是多次查询不会出现一次查询数据量很大卡住的情况。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>先获取一级菜单，对每个一级菜单设子区域。</li><li>如果子区域还有子区域，就递归查询，直到查不到子区域返回。</li><li>递归的核心就是在方法中设置一个返回条件，防止无限递归下去。</li></ol><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@author</span> liukai</span><br><span class="line"> * <span class="meta">@since</span> <span class="number">2019</span>/<span class="number">6</span>/<span class="number">12</span> <span class="number">16</span>:<span class="number">14.</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RegionDao regionDao = <span class="keyword">new</span> RegionDao();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先拿到第一级地址</span></span><br><span class="line">        <span class="comment">//2. 递归查每一级下面的子级：</span></span><br><span class="line">        <span class="comment">//      如果子级下面，还有子级就递归</span></span><br><span class="line">        <span class="comment">//      如果子级下面，没有子级就返回退出递归</span></span><br><span class="line">        List&lt;RegionBean&gt; firstRegion = regionDao.queryParentId(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (RegionBean regionBean : firstRegion) &#123;</span><br><span class="line">            <span class="comment">//设置子区域</span></span><br><span class="line">            regionBean.setRegionBeanList(setChild(regionBean.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">        String jsonObject = JSONObject.toJSONString(firstRegion);</span><br><span class="line"></span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归查询所有子级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;RegionBean&gt; <span class="title">setChild</span><span class="params">(<span class="keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">        List&lt;RegionBean&gt; childList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;RegionBean&gt; childTemp = regionDao.queryParentId(parentId);</span><br><span class="line">        <span class="keyword">if</span> (childTemp != <span class="keyword">null</span> &amp;&amp; childTemp.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RegionBean regionBean : childTemp) &#123;</span><br><span class="line">                childList.add(regionBean);</span><br><span class="line">                regionBean.setRegionBeanList(setChild(regionBean.getId()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> childList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> childList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegionDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询父级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;RegionBean&gt; <span class="title">queryParentId</span><span class="params">(<span class="keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">        List&lt;RegionBean&gt; regionBeans = dataBaseRegion();</span><br><span class="line">        List&lt;RegionBean&gt; firstRegion = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (RegionBean regionBean : regionBeans) &#123;</span><br><span class="line">            <span class="keyword">if</span> (regionBean.getParentId() == parentId) &#123;</span><br><span class="line">                firstRegion.add(regionBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> firstRegion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;RegionBean&gt; <span class="title">dataBaseRegion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;RegionBean&gt; regionBeans = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">2</span>, <span class="string">&quot;北京市&quot;</span>, <span class="string">&quot;北京市&quot;</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">22</span>, <span class="string">&quot;天津市&quot;</span>, <span class="string">&quot;天津市&quot;</span>, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">783</span>, <span class="string">&quot;上海市&quot;</span>, <span class="string">&quot;上海市&quot;</span>, <span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">457</span>, <span class="string">&quot;辽宁省&quot;</span>, <span class="string">&quot;辽宁省&quot;</span>, <span class="number">0</span>, <span class="number">8</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">458</span>, <span class="string">&quot;沈阳市&quot;</span>, <span class="string">&quot;辽宁省-沈阳市&quot;</span>, <span class="number">457</span>, <span class="number">1</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">472</span>, <span class="string">&quot;铁岭市&quot;</span>, <span class="string">&quot;辽宁省-铁岭市&quot;</span>, <span class="number">457</span>, <span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">480</span>, <span class="string">&quot;大连市&quot;</span>, <span class="string">&quot;辽宁省-大连市&quot;</span>, <span class="number">457</span>, <span class="number">3</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">491</span>, <span class="string">&quot;鞍山市&quot;</span>, <span class="string">&quot;辽宁省-鞍山市&quot;</span>, <span class="number">457</span>, <span class="number">4</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">499</span>, <span class="string">&quot;抚顺市&quot;</span>, <span class="string">&quot;辽宁省-抚顺市&quot;</span>, <span class="number">457</span>, <span class="number">5</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">507</span>, <span class="string">&quot;本溪市&quot;</span>, <span class="string">&quot;辽宁省-本溪市&quot;</span>, <span class="number">457</span>, <span class="number">6</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">514</span>, <span class="string">&quot;丹东市&quot;</span>, <span class="string">&quot;辽宁省-丹东市&quot;</span>, <span class="number">457</span>, <span class="number">7</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">521</span>, <span class="string">&quot;锦州市&quot;</span>, <span class="string">&quot;辽宁省-锦州市&quot;</span>, <span class="number">457</span>, <span class="number">8</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">529</span>, <span class="string">&quot;营口市&quot;</span>, <span class="string">&quot;辽宁省-营口市&quot;</span>, <span class="number">457</span>, <span class="number">9</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">536</span>, <span class="string">&quot;阜新市&quot;</span>, <span class="string">&quot;辽宁省-阜新市&quot;</span>, <span class="number">457</span>, <span class="number">10</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">544</span>, <span class="string">&quot;辽阳市&quot;</span>, <span class="string">&quot;辽宁省-辽阳市&quot;</span>, <span class="number">457</span>, <span class="number">11</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">552</span>, <span class="string">&quot;朝阳市&quot;</span>, <span class="string">&quot;辽宁省-朝阳市&quot;</span>, <span class="number">457</span>, <span class="number">12</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">560</span>, <span class="string">&quot;盘锦市&quot;</span>, <span class="string">&quot;辽宁省-盘锦市&quot;</span>, <span class="number">457</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">561</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">562</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">563</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">564</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">565</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">566</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">666</span>, <span class="string">&quot;四级数据&quot;</span>, <span class="string">&quot;辽宁省-四级数据&quot;</span>, <span class="number">566</span>, <span class="number">13</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> regionBeans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegionBean</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String fullLabel;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> parentId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> sortId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;RegionBean&gt; regionBeanList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;fullLabel&quot;:&quot;北京市&quot;,&quot;id&quot;:2,&quot;label&quot;:&quot;北京市&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:1&#125;,&#123;&quot;fullLabel&quot;:&quot;天津市&quot;,&quot;id&quot;:22,&quot;label&quot;:&quot;天津市&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:2&#125;,&#123;&quot;fullLabel&quot;:&quot;上海市&quot;,&quot;id&quot;:783,&quot;label&quot;:&quot;上海市&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:3&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省&quot;,&quot;id&quot;:457,&quot;label&quot;:&quot;辽宁省&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[&#123;&quot;fullLabel&quot;:&quot;辽宁省-沈阳市&quot;,&quot;id&quot;:458,&quot;label&quot;:&quot;沈阳市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:1&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-铁岭市&quot;,&quot;id&quot;:472,&quot;label&quot;:&quot;铁岭市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:2&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-大连市&quot;,&quot;id&quot;:480,&quot;label&quot;:&quot;大连市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:3&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-鞍山市&quot;,&quot;id&quot;:491,&quot;label&quot;:&quot;鞍山市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:4&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-抚顺市&quot;,&quot;id&quot;:499,&quot;label&quot;:&quot;抚顺市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:5&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-本溪市&quot;,&quot;id&quot;:507,&quot;label&quot;:&quot;本溪市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:6&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-丹东市&quot;,&quot;id&quot;:514,&quot;label&quot;:&quot;丹东市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:7&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-锦州市&quot;,&quot;id&quot;:521,&quot;label&quot;:&quot;锦州市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:8&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-营口市&quot;,&quot;id&quot;:529,&quot;label&quot;:&quot;营口市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:9&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-阜新市&quot;,&quot;id&quot;:536,&quot;label&quot;:&quot;阜新市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:10&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-辽阳市&quot;,&quot;id&quot;:544,&quot;label&quot;:&quot;辽阳市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:11&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-朝阳市&quot;,&quot;id&quot;:552,&quot;label&quot;:&quot;朝阳市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:12&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-盘锦市&quot;,&quot;id&quot;:560,&quot;label&quot;:&quot;盘锦市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:561,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:562,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:563,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:564,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:565,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:566,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[&#123;&quot;fullLabel&quot;:&quot;辽宁省-四级数据&quot;,&quot;id&quot;:666,&quot;label&quot;:&quot;四级数据&quot;,&quot;parentId&quot;:566,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;],&quot;sortId&quot;:13&#125;],&quot;sortId&quot;:13&#125;],&quot;sortId&quot;:8&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1n712ep0u8906">https://cloud.tencent.com/developer/support-plan?invite_code=1n712ep0u8906</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>server和client模式的区别</title>
      <link href="posts/6549.html"/>
      <url>posts/6549.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这两个相反的，由jvm启动时自动选择。</p></blockquote><p><code>-server 模式</code>：初始空间大，默认启动并行 VM，启动慢，运行快<br><code>-client 模式</code>：初始空间小，默认启动串行 VM，启动快，运行慢</p><p>一般情况下 -server 模式多</p><ol><li>64位系统只能使用 server 模式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">java version <span class="string">&quot;11.0.2&quot;</span> <span class="number">2019</span>-<span class="number">01</span>-<span class="number">15</span> LTS</span><br><span class="line">Java(TM) SE Runtime Environment <span class="number">18.9</span> (build <span class="number">11.0</span>.<span class="number">2</span>+<span class="number">9</span>-LTS)</span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server VM 18.9 <span class="params">(build <span class="number">11.0</span><span class="number">.2</span>+<span class="number">9</span>-LTS, mixed mode)</span></span></span><br></pre></td></tr></table></figure><pre><code>32位了解即可</code></pre><ol start="2"><li>测试 java -D 命令<br> -D 后面传入的命令，会解析成 System 中的属性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//java -DtestJvm=test TestGetSystemProperties</span></span><br><span class="line">    String test = System.getProperty(<span class="string">&quot;testJvm&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != test) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test -&gt;&quot;</span> + test);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;property is null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动选择模式<br><code> java -client -showversion TestGetSystemProperties</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> client 模式 </tag>
            
            <tag> server 模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github--解决github文件不能超过100M</title>
      <link href="posts/6b96cb69.html"/>
      <url>posts/6b96cb69.html</url>
      
        <content type="html"><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>上传github文件带了测试数据，结果测试数据太大，上传不了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Enumerating objects: 66, done.</span><br><span class="line">Counting objects: 100% (66&#x2F;66), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (52&#x2F;52), done.</span><br><span class="line">Writing objects: 100% (55&#x2F;55), 170.58 MiB | 1.55 MiB&#x2F;s, done.</span><br><span class="line">Total 55 (delta 26), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (26&#x2F;26), completed with 5 local objects.</span><br><span class="line">remote: error: Trace: 405ebb8940b239aec85cd8d2b57faa2b154ec135647a1ae27c891ec512d61129</span><br><span class="line">remote: error: See http:&#x2F;&#x2F;git.io&#x2F;iEPt8g for more information.</span><br><span class="line">remote: error: File data&#x2F;1212888 is 412.17 MB; this exceeds GitHub&#39;s file size limit of 100.00 MB</span><br><span class="line">remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https:&#x2F;&#x2F;git-lfs.github.com.</span><br><span class="line">To github.com:forfreeday&#x2F;java.git</span><br><span class="line">! [remote rejected] main -&gt; main (pre-receive hook declined)</span><br><span class="line">error: failed to push some refs to &#39;github.com:forfreeday&#x2F;java.git&#39;</span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>调整上传大小限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure><p>查看是否生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure><p><code>http.postbuffer</code>已经调整到: 52428000=500×1024×1024，等于 500M。</p><blockquote><p>http.postbuffer=524288000<br>core.repositoryformatversion=0<br>core.filemode=true<br>core.bare=false<br>core.logallrefupdates=true</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 修改JAVA_HOME无效问题</title>
      <link href="posts/6ab718d3.html"/>
      <url>posts/6ab718d3.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近需要验一下JDK的版本兼容性，找了一台JDK11的机器，改了一上<code>JAVA_HOME</code>，然后<code>source /etc/profile</code>后，发现版本没有改过来！？<br>查看了一下<code>.bash_profile</code>和<code>.bashrc</code>都没有配置，奇怪了。<br>难道是<code>/usr/bin</code>中指定了？因为如果使用<code>openJDK</code>会从<code>/usr/bin</code>去指定java的路径，还是看一看还真是</p><p><img src="/posts/6ab718d3/java%E8%B7%AF%E5%BE%84.jpg" alt="java路径"></p><p>再<code>ll</code>查看一下这个软链指向哪里</p><p><img src="/posts/6ab718d3/%E8%BD%AF%E9%93%BE%E6%8E%A5%E6%8C%87%E5%90%91.jpg" alt="软链接指向"></p><p>想暴力删一下，但是万一改坏了就不好，还是温柔一点，使用 <code>update-alternatives</code> 命令</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>使用 update-alternatives 命令修改</p><p>格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">usage: alternatives --install &lt;link&gt; &lt;name&gt; &lt;path&gt; &lt;priority&gt;</span><br><span class="line">                    [--initscript &lt;service&gt;]</span><br><span class="line">                    [--family &lt;family&gt;]</span><br><span class="line">                    [--slave &lt;link&gt; &lt;name&gt; &lt;path&gt;]*</span><br><span class="line">       alternatives --remove &lt;name&gt; &lt;path&gt;</span><br><span class="line">       alternatives --auto &lt;name&gt;</span><br><span class="line">       alternatives --config &lt;name&gt;</span><br><span class="line">       alternatives --display &lt;name&gt;</span><br><span class="line">       alternatives --set &lt;name&gt; &lt;path&gt;</span><br><span class="line">       alternatives --list</span><br></pre></td></tr></table></figure><p>修改命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;/home/java/JDK/jdk1.8.0_161&quot; 1</span><br></pre></td></tr></table></figure><p>再查看一下，正常了，这种方式，不需要删除重新软链接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_161&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br></pre></td></tr></table></figure><h2 id="如果不正常怎么搞"><a href="#如果不正常怎么搞" class="headerlink" title="如果不正常怎么搞"></a>如果不正常怎么搞</h2><p>可以使用<strong>交互式修改</strong></p><p><img src="/posts/6ab718d3/%E4%BA%A4%E4%BA%92%E5%BC%8F%E4%BF%AE%E6%94%B9.jpg" alt="交互式修改"></p><p>输入指定的数字，搞定。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 兼容性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud eureka 注册服务显示IP端口号</title>
      <link href="posts/22827.html"/>
      <url>posts/22827.html</url>
      
        <content type="html"><![CDATA[<p>Spring cloud 显示 INSTANCE-ID 如果以IP + 端口号的形式显示，会更清析的定位每个服务所在的机器节点的状态。</p><h3 id="依赖的-pom"><a href="#依赖的-pom" class="headerlink" title="依赖的 pom"></a>依赖的 pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="yml-相关配置"><a href="#yml-相关配置" class="headerlink" title="yml 相关配置"></a>yml 相关配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://10.168.16.101:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/posts/22827/1557126376514.jpg" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
            <tag> eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud 四种服务下线方式</title>
      <link href="posts/39872.html"/>
      <url>posts/39872.html</url>
      
        <content type="html"><![CDATA[<p>这里指已经在 Eureka 注册中心注册的服务，如果需要停用，有四种方式进行停用。</p><h3 id="1-直接关闭"><a href="#1-直接关闭" class="headerlink" title="1.直接关闭"></a>1.直接关闭</h3><p>最粗暴。<br>写这个是因为，直接关闭，如果 Eureka 开了保护模式，会导至服务已关闭，但是未下线，还是会重试调用。如果不需强稳定性的话可以这么干。</p><h3 id="2-客户端主动通知注册中心下线"><a href="#2-客户端主动通知注册中心下线" class="headerlink" title="2.客户端主动通知注册中心下线"></a>2.客户端主动通知注册中心下线</h3><p>安全。<br>Eureka注册中心在收到某个客户端下线后不会马上通知所有的注册的客户端，而是等到客户端进行心跳的时候(心跳(续约)频率，默认30秒 )再将下的数据返回。通过这种方式下线的话，可以在某个服务下线后防止其他服务调用此服务失败。</p><p>白话就是，服务状态下线了，但是不通知其他服务。等到续约时间到了，再通知所有注册服务。</p><span id="more"></span><p>猜测，服务下线后，在没有心跳前，其他服务还是可以进行调用。等到心跳后，通知所有服务已下线，其他服务认为已下线，就不会再调该下线服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/eurekaUnRegister&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       eurekaClient.shutdown();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;eurekaUnRegistering&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/offline&quot;, method = RequestMethod.GET)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offLine</span><span class="params">()</span></span>&#123;</span><br><span class="line">   DiscoveryManager.getInstance().shutdownComponent();</span><br><span class="line"> &#125;  </span><br></pre></td></tr></table></figure><h3 id="3-调用接口方式下线"><a href="#3-调用接口方式下线" class="headerlink" title="3.调用接口方式下线"></a>3.调用接口方式下线</h3><p><a href="http://10.168.62.58:9999/message/actuator/shutdown">http://10.168.62.58:9999/message/actuator/shutdown</a></p><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Shutting down, bye...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地起机器后，调试结果<br>结果就是服务线程关闭，服务停止：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stopping beans in phase 2147483647</span><br><span class="line">Stopping beans in phase 0</span><br><span class="line">Unregistering JMX-exposed beans on shutdown</span><br><span class="line">DiscoveryClient_GROUP-MESSAGE&#x2F;group-message-provider-704 - registration status: 204</span><br><span class="line">Shutting down DiscoveryClient ...</span><br><span class="line">Unregistering ...</span><br><span class="line">DiscoveryClient_GROUP-MESSAGE&#x2F;group-message-provider-704 - deregister  status: 200</span><br></pre></td></tr></table></figure><p>网上博客<a href="https://blog.csdn.net/memmsc/article/details/78122962">https://blog.csdn.net/memmsc/article/details/78122962</a></p><h3 id="4-修改服务状态"><a href="#4-修改服务状态" class="headerlink" title="4.修改服务状态"></a>4.修改服务状态</h3><p>这种方式，服务不会停止，只是状态变为 DOWN，适合禁用该服务的操作。<br>DOWN 禁用<br>UP 启用<br><a href="http://10.168.62.58:9999/message/actuator/service-registry">http://10.168.62.58:9999/message/actuator/service-registry</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sprinng boot 2.0 以上需要添加额外配置才能生效，否则报404</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"> <span class="attr">endpoints:</span></span><br><span class="line">   <span class="attr">web:</span></span><br><span class="line">     <span class="attr">exposure:</span></span><br><span class="line">       <span class="attr">include:</span> <span class="string">&quot;*&quot;</span>                <span class="comment">#包含的路径，可以单个如 info</span></span><br><span class="line"> <span class="attr">endpoint:</span></span><br><span class="line">   <span class="attr">shutdown:</span></span><br><span class="line">     <span class="attr">enabled:</span> <span class="literal">true</span>                <span class="comment">#开启shutdown 关闭</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
            <tag> 服务下线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 日志输出参数 [-XX:+PrintGCDetails] 解释</title>
      <link href="posts/29326.html"/>
      <url>posts/29326.html</url>
      
        <content type="html"><![CDATA[<h2 id="PrintGCDetails-参数"><a href="#PrintGCDetails-参数" class="headerlink" title="PrintGCDetails 参数"></a>PrintGCDetails 参数</h2><blockquote><p>-XX:+PrintGCDetails 是在启动 java 时，添加的 VM 参数，用来在控制台中输出 GC 的详情。<br>用这个参数可以详细的查看 GC 的回收操作，一般会将 GC 的输出，单独单到一个 log 文件当中进行查看。</p></blockquote><h3 id="添加启动参数"><a href="#添加启动参数" class="headerlink" title="添加启动参数"></a>添加启动参数</h3><blockquote><p>java -XX:+PrintGCDetails -jar Demo.jar</p></blockquote><h3 id="GC日志示例"><a href="#GC日志示例" class="headerlink" title="GC日志示例"></a>GC日志示例</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">0.098:</span> [<span class="string">GC</span> <span class="string">(Allocation</span> <span class="string">Failure)</span> [<span class="attr">PSYoungGen:</span> <span class="string">1022K-&gt;490K(1536K)</span>] <span class="string">1022K-&gt;522K(30208K)</span>, <span class="number">0.0007804</span> <span class="string">secs</span>] [<span class="attr">Times:</span> <span class="string">user=0.00</span> <span class="string">sys=0.00</span>, <span class="string">real=0.00</span> <span class="string">secs</span>]</span><br><span class="line"><span class="attr">1.959:</span> [<span class="string">Full</span> <span class="string">GC</span> <span class="string">(Ergonomics)</span> [<span class="attr">PSYoungGen:</span> <span class="string">384K-&gt;0K(1536K)</span>] [<span class="attr">ParOldGen:</span> <span class="string">28064K-&gt;11941K(28672K)</span>] <span class="string">28448K-&gt;11941K(30208K)</span>, [<span class="attr">Metaspace:</span> <span class="string">3382K-&gt;3382K(1056768K)</span>], <span class="number">0.0063741</span> <span class="string">secs</span>] [<span class="attr">Times:</span> <span class="string">user=0.02</span> <span class="string">sys=0.00</span>, <span class="string">real=0.01</span> <span class="string">secs</span>]</span><br></pre></td></tr></table></figure><p>这个用来理解每个日志的意义。</p><blockquote><p>1.Allocation Failure 分配 失败<br>2.promotion Failure: 晋升 失败，进行Minor GC时，survivor space放不下, 对象只能放入老年代，而此时老年代也放不下造成的；<br>3.concurrent mode failure：是在执行CMS GC的过程中同时有对象要放入老年代，而此时老年代空间不足造成的</p></blockquote><p><strong>日志说明</strong></p><blockquote><p>0.098: 运行时间<br>GC (Allocation Failure): [GC类型 (原因)]<br>[PSYoungGen: 1022K-&gt;490K(1536K)]: [收集器类型: GC前该内存区域已经使用容量-&gt;GC后该内存区域已使用容量(该内存区域总容量)],执行时间 secs<br>[Times: user=0.00 sys=0.00, real=0.00 secs]: user=用户线程使用时间 sys=系统执行使用时间, real=真正回收时间</p></blockquote><p><strong>连起来看</strong><br>运行时间: [GC类型 (原因)] [收集器类型: GC前该内存区域已经使用容量-&gt;GC后该内存区域已使用容量(该内存区域总容量)] GC前Java堆已使用容量-&gt;GC后Java堆已使用容量（Java堆总容量）, 执行时间 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</p><h3 id="2-jvm-执持时间"><a href="#2-jvm-执持时间" class="headerlink" title="2.jvm 执持时间"></a>2.jvm 执持时间</h3><p>0.098、0.143 都是 jvm 启动后的时间，从 0 开始</p><h3 id="3-GC-和-Full-GC-回收类型"><a href="#3-GC-和-Full-GC-回收类型" class="headerlink" title="3.GC 和 Full (GC 回收类型)"></a>3.GC 和 Full (GC 回收类型)</h3><p>以 GC 和 Full GC 开头的说明了这次回收的停顿为型。<br>而不是用来区分新生代GC还是老年代GC的。<br>如果有”Full GC”，说明这次GC是发生了Stop-The-World的。</p><span id="more"></span><h3 id="4-PSYoungGen、-ParOldGen、-Metaspace表示GC发生的区域"><a href="#4-PSYoungGen、-ParOldGen、-Metaspace表示GC发生的区域" class="headerlink" title="4.[PSYoungGen、[ParOldGen、[Metaspace表示GC发生的区域"></a>4.[PSYoungGen、[ParOldGen、[Metaspace表示GC发生的区域</h3><p>这里显示的区域名称与使用的GC收集器是密切相关的，<br>例如上面的PSYoungGen表示采用Parallel Scavenge收集器，<br>ParOldGen表示采用Parallel Old收集器。<br>如果使用Serial收集器显示[DefNew，如果使用ParNew收集器显示[ParNew。</p><h3 id="5-括号中的含义"><a href="#5-括号中的含义" class="headerlink" title="5.括号中的含义"></a>5.括号中的含义</h3><p>后面方括号内部的1022K-&gt;490K(1536K)含义是:<br>“GC前该内存区域已经使用容量-&gt;GC后该内存区域已使用容量（该内存区域总容量）”。<br>而在方括号之外的1022K-&gt;522K(30208K)表示：<br>“GC前Java堆已使用容量-&gt;GC后Java堆已使用容量（Java堆总容量）”。<br>再往后的 0.0007804 secs 表示该内存区域GC所占用的时间，单位是秒。</p><blockquote><p>[Times: user=0.00 sys=0.00, real=0.00 secs]<br>表示:<br>user、sys、real 与 Linux 的 time 命令所输出的时间含义一致，分别代表用户态消耗的CPU时间、内核态消耗的CPU时间 和 操作从开始到结束所经过的墙钟时间（Wall Clock Time）。<br>CPU时间与墙钟时间的区别是，墙钟时间包括各种非运算的等待耗时，例如等待磁盘IO、等待线程阻塞，而CPU时间不包括这些耗时，但当系统有多CPU或者多核的话，多线程操作会叠加这些CPU时间，所以读者看到 user 或 sys 时间超过 real 时间是完全正常的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0.098: [GC (Allocation Failure) [PSYoungGen: 1022K-&gt;490K(1536K)] 1022K-&gt;522K(30208K), 0.0007804 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.143: [GC (Allocation Failure) [PSYoungGen: 1514K-&gt;490K(1536K)] 1546K-&gt;797K(30208K), 0.0014763 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.154: [GC (Allocation Failure) [PSYoungGen: 1466K-&gt;490K(1536K)] 1773K-&gt;1064K(30208K), 0.0021920 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.179: [GC (Allocation Failure) [PSYoungGen: 1514K-&gt;490K(1536K)] 2088K-&gt;1224K(30208K), 0.0014370 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.212: [GC (Allocation Failure) [PSYoungGen: 1514K-&gt;490K(1536K)] 2248K-&gt;1534K(30208K), 0.0013529 secs] [Times: user&#x3D;0.01 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">0.257: [GC (Allocation Failure) [PSYoungGen: 1513K-&gt;490K(1536K)] 2556K-&gt;1664K(30208K), 0.0082179 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs]</span><br><span class="line">1.957: [GC (Allocation Failure) [PSYoungGen: 769K-&gt;384K(1536K)] 28567K-&gt;28448K(30208K), 0.0016967 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br><span class="line">1.959: [Full GC (Ergonomics) [PSYoungGen: 384K-&gt;0K(1536K)] [ParOldGen: 28064K-&gt;11941K(28672K)] 28448K-&gt;11941K(30208K), [Metaspace: 3382K-&gt;3382K(1056768K)], 0.0063741 secs] [Times: user&#x3D;0.02 sys&#x3D;0.00, real&#x3D;0.01 secs]</span><br><span class="line">3.621: [GC (Allocation Failure) [PSYoungGen: 20K-&gt;32K(1536K)] 28346K-&gt;28357K(30208K), 0.0012428 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs]</span><br><span class="line">3.622: [Full GC (Ergonomics) [PSYoungGen: 32K-&gt;0K(1536K)] [ParOldGen: 28325K-&gt;11936K(28672K)] 28357K-&gt;11936K(30208K), [Metaspace: 3386K-&gt;3386K(1056768K)], 0.0038742 secs] [Times: user&#x3D;0.01 sys&#x3D;0.00, real&#x3D;0.00 secs]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> jvm </tag>
            
            <tag> 说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产生线程死锁的原因和处理方式</title>
      <link href="posts/25138.html"/>
      <url>posts/25138.html</url>
      
        <content type="html"><![CDATA[<h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><blockquote><p>简单的说：线程1 想要去拿一个由 线程2 持有的锁，由于synchronized 的锁是互斥锁，某一时刻只能被一个线程所持有，所以线程1 就拿不到锁。</p></blockquote><p><img src="/posts/25138/1.jpeg" alt="死锁"></p><h2 id="死锁原因"><a href="#死锁原因" class="headerlink" title="死锁原因"></a>死锁原因</h2><p>是指<code>两个</code>或<code>两个以上</code>的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。<br>原因如下:</p><span id="more"></span><ol><li>因为系统资源不足。</li><li>进程运行推进的顺序不合适，这种产生的最多。</li><li>资源分配不当。</li></ol><p>多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放，而该资源又被其他线程锁定，从而导致每一个线程都得等其它线程释放其锁定的资源，造成了所有线程都无法正常结束。</p><p>因为多线程访问共享资源，由于访问的顺序不当所造成的，通常是一个线程锁定了一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在等待，而无法执行的情况。</p><p>产生背景: 在多线程环境下，争抢同是争抢对方资源(锁)就会产生该问题，即产生死锁。</p><h3 id="java-死锁产生的四个必要条件"><a href="#java-死锁产生的四个必要条件" class="headerlink" title="java 死锁产生的四个必要条件"></a>java 死锁产生的四个必要条件</h3><ol><li>互斥使用，即当资源被一个线程使用(占有)时，别的线程不能使用</li><li>不可抢占，资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放。</li><li>请求和保持，即当资源请求者在请求其他的资源的同时保持对原有资源的占有。</li><li>循环等待，即存在一个等待队列：P1占有P2的资源，P2占有P3的资源，P3占有P1的资源。这样就形成了一个等待环路。</li></ol><h3 id="举列说明场景"><a href="#举列说明场景" class="headerlink" title="举列说明场景"></a>举列说明场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncDeadLock</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Object locka = <span class="keyword">new</span> Object();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Object lockb = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> SyncDeadLock().deadLock();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (locka) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 拿到 lock-A!&quot;</span>);</span><br><span class="line">          Thread.sleep(<span class="number">500</span>);</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 偿试获取 lock-B!&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lockb) &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已获得 lock-B!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;thread1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (lockb) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 拿到 lock-B!&quot;</span>);</span><br><span class="line">          Thread.sleep(<span class="number">500</span>);</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 偿试获取 lock-A!&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (locka) &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已获得 lock-A!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;thread2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    thread1.start();</span><br><span class="line">    thread2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thread1 拿到 lock-A!</span><br><span class="line">thread2 拿到 lock-B!</span><br><span class="line">thread1 睡眠 500ms 后续继执行...!</span><br><span class="line">thread1 偿试获取 lock-B!</span><br><span class="line">thread2 睡眠 500ms 后续继执行...!</span><br><span class="line">thread2 偿试获取 lock-A!</span><br></pre></td></tr></table></figure><h3 id="帮助理解"><a href="#帮助理解" class="headerlink" title="帮助理解"></a>帮助理解</h3><p>地上放着两个桶泡面，一个老坛酸菜，一个小鸡炖磨茹。两个人一个产品，一个测试，同时出发去抢老坛酸菜和小鸡炖磨茹，产品老坛酸菜，测试拿到小鸡炖磨茹，同一时刻，产品伸要去拽测试怀里的小鸡炖磨茹，测试伸手去拽产品的老坛酸菜，两个僵持不下，就死在那了，叫死锁。如果没有开发将他们各打一顿解救出来，它们奖无法推进下去。</p><p>死锁是因为多线程访问共享资源，由于访问的顺序不当所造成的，通常是一个线程锁定了一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在等待，而无法执行的情况。</p><h2 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h2><p>如果只使用一个锁就不会有死锁的问题，不过复杂场景下不太理实。</p><h3 id="以确定的顺序获得锁"><a href="#以确定的顺序获得锁" class="headerlink" title="以确定的顺序获得锁"></a>以确定的顺序获得锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程A ---&gt; 锁定 A  ----&gt; 偿试锁定 B</span><br><span class="line">线程B ---&gt; 锁定 A  ----&gt; 偿试锁定 B</span><br><span class="line">这样就不会发生死锁</span><br></pre></td></tr></table></figure><h3 id="超时放弃"><a href="#超时放弃" class="headerlink" title="超时放弃"></a>超时放弃</h3><p>Lock 接口提供了<code>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</code>方法，该方法可以按照固定时长等待锁，因此线程可以在获取锁超时以后，主动释放之前已经获得的所有的锁。通过这种方式，也可以很有效地避免死锁。</p><h3 id="信号量控制"><a href="#信号量控制" class="headerlink" title="信号量控制"></a>信号量控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 信号量控制，解决死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnLockTest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore a1 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore a2 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      LockAa la = <span class="keyword">new</span> LockAa();</span><br><span class="line">      <span class="keyword">new</span> Thread(la).start();</span><br><span class="line">      LockBb lb = <span class="keyword">new</span> LockBb();</span><br><span class="line">      <span class="keyword">new</span> Thread(lb).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockAa</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UnLockTest.a1.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj1&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (UnLockTest.a2.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj2&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// do something</span></span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockA 锁 obj2 失败&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockA 锁 obj1 失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            UnLockTest.a1.release(); <span class="comment">// 释放</span></span><br><span class="line">            UnLockTest.a2.release();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">// 马上进行尝试，现实情况下do something是不确定的</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockBb</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UnLockTest.a2.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj2&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (UnLockTest.a1.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj1&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// do something</span></span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockB 锁 obj1 失败&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockB 锁 obj2 失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            UnLockTest.a1.release(); <span class="comment">// 释放</span></span><br><span class="line">            UnLockTest.a2.release();</span><br><span class="line">            Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">// 这里只是为了演示，所以tryAcquire只用1秒，而且B要给A让出能执行的时间，否则两个永远是死锁</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sun Oct 10 12:15:25 CST 2018 LockA 锁住 obj1</span><br><span class="line">Sun Oct 10 12:15:25 CST 2018 LockA 锁住 obj2</span><br><span class="line">Sun Oct 10 12:15:43 CST 2018 LockB 锁住 obj2</span><br><span class="line">Sun Oct 10 12:15:43 CST 2018 LockB 锁住 obj1</span><br><span class="line">Sun Oct 10 12:16:26 CST 2018 LockA 锁住 obj1</span><br><span class="line">Sun Oct 10 12:16:26 CST 2018 LockA 锁住 obj2</span><br><span class="line">Sun Oct 10 12:16:53 CST 2018 LockB 锁住 obj2</span><br><span class="line">Sun Oct 10 12:16:53 CST 2018 LockB 锁住 obj1</span><br><span class="line">Sun Oct 10 12:17:27 CST 2018 LockA 锁住 obj1</span><br><span class="line">Sun Oct 10 12:17:27 CST 2018 LockA 锁住 obj2</span><br><span class="line">Sun Oct 10 12:18:03 CST 2018 LockB 锁住 obj2</span><br><span class="line">Sun Oct 10 12:18:03 CST 2018 LockB 锁住 obj1</span><br><span class="line">Sun Oct 10 12:18:28 CST 2018 LockA 锁住 obj1</span><br><span class="line">Sun Oct 10 12:18:28 CST 2018 LockA 锁住 obj2</span><br><span class="line">Sun Oct 10 12:19:13 CST 2018 LockB 锁住 obj2</span><br><span class="line">Sun Oct 10 12:19:13 CST 2018 LockB 锁住 obj1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你为什么学不会lambda</title>
      <link href="posts/59349.html"/>
      <url>posts/59349.html</url>
      
        <content type="html"><![CDATA[<p>这个一篇对学习 Lambda 表达式进行解惑的文章，主要是总结了自己在学习 Lambda 表达式时候的一些理解不了的坑进行总结。长篇大论和详细语法，自行谷歌，这里只说一些理解起来不顺的概念。</p><h3 id="重要事情说三遍"><a href="#重要事情说三遍" class="headerlink" title="重要事情说三遍"></a>重要事情说三遍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先 Lambda 表达式 ()-&gt;&#123; &#125; 是一种方法实现，并且在直接调用的时候才会执行。</span><br><span class="line">首先 Lambda 表达式 ()-&gt;&#123; &#125; 是一种方法实现，并且在直接调用的时候才会执行。</span><br><span class="line">首先 Lambda 表达式 ()-&gt;&#123; &#125; 是一种方法实现，并且在直接调用的时候才会执行。</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="1-什么是-gt"><a href="#1-什么是-gt" class="headerlink" title="1. 什么是 ()-&gt;{ }"></a>1. 什么是 ()-&gt;{ }</h3><p>理论造航母，程序就一行。<br>不提什么是函数式编程，用大白话，其实就是写了一个匿名实现，并且在需要使用这行匿名实现的时候调用了一下，才会直正去执行这个匿名实现方法。<br>Lambda 表达式，本质上是一种延迟加载执行。将预先写好的实现方法进行加载。到实际使用时，再执行。</p><h3 id="演示执行过程："><a href="#演示执行过程：" class="headerlink" title="演示执行过程："></a>演示执行过程：</h3><h4 id="1-声明一个-Lambda-表达式接口"><a href="#1-声明一个-Lambda-表达式接口" class="headerlink" title="1.声明一个 Lambda 表达式接口"></a>1.声明一个 Lambda 表达式接口</h4><h4 id="2-加载一下匿名实现方法"><a href="#2-加载一下匿名实现方法" class="headerlink" title="2.加载一下匿名实现方法"></a>2.加载一下匿名实现方法</h4><h4 id="3-执行一下"><a href="#3-执行一下" class="headerlink" title="3.执行一下"></a>3.执行一下</h4><ol><li>新建一个类，声明一个 Lambda 表达式接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunctional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//只允许存在一个 public abstract 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新建一个测试类，加载一下匿名函数实现<br>用来测试 Lambda 表达式的执行顺序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReference</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 一般匿名写法，这里仅是声明了这个匿名写法，但是并没有执行任务操作</span></span><br><span class="line">        testRef((test) -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;3. lambda 接口调用方法时传入的参数: %s&quot;</span>, test));</span><br><span class="line">            System.out.println(<span class="string">&quot;4.bbb&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> test;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testRef</span><span class="params">(MyFunctional myFunctional)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;1. 到这一步，lambda 表达式还没有执行&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. 传入一个参数&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 真正的去调用 lambda 表达式的实现方法</span></span><br><span class="line">        myFunctional.say(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>执行结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 到这一步，lambda 表达式还没有执行</span><br><span class="line"><span class="number">2.</span> 传入一个参数</span><br><span class="line"><span class="number">3.</span> lambda 接口调用方法时传入的参数: aaaa</span><br><span class="line"><span class="number">4.</span> bbb</span><br></pre></td></tr></table></figure></li></ol><p>用 IDEA 到 Functional 接口中点一下，可以看到，直接跳到 MethodReference 这个测试为的这一行 lambda 表达式中，也就是说，当有一个 lambda 表达式实现了 Functional 接口时，并通过以当前 Functional 为形参的方法传入时，可以被调用到。<br><img src="https://upload-images.jianshu.io/upload_images/6164010-9e0fc62a80bb14ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK11介绍</title>
      <link href="posts/8ba6d6e.html"/>
      <url>posts/8ba6d6e.html</url>
      
        <content type="html"><![CDATA[<h2 id="JDK-11-特性"><a href="#JDK-11-特性" class="headerlink" title="JDK 11 特性"></a>JDK 11 特性</h2><p>做为java开发JDK的更新内容是必须要关注的，这里我把JDK11的相关的JEP(JDK Enhancement Proposals)，汇总并偿试了一下。<br>分享一下相关的改进点。<br>历史所有JEP：<a href="http://openjdk.java.net/jeps/0">http://openjdk.java.net/jeps/0</a></p><h3 id="JDK11发版-JEP-汇总"><a href="#JDK11发版-JEP-汇总" class="headerlink" title="JDK11发版 JEP 汇总"></a>JDK11发版 JEP 汇总</h3><p>JDK11 于2018年9月25日发布正式版，其中官方给出的改进JEP如下：</p><p><a href="http://openjdk.java.net/jeps/181">JEP-181 嵌套类可见性控制</a><br><a href="http://openjdk.java.net/jeps/309">JEP-309 动态类文件常量</a><br><a href="http://openjdk.java.net/jeps/315">JEP-315 改进 Aarch64 Intrinsics</a><br><a href="http://openjdk.java.net/jeps/318">JEP-318 Epsilon–一个无操作的垃圾收集器</a><br><a href="http://openjdk.java.net/jeps/320">JEP-320 删除 Java EE 和 CORBA 模块</a><br><a href="http://openjdk.java.net/jeps/321">JEP-321 HttpClient</a><br><a href="http://openjdk.java.net/jeps/323">JEP-323 用于 Lambda 参数的局部变量语法</a><br><a href="http://openjdk.java.net/jeps/324">JEP-324 Curve25519 和 Curve448 算法的密钥协议</a><br><a href="http://openjdk.java.net/jeps/327">JEP-327 Unicode 10</a><br><a href="http://openjdk.java.net/jeps/328">JEP-328 Flight Recorder(飞行记录器)</a><br><a href="http://openjdk.java.net/jeps/329">JEP-329 haCha20 和 Poly1305 加密算法支持</a><br><a href="http://openjdk.java.net/jeps/330">JEP-330 Launch Single-File Source-Code Programs（启动单一文件的源代码程序）</a><br><a href="http://openjdk.java.net/jeps/331">JEP-331 低开销的 Heap Profiling</a><br><a href="http://openjdk.java.net/jeps/332">JEP-332 TLS 1.3支持</a><br><a href="http://openjdk.java.net/jeps/333">JEP-333 ZGC: A Scalable Low-Latency Garbage Collector（可伸缩低延迟垃圾收集器）</a><br><a href="http://openjdk.java.net/jeps/335">JEP-335 弃用 Nashorn JavaScript 引擎</a><br><a href="http://openjdk.java.net/jeps/336">JEP-336 弃用 Pack200 工具和 API</a></p><p>有些泛及底层有些泛及开发的方方面面，后面对这些特性进行逐说明，以及使用JDK11开发我们需要注意的事项。</p><h3 id="JEP-181-嵌套类可见性控制"><a href="#JEP-181-嵌套类可见性控制" class="headerlink" title="JEP-181 嵌套类可见性控制"></a>JEP-181 嵌套类可见性控制</h3><p>这一提案是为了增强自Java 1.1即引入的嵌套类设计。<br>嵌套类主要有两个用处。<br>第一是因为其只使用于很短的代码块中，在Java8之前，这主要依靠实现一个匿名类来完成。Java8之后，这种用法可以被lambda表达取代。<br>另一种用法是因为需要访问另一个类的内部。嵌套类具有和成员变量以及成员方法相同的访问权限。<br>JEP181主要是为了解决JVM级别的权限与源码权限不一致的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JEP181</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Nest1</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> varNest1;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Nest2 nest2 = <span class="keyword">new</span> Nest2();</span><br><span class="line">            <span class="comment">//这里没问题</span></span><br><span class="line">            nest2.varNest2 = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">final</span> Field f2 = Nest2.class.getDeclaredField(<span class="string">&quot;varNest2&quot;</span>);</span><br><span class="line">            <span class="comment">//这里在java8环境下会报错，在java11中是没问题的</span></span><br><span class="line">            f2.setInt(nest2, <span class="number">2</span>);</span><br><span class="line">            System.out.println(nest2.varNest2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Nest2</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> varNest2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Nest1().f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br>java11:   2</p><p>Java8:</p><blockquote><p>Exception in thread &quot;main&quot; java.lang.IllegalAccessException: Class JEP181$Nest1 can not access a member of class JEP181$Nest2 with modifiers &quot;private&quot;</p></blockquote><p>主要问题出在<code>f2.setInt(nest2,2)</code>，这里由于在<code>Nest2</code>中是private的，所以无法直接set值。但是却又可以直接调用<code>nest2.var2=2</code>来设置该值，因为嵌套类是可以访问别的嵌套类的私有属性的。Java 11修复了这个令人困惑的现象。</p><h3 id="JEP-309-动态文件常量"><a href="#JEP-309-动态文件常量" class="headerlink" title="JEP-309 动态文件常量"></a>JEP-309 动态文件常量</h3><p>这其实是一个联动一个比较早的改近。Java SE 7 已将 invokedynamic 引入了其指令集。Java 开发人员通常不会注意到此功能，它隐藏在 Java 字节码中。<br>Java的类型文件格式将被拓展，支持一种新的常量池格式：CONSTANT_Dynamic，加载CONSTANT_Dynamic会将创建委托给bootstrap方法。</p><p><strong>目标</strong>： 其目标是降低开发新形式的可实现类文件约束带来的成本和干扰。</p><h3 id="JEP-315-改进-Aarch64-Intrinsics"><a href="#JEP-315-改进-Aarch64-Intrinsics" class="headerlink" title="JEP-315 改进 Aarch64 Intrinsics"></a>JEP-315 改进 Aarch64 Intrinsics</h3><p>优化了现有的字符串和数组内部函数，并在<strong>Arm64</strong>或<strong>Aarch64</strong>处理器上为<strong>Math.sin()</strong> ，**Math.cos()<strong>和</strong>Match.log()**实现了新的内部函数。这意味着更好的性能。</p><p>内部函数用于利用特定于CPU体系结构的汇编代码来提高性能。</p><h3 id="JEP-318-Epsilon–一个无操作的垃圾收集器"><a href="#JEP-318-Epsilon–一个无操作的垃圾收集器" class="headerlink" title="JEP-318 Epsilon–一个无操作的垃圾收集器"></a>JEP-318 Epsilon–一个无操作的垃圾收集器</h3><p>开发一个处理内存分配但不实现任何实际内存回收机制的 GC。 一旦可用的 Java 堆耗尽，JVM 将关闭。</p><p>它为以下内容分配内存：</p><p>性能测试。<br>内存压力测试。<br>VM 接口测试。<br>寿命极短的工作。<br>最后一滴延迟改进。（Last-drop latency improvements.）<br>最终吞吐量提高。<br>现在，Elipson 仅适用于测试环境。这将导致生产中的 OutOfMemoryError 并使应用程序崩溃。<br>Elipson 的好处是没有内存清除开销。因此，它将给出准确的性能测试结果，我们不再可以通过 GC 来停止它。</p><p><strong>注意：这是一项实验性功能。</strong></p><h3 id="JEP-320-删除-Java-EE-和-CORBA-模块"><a href="#JEP-320-删除-Java-EE-和-CORBA-模块" class="headerlink" title="JEP-320 删除 Java EE 和 CORBA 模块"></a>JEP-320 删除 Java EE 和 CORBA 模块</h3><p>Java 9 中已经弃用了这些模块，现在将它们完全删除。<br>这个的话，主要还是Spring 的原因。JavaEE 比较重，开发配置特别繁锁，Spring的轻量化是事实的标准，更加简单的使用，导致像 EJB 这种重型框架没有市场，删除是必然的。</p><p>下面的包被删除：</p><blockquote><p>java.xml.ws，java.xml.bind，java.activation，java.xml.ws.annotation，java.corba，java.transaction，java.se.ee，jdk.xml.ws，jdk.xml.bind</p></blockquote><h3 id="JEP-321-HttpClient"><a href="#JEP-321-HttpClient" class="headerlink" title="JEP 321 HttpClient"></a>JEP 321 HttpClient</h3><p>Java 11 标准化了 Http CLient API。其实就是重写了 HttpClient 内部逻辑 ，接口没变。</p><p>目前版本已经支持HTTP1.1、HTTP2、websocket等常用的基于http的协议，并支持了了同步、异步、响应式等交互方式。当前版本的实现还是比较简单，没有对于常用restful、content-type的封装支持。</p><h3 id="JEP-323-用于-Lambda-参数的局部变量语法"><a href="#JEP-323-用于-Lambda-参数的局部变量语法" class="headerlink" title="JEP-323 用于 Lambda 参数的局部变量语法"></a>JEP-323 用于 Lambda 参数的局部变量语法</h3><p>这个算是一堆 JEP 中唯一在语法特性的改进。<br>Java 10 中引入了<strong>局部变量类型推断 var</strong>，示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>java10中需要显示的声明 var 在 lambda 中的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;嗯哼&quot;</span>, <span class="string">&quot;啊哈&quot;</span>, <span class="string">&quot;哦吼&quot;</span>);</span><br><span class="line">String result = list.stream()</span><br><span class="line">        .map((<span class="keyword">var</span> x) -&gt; x.toUpperCase())</span><br><span class="line">        .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">System.out.println(result2);</span><br></pre></td></tr></table></figure><p>JEP 323 允许 <code>var</code> 用于声明隐式类型的 Lambda 表达式的形式参数，Java8 中也是允许在，只是在Java10中删除了这个特性，Java11中又把这个特性拿回来了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;嗯哼&quot;</span>, <span class="string">&quot;啊哈&quot;</span>, <span class="string">&quot;哦吼&quot;</span>);</span><br><span class="line">String result = list.stream()</span><br><span class="line">        .map(x -&gt; x.toUpperCase())</span><br><span class="line">        .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="JEP-324-Curve25519-和-Curve448-算法的密钥协议"><a href="#JEP-324-Curve25519-和-Curve448-算法的密钥协议" class="headerlink" title="JEP-324 Curve25519 和 Curve448 算法的密钥协议"></a>JEP-324 Curve25519 和 Curve448 算法的密钥协议</h3><p>密码学相关项目，它将现有的椭圆曲线<strong>Diffie-Hellman（ECDH）</strong>方案替换为<a href="https://en.wikipedia.org/wiki/Curve25519">Curve25519</a>和<a href="https://en.wikipedia.org/wiki/Curve448">Curve448</a>算法，这是<a href="https://tools.ietf.org/html/rfc7748">RFC 7748中</a>定义的关键协议方案。</p><p>GenerateKeyPairs.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mkyong.java11.jep324;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.NamedParameterSpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateKeyPairs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidAlgorithmParameterException </span>&#123;</span><br><span class="line">        KeyPairGenerator kpg = KeyPairGenerator.getInstance(<span class="string">&quot;XDH&quot;</span>);</span><br><span class="line">        NamedParameterSpec paramSpec = <span class="keyword">new</span> NamedParameterSpec(<span class="string">&quot;X25519&quot;</span>);</span><br><span class="line">        kpg.initialize(paramSpec); </span><br><span class="line">        <span class="comment">// equivalent to kpg.initialize(255)</span></span><br><span class="line">        <span class="comment">// alternatively: kpg = KeyPairGenerator.getInstance(&quot;X25519&quot;)</span></span><br><span class="line">        KeyPair kp = kpg.generateKeyPair();</span><br><span class="line">        System.out.println(<span class="string">&quot;--- Public Key ---&quot;</span>);</span><br><span class="line">        PublicKey publicKey = kp.getPublic();</span><br><span class="line">        System.out.println(publicKey.getAlgorithm());   <span class="comment">// XDH</span></span><br><span class="line">        System.out.println(publicKey.getFormat());      <span class="comment">// X.509</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// save this public key</span></span><br><span class="line">        <span class="keyword">byte</span>[] pubKey = publicKey.getEncoded();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--- Private Key ---&quot;</span>);</span><br><span class="line">        PrivateKey privateKey = kp.getPrivate(); </span><br><span class="line">        System.out.println(privateKey.getAlgorithm());  <span class="comment">// XDH</span></span><br><span class="line">        System.out.println(privateKey.getFormat());     <span class="comment">// PKCS#8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// save this private key</span></span><br><span class="line">        <span class="keyword">byte</span>[] priKey = privateKey.getEncoded();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- Public Key ---</span><br><span class="line">XDH</span><br><span class="line">X.<span class="number">509</span></span><br><span class="line">---</span><br><span class="line">--- Private Key ---</span><br><span class="line">XDH</span><br><span class="line">PKCS#8</span><br><span class="line">[B@<span class="number">42e26948</span></span><br></pre></td></tr></table></figure><p><strong>进一步阅读</strong><br>有关更多示例，请参考<a href="https://openjdk.java.net/jeps/324">JEP 324</a>和<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#keypairgenerator-algorithms">Oracle – Java安全标准算法名称</a>。</p><h3 id="JEP-327-Unicode-10"><a href="#JEP-327-Unicode-10" class="headerlink" title="JEP-327 Unicode 10"></a>JEP-327 Unicode 10</h3><p>Unicode 10.0增加了<strong>8,518</strong>个字符，总共136,690个字符。这些增加包括4个新脚本，总共139个脚本，以及<strong>56</strong>个新表情符号字符。</p><p>看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintUnicode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String codepoint = <span class="string">&quot;U+1F92A&quot;</span>;</span><br><span class="line">        System.out.println(convertCodePoints(codepoint));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java, UTF-16</span></span><br><span class="line">    <span class="comment">// Convert code point to unicode</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span>[] convertCodePoints(String codePoint) &#123;</span><br><span class="line">        Integer i = Integer.valueOf(codePoint.substring(<span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">char</span>[] chars = Character.toChars(i);</span><br><span class="line">        <span class="keyword">return</span> chars;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>🤪</p><h3 id="JEP-328-Flight-Recorder-飞行记录器"><a href="#JEP-328-Flight-Recorder-飞行记录器" class="headerlink" title="JEP-328 Flight Recorder(飞行记录器)"></a>JEP-328 Flight Recorder(飞行记录器)</h3><p>Flight Recorder 以前是 Oracle JDK 中的商业附加组件，现已开放源代码。</p><p>JFR 是一种分析工具，用于从正在运行的 Java 应用程序中收集诊断信息和分析数据。它的性能开销可以忽略不计，通常低于 1％。因此，它可以用于生产应用。</p><p>默认情况下，JVM 禁用了 JFR，要启动 JFR，必须使用 -XX:+FlightRecorder 选项启动。例如，我们要启动名为 MyApp 的应用程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX：+ UnlockCommercialFeatures -XX：+ FlightRecorder MyApp</span><br></pre></td></tr></table></figure><h3 id="JEP-329-chaCha20-和-Poly1305-加密算法支持"><a href="#JEP-329-chaCha20-和-Poly1305-加密算法支持" class="headerlink" title="JEP-329 chaCha20 和 Poly1305 加密算法支持"></a>JEP-329 chaCha20 和 Poly1305 加密算法支持</h3><p>Java 11 提供了 ChaCha20 和 ChaCha20-Poly1305 密码实现。这些算法将在 SunJCE 提供程序中实现。<br>实现 RFC 7539 中指定的 ChaCha20 和 ChaCha20-Poly1305 密码。ChaCha20 是一种相对较新的流密码，可以替代旧的、不安全的 RC4 流密码。</p><p>chacha20-Poly1305是Google所采用的一种新式加密算法，性能强大，在CPU为的ARM平台上尤为显著（ARM v8前效果较明显），在同等配置的手机中表现是AES的4倍（ARM v8之后加入了AES指令，所以在这些平台上的设备，AES方式反而比chacha20-Poly1305方式更快，性能更好），可减少加密解密所产生的数据量进而可以改善用户体验，减少等待时间，节省电池寿命等。</p><h3 id="JPE330-启动单一文件的源代码程序"><a href="#JPE330-启动单一文件的源代码程序" class="headerlink" title="JPE330 启动单一文件的源代码程序"></a>JPE330 启动单一文件的源代码程序</h3><p>这个功能初学阶比较有用，不必再关心先<code>java</code> 再 <code>javac</code> 这样的两步操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行：</p><p>Java HelloWorld.java</p><h3 id="JEP-331-低开销的-Heap-Profiling"><a href="#JEP-331-低开销的-Heap-Profiling" class="headerlink" title="JEP-331 低开销的 Heap Profiling"></a>JEP-331 低开销的 Heap Profiling</h3><p>Java 虚拟机工具接口（JVM TI）是在 Java SE 5 引入的，它可以监控 JVM 内部事件的执行，也可以控制 JVM 的某些行为，可以实现调试、监控、线程分析、覆盖率分析工具等。</p><p>该 JEP 在 JVM TI 中添加了新的低开销的堆分析 API。</p><h3 id="JEP-332-TLS-1-3支持"><a href="#JEP-332-TLS-1-3支持" class="headerlink" title="JEP-332 TLS 1.3支持"></a>JEP-332 TLS 1.3支持</h3><p><strong>TLS: 传输层安全性</strong></p><p>Java 11 支持 <strong>RFC 8446</strong> 传输层安全性（TLS）1.3协议。但是，并非所有TLS 1.3功能都已实现，有关详细信息。</p><p>Java 安全套接字扩展（JSSE）+ TLS 1.3 示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocket;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"> </span><br><span class="line">SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();</span><br><span class="line">socket = (SSLSocket) factory.createSocket(<span class="string">&quot;google.com&quot;</span>, <span class="number">443</span>);</span><br><span class="line"> </span><br><span class="line">socket.setEnabledProtocols(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;TLSv1.3&quot;</span>&#125;);</span><br><span class="line">socket.setEnabledCipherSuites(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;TLS_AES_128_GCM_SHA256&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="JEP-335-弃用-Nashorn-JavaScript-引擎"><a href="#JEP-335-弃用-Nashorn-JavaScript-引擎" class="headerlink" title="JEP 335: 弃用 Nashorn JavaScript 引擎"></a>JEP 335: 弃用 Nashorn JavaScript 引擎</h3><p>Nashorn JavaScript脚本引擎和<code>jjs</code>工具已被弃用，将来的发行版中可能会删除它。<br>ECMAScript的语言结构变化太快，Oracle发现，维护Nashorn JavaScript引擎变得非常困难。</p><p>Nashorn最初是在<strong>JDK 8(JEP174中引入)<strong>中引入的，用于取代</strong>Rhino脚本引擎(java1.6引入的脚本引擎)<strong>。当其发布时，Nashorn是ECMAScript-262 5.1的完整实现，增强了Java和JavaScript的兼容性。最近还增加了新的ECMAScript 6（ES6）特性。借助Nashorn，开发人员可以从JavaScript调用Java代码，也可以从Java代码调用JavaScript函数。Nashorn可以作为Java应用程序的嵌入式解释器，提供使用Nashorn命令行工具</strong>jjs</strong>从命令行运行JavaScript的能力。</p><h3 id="JEP-336-弃用-Pack200、unpack200-工具和-API"><a href="#JEP-336-弃用-Pack200、unpack200-工具和-API" class="headerlink" title="JEP 336: 弃用 Pack200、unpack200 工具和 API"></a>JEP 336: 弃用 Pack200、unpack200 工具和 API</h3><p>不推荐 pack200 和 unpack200 工具以及软件包中的 Pack200 API java.util.jar，并且可能会在将来的版本中删除。<br>Java 14 JEP 367 中删除了 Pack200 工具和 API 。</p><p>Pack200，这个工具能对普通的jar文件进行高效压缩。其实现原理是根据Java类特有的结构，合并常数池，去掉无用信息等来实现对java类的高效压缩。<br>由于是专门对Java类进行压缩的，所以对普通文件的压缩和普通压缩软件没有什么两样，但是对于Jar  文件却能轻易达到10-40%的压缩率。<br>这在Java应用部署中很有用，尤其对于移动Java计算，能够大大减小代码下载量。</p><p>废弃的原因:</p><ul><li>Java 9 中引入了新的压缩方案 <strong>JMOD</strong></li><li>Pack200 本身复杂，维护复杂</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大至上就是这么多了，小伙伴们可以自行动手玩一把。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk </tag>
            
            <tag> jdk11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker run 和 start 的区别</title>
      <link href="posts/22475.html"/>
      <url>posts/22475.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-docker-run"><a href="#1-docker-run" class="headerlink" title="1.docker run"></a>1.docker run</h2><p>docker run 只在第一次运行时使用，将镜像放到容器中，以后再次启动这个容器时，只需要使用命令docker start 即可。<br>docker run相当于执行了两步操作：将镜像放入容器中（docker create）,然后将容器启动，使之变成运行时容器（docker start）。</p><h2 id="2-docker-start"><a href="#2-docker-start" class="headerlink" title="2.docker start"></a>2.docker start</h2><p>docker start的作用是，重新启动已存在的镜像。也就是说，如果使用这个命令，我们必须事先知道这个容器的ID，或者这个容器的名字，我们可以使用docker ps找到这个容器的信息。</p><h3 id="3-查看所有容器"><a href="#3-查看所有容器" class="headerlink" title="3.查看所有容器"></a>3.查看所有容器</h3><p>而要显示出所有容器，包括没有启动的，可以使用命令<br>docker ps -a</p><h3 id="4-重命名"><a href="#4-重命名" class="headerlink" title="4.重命名"></a>4.重命名</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename old_name new_name</span><br></pre></td></tr></table></figure><h3 id="5-启停"><a href="#5-启停" class="headerlink" title="5.启停"></a>5.启停</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker [stop]|[start] name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> run </tag>
            
            <tag> start </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 守护容器</title>
      <link href="posts/43e4c715.html"/>
      <url>posts/43e4c715.html</url>
      
        <content type="html"><![CDATA[<h2 id="docker-守护式容器"><a href="#docker-守护式容器" class="headerlink" title="docker 守护式容器"></a>docker 守护式容器</h2><p>守护式容器，是可以长时间运行的容器：</p><p>1.能够长期运行，没有交互式会话<br>2.适合运行应用程序和服务</p><p>命令：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d 镜像名[COMMAND][arg...]</span></span><br></pre></td></tr></table></figure><p>重点是 -d -d -d</p><h2 id="1-启动守护式容器"><a href="#1-启动守护式容器" class="headerlink" title="1.启动守护式容器"></a>1.启动守护式容器</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --name dc1 -d ubuntu /bin/sh -c <span class="string">&quot;while true ;do echo hello world ; sleep 1 ; done&quot;</span></span></span><br><span class="line"><span class="comment">#非守护式，打印 hello world后就退出</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> ubuntu:15.10 /bin/<span class="built_in">echo</span> <span class="string">&quot;Hello world&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line">docker stats</span><br></pre></td></tr></table></figure><h2 id="2-再次进入守护式容器-attach"><a href="#2-再次进入守护式容器-attach" class="headerlink" title="2.再次进入守护式容器 attach"></a>2.再次进入守护式容器 attach</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker attach [id | name]        //查看刚才用 ctrl + P/Q 退出的命令</span><br><span class="line">docker attach a54w1a26        //容器还在运行</span><br><span class="line">exit                                //退出正在运行的容器</span><br><span class="line">docker ps                        //这时候就真没了</span><br></pre></td></tr></table></figure><h2 id="3-直接启动守护式容器"><a href="#3-直接启动守护式容器" class="headerlink" title="3.直接启动守护式容器"></a>3.直接启动守护式容器</h2><p>实际上不过是让 docker 在后台运行，包括上面的快捷键退出，说穿了也就是让 docker 运行在后台，只是这种行为的名字得高大上。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --name dc1 ubuntu /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span></span><br><span class="line"><span class="comment">#查看所有容器，包括已经停卡运行的</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h2 id="4-停止守护容器"><a href="#4-停止守护容器" class="headerlink" title="4.停止守护容器"></a>4.停止守护容器</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps                        //查看 CONTAINER ID</span><br><span class="line">docker stop <span class="number">1503</span>ea54fa0f        //向容器发送信号</span><br><span class="line">docker kill                        //直接杀进程</span><br></pre></td></tr></table></figure><p>批量册除已经停止运行的容器<br>docker rm $(docker ps -q -f status=exited)</p><h3 id="5-使用帮助"><a href="#5-使用帮助" class="headerlink" title="5.使用帮助"></a>5.使用帮助</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">man docker-<span class="keyword">run</span></span><br><span class="line"><span class="bash">man docker-logs</span></span><br><span class="line">man docker-top</span><br><span class="line">man docker-exec</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下 iterm2实现 clone session</title>
      <link href="posts/922827f1.html"/>
      <url>posts/922827f1.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近在使用iterm2的时候，需要clone多个session，然后发现每次登陆都需要重新输入一个动态验证码，非常麻烦，又不想使用 SecureCRT，所以就研究了一下iterm2是怎么实现clone不需要重复输入的动态验证码的。<br>公司使用跳板机登陆，很从小伙伴应该也都是使用跳板机登陆，SecureCRT就可以每次Clone Session 不需要输入。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.ssh/config</span><br></pre></td></tr></table></figure><p>在文件中添加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">ServerAliveInterval 30</span><br><span class="line">ControlMaster auto</span><br><span class="line">ControlPath ~/.ssh/master-%r@%h:%p</span><br><span class="line">ControlPersist yes</span><br></pre></td></tr></table></figure><p>下次打开后，就可以复用session，不需要重复的输入动态验证码。</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> iterm2 </category>
          
          <category> iterm2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> uniux </tag>
            
            <tag> iterm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 基本操作</title>
      <link href="posts/1081.html"/>
      <url>posts/1081.html</url>
      
        <content type="html"><![CDATA[<p>最近在研究使用 docker 进行微服务改造，总结了一下常用的命令，docker 这东西，单个用简单，整体配合 k8s 和 spring cloud 坑还是不少，一个一个解决掉以后，他的易用性和高可用的特性确实很棒。</p><p>如果是业务日志需要输出到宿主机上，可以使用 -v 挂载。</p><h4 id="1-查看-docker-信息-info"><a href="#1-查看-docker-信息-info" class="headerlink" title="1.查看 docker 信息 info"></a>1.查看 docker 信息 info</h4><p>dorker info</p><h4 id="2-运行-docker-容器-run"><a href="#2-运行-docker-容器-run" class="headerlink" title="2.运行 docker 容器 run"></a>2.运行 docker 容器 run</h4><p>docker run IMAGE    //启动容器<br>docker run ubuntu echo &quot;en heng&quot;<br>这种命令运行完就退出了。</p><h4 id="3-启动交互式容器"><a href="#3-启动交互式容器" class="headerlink" title="3.启动交互式容器"></a>3.启动交互式容器</h4><p>docker run -it IMAGE    //交互式，即进入容器<br>docker run -i -t ubuntu /bin/bash    //进入容器<br>ps -ef<br>exit //退出</p><h4 id="4-查看容器-ps"><a href="#4-查看容器-ps" class="headerlink" title="4.查看容器 ps"></a>4.查看容器 ps</h4><p>docker ps [-a] [-l]<br>docker ps<br>docker ps -a        //-a 全部容器</p><p>CONTAINER ID        //docker为容器分配的id，即守护进程ID<br>NAME            //docker 自动为镜象创建的名称</p><h4 id="5-自定义容器名称-name"><a href="#5-自定义容器名称-name" class="headerlink" title="5.自定义容器名称 name"></a>5.自定义容器名称 name</h4><p>docker run --name=[自定义名称] -i -t ubuntu /bin/bash<br>docker run --name=container01 -i -t ubuntu /bin/bash</p><h4 id="6-重新启动停止的容器-start"><a href="#6-重新启动停止的容器-start" class="headerlink" title="6.重新启动停止的容器 start"></a>6.重新启动停止的容器 start</h4><p>docker start [-i] 容器ID<br>-i 交互模式<br>docker start  8cf94828c8e6<br>进入容器<br>docker exec -it 8cf94828c8e6 bash</p><h4 id="7-删除已经停止的容器"><a href="#7-删除已经停止的容器" class="headerlink" title="7.删除已经停止的容器"></a>7.删除已经停止的容器</h4><p>docker rm [容器id | 容器名]    //不能删除正在运行的容器</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-安装docker</title>
      <link href="posts/d1efa088.html"/>
      <url>posts/d1efa088.html</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS-安装docker"><a href="#CentOS-安装docker" class="headerlink" title="CentOS 安装docker"></a>CentOS 安装docker</h2><p>这个命令在 CentOS 环境下使用，在ARM架构下也不需要特殊处理。</p><h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><blockquote><p>curl <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a> -o /etc/yum.repos.d/docker-ce.repo</p></blockquote><h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><blockquote><p>yum install -y docker-ce docker-ce-cli containerd.io</p></blockquote><h3 id="开启docker服务"><a href="#开启docker服务" class="headerlink" title="开启docker服务"></a>开启docker服务</h3><blockquote><p>systemctl enable docker<br>systemctl start docker</p></blockquote><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><blockquote><p>docker ps</p></blockquote><h2 id="MacOS-安装docker"><a href="#MacOS-安装docker" class="headerlink" title="MacOS 安装docker"></a>MacOS 安装docker</h2><h3 id="brew-安装"><a href="#brew-安装" class="headerlink" title="brew 安装"></a>brew 安装</h3><p>那肯定是离不开 brew 的。</p><blockquote><p>brew install --cask --appdir=/Applications docker</p></blockquote><h3 id="官网下载安装"><a href="#官网下载安装" class="headerlink" title="官网下载安装"></a>官网下载安装</h3><p>如果习惯手动安装的话，到官方网站上下载<br><a href="https://docs.docker.com/desktop/mac/install/">https://docs.docker.com/desktop/mac/install/</a></p><p><img src="/posts/d1efa088/docker-macos%E5%AE%89%E8%A3%85.png" alt="docker-macos安装"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda Optional代替if-else</title>
      <link href="posts/f16a00f8.html"/>
      <url>posts/f16a00f8.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>函数式的编程可以极大的简化逻辑代码的编写，虽然是一种语法糖，但是好用就是好用。<br>Optional 这个功能可以用来防止null值给程序带来的异常，提供的API也可以用来简化逻辑代码的编码，简化if-else的编写。</p><h2 id="写法比较"><a href="#写法比较" class="headerlink" title="写法比较"></a>写法比较</h2><h3 id="常规代码写法"><a href="#常规代码写法" class="headerlink" title="常规代码写法"></a>常规代码写法</h3><p>一般写一个业务逻辑时，业务代码需要加很多判断，保证程序的健状性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  User user = userService.getUser();</span><br><span class="line">  <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">    String userName = user.getUserName();</span><br><span class="line">    <span class="keyword">if</span> (userName != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> userName.toUpperCase();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改进后"><a href="#改进后" class="headerlink" title="改进后"></a>改进后</h3><p>可以看到，改进后的写法，判空这种操作，直接交给Optional去操作。<br>解释下面的意思：</p><ol><li>Optional.ofNullable(user)，接收 user 这个数据，可以允许为null</li><li>null值是不会被 map 操作的，直接忽略</li><li>orElse，如果 user == null，才会进这个逻辑。<br>整个流程就等价于<code>改进前</code>的逻辑。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  User user = userService.getUser();</span><br><span class="line">  <span class="keyword">return</span> Optional.ofNullable(user)</span><br><span class="line">          .map(User::getUserName)</span><br><span class="line">          .map(String::toUpperCase)</span><br><span class="line">          .orElse(User::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单的if-else"><a href="#简单的if-else" class="headerlink" title="简单的if-else"></a>简单的if-else</h3><p>调整测试数<code>test</code>就可以看到不同的效果。<br>记住这个固定的<code>if-else</code>套路。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    String test = &quot;test123&quot;;</span></span><br><span class="line">    String test = <span class="keyword">null</span>;</span><br><span class="line">    String newValue = Optional</span><br><span class="line">            .ofNullable(test)</span><br><span class="line">            .orElse(<span class="string">&quot;newValue&quot;</span>);</span><br><span class="line">    System.out.println(newValue);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个示例多加了一个<code>filter</code>，相当于在if()的中插号里写复杂判断逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String test = <span class="string">&quot;test123&quot;</span>;</span><br><span class="line"><span class="comment">//    String test = &quot;test456&quot;;</span></span><br><span class="line">    String newValue = Optional</span><br><span class="line">            .ofNullable(test)</span><br><span class="line">            .filter(str-&gt; str.equals(<span class="string">&quot;test456&quot;</span>))</span><br><span class="line">            .orElse(<span class="string">&quot;newValue&quot;</span>);</span><br><span class="line">    System.out.println(newValue);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>等价<code>if-else</code>写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String test = <span class="string">&quot;test123&quot;</span>;</span><br><span class="line"><span class="comment">//    String test = &quot;test456&quot;;</span></span><br><span class="line">    <span class="keyword">if</span> (test != <span class="keyword">null</span> &amp;&amp; test.equals(<span class="string">&quot;test456&quot;</span>)) &#123;</span><br><span class="line">      System.out.println(test); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;newValue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="isPresent-使用"><a href="#isPresent-使用" class="headerlink" title="isPresent() 使用"></a>isPresent() 使用</h2><p>isPresent 返回boolean，直觉上应该用if-else来判断一下。但是回头想想，如果需要用if-else来判断，直接用if-else来写不完了，干嘛还使用Optional包一层，多此一举。</p><h3 id="反面示例"><a href="#反面示例" class="headerlink" title="反面示例"></a>反面示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">  Optional&lt;User&gt; u = Optional.ofNullable(user);</span><br><span class="line">  <span class="keyword">if</span>(!u.isPresent())&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> u.get().name();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正面示例"><a href="#正面示例" class="headerlink" title="正面示例"></a>正面示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Optional.ofNullable(user)</span><br><span class="line">                 .map(u -&gt; u.name)</span><br><span class="line">                 .orElse(<span class="string">&quot;Unknown&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在写复杂逻辑时，尽量简化代码，不要让代码太代阅读起来费劲，lambda表达式并不复杂，直正复杂不好读的是正则表达式，这种习惯了之后，写起来效率高，看起来也舒服。<br>即使不使用lambda表达式，在写代码时也要尽量规避返回<code>null</code>出去。防止代码由于<code>null</code>引发异常。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
            <tag> optional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 发送邮件</title>
      <link href="posts/606a5ad4.html"/>
      <url>posts/606a5ad4.html</url>
      
        <content type="html"><![CDATA[<p>最近重写一个邮件服务来给告警业服务用，做成一个内置的应用。直接使用 spring 的 javamail 来实现。<br>公司使用腾讯企业邮箱。<br>这个例子正常使用，可以直接套上使用。</p><h2 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h2><p>以下配置方式二选一</p><ol><li>代码方式</li><li>yml方式</li></ol><h3 id="代码方式"><a href="#代码方式" class="headerlink" title="代码方式"></a>代码方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.springmail.send;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.mail.MailProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/08/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mail&quot;, name = &quot;host&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSenderConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">//这个 properties 可以通过 yml 初始化</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MailProperties properties;</span><br><span class="line"></span><br><span class="line">  MailSenderConfig(MailProperties properties) &#123;</span><br><span class="line">    <span class="keyword">this</span>.properties = properties;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//使用这个注解，yml中如果已经配置，这里不会生效！！</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JavaMailSenderImpl <span class="title">mailSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JavaMailSenderImpl sender = <span class="keyword">new</span> JavaMailSenderImpl();</span><br><span class="line">    <span class="comment">// 这里的配置可以取 properties 的配置，测试直接写死，如果使用本例代码，可直接使用 properties</span></span><br><span class="line">    sender.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    sender.setHost(<span class="string">&quot;smtp.qq.com&quot;</span>);</span><br><span class="line">    sender.setPassword(<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">    sender.setUsername(<span class="string">&quot;test@qq.com&quot;</span>);</span><br><span class="line">    sender.setPort(<span class="number">25</span>);</span><br><span class="line">    Properties javaMailProperties = sender.getJavaMailProperties();</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; smtp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    smtp.put(<span class="string">&quot;socketFactoryClass&quot;</span>, <span class="string">&quot;javax.net.ssl.SSLSocketFactory&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; mail = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    mail.put(<span class="string">&quot;smtp&quot;</span>, smtp);</span><br><span class="line">    javaMailProperties.put(<span class="string">&quot;mail&quot;</span>, mail);</span><br><span class="line">    <span class="keyword">return</span> sender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="yml方式"><a href="#yml方式" class="headerlink" title="yml方式"></a>yml方式</h3><p>如果配置使用yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="comment"># 配置 SMTP 服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="comment"># 发送者邮箱</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">test@qq.com</span></span><br><span class="line">    <span class="comment"># 配置密码，注意不是真正的密码，而是刚刚申请到的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">    <span class="comment"># 端口号</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">25</span></span><br><span class="line">    <span class="comment"># 默认的邮件编码为UTF-8</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="comment"># 配置SSL 加密工厂</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">socketFactoryClass:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">        <span class="comment">#表示开启 DEBUG 模式，这样，邮件发送过程的日志会在控制台打印出来，方便排查错误</span></span><br><span class="line">        <span class="comment">#de<span class="doctag">bug:</span> true</span></span><br></pre></td></tr></table></figure><h2 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liukai.spring.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.liukai.springboot-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.liukay.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试发送邮件"><a href="#测试发送邮件" class="headerlink" title="测试发送邮件"></a>测试发送邮件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.springmail.send;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/08/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 普通邮件发送</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建一个邮件对象</span></span><br><span class="line">    SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">    <span class="comment">// 设置邮件主题</span></span><br><span class="line">    message.setSubject(<span class="string">&quot;这是一封测试邮件&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置邮件发送者，这个跟application.yml中设置的要一致</span></span><br><span class="line">    message.setFrom(<span class="string">&quot;test@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置邮件接收者，可以有多个接收者，中间用逗号隔开，以下类似</span></span><br><span class="line">    <span class="comment">// message.setTo(&quot;12345678@qq.com&quot;,&quot;test@qq.com&quot;);</span></span><br><span class="line">    message.setTo(<span class="string">&quot;liukai@163.com&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置邮件抄送人，可以有多个抄送人</span></span><br><span class="line"><span class="comment">//    message.setCc(&quot;12345678@qq.com&quot;);</span></span><br><span class="line">    <span class="comment">// 设置隐秘抄送人，可以有多个</span></span><br><span class="line"><span class="comment">//    message.setBcc(&quot;12345678@qq.com&quot;);</span></span><br><span class="line">    <span class="comment">// 设置邮件发送日期</span></span><br><span class="line">    message.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">// 设置邮件的正文</span></span><br><span class="line">    message.setText(<span class="string">&quot;这是测试邮件的正文2&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送邮件</span></span><br><span class="line">    javaMailSender.send(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
          <category> springboot </category>
          
          <category> mail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> springboot </tag>
            
            <tag> 邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 解决父构造器中拿到对象</title>
      <link href="posts/e115ab30.html"/>
      <url>posts/e115ab30.html</url>
      
        <content type="html"><![CDATA[<p>这两天被问到一个有意思的问题，就是如果在构造器中拿到匿名对象。<br>这个问题有意思在，直觉上是可以通过外部放一个成员变量去接，然后后续就可以使用了，但实际不行。</p><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>下面这个是构造器，当通过 supper 去调用父类构造器。由于问题出现在Spring项目当中，所以我复现的例子也基于Spring重新搭了一个项目来复现这个过程，代码放github上。</p><p>复现demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionCache</span> <span class="keyword">extends</span> <span class="title">RevokingDB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TransactionCache</span><span class="params">(String dbName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 其他代码不能在 supper 之前，但是又要拿到 TxCacheDB，不能再new一次，否则会初始化两次TxCacheDB。</span></span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> TxCacheDB(dbName));</span><br><span class="line">    <span class="comment">// 需要是在这里调一下 txCacheDB.init();</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxCacheDB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TxCacheDB</span><span class="params">(String dbName)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;TxCacheDB: &quot;</span> + dbName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;TxCacheDB: init&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以偿试几种解决方案：</p><ol><li>方案一<br> 直接成员变量中 new TxCacheDB(dbName); 构造器中再使用</li><li>方案二<br> super调用一个方法，而不直接new TxCacheDB();</li><li>方案三<br> 将对象保在ThreadLocal中，再拿出来</li></ol><h2 id="验证方案"><a href="#验证方案" class="headerlink" title="验证方案"></a>验证方案</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>这种在直觉上没有问题，但是实际有问题：</p><ol><li>成员变量不知道 dbName，传入的具体值是什么，如果写死就失去灵活性。</li><li>写死。如果写死，你不能确定会传入dbName将会是什么，实际中这个dbName有很多个，没有办法写死</li></ol><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>这个方法看着就可行，来验证一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionCache2</span> <span class="keyword">extends</span> <span class="title">RevokingDB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> TxCacheDB txCacheDB = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TransactionCache2</span><span class="params">(String dbName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 其他代码不能在 supper 之前</span></span><br><span class="line">    <span class="keyword">super</span>(getTxCache(dbName));</span><br><span class="line">    txCacheDB.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TxCacheDB <span class="title">getTxCache</span><span class="params">(String dbName)</span> </span>&#123;</span><br><span class="line">    txCacheDB = <span class="keyword">new</span> TxCacheDB(dbName);</span><br><span class="line">    <span class="keyword">return</span> txCacheDB;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>TxCacheDB: trans-cache<br>TxCacheDB: init</p></blockquote><p>结查证明可行。<br>但是有个问题，我就用一次，还有开辟一段元数据区态内存来放 这个 static TxCacheDB，不划算。<br>我就想用一次，不想还占用内存。</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>将对象放入本地线程中，使用后就移除。<br>这样即可以使用对象，也不需要一直占用部分内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionCache3</span> <span class="keyword">extends</span> <span class="title">RevokingDB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TransactionCache3</span><span class="params">(String dbName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 其他代码不能在 supper 之前</span></span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> TxCacheDB(dbName));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TxCacheDB txCacheDB = ThreadLocalUtil.get();</span><br><span class="line">      txCacheDB.init();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ThreadLocalUtil.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TxCacheDB: trans-cache3<br>TxCacheDB: init</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>java 对象在初始化的时候构造器中 supper 是永远放在第一行不能变。这一特性决定了这个问题的解决只能曲线救国。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> threadlocal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 问题 </tag>
            
            <tag> 对象 </tag>
            
            <tag> spring </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 构造器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda Optional使用</title>
      <link href="posts/6d3c72a3.html"/>
      <url>posts/6d3c72a3.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Optional 针对空指处理而设计的类型。<br>Java 8借鉴了<code>Scala</code>和<code>Haskell</code>，提供了一个新的Optional模板，可以用它来封装可能为空的引用。这是一个可以为<code>null</code>的容器对象。<br>使用 Optional 的好处是可以以一种专门针对null的处理方式，来避免值可能存在 null 导致出现的程序异常。你可以理解为：处理null，就是你的业务。<br>在实际使用过程中，你会发现 Optional 的灵活性有时候会让你想用在任何可能出现null的地方，不过凡事都有套路可循，只要清楚利弊就知道该如何选择。</p><p><strong>从两个方面说一下 Optional</strong></p><ul><li>常用API</li><li>项目使用套路</li></ul><p>只讲 API 不讲使用套路的文章都是耍流氓。</p><h2 id="API说明"><a href="#API说明" class="headerlink" title="API说明"></a>API说明</h2><p>先看一下常用API，后面再讲实际使用场景。</p><ol><li>构建API: 构建Optional对象：of()、ofNullable()、empty()</li><li>获取API: 获取Optional对象包装的值：get()、orElse()、orElseGet()、orElseThrow()</li><li>判断API：对Optional对象里包装的值做一些逻辑判断：isPresent()、ifPresent()、filter()</li><li>转换API：将Optional对象里包装的值转换成一个新的值：map()、flatMap()；</li></ol><h3 id="构建API"><a href="#构建API" class="headerlink" title="构建API"></a>构建API</h3><h3 id="Optional-of"><a href="#Optional-of" class="headerlink" title="Optional.of()"></a>Optional.of()</h3><blockquote><p>作用：构建 Optional 对象，不允许传入的值为<code>null</code>，传入就 null 马上抛异常。</p></blockquote><p>这个API要慎用，一般在使用 Optional 时，就是要防住 null，这个API 上来就直接抛异常，一点机会也不给。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testOf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; op1 = Optional.of(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    System.out.println(op1.isPresent()); <span class="comment">// 输出 true</span></span><br><span class="line">    System.out.println(op1.get()); <span class="comment">// 输出 Hello</span></span><br><span class="line">    Optional&lt;String&gt; op2 = Optional.of(<span class="keyword">null</span>); <span class="comment">// 抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-ofNullable"><a href="#Optional-ofNullable" class="headerlink" title="Optional.ofNullable()"></a>Optional.ofNullable()</h3><p>常用API。</p><blockquote><p>允许传入的值为 null，如果值为 null，返回一个空的 Optional 传入 null 并不抛异常。</p></blockquote><p>使用 Optional.get() 获取值时，有值正常返回，值为 null 抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testOfNullable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//传入不报错</span></span><br><span class="line">    Optional&lt;String&gt; name = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(name);      <span class="comment">//直接输出是 Optional.empty</span></span><br><span class="line">    System.out.println(name.isPresent()); <span class="comment">//判断是否有值</span></span><br><span class="line">    System.out.println(name.get()); <span class="comment">//  get()  抛异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-empty"><a href="#Optional-empty" class="headerlink" title="Optional.empty()"></a>Optional.empty()</h3><blockquote><p>作用：创建一个空的 Optional 对象，一般很少直接这样写，都是通过 ofNullable 直接接住变量。</p></blockquote><p><code>empty()</code>方法创建的对象没有值，如果对 emptyOpt 变量调用<code>isPresent()</code>方法会返回false，<br>调用get()方法抛出<code>NullPointerException</code>异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; emptyOpt = Optional.empty();</span><br><span class="line">    System.out.println(emptyOpt.isPresent()); <span class="comment">// 输出 false</span></span><br><span class="line">    System.out.println(emptyOpt.get()); <span class="comment">// 抛异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取API"><a href="#获取API" class="headerlink" title="获取API"></a>获取API</h3><p>这一组API很常用:get、orElse、orElseGet、orElseThrow。<br>get() 使用简单，后面三个简单一些业务逻辑。</p><h3 id="Optional-get"><a href="#Optional-get" class="headerlink" title="Optional.get()"></a>Optional.get()</h3><blockquote><p>作用：获取 Optional 中的数据。</p></blockquote><p>可以看上一个例子。使用 Optional 时，如查值是 null，get 会抛异常。</p><h3 id="orElse"><a href="#orElse" class="headerlink" title="orElse()"></a>orElse()</h3><blockquote><p>作用：如果有值就返回不执行，否则如果值为null，也会执行orElse()；</p></blockquote><p>这种做用是相当于在特定场景下的用法可以用它来代替<code>if..else..</code>来完成很简洁的逻辑判断。<br>看到 orElse 中只有一个String不能做别的事？当然不是，可以写一个方法，orElse调用该方法，就可以写其他代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        testOrElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testOrElse</span><span class="params">(String nullValue)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 入参为 null，执行 orElse</span></span><br><span class="line">        String optional = Optional.ofNullable(nullValue).orElse(<span class="string">&quot;Su&quot;</span>);</span><br><span class="line">        System.out.println(optional);</span><br><span class="line">        <span class="comment">// 入参为 Susan，不执行 orElse</span></span><br><span class="line">        String nonNullOptional = Optional.ofNullable(<span class="string">&quot;Susan&quot;</span>).orElse(<span class="string">&quot;Su&quot;</span>);</span><br><span class="line">        System.out.println(nonNullOptional);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>Su<br>Susan</p></blockquote><h3 id="orElseGet"><a href="#orElseGet" class="headerlink" title="orElseGet()"></a>orElseGet()</h3><blockquote><p>作用：入参为null时，才会执行 orElseGet()。</p></blockquote><p>和orElse的区别：<br>在optional为空值的情况下orElse和orElseGet都会执行，当optional不为空时，orElseGet不会执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        testOrElseGet(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testOrElseGet</span><span class="params">(String nullValue)</span> </span>&#123;</span><br><span class="line">        String optionalGet = Optional.ofNullable(nullValue).orElseGet(() -&gt; <span class="string">&quot;Xiao&quot;</span>);</span><br><span class="line">        System.out.println(optionalGet);</span><br><span class="line"></span><br><span class="line">        String nonNullOptionalGet = Optional.ofNullable(<span class="string">&quot;Molly&quot;</span>).orElseGet(() -&gt; <span class="string">&quot;Xiao&quot;</span>);</span><br><span class="line">        System.out.println(nonNullOptionalGet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>Xiao<br>Molly</p></blockquote><h3 id="orElseThrow"><a href="#orElseThrow" class="headerlink" title="orElseThrow()"></a>orElseThrow()</h3><p>作有：当参数为空时，抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        testOrElseThrow(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testOrElseThrow</span><span class="params">(String nullValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Optional.ofNullable(nullValue)</span><br><span class="line">                .orElseThrow(()-&gt; <span class="keyword">new</span> Exception(<span class="string">&quot;参数为空&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>java.lang.Exception: 参数为空<br>    at com.test.OptionalTest.lambda$testOrElseThrow$2(OptionalTest.java:30)<br>    at java.util.Optional.orElseThrow(Optional.java:290)<br>    at com.test.OptionalTest.testOrElseThrow(OptionalTest.java:30)<br>    at com.test.OptionalTest.main(OptionalTest.java:9)</p></blockquote><h3 id="判断API"><a href="#判断API" class="headerlink" title="判断API"></a>判断API</h3><h3 id="Optional-isPresent"><a href="#Optional-isPresent" class="headerlink" title="Optional.isPresent()"></a>Optional.isPresent()</h3><blockquote><p>作用：判断变量是否为null</p></blockquote><p>这个比较常用，用来提前判断一下值是否为空。实际业务场景中，很参数传入的时候，程序是不知道是否为null的，可以使用这个先进行判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testIsPersent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//传入不报错</span></span><br><span class="line">    Optional&lt;String&gt; name = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(name.isPresent()); <span class="comment">//判断是否有值: true; false</span></span><br><span class="line">    <span class="keyword">if</span> (name.isPresent()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有值&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;空值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-ifPresent"><a href="#Optional-ifPresent" class="headerlink" title="Optional.ifPresent()"></a>Optional.ifPresent()</h3><p>很常有的API。</p><blockquote><p>作用：如果值不为null，则可以执行后续操作。</p></blockquote><p>看这段代码，如果值为null不会进入 ifPresent，如果不为null，则进入。这样就不需要if来判断这种特性很方便写一个流畅的工作流风格代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testIfPersent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    Optional.ofNullable(value)  </span><br><span class="line">    .ifPresent((s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-filter"><a href="#Optional-filter" class="headerlink" title="Optional.filter()"></a>Optional.filter()</h3><blockquote><p>作用：条件过滤，根据条件过滤不满足条件的数据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;UserInfo&gt; userInfo = userService.getUsers();</span><br><span class="line">    List&lt;UserInfo&gt; newUserInfo = Optional</span><br><span class="line">                          .ofNullable(userInfo)</span><br><span class="line">                          .filter(u -&gt; u.getPrice() &lt; <span class="number">1000</span>)</span><br><span class="line">                          .orElse(UserInfo.builder()</span><br><span class="line">                          .build());</span><br><span class="line">    <span class="comment">//直接 return，orElse处理了null，userInfo不会为null</span></span><br><span class="line">    <span class="keyword">return</span> userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-map"><a href="#Optional-map" class="headerlink" title="Optional.map()"></a>Optional.map()</h3><blockquote><p>作用：映射出新对象。map 时return 什么类型的数据，接收时就必须使用对应的泛型接住。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String val1 = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    String val2 = <span class="keyword">null</span>;</span><br><span class="line">    Optional&lt;String&gt; optional = Optional.ofNullable(val2);</span><br><span class="line">    Optional&lt;String&gt; newVal = optional.map((a) -&gt; &#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bb&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(newVal.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>入参为 val1 时</p><blockquote><p>bb</p></blockquote><p>入参为 val2 时</p><blockquote><p>Exception in thread &quot;main&quot; java.util.NoSuchElementException: No value present</p></blockquote><h2 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h2><p>使用 Optional 时，Optional.get() 如果值为 null，还是会抛异常，那使用 Optional 有什么意义。<br>Optional 能不能当作返回出参，返回给外部调用。</p><p>先说第一个问题，意义在于，Optional 本身不会为 null，不会在被调用时出现空指针而导致异常。由于是通过 Optional 包裹可能出现空值的对象，所以多了一层保护机制。</p><p>Optional 不建议做为返回值，至于为什么后面说。</p><h3 id="套路1-不返回null"><a href="#套路1-不返回null" class="headerlink" title="套路1 不返回null"></a>套路1 不返回null</h3><p>保证返回的数据中绝对不返回null，保证不会因为null引起不可预见的异常。<br>结合 orElse，来保证如果下面的 list 中查出的数据是null，就返回一个空的ArrayList。<br>这种写法简单实用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; userInfo = userService.getUsers();</span><br><span class="line">    <span class="keyword">return</span> Optional</span><br><span class="line">            .ofNullable(userInfo)</span><br><span class="line">            .orElse(<span class="keyword">new</span> ArrayList());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="套路2-先判断，后使用"><a href="#套路2-先判断，后使用" class="headerlink" title="套路2 先判断，后使用"></a>套路2 先判断，后使用</h3><p>业务中从一个Service中获得一个数据，那么先处理一下。</p><p>判断List是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userService.getUsers();</span><br><span class="line">    Optional&lt;String&gt; usersOptional = Optional.ofNullable(users);</span><br><span class="line">    <span class="comment">// 这里用 Optional 接住，再进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (usersOptional.isPresent()) &#123;</span><br><span class="line">        <span class="comment">//do somthine</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断List是否为空，不为空执行后续</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userService.getUsers();</span><br><span class="line">    Optional&lt;String&gt; usersOptional = Optional.ofNullable(users);</span><br><span class="line">    usersOptional.ifPresent(user -&gt; &#123;</span><br><span class="line">        System.out.println(user.getSize());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种写法，其实很相近，该怎么选择呢，简化一下代码，如果只有在有值的情况下才处理，使用 ifPresent 的处理，是最简洁的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//正解</span></span><br><span class="line">  Optional&lt;User&gt; userOpt = Optional.ofNullable(user);</span><br><span class="line">  userOpt.ifPresent(System.out.println(user.get()));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//而非</span></span><br><span class="line">  <span class="keyword">if</span> (userOpt.isPresent()) &#123;</span><br><span class="line">    System.out.println(user.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种方式都是用在处理没程不需要返回值的情况下。</p><h3 id="套路3-结合-Stream-使用"><a href="#套路3-结合-Stream-使用" class="headerlink" title="套路3 结合 Stream 使用"></a>套路3 结合 Stream 使用</h3><p>开发中使用Stream应该是用的最多的，还是一样的套路，防止出现 List 为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; personList = personService.getPersons();</span><br><span class="line">Optional.ofNullable(personList)</span><br><span class="line">        .orElseGet(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;personList为null！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;)</span><br><span class="line">        .stream()</span><br><span class="line">        .filter(Objects::nonNull)</span><br><span class="line">        .forEach(person -&gt; &#123;</span><br><span class="line">            System.out.println(person.getName());</span><br><span class="line">            System.out.println(person.getAge());</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Optional 的功能主要是在保证参数不出现null，通过提供的API来实现，让代码更加健壮。<br>健壮的代码有助于提高系统的稳定性，是一种不可多得的处理手段。即使不使用 Optional，也需要保证，不直接将 null 返回给上一级调用在方法内处理掉null。<br>不能相信调用的方法是安全的，需要自己对null有安全的处理。<br>Optional 只是简化了null的操作，即使没有 Optional 也要对null的处理放在一个重点关注的位置。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Lambda </tag>
            
            <tag> Optional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态资源配置的问题</title>
      <link href="posts/650.html"/>
      <url>posts/650.html</url>
      
        <content type="html"><![CDATA[<p>spring boot 的项目是将静态资源打包到.jar 的文件包中， 项目中有碰到需要使用外部静态资源的情况，使用外部资源的一直老出问题，查了google 后发现是指定的方式不对。</p><h3 id="静态资源配置"><a href="#静态资源配置" class="headerlink" title="静态资源配置"></a>静态资源配置</h3><p>将 <code>resource/static</code> 进行映射，springboot 默认优先级:</p><blockquote><p>/META-INF/resources/<br>/resources/<br>/static/<br>/public/</p></blockquote><span id="more"></span><p>spring 属性合配 resources 配置<br>1.本项目包含路径：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line">   <span class="attr">static-path-pattern:</span> <span class="string">/late</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">static-locations:</span> <span class="string">classpath:/templates/dist/</span></span><br></pre></td></tr></table></figure><p>这两天遇到的坑</p><p>2.指定项目外的磁盘路径<br>如果要映射本地磁盘路径，可以使用，注意必须得有 <code>file:</code>, 注意必须得有<code>file:</code>,注意必须得有<code>file:</code>  否则 404, 重要事情说三遍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">mvc:</span><br><span class="line">   <span class="keyword">static</span>-path-pattern: /late</span><br><span class="line">resources:</span><br><span class="line">   <span class="keyword">static</span>-locations: file:/templates/dist/</span><br></pre></td></tr></table></figure><p>浏览器的访问路径通过这个就可以改。</p><blockquote><p>static-path-pattern</p></blockquote><p>3.还有一种方式是打包到 webjars 中，不过一样是费劲的事，不如直接指定外部磁盘路径，使用 nginx 做转换成功访问静态文件，但是配置更麻烦。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> yml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 注解实现日志切面</title>
      <link href="posts/57334.html"/>
      <url>posts/57334.html</url>
      
        <content type="html"><![CDATA[<p>项目中很多时候需要去打印方法入参和出参的日志，有助于排查错误。<br>注解需要操作简单。<br>常用的方式之一就是使用切面来切日志。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>定义自定义注解</li><li>编写自定义注解的切面方法</li><li>使用注解在需要输出日志的方法上</li></ol><span id="more"></span><h4 id="1-自定义注解"><a href="#1-自定义注解" class="headerlink" title="1.自定义注解"></a>1.自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * controller 注解切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2018/8/7 15:26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><span class="comment">//目标是方法</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//注解会在class中存在，运行时可通过反射获取</span></span><br><span class="line"><span class="meta">@Documented</span><span class="comment">//文档生成时，该注解将被包含在javadoc中，可去掉</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ControllerLog &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作描述 业务名称business</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作模块</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">OperateModule <span class="title">module</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作类型 create modify delete</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">OperateType <span class="title">opType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键入参参数名称，入参中的哪个参数为主键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">primaryKeyName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键在参数中的顺序，从0开始，默认0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">primaryKeySort</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">business</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-模块枚举"><a href="#2-模块枚举" class="headerlink" title="2.模块枚举"></a>2.模块枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 操作类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/7/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OperateModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOGIN(<span class="string">&quot;登陆&quot;</span>),</span><br><span class="line">    LOGOUT(<span class="string">&quot;退出登陆&quot;</span>),</span><br><span class="line">    DEMAND(<span class="string">&quot;需求&quot;</span>),</span><br><span class="line">    ITERATION(<span class="string">&quot;迭代&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    OperateModule(String text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-操作类型"><a href="#3-操作类型" class="headerlink" title="3.操作类型"></a>3.操作类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.group.core.web.log;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 操作类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/7/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OperateModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOGIN(<span class="string">&quot;登陆&quot;</span>),</span><br><span class="line">    LOGOUT(<span class="string">&quot;退出登陆&quot;</span>),</span><br><span class="line">    DEMAND(<span class="string">&quot;需求&quot;</span>),</span><br><span class="line">    ITERATION(<span class="string">&quot;迭代&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    OperateModule(String text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-日志切面"><a href="#4-日志切面" class="headerlink" title="4.日志切面"></a>4.日志切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.group.core.web.log;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.group.common.constants.Constants;</span><br><span class="line"><span class="keyword">import</span> com.group.core.model.SysLog;</span><br><span class="line"><span class="keyword">import</span> com.group.core.service.SysLogService;</span><br><span class="line"><span class="keyword">import</span> com.group.core.web.vo.ResultVo;</span><br><span class="line"><span class="keyword">import</span> com.group.core.web.log.annotation.ControllerLog;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.CodeSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志切面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2018/8/7 15:50.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODULE = <span class="string">&quot;module&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysLogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SecurityManager securityManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切入点.</span></span><br><span class="line"><span class="comment">     * (&quot;execution(public * com.group.*.web..*.*(..))&quot;)</span></span><br><span class="line"><span class="comment">     * 解释下：</span></span><br><span class="line"><span class="comment">     * 第一个 * 代表任意修饰符及任意返回值.</span></span><br><span class="line"><span class="comment">     * 第二个 * 任意包名</span></span><br><span class="line"><span class="comment">     * 第三个 * 代表任意方法.</span></span><br><span class="line"><span class="comment">     * 第四个 * 定义在web包或者子包</span></span><br><span class="line"><span class="comment">     * 第五个 * 任意方法</span></span><br><span class="line"><span class="comment">     * .. 匹配任意数量的参数.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.group..*.controller..*.*(..))  &amp;&amp; @annotation(com.group.core.web.log.annotation.ControllerLog)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * round</span></span><br><span class="line"><span class="comment">     * 环境切面方法，切日方法调用的出入时的操作</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 16:16</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">round</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;环绕日志切面开始&quot;</span>);</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        String user = (String) subject.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(user)) &#123;</span><br><span class="line">            JSONObject jsonObject = JSONObject.parseObject(user.substring(<span class="number">4</span>));</span><br><span class="line">            user = jsonObject.getString(<span class="string">&quot;sub&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; controllerAnnotationValues = getControllerAnnotationValue(joinPoint);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(user)) &#123;</span><br><span class="line">            controllerAnnotationValues.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;用户 &#123;&#125;-- 操作:&#123;&#125; -- 模块: &#123;&#125;&quot;</span>, user, controllerAnnotationValues.get(<span class="string">&quot;operateName&quot;</span>), controllerAnnotationValues.get(<span class="string">&quot;moduleName&quot;</span>));</span><br><span class="line"><span class="comment">//            //需求目志特殊处理</span></span><br><span class="line"><span class="comment">//            if (controllerAnnotationValues.get(MODULE).equals(OperateModule.DEMAND.toString())) &#123;</span></span><br><span class="line"><span class="comment">////                demandLogger.insertLog(controllerAnnotationValues, getParameter(joinPoint));</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line">            insertLog(controllerAnnotationValues);</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//切面返回值</span></span><br><span class="line">        Object returnValue = joinPoint.proceed();</span><br><span class="line">        <span class="comment">//用户登陆，登陆后 subject 才会包含用户信息。</span></span><br><span class="line">        <span class="keyword">if</span> (returnValue <span class="keyword">instanceof</span> ResultVo &amp;&amp; user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Subject logSubject = SecurityUtils.getSubject();</span><br><span class="line">            String logUser = (String) logSubject.getPrincipal();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(logUser)) &#123;</span><br><span class="line">                JSONObject jsonObject = JSONObject.parseObject(logUser.substring(<span class="number">4</span>));</span><br><span class="line">                logUser = jsonObject.getString(<span class="string">&quot;sub&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            controllerAnnotationValues.put(<span class="string">&quot;user&quot;</span>, logUser);</span><br><span class="line">            insertLog(controllerAnnotationValues);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入通用日志</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/10 17:33</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> controllerParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertLog</span><span class="params">(Map&lt;String, Object&gt; controllerParam)</span> </span>&#123;</span><br><span class="line">        SysLog sysLog = <span class="keyword">new</span> SysLog();</span><br><span class="line">        String moduleName = (String) controllerParam.get(<span class="string">&quot;moduleName&quot;</span>);</span><br><span class="line">        String operateName = (String) controllerParam.get(<span class="string">&quot;operateName&quot;</span>);</span><br><span class="line">        controllerParam.get(<span class="string">&quot;primaryKeyName&quot;</span>);</span><br><span class="line">        controllerParam.get(<span class="string">&quot;primaryKeySort&quot;</span>);</span><br><span class="line">        String user = (String) controllerParam.get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        sysLog.setOperationUser(user);</span><br><span class="line">        sysLog.setModifyUserId(user);</span><br><span class="line">        sysLog.setCreateUserId(user);</span><br><span class="line">        sysLog.setOperation(operateName);</span><br><span class="line">        sysLog.setModel(moduleName);</span><br><span class="line">        sysLog.setFlag(Constants.DELETE_TYPE_FALSE);</span><br><span class="line">        logService.insert(sysLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取日志注解的方法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 16:41</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String   ,   java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getControllerAnnotationValue</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//取切点相关参数</span></span><br><span class="line">        String targetName = joinPoint.getTarget().getClass().getName();</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        Object[] arguments = joinPoint.getArgs();</span><br><span class="line">        LOGGER.info(<span class="string">&quot;targetName: &#123;&#125; - methodName: &#123;&#125; - arguments: &#123;&#125;&quot;</span>, targetName, methodName, arguments.toString());</span><br><span class="line">        <span class="comment">//实例化该</span></span><br><span class="line">        Class targetClass = Class.forName(targetName);</span><br><span class="line">        <span class="comment">//获取该类的所有方法</span></span><br><span class="line">        Method[] methods = targetClass.getMethods();</span><br><span class="line">        Map&lt;String, Object&gt; map = Maps.newHashMapWithExpectedSize(<span class="number">7</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(methodName)) &#123;</span><br><span class="line">                Class[] classes = method.getParameterTypes();</span><br><span class="line">                <span class="keyword">if</span> (classes.length == arguments.length) &#123;</span><br><span class="line">                    String description = method.getAnnotation(ControllerLog.class).description();</span><br><span class="line">                    String <span class="keyword">module</span> = method.getAnnotation(ControllerLog.class).<span class="keyword">module</span>().name();</span><br><span class="line">                    String operateType = method.getAnnotation(ControllerLog.class).opType().name();</span><br><span class="line">                    String primaryKeyName = method.getAnnotation(ControllerLog.class).primaryKeyName();</span><br><span class="line">                    <span class="keyword">int</span> primaryKeySort = method.getAnnotation(ControllerLog.class).primaryKeySort();</span><br><span class="line">                    String operateName = getOpName(operateType);</span><br><span class="line">                    String moduleName = getModelName(<span class="keyword">module</span>);</span><br><span class="line">                    map.put(<span class="string">&quot;module&quot;</span>, <span class="keyword">module</span>);</span><br><span class="line">                    map.put(<span class="string">&quot;moduleName&quot;</span>, moduleName);</span><br><span class="line">                    map.put(<span class="string">&quot;operateType&quot;</span>, operateType);</span><br><span class="line">                    map.put(<span class="string">&quot;operateName&quot;</span>, operateName);</span><br><span class="line">                    map.put(<span class="string">&quot;business&quot;</span>, description);</span><br><span class="line">                    map.put(<span class="string">&quot;primaryKeyName&quot;</span>, primaryKeyName);</span><br><span class="line">                    map.put(<span class="string">&quot;primaryKeySort&quot;</span>, primaryKeySort);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取模块名</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 21:11</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> module</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getModelName</span><span class="params">(String <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">        String operate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (OperateModule model : OperateModule.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (model.name().equals(<span class="keyword">module</span>)) &#123;</span><br><span class="line">                operate = model.getText();</span><br><span class="line">                <span class="keyword">return</span> operate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> operate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类型名</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 21:06</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operateType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getOpName</span><span class="params">(String operateType)</span> </span>&#123;</span><br><span class="line">        String operate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (OperateType opType : OperateType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (opType.name().equals(operateType)) &#123;</span><br><span class="line">                operate = opType.getMsg();</span><br><span class="line">                <span class="keyword">return</span> operate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> operate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getParameter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//入参  value</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="comment">//入参名称</span></span><br><span class="line">        String[] paramNames = ((CodeSignature) joinPoint.getSignature()).getParameterNames();</span><br><span class="line">        Map&lt;String, Object&gt; params = Maps.newHashMapWithExpectedSize(<span class="number">7</span>);</span><br><span class="line">        <span class="comment">//获取所有参数对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != args[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> BindingResult) &#123;</span><br><span class="line">                    params.put(paramNames[i], <span class="string">&quot;bindingResult&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    params.put(paramNames[i], args[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                params.put(paramNames[i], <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-使用注解"><a href="#5-使用注解" class="headerlink" title="5.使用注解"></a>5.使用注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 退出</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2018/8/2 上午9:05</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/logout&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@ControllerLog(module = OperateModule.LOGOUT, opType = OperateType.logout)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResultVo <span class="title">logOut</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">       ResultVo resultVo = <span class="keyword">new</span> ResultVo();</span><br><span class="line">       Subject subject = SecurityUtils.getSubject();</span><br><span class="line">       resultVo.setCode(SUCCESS_CODE);</span><br><span class="line">       resultVo.setMsg(<span class="string">&quot;退出登陆&quot;</span>);</span><br><span class="line">       logger.info(<span class="string">&quot;退出登陆&quot;</span>);</span><br><span class="line">       subject.logout();</span><br><span class="line">       <span class="keyword">return</span> resultVo;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> srping boot </tag>
            
            <tag> aop </tag>
            
            <tag> 日志 </tag>
            
            <tag> 切面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda01-Functional 函数式接口</title>
      <link href="posts/6327.html"/>
      <url>posts/6327.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Functional 为 lambda 方法提供一个接口</p></blockquote><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>Functional 的定义其实很简单：任何接口，如果只包含 唯一一个抽象方法，那么它就是一个 Functional Interface ,<br>函数式接口？这注解名字好。<br>为了让编译器帮助我们确保一个接口满足 Functional Interface 的要求（也就是说有且仅有一个抽象方法），Java8提供了<code>@FunctionalInterface</code>注解。</p><p>先学习函数式接，才能理解学习 <code>Lambda</code> 表达式。</p><h2 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h2><p>白话：用来为函数式编程提供接口。<br>就是一个有<code>且仅有</code>一个抽象方法，但是可以有<code>多个非抽象方法</code>的接口。<br>函数式接口可以被隐式转换为 lambda 表达式。</p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>写一个最简单的例子做为入门参考，看不懂不要紧，这个只是一个例子。</p><h3 id="声明一个无参的接口"><a href="#声明一个无参的接口" class="headerlink" title="声明一个无参的接口"></a>声明一个无参的接口</h3><p>声明一个无参函数式接口，为 lambda 提供一个接口。<br>在接口上添加<code>@Functional</code>那么这个接口就是一个<code>函数式接口</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> interfaceMyFunctional &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>自己实现一个<code>Functional</code>接口，只需要 <code>()-&gt; System.out.println(&quot;test&quot;)</code> 进行实现。<code>()-&gt;System.out.println(&quot;test&quot;)</code> 就是一个<code>lambda</code>实现。<br>这里主要关注<code>Functional</code>接口，不需要关注<code>lambda</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实现 lambda</span></span><br><span class="line">    MyFunctional myFunctional = () -&gt; System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">//调用 Functional 接口来执行 lambda 实现</span></span><br><span class="line">    System.out.println(myFunctional.run());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h2><p>首先它是一个接口。然后这个接口里面只能有一个抽象方法。<br>这种类型的接口也称为SAM接口，即Single Abstract Method interfaces。</p><p>规则</p><ol><li>函数式接口里允许定义默认方法，因为默认方法不是抽象方法，其有一个默认实现，所以是符合函数式接口的定义的</li><li>函数式接口里允许定义静态方法，因为静态方法不能是抽象方法，是一个已经实现了的方法，所以是符合函数式接口的定义的</li><li>函数式接口里允许定义Java.lang.Object里的public方法，这些方法对于函数式接口来说，不被当成是抽象方法（虽然它们是抽象方法）；因为任何一个函数式接口的实现，默认都继承了Object类，包含了来自<code>java.lang.Object</code>里对这些抽象方法的实现；</li><li>函数式接口里允许子接口继承多个父接口，但每个父接口中都只能存在一个抽象方，且必须的相同的抽象方法。</li></ol><hr><h3 id="jdk-中的-lambda-实现示例"><a href="#jdk-中的-lambda-实现示例" class="headerlink" title="jdk 中的 lambda 实现示例"></a>jdk 中的 lambda 实现示例</h3><p>使用 Arrays 对数据进行排序。<br>Arrays 的 sort 方法，可以使用 lambda 的方法，这个方法是怎么实现的呢。<br>老套路:</p><ol><li>定义 Functional 接口</li><li>Functional 做为形参</li><li>有一个地方实现了这个Functional接口</li><li>调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 lambda expression 排序 players</span></span><br><span class="line">Comparator&lt;String&gt; sortByName = (s1, s2) -&gt; (s1.compareTo(s2));</span><br><span class="line">Arrays.sort(players, sortByName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价形式</span></span><br><span class="line">Arrays.sort(players, (s1, s2)-&gt; (s1.compareTo(s2)));</span><br></pre></td></tr></table></figure><p>看看 <code>sort</code> 的具体实现，<code>sort</code> 是对 <code>Comparator</code> 接口的具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sort(a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">    legacyMergeSort(a, c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Comparator</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认方法-和-静态方法"><a href="#默认方法-和-静态方法" class="headerlink" title="默认方法 和 静态方法"></a>默认方法 和 静态方法</h3><p>默认方法是可以直接被 类名.方法名使用的。<br>lambda 的默认实现方法，可以直接写在接口当中，然后具体使用的时候引用即可。<br>封装的时候也可以直接引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunctional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//只允许存在一个 public abstract 方法</span></span><br><span class="line">     <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="comment">// 这个方法就是对上面  boolean test(T t);  的一个默认实现</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">getBoolean</span> <span class="params">(T b)</span> </span>&#123;</span><br><span class="line">        System.out.println(b.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于使用了范形，入参就变得灵活</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">testPrintString</span> <span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(message);        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用范形方法</span></span><br><span class="line">     <span class="keyword">default</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">testPrint</span> <span class="params">(T message)</span> </span>&#123;</span><br><span class="line">        System.out.println(message);        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//允许存在默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;    <span class="comment">//允许存在静态方法</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;使用静态方法&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)? Objects::isNull: object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//直接使用默认实现</span></span><br><span class="line">  <span class="keyword">static</span> &lt;T &gt; <span class="function"><span class="keyword">boolean</span> <span class="title">getBoolean</span> <span class="params">(T b)</span></span></span><br><span class="line"><span class="function">  MyFunctional myFunctional </span>= MyFunctional::getBoolean;</span><br><span class="line">  myFunctional.test(<span class="keyword">new</span> Date());</span><br><span class="line">  myFunctional.testPrintString(<span class="string">&quot;test....&quot;</span>);</span><br><span class="line">  <span class="comment">//使用具体类型，默认方法</span></span><br><span class="line">  myFunctional.testPrint(<span class="keyword">new</span> Date());</span><br><span class="line">  <span class="comment">//使用范形默认方法</span></span><br><span class="line">  <span class="comment">// 直接传入默认实现即可</span></span><br><span class="line">  testDefault(MyFunctional::getBoolean);</span><br><span class="line">  <span class="comment">//使用静态方法</span></span><br><span class="line">  MyFunctional.isEqual(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装 lambda 表达式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">testDefault</span><span class="params">(MyFunctional myFunctional)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> myFunctional.testPrintString(<span class="string">&quot;just test lambda&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用freemarker页面静态化</title>
      <link href="posts/29482.html"/>
      <url>posts/29482.html</url>
      
        <content type="html"><![CDATA[<p>公司使用 <code>vue + ngixn</code> 前后端分离架构，重构一套新的静态化的门户网站。后台管理系统为动态页面。<br>使用 freemarker 进行页面静态化的处理，生成静态化页在。<br>前后分离的页面，静态图片需要使用 nginx 进行路径转换。UEditor 上传到本地的图片，没有使用文件管理系统，直接存放到服务器本地，需要 nginx 进行路径转换。</p><p>使用原理:<br>1.freemarker 将数据填充入 ftl 模板中，再由 freemarker 生成静态页面<br>2.vue 获取静态页面进行数据展示</p><span id="more"></span><p>1.工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title: 工具类</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/20 上午10:37.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateHtmlUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CreateHtmlUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;htmlPath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String htmlPath;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ftlPath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ftlPath;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过freemarker生成静态HTML页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">createHtml</span><span class="params">(String templateName,String targetFileName,Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;生成路径: &#123;&#125;, 模板路径：&#123;&#125;&quot;</span>, htmlPath, ftlPath);</span><br><span class="line">        <span class="comment">//创建fm的配置</span></span><br><span class="line">        Configuration config = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">//指定默认编码格式</span></span><br><span class="line">        config.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        Template template = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//设置模版文件的路径</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            config.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(ftlPath));</span><br><span class="line">            <span class="comment">//获得模版包</span></span><br><span class="line">            template = config.getTemplate(templateName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;设置模板包异常：&#123;&#125;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义输出流，注意必须指定编码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fileInputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(htmlPath+<span class="string">&quot;/&quot;</span>+targetFileName));</span><br><span class="line">             OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(fileInputStream, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">             Writer writer = <span class="keyword">new</span> BufferedWriter(outputStreamWriter)) &#123;</span><br><span class="line">            template.process(map, writer);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;写入html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;生成异常: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.添加填充数据据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateHtml</span> <span class="params">(Integer CategoryNo, <span class="keyword">int</span> count, Map&lt;String, Object&gt; pageMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String htmlFileName = getHtmlFileName(CategoryNo, count + <span class="number">1</span>);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;html 文件名: &#123;&#125;&quot;</span> , htmlFileName);</span><br><span class="line">        createHtmlUtil.createHtml(NEWS_TEMPLATE, htmlFileName, pageMap);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.静态页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;total&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;total&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">newsPageDatas</span>??&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#list</span> <span class="attr">newsPageDatas</span> <span class="attr">as</span> <span class="attr">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;new-item-box clearfix clear&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image fl&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;#if key.titleUrl??&gt;$&#123;key.titleUrl&#125;&lt;#else &gt;../images/news-1.png&lt;/#if&gt;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-content-box&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-content&quot;</span>&gt;</span></span><br><span class="line">                    $&#123;key.title!&#x27;&#x27;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time-arrow clearfix&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time-day&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">key.publishDate</span>??&gt;</span></span><br><span class="line">                                $&#123;key.publishDate?string(&quot;dd&quot;)!&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time-year&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">key.publishDate</span>??&gt;</span></span><br><span class="line">                                $&#123;key.publishDate?string(&quot;yyyy.MM&quot;)!&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../page/news_details_$&#123;key.id&#125;.html&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/jiantou.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> freemarker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 页面静态化 </tag>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是上下文context</title>
      <link href="posts/62323.html"/>
      <url>posts/62323.html</url>
      
        <content type="html"><![CDATA[<p>上下文(背景/语境) context<br>是当前运行程序的环境。<br>网上各种不可说，模糊不清，但是一个概念的提出肯定有最初的含义。</p><h3 id="总结上下文可以理解成："><a href="#总结上下文可以理解成：" class="headerlink" title="总结上下文可以理解成："></a>总结上下文可以理解成：</h3><ol><li>上下文指由代码已运行的程序环境，不是指代码。</li><li>一组状态，这个好理解，取 spring cloud 的官方文档的例子：<blockquote><p>一个Spring Cloud应用程序通过创建一个&quot;引导&quot;上下文来进行操作，这个上下文是主应用程序的父上下文。<br>引导上下文使用与主应用程序上下文不同的外部配置约定，因此使用bootstrap.yml application.yml（或.properties）代替引导和主上下文的外部配置。<br>这里所谓的 引导上下文 就是一组状态，实际就是一个保存配置的大对象，换个角度理就是环境。</p></blockquote></li><li>环境背景<br>每一段程序都有很多外部变量。只有像Add这种简单的函数才是没有外部变量的。一旦你的一段程序有了外部变量，这段程序就不完整，不能独立运行。你为了使他们运行，就要给所有的外部变量一个一个写一些值进去。这些值的集合就叫上下文。</li></ol><h3 id="摘自知乎"><a href="#摘自知乎" class="headerlink" title="摘自知乎"></a>摘自知乎</h3><blockquote><p>和其他传入对象参数没什么区别。<br>但是通常使用Context来描述有几个特点：<br>被传入Context的部分（组件），内部需要频繁的获取Context的data和调用function。<br>对context有很强的依赖，实现建立在context的基础上。<br>Context会被较为多数部分（组件）所需要，在软件实现部分Context会在某个scene下出现单一实例化，然后被多个部分（组件）实例对象调用。<br>出现局部全局化。<br>Context会持有很多状态data。<br>Coder习惯，命名选择困难下的胶合产物。</p></blockquote><p><a href="https://www.zhihu.com/question/26387327">https://www.zhihu.com/question/26387327</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 使用maven打jar包配置</title>
      <link href="posts/6ee0b94a.html"/>
      <url>posts/6ee0b94a.html</url>
      
        <content type="html"><![CDATA[<p>使用 ide 进行开发时，直接在ide上启动即可，如果要放到服务器上进行使用，就必须打成jar包，这里使用 maven 的打包插件进行打包。注意 <code>&lt;mainClass&gt;com.devops.WebApplication&lt;/mainClass&gt;</code> 这行要改成你的启动类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>devops-web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.devops.WebApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> spring </tag>
            
            <tag> jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 实现 map的分词原理</title>
      <link href="posts/31105.html"/>
      <url>posts/31105.html</url>
      
        <content type="html"><![CDATA[<p>Map 的作用，即数据的映射，用于把一组键值对映射成另一组新的键值对。<br>白话就是对数据按照一定的格式进行归整。<br>举个例子，有一遍文章，需要对文章中出现过的相同的单词进行归类，期望结果如下：<br>将map的输出作为reduce的输入的过程就是shuffle了，这个是mapreduce优化的重点地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;1&quot;, &quot;are&quot; : 1&#125;</span><br><span class="line">&#123;&quot;1&quot;, &quot;are&quot; : 1&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encodeing=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">        ss = line.strip().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> ss:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">&#x27;\t&#x27;</span>.join([word.strip(), <span class="string">&#x27;1&#x27;</span>])</span><br></pre></td></tr></table></figure><p>测试数据： <code>THE_MAN_OF_PROPERTY.txt</code>，这里存一篇网上随机找的一篇英文长篇文章。</p><p>执行命令，并打印结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#96;THE_MAN_OF_PROPERTY.txt&#96;  | &#96;python map.py&#96; | &#96;sort -k 1  &gt; 1.txt&#96;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">to1</span><br><span class="line">to1</span><br><span class="line">to1</span><br><span class="line">today1</span><br><span class="line">tool1</span><br><span class="line">topic1</span><br><span class="line">two1</span><br><span class="line">two1</span><br><span class="line">···</span><br><span class="line">variants1</span><br><span class="line">variants1</span><br><span class="line">variants1</span><br><span class="line">···</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
          <category> python </category>
          
          <category> mapreduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> map 任务 </tag>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 添加默认根路径跳转</title>
      <link href="posts/23547.html"/>
      <url>posts/23547.html</url>
      
        <content type="html"><![CDATA[<p>同一组数据分组<br>需求：一个 list 里可能会有出现一个用户多条数据的情况。要把多条用户数据合并成一条。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;liu big big&quot;</span>, <span class="string">&quot;123456789&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;liu big big&quot;</span>, <span class="string">&quot;987654321&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;su xiao xiao&quot;</span>, <span class="string">&quot;55555555&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        Map&lt;String, Set&lt;User&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            Set&lt;User&gt; userSet = map.get(user.getName());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == userSet) &#123;</span><br><span class="line">                userSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                userSet.add(user);</span><br><span class="line">                map.put(user.getName(), userSet);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                userSet.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keySet= map.keySet();</span><br><span class="line">        Iterator&lt;String&gt; it = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String key = it.next();</span><br><span class="line">            Set&lt;User&gt; user = map.get(key);</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Reactor模型</title>
      <link href="posts/62292.html"/>
      <url>posts/62292.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>核心思想：分治</p></blockquote><p>看了一些 Reactor 相关的文章和资料，列举的一些 Reactor 模型的优点，包括极客时间的文章也有讲过在架构中的Reactor中的优点和缺点。<br>但是如果不使用 Reactor 模型的一般方式是什么样子的?会有什么问题？</p><h2 id="思想：分而治之-事件驱动"><a href="#思想：分而治之-事件驱动" class="headerlink" title="思想：分而治之+事件驱动"></a>思想：分而治之+事件驱动</h2><p>1）分而治之<br>一个连接里完整的网络处理过程一般分为accept、read、decode、process、encode、send这几步。<br>Reactor模式将每个步骤映射为一个Task，服务端线程执行的最小逻辑单元不再是一次完整的网络请求，而是Task，且采用非阻塞方式执行。</p><p>2）事件驱动<br>每个Task对应特定网络事件。当Task准备就绪时，Reactor收到对应的网络事件通知，并将Task分发给绑定了对应网络事件的Handler执行。</p><p>3）几个角色<br>reactor：负责绑定管理事件和处理接口；<br>selector：负责监听响应事件，将事件分发给绑定了该事件的Handler处理；<br>Handler：事件处理器，绑定了某类事件，负责执行对应事件的Task对事件进行处理；<br>Acceptor：Handler的一种，绑定了connect事件。当客户端发起connect请求时，Reactor会将accept事件分发给Acceptor处理。</p><h2 id="Reactor是什么？"><a href="#Reactor是什么？" class="headerlink" title="Reactor是什么？"></a>Reactor是什么？</h2><ol><li>事件驱动</li><li>可以处理一个或多个输入源</li><li>通过多路复用将请求的事件分发给对应的处理器处理</li></ol><p>Reactor模式首先是事件驱动的，有一个或多个并发输入源，有一个Service Handler，有多个Request Handlers；这个Service Handler会同步的将输入的请求（Event）多路复用的分发给相应的Request Handler。</p><p><img src="/posts/62292/reactor.png" alt="reactor"></p><p>从结构上，这有点类似生产者消费者模式，即有一个或多个生产者将事件放入一个Queue中，而一个或多个消费者主动的从这个Queue中Poll事件来处理；而Reactor模式则并没有Queue来做缓冲，每当一个Event输入到Service Handler之后，该Service Handler会主动的根据不同的Event类型将其分发给对应的Request Handler来处理。</p><h2 id="Reactor模式结构"><a href="#Reactor模式结构" class="headerlink" title="Reactor模式结构"></a>Reactor模式结构</h2><p>在解决了什么是Reactor模式后，我们来看看Reactor模式是由什么模块构成。</p><p><img src="/posts/62292/Reactor_Structures.png" alt="Reactor结构"></p><ol><li><strong>Handle</strong>：即操作系统中的句柄，是对资源在操作系统层面上的一种抽象，它可以是打开的文件、一个连接(Socket)、Timer等。由于Reactor模式一般使用在网络编程中，因而这里一般指Socket Handle，即一个网络连接（Connection，在Java NIO中的Channel）。这个Channel注册到Synchronous Event Demultiplexer中，以监听Handle中发生的事件，对ServerSocketChannnel可以是CONNECT事件，对SocketChannel可以是READ、WRITE、CLOSE事件等。</li><li><strong>Synchronous Event Demultiplexer</strong>：阻塞等待一系列的Handle中的事件到来，如果阻塞等待返回，即表示在返回的Handle中可以不阻塞的执行返回的事件类型。这个模块一般使用操作系统的select来实现。在Java NIO中用Selector来封装，当Selector.select()返回时，可以调用Selector的selectedKeys()方法获取Set<SelectionKey>，一个SelectionKey表达一个有事件发生的Channel以及该Channel上的事件类型。上图的Synchronous Event Demultiplexer ---notifies--&gt; Handle”的流程如果是对的，那内部实现应该是select()方法在事件到来后会先设置Handle的状态，然后返回。不了解内部实现机制，因而保留原图。</SelectionKey></li><li><strong>Initiation Dispatcher</strong>：用于管理Event Handler，即EventHandler的容器，用以注册、移除EventHandler等；另外，它还作为Reactor模式的入口调用Synchronous Event Demultiplexer的select方法以阻塞等待事件返回，当阻塞等待返回时，根据事件发生的Handle将其分发给对应的Event Handler处理，即回调EventHandler中的handle_event()方法。</li><li><strong>Event Handler</strong>：定义事件处理方法：handle_event()，以供InitiationDispatcher回调使用。</li><li><strong>Concrete Event Handler</strong>：事件EventHandler接口，实现特定事件处理逻辑。</li></ol><h2 id="为什么需要-Reactor-模型"><a href="#为什么需要-Reactor-模型" class="headerlink" title="为什么需要 Reactor 模型"></a>为什么需要 Reactor 模型</h2><p>最最原始的网络编程思路就是服务器用一个while循环，不断监听端口是否有新的套接字连接，如果有，那么就调用一个处理函数处理，类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  socket = accept();</span><br><span class="line">  handle(socket)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法的最大问题是无法并发，效率太低，如果当前的请求没有处理完，那么后面的请求只能被阻塞，服务器的吞吐量太低。<br>之后，想到了使用多线程，也就是很经典的connection per thread，每一个连接用一个线程处理，类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  socket = accept();</span><br><span class="line">  <span class="keyword">new</span> thread(socket);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tomcat服务器的早期版本确实是这样实现的。多线程的方式确实一定程度上极大地提高了服务器的吞吐量，因为之前的请求在read阻塞以后，不会影响到后续的请求，因为他们在不同的线程中。这也是为什么通常会讲“一个线程只能对应一个socket”的原因。最开始对这句话很不理解，线程中创建多个socket不行吗？语法上确实可以，但是实际上没有用，每一个socket都是阻塞的，所以在一个线程里只能处理一个socket，就算accept了多个也没用，前一个socket被阻塞了，后面的是无法被执行到的。</p><p>缺点在于资源要求太高，系统中创建线程是需要比较高的系统资源的，如果连接数太高，系统无法承受，而且，线程的反复创建-销毁也需要代价。<br>线程池本身可以缓解线程创建-销毁的代价，这样优化确实会好很多，不过还是存在一些问题的，就是线程的粒度太大。每一个线程把一次交互的事情全部做了，包括读取和返回，甚至连接，表面上似乎连接不在线程里，但是如果线程不够，有了新的连接，也无法得到处理，所以，目前的方案线程里可以看成要做三件事，连接，读取和写入。<br>线程同步的粒度太大了，限制了吞吐量。应该把一次连接的操作分为更细的粒度或者过程，这些更细的粒度是更小的线程。整个线程池的数目会翻倍，但是线程更简单，任务更加单一。这其实就是Reactor出现的原因，在Reactor中，这些被拆分的小线程或者子过程对应的是handler，每一种handler会出处理一种event。这里会有一个全局的管理者selector，我们需要把channel注册感兴趣的事件，那么这个selector就会不断在channel上检测是否有该类型的事件发生，如果没有，那么主线程就会被阻塞，否则就会调用相应的事件处理函数即handler来处理。典型的事件有连接，读取和写入，当然我们就需要为这些事件分别提供处理器，每一个处理器可以采用线程的方式实现。一个连接来了，显示被读取线程或者handler处理了，然后再执行写入，那么之前的读取就可以被后面的请求复用，吞吐量就提高了。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.blogjava.net/DLevin/archive/2015/09/02/427045.html">Reactor模式详解</a><br><a href="https://www.cnblogs.com/doit8791/p/7461479.html">高性能IO之Reactor模式</a></p>]]></content>
      
      
      <categories>
          
          <category> arch </category>
          
          <category> nio </category>
          
          <category> 概念 </category>
          
          <category> 概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 概念 </tag>
            
            <tag> Reactor模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot打war包</title>
      <link href="posts/17384.html"/>
      <url>posts/17384.html</url>
      
        <content type="html"><![CDATA[<p>spring boot 在内置了 tomcat，但是会使用到外置 tomcat 的情况。在使用外置 tomcat 时需要让 spring boot 的打包方式打成 war 包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>fund<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">packagingExcludes</span>&gt;</span>**/env/**<span class="tag">&lt;/<span class="name">packagingExcludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/env/$&#123;env&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>WEB-INF/classes<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--打包参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>qa<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>qa<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> maven </tag>
            
            <tag> jar </tag>
            
            <tag> 打包 </tag>
            
            <tag> war </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 中使用 hibernate validate 校验</title>
      <link href="posts/36036.html"/>
      <url>posts/36036.html</url>
      
        <content type="html"><![CDATA[<p>spring boot 中使用 Hibernate validate 进行入参字段校验，一般用于web 接口入参校验，用起来非常方便。</p><h3 id="spring-boot-的配置"><a href="#spring-boot-的配置" class="headerlink" title="spring boot 的配置"></a>spring boot 的配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.HibernateValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Validation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ValidatorFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method:  开启快速返回</span></span><br><span class="line"><span class="comment">     * Description: </span></span><br><span class="line"><span class="comment">     *          如果参数校验有异常，直接抛异常，不会进入到 controller，使用全局异常拦截进行拦截</span></span><br><span class="line"><span class="comment">     * Author: liu kai</span></span><br><span class="line"><span class="comment">     * Date: 2018/7/12 17:33</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodValidationPostProcessor <span class="title">methodValidationPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodValidationPostProcessor postProcessor = <span class="keyword">new</span> MethodValidationPostProcessor();</span><br><span class="line">        <span class="comment">/**设置validator模式为快速失败返回*/</span></span><br><span class="line">        postProcessor.setValidator(validator());</span><br><span class="line">        <span class="keyword">return</span> postProcessor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">validator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )</span><br><span class="line">                .configure()</span><br><span class="line">                .addProperty( <span class="string">&quot;hibernate.validator.fail_fast&quot;</span>, <span class="string">&quot;true&quot;</span> )</span><br><span class="line">                .buildValidatorFactory();</span><br><span class="line">        Validator validator = validatorFactory.getValidator();</span><br><span class="line">        <span class="keyword">return</span> validator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller-中使用"><a href="#controller-中使用" class="headerlink" title="controller 中使用"></a>controller 中使用</h3><p>使用步骤:</p><ol><li>在 controller 类上 @Validated</li><li>BindingResult result  这个不能省，必须要有，测试不加不行。</li><li>@Valid    加上这个注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsInfoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Method:  添加新闻</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Author: pan ying</span></span><br><span class="line"><span class="comment"> * Date: 2018/6/13 17:43</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newsRequestVo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.reapal.openapi.web.vo.ResultVo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/save&quot; ,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultVo <span class="title">saveNewsInfo</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> NewsRequestVo newsRequestVo, BindingResult result)</span></span>&#123;</span><br><span class="line">   ResultVo resultVo = <span class="keyword">new</span> ResultVo();</span><br><span class="line">   newsInfoBusiness.insert(newsRequestVo);</span><br><span class="line">   <span class="keyword">return</span>  resultVo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类中使用"><a href="#实体类中使用" class="headerlink" title="实体类中使用"></a>实体类中使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3148176768559230877L</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/** id */</span></span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="comment">/** 新闻编号 */</span></span><br><span class="line"><span class="keyword">private</span> String newsNo;</span><br><span class="line"><span class="comment">/** 标题 */</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Length(max=30, message=&quot;长度超过限制&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> hibernate </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea 自定义注释</title>
      <link href="posts/26397.html"/>
      <url>posts/26397.html</url>
      
        <content type="html"><![CDATA[<p>日常开发当中，开发规范要求每个开发人员做到要必要的代码上加上注释。借助IDE可以快速的生成这些注释。</p><h3 id="1-文件头部注释"><a href="#1-文件头部注释" class="headerlink" title="1.文件头部注释"></a>1.文件头部注释</h3><p>次创建新文件时会自动添加到文件头<br><code>Perferences---Editor---&gt;File and Code Templates---&gt;Includes</code><br>即是，不过这里设值类似Eclipse用 ${ }</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $&#123;USER&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $&#123;DATE&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>看效果</p><p><img src="/posts/26397/File.png" alt="File"></p><h3 id="2-方法注释"><a href="#2-方法注释" class="headerlink" title="2.方法注释"></a>2.方法注释</h3><ol><li>创建 Template Group</li><li>创建 Live Template</li></ol><h4 id="创建-Template-Group"><a href="#创建-Template-Group" class="headerlink" title="创建 Template Group"></a>创建 Template Group</h4><p>idea 做的相当不错的，可以根据自定义注释名称来生成自己设定的注释<br><code>Perferences---Editor---&gt;Live Templates</code><br>点 + 创建 <code>Template Group</code> 输入自己的 Template</p><p><img src="/posts/26397/method.png" alt="method"></p><h4 id="创建-Live-Template"><a href="#创建-Live-Template" class="headerlink" title="创建 Live Template"></a>创建 Live Template</h4><p>再点 + 创建 Live Temp 剩下的不用看也明白了，这里做一个模板：<br>Abb reviation 是自定义快捷语，在代码中输入自定义名称回车就能出来。<br>define  选择注释生效的范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* method:</span></span><br><span class="line"><span class="comment">* description:</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> $user$</span></span><br><span class="line"><span class="comment">* <span class="doctag">@data</span> $data$ $time$</span></span><br><span class="line"><span class="comment">* $parameter$</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> $return$</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Edit variables 中编辑对应的值多行需要在方法内部就可以实现，方法外部参数就是出不来。好 low</p><h3 id="3-多行需要在"><a href="#3-多行需要在" class="headerlink" title="3.多行需要在"></a>3.多行需要在</h3><p><code>$parameter$</code>  的变量设置这面这行 groovy 脚本写在 Default Value 里：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(<span class="string">&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#x27;@param &#x27; + params[i] + ((i &lt; params.size() - 1) ? &#x27;\\n\\b&#x27; : &#x27;&#x27;)&#125;; return result&quot;</span>, methodParameters())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
            <tag> 注释 </tag>
            
            <tag> 自定义注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea 设置编译版本无效问题解决</title>
      <link href="posts/12139.html"/>
      <url>posts/12139.html</url>
      
        <content type="html"><![CDATA[<p>idea 编译总是1.5处理<br>使用 idea 时会碰到在 Project Structure 中设置了编译版本为 1.8 时，重新编译过后查看，还是1.5的问题，怎么都改不过来。<br>这是因为 maven 的 compiler 工具的问题，两种解决方式。</p><p>1.指定 comipler 的编译版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.同理，只是在放在 properties 标签当中<br>更简单的解决 idea 编译为 1.5 的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两种方式都可以解决 idea 设置无效的问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 解决 </tag>
            
            <tag> 问题 </tag>
            
            <tag> 编译 </tag>
            
            <tag> maven </tag>
            
            <tag> idea </tag>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Cannot determine embedded database driver class for database type NONE</title>
      <link href="posts/63641.html"/>
      <url>posts/63641.html</url>
      
        <content type="html"><![CDATA[<p>刚搭的新项目一启动就报错，一直就知种起不来。各种搜索以后总结两种解决方式。<br>先看错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Cannot determine embedded database driver class for database type NONE</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">If you want an embedded database please put a supported one on the classpath. If you have database settings to be loaded from a particular profile you may need to active it (no profiles are currently active).</span><br></pre></td></tr></table></figure><h4 id="处理方式一："><a href="#处理方式一：" class="headerlink" title="处理方式一："></a>处理方式一：</h4><p>排除两个默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(exclude&#x3D;&#123;DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure><p>结论：没用</p><h4 id="处理方式二：-可行"><a href="#处理方式二：-可行" class="headerlink" title="处理方式二： 可行"></a>处理方式二： 可行</h4><p>网上说各种多于的依赖导至的问题，经过排查，确实是由 pagehelper 这个依赖引起的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;org.hibernate&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;4.2.0.Final&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.1.1&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--pagehelper--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.1.2&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;mysql&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;5.1.21&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>总结：程序启动类不需要排除任务一个类，只需要去除引用却可。</p><p>其他思路<br><a href="http://www.cnblogs.com/kmsfan/p/7189626.html">http://www.cnblogs.com/kmsfan/p/7189626.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> 报错 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot注解 @ConfigurationProperties和@EnableConfigurationProperties的区别</title>
      <link href="posts/43896.html"/>
      <url>posts/43896.html</url>
      
        <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><code>@EnableConfigurationProperties</code><br>测试发现 <code>@ConfigurationProperties</code> 与 <code>@EnableConfigurationProperties</code> 关系特别大。</p><p><code>@EnableConfigurationProperties</code> 文档中解释：<br>当<code>@EnableConfigurationProperties</code>注解应用到你的<code>@Configuration</code>时，任何被<code>@ConfigurationProperties</code>注解的beans将自动被Environment属性配置。这种风格的配置特别适合与SpringApplication的外部YAML配置进行配合使用。</p><p>测试发现：<br>1.使用 <code>@EnableConfigurationProperties</code> 进行注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;service.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">&quot;test-service&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg = SERVICE_NAME;</span><br><span class="line">    set/get</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloServiceProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(HelloService.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;hello&quot;, value = &quot;enable&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationPropertiesController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloServiceProperties helloServiceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getObjectProperties&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectProperties</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(helloServiceProperties.getMsg());</span><br><span class="line">        <span class="keyword">return</span> myConfigTest.getProperties();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自动配置设置"><a href="#自动配置设置" class="headerlink" title="自动配置设置"></a>自动配置设置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service.properties.name=my-test-name</span><br><span class="line">service.properties.ip=192.168.1.1</span><br><span class="line">service.user=kayle</span><br><span class="line">service.port=8080</span><br></pre></td></tr></table></figure><p>一切正常，但是 HelloServiceAutoConfiguration 头部不使用 <code>@EnableConfigurationProperties</code>，测访问报错。</p><p>2.不使用 <code>@EnableConfigurationProperties</code> 进行注册，使用 <code>@Component</code> 注册  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;service.properties&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">&quot;test-service&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg = SERVICE_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller 不变，一切正常，如果注释掉 @Component 测启动报错。<br>由此证明，两种方式都是将被  @ConfigurationProperties 修饰的类，加载到 Spring Env 中。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommandLineRunner 指定启动顺序</title>
      <link href="posts/25194.html"/>
      <url>posts/25194.html</url>
      
        <content type="html"><![CDATA[<p>这个实际是可以用来当用启动时加载某些程序，相当于以前的 <code>static&#123;  &#125;</code> 这种块。这种方式优雅的多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value=1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行顺序 -&gt; 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value=2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner2</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行顺序 -&gt; 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据控制台结果可判断，@Order 注解的执行优先级是按value值从小到大顺序。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> spring </tag>
            
            <tag> CommandLineRunner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-344-字符串反转</title>
      <link href="posts/57011.html"/>
      <url>posts/57011.html</url>
      
        <content type="html"><![CDATA[<p>LeetCode 的344 题。</p><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。</p><p><strong>提示:</strong></p><ul><li>1 &lt;= s.length &lt;= 105</li><li><code>s[i]</code> 都是 <strong>ASCII</strong> 码表中的可打印字符</li></ul><p>示例1:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1.字符串是奇数个，则最后，中间位置的那个是不需要交换的。如果是偶数个，所有位置交换一遍就完成了。<br>2.这个方法的使用的是首尾逐渐向中间位置的元素递增交换的过程。</p><h3 id="分解过程"><a href="#分解过程" class="headerlink" title="分解过程"></a>分解过程</h3><p>[<strong>1</strong>][2][3][4][5][6][<strong>7</strong>]<br>[7][<strong>2</strong>][3][4][5][<strong>6</strong>][1]<br>[7][6][<strong>3</strong>][4][<strong>5</strong>][2][1]<br>[7][6][5][<strong>4</strong>][3][2][1]</p><h3 id="解题实现"><a href="#解题实现" class="headerlink" title="解题实现"></a>解题实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/7/18 13:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        reverseString(<span class="string">&quot;abcdefg&quot;</span>.toCharArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = s.length - i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; s.length / <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">char</span> ch = s[i];</span><br><span class="line">            s[i] = s[k];</span><br><span class="line">            s[k] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解过程-1"><a href="#分解过程-1" class="headerlink" title="分解过程"></a>分解过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;字符串总长度: &quot;</span> + s.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = s.length - i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; s.length / <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;break---&gt; k: &quot;</span> + k + <span class="string">&quot;, s.length / 2: &quot;</span> + s.length / <span class="number">2</span> + <span class="string">&quot;, i: &quot;</span> + i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素[&quot;</span> + k + <span class="string">&quot;] 和 元素[&quot;</span> + i + <span class="string">&quot;] 交换&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> ch = s[i];</span><br><span class="line">        s[i] = s[k];</span><br><span class="line">        s[k] = ch;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> leetcode </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 交换字符串 </tag>
            
            <tag> LeetCode 解题思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop 1.0 和 NameNode 的一些回顾</title>
      <link href="posts/63037.html"/>
      <url>posts/63037.html</url>
      
        <content type="html"><![CDATA[<h2 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h2><p>可以理解为主从模式：</p><ol><li>NameNode 是主节点 [Master]<br>SecondaryNameNode[Master]</li><li>DataNode 是从节点 [Worker]</li></ol><h4 id="Hdfs-1-0-回顾"><a href="#Hdfs-1-0-回顾" class="headerlink" title="Hdfs 1.0 回顾"></a>Hdfs 1.0 回顾</h4><p><strong>1.NameNode 两种元数据映射：</strong><br>1.文件名—-&gt;block数据映射<br>2.block 数据块 —&gt; datanode 节点地址的映射</p><p>细节：<br>  1.是持久化到NN的磁盘上的<br>（fsimage&lt;—edits log&lt;—NN的内存变化来的）<br>  2.是通过心跳来组织起来的(DN—&gt;NN)</p><p>注意：如果设置的副本数量小于DataNode的节点个数，其实是不会超过DataNode 的个数的。比如副本个数设3,DataNode只有两个，副本只会有两个。</p><p><strong>2.就目前我们的环境（1个master，2个slaves）：虽然默认3个副本，期实是两个。</strong><br><strong>3.NN倾向存储大数据：太小的话，block多，内存放不下，太大的话，MR作务执行慢。</strong><br><strong>4.如果没有SNN，fsimage多久加载一次，只有重启时加载，如果有了SNN呢？SNN存在的意义？备份，数据恢复editlog 什么时候会合并到 fsimage中？（重启、定期）</strong><br><strong>5.为什么在1.0只能有一个NN? (在zookeepeer 之前)</strong><br><strong>6. 数据完整性校验的目的：检测数据是否损坏<br>  用什么校验方法？ （crc32算法产生的校验合和）存在几种校验逻辑（1.client写校验和，DN校验， 2.DabablockScanner 后来进程）</strong></p><p><strong>7.HDFS 可靠性保证有哪些</strong>  </p><ol><li>心跳：DN--&gt;NN</li><li>块报告：检查数据有没有发生异常，存储情况</li><li>数据块完整性</li><li>空间回收</li><li>副本---数据冗余</li><li>SNN</li><li>快照</li><li>同步和异步的区别?<br>以nameNode 写和为例：</li></ol><ul><li>同步写：一个 client 操作 节点写完即可，剩余节点一个一个写完  。</li><li>异步写：写完一个节点后，期余节点同步即可。</li></ul><ol start="9"><li>计算框架和任务调度管理部署同一台机器的好处？本地化，尽量减少数据移动的开销。</li></ol>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> hadoop1.0 </tag>
            
            <tag> NameNode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据常见业务</title>
      <link href="posts/851.html"/>
      <url>posts/851.html</url>
      
        <content type="html"><![CDATA[<h3 id="常见业务"><a href="#常见业务" class="headerlink" title="常见业务"></a><strong>常见业务</strong></h3><h4 id="1-搜索引擎"><a href="#1-搜索引擎" class="headerlink" title="1.搜索引擎"></a>1.搜索引擎</h4><p>三段式结构：<br>1.检索系统<br>2.索引系统<br>3.spider爬虫</p><p>1.爬虫：由搜索引擎主动发起，去别人家的网站去爬数据<br>关键是建索引</p><p>快速判重：布隆过滤器。<br>给定数据排序：<br>1.常见排序算法<br>2.BitMap 算法，<br>    数据量小的时间复杂度、空间复杂度比较大如(10、122、10万)。但是适应于密集的情况，有明显优势。</p><h4 id="2-推荐系统"><a href="#2-推荐系统" class="headerlink" title="2.推荐系统"></a>2.推荐系统</h4><p>NetFlix 推荐系统公司，很多公司的标杆，其他公司的系统多少都会抄这家公司。</p><p>推荐系统通常有三个部份：</p><ol><li>offline 部份，离线</li><li>nearline 部分，近线</li><li>online部分，在线</li></ol><p>划分为以上三部分的理由：</p><p>|<em><strong><strong><strong>昨天</strong></strong></strong>|<strong><strong><strong>今天</strong></strong></strong></em>|</p><p><strong>离线</strong>：<br>当天肯定无法将当天所有用户的行为数据拿到，所以将昨天的数据存储后进行计算。<br>比如，用户9点看了鞋子的广告，但量不能确定10后用户还看了什么。<br>离线挖掘出的数据，应快带提供出去，比如使用NOSQL做为中间介质传递出去。redis、mongo、hbase 等<br>前端从nosql中去取数据。<br>大至是这个流程。</p><p><strong>在线</strong>：<br>处理在线的时时的数据，对数据进行时时产生。如地图。<br>为什么不用时实代替离线？？<br>如果时实时系统做的很完备，可以不要离线。但是实时任务有个特点，时效性要求非常高，为了保证任务快速得到结果，所以必须做出妥协，所以实时任不能有复杂算法，否则一量有一个任务出现非实时性，则整个实时任务线将受到影响。<br>离线不在乎时间，可以做复杂算法任务。所以两种任务，输入一样，输出并不一样。离线更准确，在线可以给一个近似的结果。</p><p><strong>近线</strong>：<br>类似在线，如 storm、spark</p><p>推荐数据放缓存数据库中，如：NOSQL</p><p>数据有两部分：</p><ol><li>用户行为数据</li><li>物品元数据：即名称，描述，标签，颜色等等属性</li></ol>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 业务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell--检查github最新release</title>
      <link href="posts/e6470787.html"/>
      <url>posts/e6470787.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常在需要使用脚本监控仓库是不是有最新的release版本的发布，然后进行自动构建。<br>如何知道远程的github是发布新的release版本，可以能过脚本来获得。</p><h2 id="git-ls-remote"><a href="#git-ls-remote" class="headerlink" title="git ls-remote"></a>git ls-remote</h2><p>作用：查看远程分支。能够列出远程分中的内容。</p><h3 id="查看远程所有tag"><a href="#查看远程所有tag" class="headerlink" title="查看远程所有tag"></a>查看远程所有tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-remote --tags ./.</span><br></pre></td></tr></table></figure><p>结果如下：</p><blockquote><p>d6602ec5194c87b0fc87103ca4d67251c76f233a        refs/tags/v0.99<br>f25a265a342aed6041ab0cc484224d9ca54b6f41        refs/tags/v0.99.1<br>7ceca275d047c90c0c7d5afb13ab97efdf51bd6e        refs/tags/v0.99.3<br>c5db5456ae3b0873fc659c19fafdde22313cc441        refs/tags/v0.99.2</p></blockquote><h3 id="查看指定仓库分支"><a href="#查看指定仓库分支" class="headerlink" title="查看指定仓库分支"></a>查看指定仓库分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-remote http://www.kernel.org/pub/scm/git/git.git master seen rc</span><br></pre></td></tr></table></figure><blockquote><p>5fe978a5381f1fbad26a80e682ddd2a401966740        refs/heads/master<br>c781a84b5204fb294c9ccc79f8b3baceeb32c061        refs/heads/seen</p></blockquote><h2 id="检查远程"><a href="#检查远程" class="headerlink" title="检查远程"></a>检查远程</h2><p>写一个脚本来实现自动检查远端仓库是否有新的release，脚本需要具备：</p><ol><li>过滤指定仓库</li><li>查看最新版本</li></ol><p>借助 git ls-remote 来实现。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">GITHUB_CLONE_TYPE=&#x27;HTTPS&#x27;</span><br><span class="line"></span><br><span class="line">GITHUB_REPOSITORY=&#x27;&#x27;</span><br><span class="line">GITHUB_REPOSITORY_HTTPS_URL=&#x27;https://github.com/liukai/test.git&#x27;</span><br><span class="line">GITHUB_REPOSITORY_SSH_URL=&#x27;git@github.com:liukai/test.git&#x27;</span><br><span class="line"></span><br><span class="line">if [[ $GITHUB_CLONE_TYPE == &#x27;HTTPS&#x27; ]]; then</span><br><span class="line">  GITHUB_REPOSITORY=$GITHUB_REPOSITORY_HTTPS_URL</span><br><span class="line">else</span><br><span class="line">  GITHUB_REPOSITORY=$GITHUB_REPOSITORY_SSH_URL</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">getLatestReleaseVersion() &#123;</span><br><span class="line">  full_node_version=`git ls-remote --tags $GITHUB_REPOSITORY | awk -F &#x27;/&#x27; &#x27;END&#123;print $3&#125;&#x27;`</span><br><span class="line">  if [[ -n $full_node_version ]]; then</span><br><span class="line">   echo $full_node_version</span><br><span class="line">  else</span><br><span class="line">   echo &#x27;&#x27;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkVersion() &#123;</span><br><span class="line"> github_release_version=$(`echo getLatestReleaseVersion`)</span><br><span class="line"> if [[ -n $github_release_version ]]; then</span><br><span class="line">  echo &quot;info: github latest version: $github_release_version&quot;</span><br><span class="line">  echo $github_release_version</span><br><span class="line"> else</span><br><span class="line">  echo &#x27;info: not getting the latest version&#x27;</span><br><span class="line">  exit</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试调用一下</span></span><br><span class="line">checkVersion</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个脚本主要是利用<code>git</code>自带的检查远程仓库的功能来实现，加了一些简单判断就可以实现功能。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> shell </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 添加自定义 fliter</title>
      <link href="posts/16044.html"/>
      <url>posts/16044.html</url>
      
        <content type="html"><![CDATA[<p>自定义的 springboot 过滤器要注册到 spring boot中， 首先先添加一个过滤器，然后在spring boot 进行注册即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.reapal.openapi.web.filter.XSSFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title: 注册自定义过滤器</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/26 16:06.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssFilterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">someFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> XSSFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;xssFilter&quot;</span>);</span><br><span class="line">        registration.setOrder(Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> filter </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot + vue 跨域处理</title>
      <link href="posts/45085.html"/>
      <url>posts/45085.html</url>
      
        <content type="html"><![CDATA[<p>在使用 vue 做前端开发时，碰到 vue 请求接口出现跨域问题。<br>解决的方法，就在后台添加一个跨域请求的过滤器，来添加跨域支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title: 跨域处理</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *          vue 请求服务跨域处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/14 10:38.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;,reqs.getHeader(&quot;Origin&quot;));</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, PATCH, DELETE, PUT&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> srping boot </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell判空true false的一个坑</title>
      <link href="posts/ce4e2513.html"/>
      <url>posts/ce4e2513.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在写shell的时候发现一个违反直觉的的操作，一般判断一个变量是否为<code>boolean</code>，习惯上使用<code>if param</code>。<br>但是在写脚本的时候，发现无论如何，不会走false。</p><h2 id="反例"><a href="#反例" class="headerlink" title="反例"></a>反例</h2><p>在很多编程语言中，可以直接使用 if boolean，来判断这个变量是否为true。但是在shell当中直觉上是可以，但实际上是不能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaa=false</span><br><span class="line">if [[ $aaa ]];then</span><br><span class="line">  echo &quot;is true&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;is false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>结是为<code>is true</code>，是不是违反直觉。</p><p>为什么这段脚本会进<code>is true</code>。</p><p>shell 是怎么执行这一段脚本的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -x test.sh</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ aaa=false</span><br><span class="line">+ [[ -n false ]]</span><br><span class="line">+ echo &#x27;is true&#x27;</span><br><span class="line">is true</span><br></pre></td></tr></table></figure><p>可以看到，如果是一个变量，shell 会默认加上<code>-n</code>来判断变量是否为空。aaa是有值的，而且在shell里，false 并不代表false。真正代表true和false的是<code>0</code>和<code>1</code>，没想到吧。</p><h2 id="正常判断"><a href="#正常判断" class="headerlink" title="正常判断"></a>正常判断</h2><p>注意，这里用的是<code>=</code>，而不是<code>==</code>，也是违反直觉，很多编程语言都是使用的<code>==</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaa=false</span><br><span class="line">if [ $aaa = true ];then</span><br><span class="line">  echo &quot;is true&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;is false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>在中括号<code>[ ]</code>中使用==是bash里的做法, 不符合<code>posix</code>标准。<br>posix，是通用操作系统接口的缩写。</p><blockquote><p>Do not use ==. It is only valid in a limited set of shells, and will produce unspecified behavior.</p></blockquote><h2 id="尽量使用-而不是"><a href="#尽量使用-而不是" class="headerlink" title="尽量使用 = 而不是 =="></a>尽量使用 = 而不是 ==</h2><p>在shell当中<code>==</code>的作用是<code>完全匹配</code>。但是在不同的<code>shell</code>当中表现不同。我没有一个一个试，在查这个问题的时候，看到这段结论：</p><p>不支持的shell</p><blockquote><p>dash:<br>4: [: A: unexpected operator<br>not support ==<br>tcsh:<br>test: unknown operator ==</p></blockquote><p>支持的shell</p><blockquote><p>bash:<br>support ==<br>ksh:<br>support ==</p></blockquote><p>引用：<a href="http://stackoverflow.com/questions/10849297/compare-a-string-in-unix">http://stackoverflow.com/questions/10849297/compare-a-string-in-unix</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring 解决 Cannot determine embedded database driver class for database type NONE</title>
      <link href="posts/2b47ba9a.html"/>
      <url>posts/2b47ba9a.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>新项目搭建时，项目启不来，报了一个错。</p><blockquote><p>Description:</p><p>Cannot determine embedded database driver class for database type NONE</p><p>Action:</p><p>If you want an embedded database please put a supported one on the classpath. If you have database settings to be loaded from a particular profile you may need to active it (no profiles are currently active).</p></blockquote><h2 id="处理方式一-排除两个默认配置"><a href="#处理方式一-排除两个默认配置" class="headerlink" title="处理方式一: 排除两个默认配置"></a>处理方式一: 排除两个默认配置</h2><p>排除两个默认配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude=&#123;DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：没用</p><h2 id="处理方式二：可行"><a href="#处理方式二：可行" class="headerlink" title="处理方式二：可行"></a>处理方式二：可行</h2><p>网上说各种多于的依赖导至的问题，通过IDEA查看jar依赖，确实是。<br>由 pagehelper 这个依赖引起的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;org.hibernate&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;4.2.0.Final&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.1.1&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--pagehelper--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.1.2&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;groupId&gt;mysql&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;5.1.21&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>程序启动类不需要排除任务一个类，只需要去除引用却可。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot使用pagehelper报错解决方法</title>
      <link href="posts/4835.html"/>
      <url>posts/4835.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><code>springboot</code>项目使用<code>SpringMVC</code>的<code>pagehelper</code>报错。</p><h3 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h3><p>springboot 不能使用<code>pagehelper</code>的<code>4.1.x</code> 和 <code>5.1.x</code>，而需要使用 <code>pagehelper-spring-boot-starter</code></p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>同事的新项目使用 Spring boot，之前是 SpringMVC 所以把<code>pom.xml</code>直接复制过来，一跑就报各种错，各种谷歌百度都不管用。<br>查看 pom 依赖的包后，决定对他一顿老拳。</p><h3 id="正确的示例"><a href="#正确的示例" class="headerlink" title="正确的示例"></a>正确的示例</h3><p>而必须使用，否则 yml 配置无效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="坑一个是一个的示例，谁用谁脱发"><a href="#坑一个是一个的示例，谁用谁脱发" class="headerlink" title="坑一个是一个的示例，谁用谁脱发"></a>坑一个是一个的示例，谁用谁脱发</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageHelper <span class="title">pageHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;MyBatisConfiguration.pageHelper()&quot;</span>);</span><br><span class="line">    PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</span><br><span class="line">    Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">    p.setProperty(<span class="string">&quot;offsetAsPageNum&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    p.setProperty(<span class="string">&quot;rowBoundsWithCount&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    p.setProperty(<span class="string">&quot;reasonable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    pageHelper.setProperties(p);</span><br><span class="line">    <span class="keyword">return</span> pageHelper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>最坑爹的不是版本问题，而是大部分的答案都是这个错误的答案。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
            <tag> pagehelper报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>getWriter() has already been called for this response 的解决办法</title>
      <link href="posts/45791.html"/>
      <url>posts/45791.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用<code>springboot</code>时，发现有个同事报了一个错：</p><blockquote><p>getWriter() has already been called for this response<br>错误提示也比较明显，是被调用过了。</p></blockquote><p>出错的部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//有问题的部份</span></span><br><span class="line">  <span class="comment">//PrintWriter out = null;</span></span><br><span class="line">  <span class="comment">//out = response.getWriter();</span></span><br><span class="line">  <span class="comment">//String json = new ObjectMapper().writeValueAsString(map);</span></span><br><span class="line">  <span class="comment">//out.write(json);</span></span><br><span class="line">  <span class="comment">//out.flush();</span></span><br><span class="line">  <span class="comment">//out.close();</span></span><br><span class="line">  </span><br><span class="line">  outputStream = response.getOutputStream();</span><br><span class="line">  String json = <span class="keyword">new</span> ObjectMapper().writeValueAsString(map);</span><br><span class="line">  outputStream.write(json.getBytes());</span><br><span class="line">  outputStream.flush();</span><br><span class="line">  outputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  LOGGER.error(e.getMessage(), e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      outputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释部份为有问题的写法。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><code>response.getWriter()</code> 是流的形式，只能被调用一次，老问题了，代码的下面部分写法解决这个问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 随机数生成器Random、ThreadLocalRandom、SecureRandom</title>
      <link href="posts/28cbeea.html"/>
      <url>posts/28cbeea.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>java中常用的三个随机数类：</p><ol><li>Random</li><li>ThreadLocalRandom</li><li>SecureRandom</li></ol><p>Random 是最常用的类，ThreadLocalRandom 性能快，SecureRandom 注重安全。<br>下面简单分析3个类的使用。</p><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><p>伪随机数生成器，可以传一个种子来生成随机数。<br>种子就是一个指定的变量，用来参与生成随机数，如果什么都不传，默认使用<code>System.nanoTime()</code> 来参与生成。<br>特点：<code>Random</code> 是线程安全的、不是加密安全的，因为是伪随机数。<br><code>Random</code>用到了compareAndSet + synchronized来解决线程安全问题，虽然可以使用<code>ThreadLocal&lt;Random&gt;</code>来避免竞争，但是无法避免<code>synchronized/compareAndSet</code>带来的开销。</p><h3 id="生成指定范围随机数"><a href="#生成指定范围随机数" class="headerlink" title="生成指定范围随机数"></a>生成指定范围随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//指定随机数范围</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getRandom1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    System.out.println(<span class="string">&quot;生成随机数：&quot;</span> + random.nextInt(<span class="number">100</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//指定随机数范围</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getRandom2</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">int</span> randomInt = random.nextInt(max) % (max - min + <span class="number">1</span>) + min;</span><br><span class="line">    System.out.println(randomInt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为什么不安全？<br>其中的报漏洞的解释是这样说的，在对安全性要求较高的环境中，使用能够生成可预测值的函数作为伪随机数据源，会产生<code>Insecure Randomness(不安全随机性)</code>错误。</p><h2 id="ThreadLocalRandom"><a href="#ThreadLocalRandom" class="headerlink" title="ThreadLocalRandom"></a>ThreadLocalRandom</h2><p>作用：性能快。追求性能使用<code>ThreadLocalRandom</code>。<br>考虑到性能还是建议替换使用<code>ThreadLocalRandom</code>（有3倍以上提升），这不是<code>ThreadLocal</code>包装后的<code>Random</code>，而是真正的使用<code>ThreadLocal</code>机制重新实现的Random。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSecureRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成 [0,10)的伪随机数, 左开右闭</span></span><br><span class="line">    <span class="keyword">int</span> random = ThreadLocalRandom.current().nextInt(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SecureRandom"><a href="#SecureRandom" class="headerlink" title="SecureRandom"></a>SecureRandom</h2><p>作用：生成安全的随机数。<br>就是字面是的意思，安全的随机。<br>作用很明确，生成安全的、不可预测的随机数。<br><code>httpclient</code>中就有使用。<br>先看看怎么用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSecureRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SecureRandom random1 = SecureRandom.getInstance(<span class="string">&quot;SHA1PRNG&quot;</span>); </span><br><span class="line">    SecureRandom random2 = SecureRandom.getInstance(<span class="string">&quot;SHA1PRNG&quot;</span>); </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; </span><br><span class="line">        System.out.println(random1.nextInt() + <span class="string">&quot; != &quot;</span> + random2.nextInt()); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不可预测性至关重要时， 如大多数对安全性要求较高的环境都采用随机性， 这时可以使用密码学的 PRNG。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> random </tag>
            
            <tag> ThreadLocalRandom </tag>
            
            <tag> SecureRandom </tag>
            
            <tag> 随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot @Bean源码分析</title>
      <link href="posts/44265.html"/>
      <url>posts/44265.html</url>
      
        <content type="html"><![CDATA[<p>1.先看下 Bean 注解的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;name&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="function">Autowire <span class="title">autowire</span><span class="params">()</span> <span class="keyword">default</span> Autowire.NO</span>;</span><br><span class="line">    <span class="function">String <span class="title">initMethod</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function">String <span class="title">destroyMethod</span><span class="params">()</span> <span class="keyword">default</span> AbstractBeanDefinition.INFER_METHOD</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Target 中指定了注解的使用范围是<em>METHON</em> 和 <em>ANNOTATION_TYPE</em>，就是限定方法 和 注解上可以使用。</p><blockquote><p>@Target(ElementType.METHOD) //方法<br>@Target(ElementType.ANNOTATION_TYPE)//注解</p></blockquote><blockquote><p>value -- bean别名和name是相互依赖关联的，value,name如果都使用的话值必须要一致<br>name -- bean名称，如果不写会默认为注解的方法名称<br>autowire -- 自定装配默认是不开启的，建议尽量不要开启，因为自动装配不能装配基本数据类型、字符串、数组等，这是自动装配设计的局限性，以及自动装配不如显示依赖注入精确<br>Spring引入Autowire（自动装配）机制就是为了解决<bean>标签下<property>标签过多的问题，<property>标签过多会引发两个问题：</property></property></bean></p><ul><li>如果一个Bean中要注入的对象过多，比如十几二十个（这是很正常的），那将导致Spring配置文件非常冗长，可读性与维护性差</li><li>如果一个Bean中要注入的对象过多，配置麻烦且一不小心就容易出错<br>default-autowire有四种取值：</li><li>no：默认，即不进行自动装配，每一个对象的注入比如依赖一个<property>标签</property></li><li>byName：按照beanName进行自动装配，使用setter注入</li><li>byType：按照bean类型进行自动装配，使用setter注入</li><li>constructor：与byType差不多，不过最终属性通过构造函数进行注入</li></ul></blockquote><p>通过测试类，可以看到这个注解的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment">* <span class="doctag">@data</span> 2019/4/15 21:53.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;config_test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAuthor(<span class="string">&quot;liu big big&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;刘大大&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        ac.register(ConfigTest.class);</span><br><span class="line">        ac.refresh();</span><br><span class="line">        User user = (User) ac.getBean(<span class="string">&quot;config_test&quot;</span>);</span><br><span class="line">        System.out.println(user.getAuthor());</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>liu big big<br>刘大大</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO-02 NIO和BIO的区别</title>
      <link href="posts/59282.html"/>
      <url>posts/59282.html</url>
      
        <content type="html"><![CDATA[<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>BIO 和 NIO 的区别<br>BIO 好比是通道传输，一来一回<br>NIO 好比是管道传输，一堆来一堆回。</p><h3 id="BIO-模型"><a href="#BIO-模型" class="headerlink" title="BIO 模型"></a>BIO 模型</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">________                        _________</span><br><span class="line">|       |-----------------------|       |</span><br><span class="line">|       |-----------输入--------|       |</span><br><span class="line">|       |                       |       |</span><br><span class="line">|       |-----------输出--------|       |</span><br><span class="line">|       |-----------------------|       |</span><br><span class="line">|-------|                       |-------|</span><br></pre></td></tr></table></figure><p>输入和输出都需要建立一条管道。<br>也就是说，数据的传输是单向的，出去从输出流通道走，回来从输入流通道走。<br>面向流，通道传输的是流</p><h3 id="NIO-模型"><a href="#NIO-模型" class="headerlink" title="NIO 模型"></a>NIO 模型</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_________                       _________</span><br><span class="line">|       |-----------------------|       |</span><br><span class="line">|       |                       |       |</span><br><span class="line">|       |       输入-输出       |       |</span><br><span class="line">|       |                       |       |</span><br><span class="line">|       |-----------------------|       |</span><br><span class="line">|-------|                       |-------|</span><br></pre></td></tr></table></figure><p>NIO 的通道没有传输数据的能力，通道的建立，相当于铺了铁路，而数据的传输需要火车。<br>火车指的就是缓冲区。<br>火车出发前会装一批人，而不会只装一个人。<br>火车来回都只用一条通道。<br>面向缓冲区，将数据装入缓冲区，由缓冲区进行传输。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> nio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nio </tag>
            
            <tag> bio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO-01 概述</title>
      <link href="posts/31013.html"/>
      <url>posts/31013.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>服务器实现模式为一个请求一个线程，但客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</p><p>Java NIO（Non-blocking / New IO）是从Java 1.4版本开始引入的一个新的IO API，可以替代标准的Java IO API。<br>NIO 和 IO 的区别在于，IO 是面向流，NIO 是面向缓存。<br>是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，<br>成为解决高并发与大量连接、I/O处理问题的有效方式。</p><span id="more"></span><h2 id="传统面向流的，单向的"><a href="#传统面向流的，单向的" class="headerlink" title="传统面向流的，单向的"></a>传统面向流的，单向的</h2><p>三个核心组件</p><ol><li>Channels</li><li>Buffers</li><li>Selectors</li></ol><h3 id="1-Channels-负责传输"><a href="#1-Channels-负责传输" class="headerlink" title="1.Channels  负责传输"></a>1.Channels  负责传输</h3><p>白话: 就是数据传输用的通道。作用是打开到IO设备的连接，文件、套接字都行。<br>绕绕话:   标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。</p><h3 id="2-Buffers-负责存储"><a href="#2-Buffers-负责存储" class="headerlink" title="2.Buffers  负责存储"></a>2.Buffers  负责存储</h3><p>缓冲区，用来存放具体要被传输的数据，比如文件、scoket 等。这里将数据装入 Buffers 再通过通道进行传输。</p><h3 id="3-Selector"><a href="#3-Selector" class="headerlink" title="3.Selector"></a>3.Selector</h3><p>负责监听事件和选择对应事件的渠道。</p><p>NIO 主要的编程模型来自 Reactor</p><h2 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h2><p>NIO基于Reactor，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。<br>也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。</p><p><strong>NIO 是一种可以替代 Java IO API 的新API，提供了与标准 API 不同的工作方式。</strong></p><p><strong>BIO是一个连接一个线程。</strong></p><p><strong>NIO是一个请求一个线程。</strong></p><p><strong>AIO是一个有效请求一个线程。</strong></p><h2 id="三种IO-的区别"><a href="#三种IO-的区别" class="headerlink" title="三种IO 的区别"></a>三种IO 的区别</h2><h3 id="Java-BIO-同步并阻塞"><a href="#Java-BIO-同步并阻塞" class="headerlink" title="Java BIO:同步并阻塞"></a>Java BIO:同步并阻塞</h3><p>服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</p><h3 id="Java-NIO-同步非阻塞"><a href="#Java-NIO-同步非阻塞" class="headerlink" title="Java NIO: 同步非阻塞"></a>Java NIO: 同步非阻塞</h3><p>服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</p><h3 id="Java-AIO-NIO-2-异步非阻塞"><a href="#Java-AIO-NIO-2-异步非阻塞" class="headerlink" title="Java AIO(NIO.2) :异步非阻塞"></a>Java AIO(NIO.2) :异步非阻塞</h3><p>服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处。</p><h3 id="BIO、NIO、AIO适用场景分析"><a href="#BIO、NIO、AIO适用场景分析" class="headerlink" title="BIO、NIO、AIO适用场景分析"></a>BIO、NIO、AIO适用场景分析</h3><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。<br>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。<br>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> nio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> nio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闽南语-文读白话汇总</title>
      <link href="posts/31e418b9.html"/>
      <url>posts/31e418b9.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>闽南语分：<code>文读</code>和<code>白话</code>两种读音。<br>区别还是不小，完全可以做一种区分，我这里把常用的一些做一些汇总，持续更新。</p><h2 id="读音"><a href="#读音" class="headerlink" title="读音"></a>读音</h2><table><thead><tr><th align="center">字</th><th align="center">白话</th><th align="center">文读</th><th align="center">训读</th><th align="center">用法</th></tr></thead><tbody><tr><td align="center">一</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">一方</td></tr><tr><td align="center">二</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">三</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">三个（白）三国（文）</td></tr><tr><td align="center">四</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">五</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">六</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">七</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">八</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">九</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">十</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">百</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">千</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">万</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">亿</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">字</th><th align="center">白话</th><th align="center">文读</th><th align="center">训读</th><th align="center">用法</th></tr></thead><tbody><tr><td align="center">天</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">天兵天将(文)、一天(白)</td></tr><tr><td align="center">地</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">人</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">敌人(文)</td></tr><tr><td align="center">东</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">西</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">西瓜（白）、西方（文）</td></tr><tr><td align="center">南</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">北</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">日</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">一日、</td></tr><tr><td align="center">月</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">月娘(白)、风月(文)</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 闽南语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闽南语 </tag>
            
            <tag> 文读 </tag>
            
            <tag> 白话 </tag>
            
            <tag> lang </tag>
            
            <tag> 读音 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-判断奇偶数</title>
      <link href="posts/2732c30c.html"/>
      <url>posts/2732c30c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不能直接除<code>2</code>的就不是偶数，比较简单。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">dataArr=(</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for i in $&#123;!dataArr[@]&#125;</span><br><span class="line">do</span><br><span class="line">  if [[ $(($i%2)) = 0 ]]; then</span><br><span class="line">    echo &quot;index: $i, data: $&#123;dataArr[$i]&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>结果:<br>index: 0, data: 0<br>index: 2, data: 2<br>index: 4, data: 4<br>index: 6, data: 6<br>index: 8, data: 8<br>index: 10, data: 10</p><p>需要注意的是，<code>$(($i%2)) = 0</code> 等号中间是有空格的，不能连着写，否则结果不正确。这可真是垃圾的设计！！</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 解决生产环境下多线程调用FTP流被关闭问题</title>
      <link href="posts/57962.html"/>
      <url>posts/57962.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 spring boot 下把 FTP 工具类以类的型式注入到 spring 容器中。<br>FTP 工具类在实际应用过程中，如果是单例的对象会出现问题：<br>当线程 A 调用FTP工具时调用连接，线程B 同时调用FTP并使用完闭关闭流，这时A的连接会就被关闭了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将 Bean 置为多例对象。这样当线程每次调用该 Bean 就会生成一个新对象，互相之间不影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpUtil</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpUtilConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FtpProperties ftpProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FtpUtil <span class="title">ftpUtil</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        FtpUtil ftpUtil = <span class="keyword">new</span> FtpUtil();</span><br><span class="line">        <span class="keyword">return</span> ftpUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.fund.common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpScope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> AnnotationConfigApplicationContext(FtpScope.class);</span><br><span class="line">        FtpUtil f1 = context.getBean(FtpUtil.class);</span><br><span class="line">        FtpUtil f2 = context.getBean(FtpUtil.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><blockquote><p>com.fund.common.util.FtpUtil@7dac3fd8<br>com.fund.common.util.FtpUtil@425357dd</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装prometheus</title>
      <link href="posts/2d57a38f.html"/>
      <url>posts/2d57a38f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安装基于docker的prometheus来监控java微服务的各项目性能指标。<br>使用docker来安装最简单省事。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>拉取镜像，并查看一下本地镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull prom/prometheus</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED      SIZE</span><br><span class="line">prom/prometheus   latest    467da9b74cee   5 days ago   223MB</span><br></pre></td></tr></table></figure><p>j## 拿下默认配置文件，用来挂载</p><p>将配置文件拷到$PWD/prometheus下，一会挂载用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">docker run -idt --name=docker-prometheus  prom/prometheus</span><br><span class="line"><span class="meta">#</span><span class="bash"> 持配置文件</span></span><br><span class="line">docker cp -a docker-prometheus:/etc/prometheus/ $PWD/prometheus</span><br></pre></td></tr></table></figure><p>prometheus目录下，有这些文件：主要的就是 prometheus.yml 这个配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console_libraries -&gt; &#x2F;usr&#x2F;share&#x2F;prometheus&#x2F;console_libraries</span><br><span class="line">consoles -&gt; &#x2F;usr&#x2F;share&#x2F;prometheus&#x2F;consoles&#x2F;</span><br><span class="line">prometheus.yml</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动 prometheus 挂载刚才导出来的配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=docker-prometheus --restart=always -p 9090:9090 -v $PWD/prometheus:/etc/prometheus prom/prometheus</span><br></pre></td></tr></table></figure><p>docker参数：</p><p><code>-d</code>: 后台运行<br><code>--name</code>: 服务名称<br><code>--restart</code>: 失败自动重启<br><code>-p</code>: 端口影射<br><code>-v</code>: 挂载目录</p><p>验证: <a href="http://127.0.0.1:9090/">http://127.0.0.1:9090</a></p><p><img src="/posts/2d57a38f/%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.jpg" alt="安装成功"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>一般添加prometheus是为了收集应用程序服务较多，这里做测试给springboot服务添加一个prometheus的endpoint，然后收集。</p><p>修改配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">          <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;prometheus&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;localhost:9090&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;springboot-test&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;10.1.100.100:9527&quot;</span>]</span><br></pre></td></tr></table></figure><p>查看一下配置</p><blockquote><p><a href="http://127.0.0.1:9090/config">http://127.0.0.1:9090/config</a></p></blockquote><h2 id="java接入"><a href="#java接入" class="headerlink" title="java接入"></a>java接入</h2><p>给java服务添加以下maven配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- The client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Hotspot JVM metrics--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_hotspot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Exposition HTTPServer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_httpserver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Pushgateway exposition--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_pushgateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://127.0.0.1:9090/targets">http://127.0.0.1:9090/targets</a></p></blockquote><p><img src="/posts/2d57a38f/%E6%9F%A5%E7%9C%8B%E6%8E%A5%E5%85%A5%E7%82%B9.jpg" alt=" 查看接入点"></p><p>再看看一下是否已经有指标进来了：</p><blockquote><p><a href="http://127.0.0.1:9090/metrics">http://127.0.0.1:9090/metrics</a></p></blockquote><p>看下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># HELP net_conntrack_dialer_conn_attempted_total Total number of connections attempted by the given dialer a given name.</span><br><span class="line"># TYPE net_conntrack_dialer_conn_attempted_total counter</span><br><span class="line">net_conntrack_dialer_conn_attempted_total&#123;dialer_name&#x3D;&quot;alertmanager&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_attempted_total&#123;dialer_name&#x3D;&quot;default&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_attempted_total&#123;dialer_name&#x3D;&quot;springboot-test&quot;&#125; 1</span><br><span class="line">net_conntrack_dialer_conn_attempted_total&#123;dialer_name&#x3D;&quot;prometheus&quot;&#125; 1</span><br><span class="line"># HELP net_conntrack_dialer_conn_closed_total Total number of connections closed which originated from the dialer of a given name.</span><br><span class="line"># TYPE net_conntrack_dialer_conn_closed_total counter</span><br><span class="line">net_conntrack_dialer_conn_closed_total&#123;dialer_name&#x3D;&quot;alertmanager&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_closed_total&#123;diler_name&#x3D;&quot;default&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_closed_total&#123;dialer_name&#x3D;&quot;springboot-test&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_closed_total&#123;dialer_name&#x3D;&quot;prometheus&quot;&#125; 0</span><br><span class="line"># HELP net_conntrack_dialer_conn_established_total Total number of connections successfully established by the given dialer a given name.</span><br><span class="line"># TYPE net_conntrack_dialer_conn_established_total counter</span><br><span class="line">net_conntrack_dialer_conn_established_total&#123;dialer_name&#x3D;&quot;alertmanager&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_established_total&#123;dialer_name&#x3D;&quot;default&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_established_total&#123;dialer_name&#x3D;&quot;springboot-test&quot;&#125; 1</span><br><span class="line">net_conntrack_dialer_conn_established_total&#123;dialer_name&#x3D;&quot;prometheus&quot;&#125; 1</span><br><span class="line"># HELP net_conntrack_dialer_conn_failed_total Total number of connections failed to dial by the dialer a given name.</span><br><span class="line"># TYPE net_conntrack_dialer_conn_failed_total counter</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;alertmanager&quot;,reason&#x3D;&quot;refused&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;alertmanager&quot;,reason&#x3D;&quot;resolution&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;alertmanager&quot;,reason&#x3D;&quot;timeout&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;alertmanager&quot;,reason&#x3D;&quot;unknown&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;default&quot;,reason&#x3D;&quot;refused&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;default&quot;,reason&#x3D;&quot;resolution&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;default&quot;,reason&#x3D;&quot;timeout&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;default&quot;,reason&#x3D;&quot;unknown&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;springboot-test&quot;,reason&#x3D;&quot;refused&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;springboot-test&quot;,reason&#x3D;&quot;resolution&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;springboot-test&quot;,reason&#x3D;&quot;timeout&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;springboot-test&quot;,reason&#x3D;&quot;unknown&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;prometheus&quot;,reason&#x3D;&quot;refused&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;prometheus&quot;,reason&#x3D;&quot;resolution&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;prometheus&quot;,reason&#x3D;&quot;timeout&quot;&#125; 0</span><br><span class="line">net_conntrack_dialer_conn_failed_total&#123;dialer_name&#x3D;&quot;prometheus&quot;,reason&#x3D;&quot;unknown&quot;&#125; 0</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>官网：<a href="https://prometheus.io/">https://prometheus.io/</a><br>dockerHub: <a href="https://hub.docker.com/u/prom">https://hub.docker.com/u/prom</a><br>官方maven: <a href="https://mvnrepository.com/artifact/io.prometheus">https://mvnrepository.com/artifact/io.prometheus</a><br>官方示例: <a href="https://github.com/prometheus/client_java#counter">https://github.com/prometheus/client_java#counter</a></p>]]></content>
      
      
      <categories>
          
          <category> prometheus </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闽南语与普通话日常用语对照表</title>
      <link href="posts/e75519e0.html"/>
      <url>posts/e75519e0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不包含发音方法，只对照日常口语中的用字不同。<br>在跟北京的朋友翻译闽南语的时候发现很多日常用语原来普通话的字是完全不一样的，然后就开始整理。</p><p>各个市、区、县、镇、村用会有出入，同一个场景会有不同用法，这里我只把我主观上遇见用法较多的总结出来。<br>泉州、漳州、永春、台湾、浙江、海南、新加坡、越南使用闽南语的我都遇见过，我们村有很多越南新妇，从小讲在越南讲闽南语，后来嫁过来，口音用法完全不同，但是交流没问题。</p><p>我本人讲的是泉州以北，莆田以南的交界处，讲的闽南语更加小众，属于泉州人听不懂，莆田人完全听不完的方言，反过来我能听懂其它两种，更接近厦门口音。</p><h2 id="读法"><a href="#读法" class="headerlink" title="读法"></a>读法</h2><p>有<code>文</code>、<code>白</code>两种读法，日常口语用<code>白话</code>，正式场合宣讲用<code>文言</code>。<br>比如：<code>天</code>、<code>一</code>、<code>二</code>、<code>三</code> 等很多字都有两种读法，<code>天上</code> 和 <code>天文</code>、<code>天下</code>、<code>天兵</code>; <code>三人</code>和<code>三国</code> 这些词读法完全不同。</p><h2 id="人称"><a href="#人称" class="headerlink" title="人称"></a>人称</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">汝</td><td align="center">你</td><td align="center"></td></tr><tr><td align="center">我</td><td align="center">我</td><td align="center">有用吾</td></tr><tr><td align="center">伊</td><td align="center">他</td><td align="center"></td></tr><tr><td align="center">恁</td><td align="center">你们</td><td align="center"></td></tr><tr><td align="center">阮</td><td align="center">我们</td><td align="center"></td></tr><tr><td align="center">怹</td><td align="center">他们</td><td align="center"></td></tr><tr><td align="center">咱</td><td align="center">咱们</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="称谓"><a href="#称谓" class="headerlink" title="称谓"></a>称谓</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">后生</td><td align="center">年轻</td><td align="center"></td></tr><tr><td align="center">后生仔</td><td align="center">年轻人</td><td align="center"></td></tr><tr><td align="center">少年</td><td align="center">少年</td><td align="center"></td></tr><tr><td align="center">囡仔</td><td align="center">小孩</td><td align="center"></td></tr><tr><td align="center">小娘</td><td align="center">女人</td><td align="center"></td></tr><tr><td align="center">小娘仔</td><td align="center">小女孩</td><td align="center"></td></tr><tr><td align="center">仔</td><td align="center">儿子</td><td align="center"></td></tr><tr><td align="center">大汉</td><td align="center">大个子</td><td align="center"></td></tr><tr><td align="center">小汉</td><td align="center">小个子</td><td align="center"></td></tr><tr><td align="center">翁</td><td align="center">丈夫</td><td align="center"></td></tr><tr><td align="center">大咖</td><td align="center">大人物</td><td align="center"></td></tr><tr><td align="center">小咖</td><td align="center">小人物</td><td align="center"></td></tr><tr><td align="center">大矣</td><td align="center">老大</td><td align="center"></td></tr><tr><td align="center">咖仔</td><td align="center">小弟</td><td align="center">伊是汝诶咖仔？</td></tr><tr><td align="center">歹人</td><td align="center">坏人</td><td align="center"></td></tr><tr><td align="center">歹仔</td><td align="center">坏混混</td><td align="center"></td></tr><tr><td align="center">鲈鳗</td><td align="center">流氓</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>矣，是语气助词，没有实际含义，但是在闽南语中很常用。<br>好矣、歹矣，指好的、坏的。</p><h2 id="语气助词"><a href="#语气助词" class="headerlink" title="语气助词"></a>语气助词</h2><h2 id="亲属"><a href="#亲属" class="headerlink" title="亲属"></a>亲属</h2><p>称谓要看这个人在家中的排行，排行第一的基本都是<code>阿</code>开头，不是第一个就是二、三、四，最小的用<code>尾</code>。</p><p>平时都是这么叫的。</p><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">阿公</td><td align="center">爷爷</td><td align="center"></td></tr><tr><td align="center">阿么</td><td align="center">奶奶</td><td align="center"></td></tr><tr><td align="center">阿父、阿爸</td><td align="center">爸爸</td><td align="center"></td></tr><tr><td align="center">阿母</td><td align="center">妈妈</td><td align="center"></td></tr><tr><td align="center">阿伯</td><td align="center">伯父</td><td align="center"></td></tr><tr><td align="center">阿姆</td><td align="center">伯母</td><td align="center"></td></tr><tr><td align="center">阿叔</td><td align="center">叔父</td><td align="center"></td></tr><tr><td align="center">阿婶</td><td align="center">叔母</td><td align="center"></td></tr><tr><td align="center">阿兄</td><td align="center">哥哥</td><td align="center"></td></tr><tr><td align="center">阿姊</td><td align="center">姐姐</td><td align="center"></td></tr><tr><td align="center">阿妗</td><td align="center">舅妈</td><td align="center"></td></tr><tr><td align="center">阿姨</td><td align="center">阿姨</td><td align="center"></td></tr><tr><td align="center">阿嫂</td><td align="center">嫂子</td><td align="center"></td></tr><tr><td align="center">阿丈</td><td align="center">姐夫</td><td align="center"></td></tr><tr><td align="center">阿咪</td><td align="center">孩子</td><td align="center"></td></tr><tr><td align="center">妹胥</td><td align="center">妹胥</td><td align="center"></td></tr><tr><td align="center">大仔</td><td align="center">大儿子</td><td align="center"></td></tr><tr><td align="center">尾仔</td><td align="center">最小子</td><td align="center"></td></tr><tr><td align="center">小弟、(尾弟)</td><td align="center">弟弟</td><td align="center"></td></tr><tr><td align="center">小妹、(尾妹)</td><td align="center">妹妹</td><td align="center"></td></tr><tr><td align="center">大家</td><td align="center">婆婆</td><td align="center"></td></tr><tr><td align="center">大官</td><td align="center">公公</td><td align="center"></td></tr></tbody></table><p>现在还在叫儿子：<code>阿郎</code>、<code>二郎</code>、<code>阿咪</code>，不过不算典型，很多时候是父母称自己的孩子。<br><code>阿咪</code>比较典型，不分男孩女孩，父母都会叫自己的孩子：<code>阿咪</code>。<br>我几十岁的人了，我父亲跟我通电话还是叫我<code>阿密</code>~~~~</p><h2 id="人物职业"><a href="#人物职业" class="headerlink" title="人物职业"></a>人物职业</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">头家</td><td align="center">老板</td><td align="center"></td></tr><tr><td align="center">头家娘</td><td align="center">老板娘</td><td align="center"></td></tr><tr><td align="center">人客</td><td align="center">客人</td><td align="center"></td></tr><tr><td align="center">先生</td><td align="center">医师、老师</td><td align="center"></td></tr><tr><td align="center">刘先</td><td align="center">刘先生</td><td align="center"></td></tr><tr><td align="center">贼、贼仔</td><td align="center">小偷</td><td align="center"></td></tr><tr><td align="center">乞食</td><td align="center">乞丐</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>先生的称谓跟广东反过来，广东话称：刘生。<br>现在称老师也是称，某某先。</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">甚、甚么</td><td align="center">什么</td><td align="center"></td></tr><tr><td align="center">甚人</td><td align="center">什么人</td><td align="center"></td></tr><tr><td align="center">甚代、甚么代志</td><td align="center">什么事情</td><td align="center"></td></tr><tr><td align="center">曷</td><td align="center">何需、哪</td><td align="center">曷使、曷著、曷敢</td></tr><tr><td align="center">有影</td><td align="center">真的</td><td align="center"></td></tr><tr><td align="center">无影</td><td align="center">假的</td><td align="center"></td></tr><tr><td align="center">有无</td><td align="center">有没有</td><td align="center"></td></tr><tr><td align="center">汝伫佗位</td><td align="center">你在哪里</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center">例句</th></tr></thead><tbody><tr><td align="center">拗</td><td align="center">折、扭曲</td><td align="center"></td></tr><tr><td align="center">覕</td><td align="center">躲藏</td><td align="center"></td></tr><tr><td align="center">扲</td><td align="center">握</td><td align="center">扲著</td></tr><tr><td align="center">驶车、驶船</td><td align="center">开车、开船</td><td align="center"></td></tr><tr><td align="center">做阵、斗阵</td><td align="center">一起</td><td align="center">做阵走：一起走</td></tr><tr><td align="center">欶</td><td align="center">吸</td><td align="center">欶水：吸水</td></tr><tr><td align="center">捒</td><td align="center">解除束缚</td><td align="center">放捒：放开。解除约束,使自由。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center">例句 闽:普</th></tr></thead><tbody><tr><td align="center">物件</td><td align="center">东西</td><td align="center">什么物件：什么东西</td></tr><tr><td align="center">铳</td><td align="center">手枪</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="形容人"><a href="#形容人" class="headerlink" title="形容人"></a>形容人</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center">例句</th></tr></thead><tbody><tr><td align="center">袂晓</td><td align="center">不懂</td><td align="center"></td></tr><tr><td align="center">蠻皮</td><td align="center">顽皮</td><td align="center"></td></tr><tr><td align="center">罔</td><td align="center">姑且、将就</td><td align="center">罔食、罔看</td></tr><tr><td align="center">欲</td><td align="center">同意、可以、想要</td><td align="center">欲去、欲看、欲用；<br>汝欲去毋？你要不要去<br>汝欲毋？你要不要</td></tr><tr><td align="center">毋</td><td align="center">不能</td><td align="center">毋啦</td></tr><tr><td align="center">毋免</td><td align="center">不用、不需要</td><td align="center"></td></tr><tr><td align="center">狭</td><td align="center">窄</td><td align="center"></td></tr><tr><td align="center">可恶</td><td align="center">可恶</td><td align="center"></td></tr><tr><td align="center">逆天</td><td align="center">逆天</td><td align="center"></td></tr><tr><td align="center">少礼</td><td align="center">推辞</td><td align="center">袂晓少礼：不懂推辞</td></tr><tr><td align="center">失礼</td><td align="center">失礼</td><td align="center"></td></tr><tr><td align="center">拢共</td><td align="center">总共</td><td align="center"></td></tr><tr><td align="center">袂见笑</td><td align="center">不要脸</td><td align="center"></td></tr><tr><td align="center">惊</td><td align="center">惊吓</td><td align="center">惊著：惊吓到</td></tr><tr><td align="center">著</td><td align="center">对</td><td align="center">汝讲著：你说对</td></tr><tr><td align="center">缘投</td><td align="center">英俊</td><td align="center"></td></tr><tr><td align="center">媠</td><td align="center">漂亮</td><td align="center"></td></tr></tbody></table><h2 id="形容事"><a href="#形容事" class="headerlink" title="形容事"></a>形容事</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center">例句</th></tr></thead><tbody><tr><td align="center">好空</td><td align="center">好事</td><td align="center"></td></tr><tr><td align="center">歹空</td><td align="center">坏事</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="形容"><a href="#形容" class="headerlink" title="形容"></a>形容</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center">例句</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">凡势</td><td align="center">反正</td><td align="center">凡势就</td></tr></tbody></table><p>可恶 和 逆天 小时候我妈打我的时候，骂的最多的。</p><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">早起、上晡</td><td align="center">早上</td><td align="center"></td></tr><tr><td align="center">日昼、中午昼</td><td align="center">中午</td><td align="center"></td></tr><tr><td align="center">下昼、下晡</td><td align="center">下午</td><td align="center"></td></tr><tr><td align="center">暝矣</td><td align="center">晚上</td><td align="center"></td></tr><tr><td align="center">半暝</td><td align="center">半夜</td><td align="center"></td></tr><tr><td align="center">明日、明载</td><td align="center">明天</td><td align="center"></td></tr><tr><td align="center">一日、一工</td><td align="center">一天</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th></th></tr></thead><tbody><tr><td align="center">头前</td><td align="center">前面</td><td></td></tr><tr><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center"></td><td align="center"></td><td></td></tr></tbody></table><h2 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center">例句</th></tr></thead><tbody><tr><td align="center">面</td><td align="center">脸</td><td align="center"></td></tr><tr><td align="center">下頦</td><td align="center">下巴</td><td align="center"></td></tr><tr><td align="center">跤</td><td align="center">脚</td><td align="center">洗跤</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="饮物和厨具"><a href="#饮物和厨具" class="headerlink" title="饮物和厨具"></a>饮物和厨具</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">鼎</td><td align="center">锅</td><td align="center"></td></tr><tr><td align="center">鼎盖</td><td align="center">锅盖</td><td align="center"></td></tr><tr><td align="center">吃燻、点燻、烧燻</td><td align="center">抽烟</td><td align="center"></td></tr><tr><td align="center">吃酒</td><td align="center">喝酒</td><td align="center"></td></tr><tr><td align="center">饮水</td><td align="center">喝水</td><td align="center"></td></tr><tr><td align="center">尾牙</td><td align="center">年末聚餐</td><td align="center"></td></tr><tr><td align="center">糜</td><td align="center">粥、稀饭</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="穿着"><a href="#穿着" class="headerlink" title="穿着"></a>穿着</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">裳</td><td align="center">衣服</td><td align="center">穿裳</td></tr><tr><td align="center">袴</td><td align="center">裤子</td><td align="center">穿袴</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">一匹狼</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">一尾鱼</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">一只狗</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">一笔字</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">一只马、羊、牛</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">一暝</td><td align="center">一夜</td><td align="center"></td></tr><tr><td align="center">一日</td><td align="center">一天</td><td align="center"></td></tr><tr><td align="center">一架</td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="昆虫"><a href="#昆虫" class="headerlink" title="昆虫"></a>昆虫</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">蠓仔</td><td align="center">蚊子</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="场所"><a href="#场所" class="headerlink" title="场所"></a>场所</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">灶跤</td><td align="center">厨房</td><td align="center"></td></tr><tr><td align="center">厝</td><td align="center">家</td><td align="center"></td></tr><tr><td align="center">祖厝</td><td align="center">祠堂</td><td align="center"></td></tr><tr><td align="center">巷仔</td><td align="center">巷子</td><td align="center"></td></tr><tr><td align="center">铺</td><td align="center">床</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="天体"><a href="#天体" class="headerlink" title="天体"></a>天体</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">日头</td><td align="center">太阳</td><td align="center"></td></tr><tr><td align="center">月娘</td><td align="center">月亮</td><td align="center"></td></tr></tbody></table><h2 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h2><table><thead><tr><th align="center">闽南语</th><th align="center">普通话</th><th align="center"></th></tr></thead><tbody><tr><td align="center">落雨</td><td align="center">下雨</td><td align="center"></td></tr><tr><td align="center">落雪</td><td align="center">下雪</td><td align="center"></td></tr><tr><td align="center">风台</td><td align="center">台风</td><td align="center"></td></tr><tr><td align="center">日头炎</td><td align="center">炎热</td><td align="center"></td></tr><tr><td align="center">沃雨</td><td align="center">淋雨</td><td align="center"></td></tr><tr><td align="center">沃澹</td><td align="center">淋湿</td><td align="center"></td></tr><tr><td align="center">乌暗</td><td align="center">黑暗</td><td align="center"></td></tr></tbody></table><h2 id="节日"><a href="#节日" class="headerlink" title="节日"></a>节日</h2><table><thead><tr><th align="center">农历</th><th align="center">含义</th><th align="center">来由</th></tr></thead><tbody><tr><td align="center">正月初四</td><td align="center">补春</td><td align="center">明朝，莆田有一村在正月初四被<strong>倭寇</strong>屠村，为了悼念，初四补过春节</td></tr><tr><td align="center">正月初九</td><td align="center">天公诞辰</td><td align="center"></td></tr><tr><td align="center">三月十五</td><td align="center">保生大帝颂典</td><td align="center"></td></tr><tr><td align="center">三月廿三</td><td align="center">妈祖诞辰</td><td align="center"></td></tr><tr><td align="center">每月初二、十六</td><td align="center">土地公神诞</td><td align="center">一般叫：<strong>做牙</strong>，<strong>牙</strong>为<strong>个</strong>，年未最后聚餐，也称<strong>尾牙</strong></td></tr><tr><td align="center">送节</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">做祭</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">大分</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">小分</td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="仪式"><a href="#仪式" class="headerlink" title="仪式"></a>仪式</h2><table><thead><tr><th align="center">仪式</th><th align="center">含义</th><th align="center">仪式</th></tr></thead><tbody><tr><td align="center">大分</td><td align="center">男孩子成年</td><td align="center">准备贡桌，男孩子在贡桌前拜拜向天祈福</td></tr><tr><td align="center">小分</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>语言这东西实在泛及到的日常实在太多了，一次无法全部说完，持续更新。</p>]]></content>
      
      
      <categories>
          
          <category> 闽南语 </category>
          
          <category> 语言 </category>
          
          <category> 闽南语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言 </tag>
            
            <tag> 普通话 </tag>
            
            <tag> 官话 </tag>
            
            <tag> 对照表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 数组</title>
      <link href="posts/82b63bf0.html"/>
      <url>posts/82b63bf0.html</url>
      
        <content type="html"><![CDATA[<p>shell 也支持数组，就是写法跟平时的开发语言不太一样，反正我是觉得挺别扭。</p><h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><p>数组数据使用一对括号<code>( var )</code>包起来，就能成为数组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr=(10 20 30 40)</span><br><span class="line">echo $arr</span><br><span class="line">echo $arr[1]</span><br><span class="line">echo $arr[2]</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>10<br>20</p></blockquote><h2 id="打印数组"><a href="#打印数组" class="headerlink" title="打印数组"></a>打印数组</h2><p>打印数组的话要注意，直接打印数组，只会打印出第一条数数据，必须加上<code>*</code> 或 <code>#</code>，才能全部输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">数组取值</span></span><br><span class="line"></span><br><span class="line">days=(one two three 4)</span><br><span class="line">echo $&#123;days&#125;</span><br><span class="line">echo $&#123;days[0]&#125;</span><br><span class="line">echo $&#123;days[1]&#125;</span><br><span class="line">echo $&#123;days[@]&#125;</span><br><span class="line">echo $&#123;days[*]&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;**********&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置数组</span></span><br><span class="line">names=()</span><br><span class="line"></span><br><span class="line">names[1]=tom</span><br><span class="line">names[2]=jack</span><br><span class="line">echo $&#123;names&#125;</span><br><span class="line">echo $&#123;names[1]&#125;</span><br><span class="line">echo $&#123;names[@]&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>one<br>one<br>two<br>one two three 4<br>one two three 4</p><hr><p>tom<br>tom jack</p></blockquote><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><h3 id="直接遍历"><a href="#直接遍历" class="headerlink" title="直接遍历"></a>直接遍历</h3><p>1.使用 <code>$&#123;数组名[@]&#125;</code>、<code>$&#123;数组名[#]&#125;</code> 均可以获得所有元素</p><p>2.带数组下标的遍历，当需要使用到数组的下标时，可以使用${!数组名[@]}<br>3.while循环：根据元素的个数遍历，但对于稀疏数组，可能会丢失数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">days=(one two three 4)</span><br><span class="line">for day in $&#123;days[*]&#125;  #或$&#123;days[@]&#125;</span><br><span class="line">do</span><br><span class="line">  echo $day</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="通过下标遍历，符号"><a href="#通过下标遍历，符号" class="headerlink" title="通过下标遍历，符号 !"></a>通过下标遍历，符号 !</h3><p>用 for in 来遍历，取下标一般用 !。<br>使用 ! 时，下面例子中的 i 的值为下标。<br>如果要拿到值，在for中取的是${i}的值，两种写法都可以，自行选择。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">days=(one two three four)</span><br><span class="line"><span class="meta">#</span><span class="bash">fou循环带下标遍历</span></span><br><span class="line">for i in $&#123;!days[@]&#125;</span><br><span class="line">do</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 此刻 i 为下标，通过下标取数组的值</span></span><br><span class="line">  echo $&#123;days[$i]&#125;   #这里没有 !</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="入参转数组"><a href="#入参转数组" class="headerlink" title="入参转数组"></a>入参转数组</h2><p>如果想在执行脚本的时候把所有参数当成一个数组使用，也可以这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test1=`$&#123;@&#125;`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从第2个参数位开始</span></span><br><span class="line">test2=`echo $&#123;@:2&#125;`</span><br><span class="line">echo $test1</span><br><span class="line">echo $test2</span><br></pre></td></tr></table></figure><p>执行一下</p><blockquote><p>sh test.sh 11 22 33 44</p></blockquote><p>结果：</p><blockquote><p>11 22 33 44<br>22 33 44</p></blockquote><h2 id="函数间数组传递"><a href="#函数间数组传递" class="headerlink" title="函数间数组传递"></a>函数间数组传递</h2><p>这个就比较绕了，绕在哪呢，就在传递没问题，接收的话，还是要用<code>( )</code>来接收，否则就只能接收到数组的第一个元素，因为在传入时，数组的所有元素被当成一个个参数传入，通过$1 $2 ...也可以获取到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">test1 () &#123;</span><br><span class="line">   echo &quot;test1 result: &quot;</span><br><span class="line">   echo &quot;函数接收到的参数列表为: $@&quot;   #这里是函数位置变量$@</span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash">将接受到的参数，定义成一个新的数组</span></span><br><span class="line">   newarr=($@)         #位置参数，如果使用$1,只会取第一个值</span><br><span class="line">   echo &quot;新的数组的值为: $&#123;newarr[@]&#125;&quot;</span><br><span class="line">   for i in $&#123;newarr[@]&#125;; do</span><br><span class="line">       echo &quot;$&#123;i&#125;&quot;</span><br><span class="line">   done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test2() &#123;</span><br><span class="line">   echo &quot;test2 result: &quot;</span><br><span class="line">   newarr1=$1         #位置参数，如果使用$1,只会取第一个值</span><br><span class="line">   newarr2=$2</span><br><span class="line"><span class="meta">   #</span><span class="bash"> 数组被当作元素传入</span></span><br><span class="line">   echo $newarr1 $newarr2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################## main ########################</span></span></span><br><span class="line"></span><br><span class="line">arr=(10 20 30 40 50)</span><br><span class="line"></span><br><span class="line">echo &quot;原始数组的值为: $&#123;arr[@]&#125;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">调用函数，将数组的元素作为函数的位置变量</span></span><br><span class="line">main () &#123;</span><br><span class="line">   test1  $&#123;arr[@]&#125;</span><br><span class="line">   test2  $&#123;arr[@]&#125;</span><br><span class="line"><span class="meta">   #</span><span class="bash">如果直接使用 <span class="variable">$arr</span> 作为位置变量，则只会将数组的第一个元素传递过去 </span></span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>原始数组的值为: 10 20 30 40 50<br>test1 result:<br>函数接收到的参数列表为: 10 20 30 40 50<br>新的数组的值为: 10 20 30 40 50<br>10<br>20<br>30<br>40<br>50<br>test2 result:<br>10 20</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>shell 的数组，函数间数组传递需要注意其它的大同小异。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 实现进度条</title>
      <link href="posts/e3f31277.html"/>
      <url>posts/e3f31277.html</url>
      
        <content type="html"><![CDATA[<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>拷大文件的时候，如果没有一个进度条，也不知道文件拷贝情况，所以搞一个进度条，时实查看进度。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mark=&#x27;&#x27;</span><br><span class="line">for ((ratio=0;$&#123;ratio&#125;&lt;=100;ratio+=5))</span><br><span class="line">do</span><br><span class="line">    sleep 0.2</span><br><span class="line">    printf &quot;progress:[%-40s]%d%%\r&quot; &quot;$&#123;mark&#125;&quot; &quot;$&#123;ratio&#125;&quot;</span><br><span class="line">    mark=&quot;##$&#123;mark&#125;&quot;</span><br><span class="line">done</span><br><span class="line">echo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot中的@ConfigurationProperties注解的使用</title>
      <link href="posts/34069.html"/>
      <url>posts/34069.html</url>
      
        <content type="html"><![CDATA[<h3 id="ConfigurationProperties-注解的使用"><a href="#ConfigurationProperties-注解的使用" class="headerlink" title="ConfigurationProperties 注解的使用"></a>ConfigurationProperties 注解的使用</h3><p>将配置文件中的配置，以属性的形式自动注入到 实体中。<br>要特别说明的一个注属性<br><code>ignoreUnknownFields = false</code><br>这个超好用，自动检查配置文件中的属性是否存在，不存在则在启动时就报错。<br>locations 这个注解属性，不知道为什么不可以使用。用来指定其他配置文件名。</p><p>1.application.properties 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#自动配置设置</span><br><span class="line">service.properties.name&#x3D;my-test-name</span><br><span class="line">service.properties.ip&#x3D;192.168.1.1</span><br><span class="line">service.user&#x3D;kayle</span><br><span class="line">service.port&#x3D;8080</span><br></pre></td></tr></table></figure><p>2.对应实体<br>Properties 就是对应的配置文件中的 properties，注意也要给 get/set<br>也就是说，配置文件中的前缀是什么， prefix 中就使用什么。成员变量就是对应的配置文件的第二级属性名。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description 测试配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2017/7/23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>      <span class="comment">//不加这个注解的话, 使用@Autowired 就不能注入进去了</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;service&quot;,ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="keyword">private</span> Properties Properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ip;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ip = ip;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyConfigTest.<span class="function">Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(MyConfigTest.Properties properties)</span> </span>&#123;</span><br><span class="line">        Properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationPropertiesController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyConfigTest myConfigTest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getProperties&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProperties</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(myConfigTest.getUser());</span><br><span class="line">        <span class="keyword">return</span> myConfigTest.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getObjectProperties&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectProperties</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(myConfigTest.getUser());</span><br><span class="line">        <span class="keyword">return</span> myConfigTest.getProperties();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;my-test-name&quot;,&quot;ip&quot;:&quot;192.168.1.1&quot;&#125;</span><br></pre></td></tr></table></figure><p>5.也可修饰配置类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;foo&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FooComponent <span class="title">fooComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> spring boot </tag>
            
            <tag> spring </tag>
            
            <tag> ConfigurationProperties注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot @Import注解</title>
      <link href="posts/55800.html"/>
      <url>posts/55800.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Import注解在4.2之前只支持导入配置类<br>在4.2,@Import注解支持导入普通的java类,并将其声明成一个bean。<br>在 spring boot 的配置类中的使用比较多。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>@Import 的自动导入功能</p><p>1.一个配置类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ImportDemo.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>2.一个普通没有加任何注解的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ImportDemo.doSomething()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.springboot.importtest&quot;</span>);</span><br><span class="line">        ImportDemo importDemo = context.getBean(ImportDemo.class);</span><br><span class="line">        importDemo.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注掉配置类的-Import-，再运行测试类，则报错。"><a href="#注掉配置类的-Import-，再运行测试类，则报错。" class="headerlink" title="注掉配置类的 @Import ，再运行测试类，则报错。"></a>注掉配置类的 @Import ，再运行测试类，则报错。</h2><blockquote><p>证明，ImportDemo 是由 @Import 动态注入到 spring 容器中的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> spring boot </tag>
            
            <tag> spring </tag>
            
            <tag> Import注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot03 非parent方式搭建</title>
      <link href="posts/57338.html"/>
      <url>posts/57338.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>项目中通过<code>maven</code>集成 springboot 有两种方式：</p><ol><li>继承parent 方式</li><li>非继承 parent 方式</li></ol><p>上一篇文章已经介绍过通过直接继承springboot项目座标的方式继承，这次说明如何通过非直接继承的方式构建springboot项目。</p><h2 id="非parent-方式"><a href="#非parent-方式" class="headerlink" title="非parent 方式"></a>非parent 方式</h2><p>推荐使用这种方式。<br>这样就可以使子项目使用 parent 标签了。</p><p>这种方式也比较直观，这里需要两个项目进行搭建测试</p><ol><li>parent 项目，需要被继承</li><li>childen 项目，即需要继承 parent 项目，又需要springboot项目座标构建项目。</li></ol><h2 id="parent-项目配置"><a href="#parent-项目配置" class="headerlink" title="parent 项目配置"></a>parent 项目配置</h2><p>添加一个 spring boot 依赖，dependencyManagement 中的 springboot 就是核心，是springboot 官方提供的依赖，它是一组springboot的完整依赖座标，根据需要进行引用。<br>type 是 pom，scope 是 import，这种类型的 dependency 只能在 dependencyManagement 标签中声明。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboottest-pom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liukai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="childen-项目配置"><a href="#childen-项目配置" class="headerlink" title="childen 项目配置"></a>childen 项目配置</h2><p>parent 就可以使用普通的父项目了，而只需要进行 spring boot 的普通依赖即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liukai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>children<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/57338/%E5%AE%8C%E6%95%B4%E9%A1%B9%E7%9B%AE.png" alt="完整项目"></p><h2 id="springboottest-项目配置"><a href="#springboottest-项目配置" class="headerlink" title="springboottest 项目配置"></a>springboottest 项目配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liukai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboottest-pom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>children<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> spring boot </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 保持gc.log文件个数</title>
      <link href="posts/506e7be.html"/>
      <url>posts/506e7be.html</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>使用JDK8的老项目，开启了gc log用于排查问题，但是每次重启总是会覆盖之前的gc log，所以写了一个脚本保存gc log。如果是JDK11直接使用xlog，就可以配置很详细的日志策略。<br>能起到一个什么效果，就是控制文件的个数。</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>说明：<br><code>maxFile</code>: 允许最大文件个数<br><code>currentDirCount</code>: 当前目录包含多少日志文件<br><code>oldFileSize</code>: 需要清理的老文件数量<br><code>ls -1</code>: 升序排序，排时间较早的文件排列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">maxFile=5</span><br><span class="line">gcLogDir=logs/gc_logs/</span><br><span class="line"></span><br><span class="line">echo &#x27;backup gc.log&#x27;</span><br><span class="line">if [ ! -d &quot;$gcLogDir&quot; ];then</span><br><span class="line">  mkdir -p &#x27;logs/gc_logs&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -f &#x27;gc.log&#x27; ]; then</span><br><span class="line">  dateformat=`date &quot;+%Y-%m-%d_%H-%M-%S&quot;`</span><br><span class="line">  tar -czvf gc.log_$dateformat&#x27;.tar.gz&#x27; gc.log</span><br><span class="line">  mv gc.log_$dateformat&#x27;.tar.gz&#x27; $gcLogDir</span><br><span class="line">  rm -rf gc.log</span><br><span class="line">  currentDirCount=`ls -l $gcLogDir | grep &quot;gc.log*&quot; | wc -l`</span><br><span class="line"></span><br><span class="line">  if [ $currentDirCount -gt $maxFile ]; then</span><br><span class="line">    oldFileSize=`expr $currentDirCount - $maxFile`</span><br><span class="line">    oldGcFiles=(`ls -1 $gcLogDir |head -n $oldFileSize`)</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  for fileName in $&#123;oldGcFiles[@]&#125;; do</span><br><span class="line">    rm -rf $gcLogDir$fileName</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没啥技术含量，就是脚本比较通用，分享出来，有需要可以复制这个脚本。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot02-搭建parent方式</title>
      <link href="posts/4f8dc6fe.html"/>
      <url>posts/4f8dc6fe.html</url>
      
        <content type="html"><![CDATA[<p>spring boot 的搭建相当简单，简化了大量的xml配置，只需要关键配置即可开箱使用。</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>什么是 parent 方式?<br>使用 pom.xml 中的 parent 标签。<br>官方示例中，都是让我们继承一个 spring 的 spring-boot-starter-parent 这个parent就是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般不使用这种方式，因为实际开发中 parent 是用于继承项目中的根 parent 项目。<br>学习测试使用这种方式。<br>如果是JDK7 不需要指定，其他的需要指定。<br>如果不是使用 tomcat 8.x，则需要指定版本。</p><p>完整示例</p><p><img src="/posts/4f8dc6fe/pomxml.png" alt="完整配置"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mytest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboottest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看一下spring boot的相关依赖</p><p><img src="/posts/4f8dc6fe/%E4%BE%9D%E8%B5%96.png" alt="依赖"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2016/11/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude= &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(Application.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常启动</p><p><img src="/posts/4f8dc6fe/console%E8%BE%93%E5%87%BA.png" alt="console输出"></p><p>到这基本就完成了一个简单的web服务的构建，也是学习 spring boot 的最简实践。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>竞态条件 racing condition</title>
      <link href="posts/4050.html"/>
      <url>posts/4050.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>多个线程读时，线程是安全的。<br>当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。<br>我的理解，竞态条件就是一种情况。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>假设有 A、B 两个线程，调用 add 方法分别传入 1 和 2，理想条件下结果应该是 3。<br>现在出现了不安全的情况，有可能结果不对。<br><code>add</code>方法就是<code>临界区</code><br><code>count</code> 就是<code>同一资源</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> count = <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// 被竞争的资源</span></span><br><span class="line">        <span class="keyword">this</span>.count = <span class="keyword">this</span>.count + value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>其实这样一看，说白了，就是要严格控制线程的执行顺序，假设是按A、B的顺序执行来讲，B依赖于A先执行完成，B再执行结果才是正确的，中间不能出现问题，否则如果，中间交叉执行，就有可能发生了竞态条件。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果某个资源会被多个线程竞争，要保证安全性的情况下，可以加上一些必要的同步措施如加锁，来保证线程安全。<br>是不是被竞争的资源，如果是<code>web</code>服务，有tomcat这种请求一直到查数据库都没有创建新的线程，那么每个线程都是隔离的，但是如果中间存在访问某个静态的成员变量或同一条数据，就有可能存在竞争，需要评估是否存在安全问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 竞态条件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot01 概述</title>
      <link href="posts/49159421.html"/>
      <url>posts/49159421.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring Boot 是 Spring 社区发布的一个开源项目，旨在帮助开发者快速并且更简单的构建项目。大多数Spring Boot项目只需要很少的配置文件。</p><h2 id="Spring-Boot特性"><a href="#Spring-Boot特性" class="headerlink" title="Spring Boot特性"></a>Spring Boot特性</h2><ul><li>创建独立的Spring项目</li><li>直接嵌入Tomcat、Jetty或Undertow（不需要部署WAR文件）</li><li>提供有自动的 &quot;启动器 &quot;依赖，以简化你的构建配置</li><li>提供了一系列大型项目中常见的非功能性特性，如安全、指标，健康检测、外部配置等</li><li>完全没有代码生成和xml配置文件</li></ul><h2 id="Spring-Boot运行环境"><a href="#Spring-Boot运行环境" class="headerlink" title="Spring Boot运行环境"></a>Spring Boot运行环境</h2><p>最低 Java6 官方推荐 Java8</p><h2 id="内置-Servlet-容器"><a href="#内置-Servlet-容器" class="headerlink" title="内置 Servlet 容器"></a>内置 Servlet 容器</h2><p>Tomcat 7 8<br>Jetty 8 9</p><h2 id="Spring-Boot-支持哪些应用"><a href="#Spring-Boot-支持哪些应用" class="headerlink" title="Spring Boot 支持哪些应用"></a>Spring Boot 支持哪些应用</h2><p>普通 Java 项目和 web 项目</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> 概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-调用awk对列求和</title>
      <link href="posts/b072a0c.html"/>
      <url>posts/b072a0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="单列求和"><a href="#单列求和" class="headerlink" title="单列求和"></a>单列求和</h2><p>调用awk进行求和，下面这段可以看做是：</p><ol><li><code>%</code>: 表示全文</li><li><code>!</code>: 感叹号是执行命令</li><li><code>awk</code>: 最简单的awk操作</li></ol><p>平时用<code>awk</code>也要注意，可以不写BEGIN，但是要写END。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%!awk <span class="string">&#x27;&#123;print; sum+=$1&#125;END&#123;print sum&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/b072a0c/awk%E6%B1%82%E5%92%8C.png" alt="awk求和"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> awk </tag>
            
            <tag> 求和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jstat统计JVM信息</title>
      <link href="posts/b8477805.html"/>
      <url>posts/b8477805.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>重要参数是要看 FGC 执行了多少次。</p></blockquote><p>JVM Statistics Monitoring Tool<br>用于监控虚拟机各种运行状态信息的命令行工具，查看虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</p><h2 id="统计垃圾回收堆的行为"><a href="#统计垃圾回收堆的行为" class="headerlink" title="统计垃圾回收堆的行为"></a>统计垃圾回收堆的行为</h2><blockquote><p>jstat -gc pid</p></blockquote><p>显示格式：</p><p><img src="/posts/b8477805/1.jpg" alt="显示结果"></p><p>列说明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">S0C: survivor0区的总容量</span><br><span class="line">S1C: survivor1区的总容量</span><br><span class="line">S0U: survivor0区已使用的容量</span><br><span class="line">S1U: survivor1区已使用的容量</span><br><span class="line">EC: Eden区的总容量</span><br><span class="line">EU: Eden区已使用的容量</span><br><span class="line">OC: Old区的总容量</span><br><span class="line">OU: Old区已使用的容量</span><br><span class="line">PC: 当前perm的容量 (KB)</span><br><span class="line">PU: perm的使用 (KB)</span><br><span class="line">YGC: 新生代垃圾回收次数</span><br><span class="line">YGCT: 新生代垃圾回收时间</span><br><span class="line">FGC: 老年代垃圾回收次数</span><br><span class="line">FGCT: 老年代垃圾回收时间</span><br><span class="line">GCT: 垃圾回收总消耗时间</span><br></pre></td></tr></table></figure><h2 id="单位时间内显示次数"><a href="#单位时间内显示次数" class="headerlink" title="单位时间内显示次数"></a>单位时间内显示次数</h2><blockquote><p>jstat -gc pid 秒 次数<br>这个命令意思就是每隔2000ms输出gc情况，一共输出20次。</p></blockquote><p><img src="/posts/b8477805/2.jpg" alt="显示结果"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-quickfix窗口</title>
      <link href="posts/11bbfe3.html"/>
      <url>posts/11bbfe3.html</url>
      
        <content type="html"><![CDATA[<h2 id="vim-quickfix"><a href="#vim-quickfix" class="headerlink" title="vim quickfix"></a>vim quickfix</h2><p>vim 自带quickfix功能，很多插件也会利用这个窗口，把错误信息在这个窗口上显示。<br>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:help quickfix</span><br><span class="line"># 打开 quickfix</span><br><span class="line">:copen</span><br><span class="line"></span><br><span class="line"># 关闭 quickfix</span><br><span class="line">:cclose</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/posts/11bbfe3/quickfix%E7%AA%97%E5%8F%A3.jpg" alt="quickfix窗口"></p><h2 id="vim-go-quickfix"><a href="#vim-go-quickfix" class="headerlink" title="vim-go quickfix"></a>vim-go quickfix</h2><p>vim-go 也是使用的 quickfix 输出，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GoLint</span><br></pre></td></tr></table></figure><p><img src="/posts/11bbfe3/vim-go%E7%9A%84quickfix%E7%AA%97%E5%8F%A3.jpg" alt="vim-go的quickfix窗口"></p><h2 id="coc-调用"><a href="#coc-调用" class="headerlink" title="coc 调用"></a>coc 调用</h2><p>需要依赖<code>fzf</code>，在普通模式下执行：</p><p>按住 <code>空格不放 + a</code>，调用</p><p><img src="/posts/11bbfe3/coc%E7%9A%84%E6%96%B9%E5%BC%8F.jpg" alt=" coc的方式"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>quickfix窗口，是个很实用的vim内置工具，开发过程中很常用，自带的quickfix窗口其实功能还是有点欠缺，最好是加上一些相关插件，用起来更舒服。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
            <tag> quickfix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 删除目录下备份目录数量</title>
      <link href="posts/3b661838.html"/>
      <url>posts/3b661838.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常需要通过脚本来控制系统目录的里备份文件数量。不可能手动来经常查看，总是忘记。<br>通过脚本定期自己查看目录里的文件数据，删除时间较早的目录。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>那么就要设置几个条件：</p><ol><li>允许存在几个目录</li><li>超过了怎么删除</li></ol><p>怎么判断目录下有多少个目录？<br>用<code>ls</code>就可以。</p><p>那多出来的怎么删除？<br>遍历删，直到没有为止</p><p>完整代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">dirCount=5</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录数</span></span><br><span class="line">currentDirCount=`ls -l | grep &quot;^d&quot; | wc -l`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历删，直到没有为止</span></span><br><span class="line">while [ $currentDirCount -gt $dirCount ]</span><br><span class="line">do</span><br><span class="line">  rm -rf `ls -1|head -n 1`</span><br><span class="line">  currentDirCount=`ls -l | grep &quot;^d&quot; | wc -l`</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>过滤目录，d 表示目录</p><blockquote><p>grep &quot;^d&quot;</p></blockquote><p>制造一些测试数据，然后执行上面的脚本验证。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir test1 test2 test3</span><br></pre></td></tr></table></figure><p>最后一个问题，什么时候来执行呢？<br>这个就看具体的策略了，可以定时执行如:<code>crontab</code>，如果装了监控应用如<code>zabbix</code>那就可以通过客户端来执行。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ls </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新生代收集器 Parallel Scavenge</title>
      <link href="posts/31744.html"/>
      <url>posts/31744.html</url>
      
        <content type="html"><![CDATA[<p>新生代，多线程，使用复制算法，是<strong>多线程</strong>的并行的收集器。<br>目标：达到一个可控的**吞吐量(Throughput)**。<br>吞吐量：CPU用于运行代码时间 与 CPU总消耗时间的 比<br>公式： 吞吐量 = 运行代码时间 / ( 运行代码时间 + GC时间）<br>虚拟机运行 100 分钟，GC用掉1分钟，则吞吐量为99%。  100 /(100 + 1) = 0.99</p><h2 id="停顿时间越短越好"><a href="#停顿时间越短越好" class="headerlink" title="停顿时间越短越好"></a>停顿时间越短越好</h2><p><strong>-XX:MaxGCPauseMillis</strong>： 最大GC停顿时间，最小可为0<br><strong>-XX:GCTimeRatio</strong>:   吞吐量大小,1-100</p><span id="more"></span><h2 id="停顿时间与空间成反比"><a href="#停顿时间与空间成反比" class="headerlink" title="停顿时间与空间成反比"></a>停顿时间与空间成反比</h2><p>停顿时间越短，则新生代的空间就越小。<br>通过减小新生代的空间，让里面的垃圾变少，从而加快了集速度。<br>原来：500MB 垃圾，10秒收集一次，每次停顿100毫秒<br>为了缩短时间，修改** -XX:MaxGCPauseMillis** 参数，使新生代空间变小，产生的垃圾就少了，停顿时间短了：<br>现在：300MB 垃圾，5秒收集一次， 每次停顿70毫秒。</p><p>那时问题来了，停顿时间下降了，但是频率高了，则吞吐量也跟着降下来了。</p><h2 id="GC-时间占总时间的比例"><a href="#GC-时间占总时间的比例" class="headerlink" title="GC 时间占总时间的比例"></a>GC 时间占总时间的比例</h2><p>GCTimeRatio 进行这个设置1-100之间，相当于吞量的倒数。<br>计算方法:<br>1.设置为 19 则： <code>1 / (1 + 19) = 5%</code>，即最大 5% 的收集时间<br>2.设置为 99 则:  <code>1 / (1 + 99) = 1%</code>，即最大 1% 的收集时间</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> 收集器 </tag>
            
            <tag> GC </tag>
            
            <tag> 垃圾回收 </tag>
            
            <tag> Parallel Scavenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 取消跟踪</title>
      <link href="posts/14823.html"/>
      <url>posts/14823.html</url>
      
        <content type="html"><![CDATA[<h2 id="取消跟踪"><a href="#取消跟踪" class="headerlink" title="取消跟踪"></a>取消跟踪</h2><p>未提交文件忽略</p><blockquote><p>git rm <code>--cached FILENAME</code></p></blockquote><p>这样就可以了，如果后面跟的是目录就加上个 -r  就行了<br>（这个操作不会删除这个文件）</p><blockquote><p>git rm -r <code>--cached DIR</code></p></blockquote><h2 id="已提交文件忽略"><a href="#已提交文件忽略" class="headerlink" title="已提交文件忽略"></a>已提交文件忽略</h2><p>已经维护起来的文件即已经 commit 后的文件，即使加上了<code>.gitignore</code>也无济于事。<br>用下面这个命令：</p><blockquote><p>git update-index <code>--assume-unchanged logs/*.log</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 取消跟踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git制造冲突</title>
      <link href="posts/13736.html"/>
      <url>posts/13736.html</url>
      
        <content type="html"><![CDATA[<h3 id="冲突来源于合并"><a href="#冲突来源于合并" class="headerlink" title="冲突来源于合并"></a>冲突来源于合并</h3><p>不同分支的 commit 是不会产生冲突的，因为 commit 提交到的是当前分支的 本地库。<br>只有将分不同分支的本地库进行合并才会产生冲突。所以：</p><ol><li>合并本地库会产生冲突</li><li>拉远程分支的代码也会产生冲突</li></ol><h3 id="通常产生的情况："><a href="#通常产生的情况：" class="headerlink" title="通常产生的情况："></a>通常产生的情况：</h3><ol><li>两个人写同一个文件就可以<br>先提交的不会有冲突，后拉取的会有冲突</li><li>同一个机器，不同分支，写同一个文件，也可以产生冲突<span id="more"></span></li></ol><h3 id="制造方法："><a href="#制造方法：" class="headerlink" title="制造方法："></a>制造方法：</h3><p>A 、B 两分支操作同一个文件的同一行代码。<br>A 分支 commit<br>B 分支 commit</p><p>B 合并 A，就会产生冲突</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 分支 </tag>
            
            <tag> 冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是线程安全?举例说明，区别。</title>
      <link href="posts/21670.html"/>
      <url>posts/21670.html</url>
      
        <content type="html"><![CDATA[<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全:"></a>线程安全:</h2><p>当多个线程访问某个方法时，不管你通过怎样的调用方式或者说这些线程如何交替的执行，我们在主程序中不需要去做任何的同步，这个类的结果行为都是我们设想的正确行为，那么我们就可以说这个类时线程安全的。</p><h2 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全:"></a>线程不安全:</h2><p>在多核CPU的环境下，当多个线程访问同一个共享变量时，这个变量没有使用任务同步机制，会出现CPU 缓存同步内存不及时，导致出现数据不同步的情况，这就是所谓的线程不安全。单核CPU没有这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashcode用在哪</title>
      <link href="posts/c5958018.html"/>
      <url>posts/c5958018.html</url>
      
        <content type="html"><![CDATA[<p>hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；<br>如果两个对象相同，就是适用于equals方法进行比较，那么这两个对象的hashCode一定要相同；</p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> hashcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashcode 相等两个类一定相等吗? equals呢? 相反呢?</title>
      <link href="posts/34395.html"/>
      <url>posts/34395.html</url>
      
        <content type="html"><![CDATA[<h4 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h4><p>不一定相等。  </p><h4 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h4><p>hashCode 算法有一定概率产生相同的 hashCode，即 hash 碰撞。</p><span id="more"></span><p>分重写 和 未重写 hashcode、equals 方法两种场景：</p><h4 id="一、hashcode-方法-和-equals-方法没有重写时"><a href="#一、hashcode-方法-和-equals-方法没有重写时" class="headerlink" title="一、hashcode 方法 和 equals 方法没有重写时"></a>一、hashcode 方法 和 equals 方法没有重写时</h4><ol><li>hashcode相等两个类不一定相等</li><li>equals返回true的两个类一定相等（为同一个对象）</li><li>两个类相等hashcode不一定相等</li><li>两个类相等equals不一定返回true</li></ol><h4 id="二、hashcode-方法和-equals-方法均已按规范重写时"><a href="#二、hashcode-方法和-equals-方法均已按规范重写时" class="headerlink" title="二、hashcode 方法和 equals 方法均已按规范重写时"></a>二、hashcode 方法和 equals 方法均已按规范重写时</h4><ol><li>hashcode相等，两个类不一定相等（存在哈希冲突）</li><li>equals返回true的两个类一定相等</li><li>两个类相等hashcode一定相等</li><li>两个类相等equals一定返回true</li></ol>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> hashcode </tag>
            
            <tag> equals </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 解决JDK内置工具不能使用问题</title>
      <link href="posts/b5427f0c.html"/>
      <url>posts/b5427f0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在服务器上准备排查服务进程问题，想使用<code>jstat</code>和<code>jcmd</code>这些工具，然后发现给我报了个错：</p><blockquote><p>bash: jstat: command not found</p></blockquote><p>这是什么鬼，程序正常跑着，难道JDK还有阉割版？<br>看看版本，这个很正常。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_291&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_291-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br></pre></td></tr></table></figure><p>那去看看bin下面是不是把这些工具全删了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure><p>结果没有 JAVA_HOME 路径，这难道又是从<code>/usr/bin</code>指过去的，怎么总是喜欢这么玩。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which java</span><br></pre></td></tr></table></figure><p>结果，还真的是</p><blockquote><p>/bin/java</p></blockquote><p>那再看看这个java是指向哪里的：<br>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /bin/java</span><br></pre></td></tr></table></figure><p>显示路径是：</p><blockquote><p>/bin/java -&gt; /etc/alternatives/java</p></blockquote><p>那么也就是指向了 <code>/etc/alternatives/</code>，进去看一眼：</p><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/alternatives/</span><br></pre></td></tr></table></figure><p>结果，指向的是<code>/usr/java/jdk1.8.0_291-amd64/bin/java</code>，好吧，应该是最后一层了。</p><blockquote><p>java -&gt; /usr/java/jdk1.8.0_291-amd64/bin/java<br>ld -&gt; /usr/bin/ld.bfd<br>libnssckbi.so.x86_64 -&gt; /usr/lib64/pkcs11/p11-kit-trust.so</p></blockquote><p>进去看一眼：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/java/jdk1.8.0_291-amd64/bin/</span><br></pre></td></tr></table></figure><p>命令基本都在这里，这里也是java的目录</p><blockquote><p>appletviewer<br>ControlPanel -&gt; jcontrol<br>extcheck<br>idlj<br>jar<br>jarsigner<br>java<br>javac<br>javadoc<br>javafxpackager<br>javah<br>javap<br>javapackager<br>java-rmi.cgi<br>javaws<br>jcmd<br>jconsole<br>jcontrol<br>jdb<br>jdeps<br>jhat<br>jinfo<br>jjs<br>jmap<br>jps<br>jrunscript<br>jsadebugd<br>jstack<br>jstat<br>jstatd<br>jvisualvm<br>keytool<br>native2ascii<br>orbd</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>机器一多，各种安装方式容易导致混乱如果可以，还是让运维同学统一安装基础应用，做到基础应用统一，使用时才会方便。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java exception和error异常和错误</title>
      <link href="posts/7bb6d948.html"/>
      <url>posts/7bb6d948.html</url>
      
        <content type="html"><![CDATA[<h2 id="体系"><a href="#体系" class="headerlink" title="体系"></a>体系</h2><p>我们在使用java的时，经常面对和处理的是异常(Exception)很少处理错误。因为如果是错误级别的往往都是比较底层的非代码层面的问题。<br>但是这两个的区别，有必搞清楚。<br>这两个是一对难兄难弟，有问题的时候都会出现这两兄弟。</p><p>通过图片可以直观的看出它们的体系，这图点开看比较清楚：</p><p><img src="/posts/7bb6d948/exception%E5%92%8Cerror%E4%BD%93%E7%B3%BB%E5%9B%BE.jpg" alt="exception和error体系图"></p><h2 id="异常-Exception"><a href="#异常-Exception" class="headerlink" title="异常 Exception"></a>异常 Exception</h2><p>这个是最常遇见的问题，主要是由于编码原因异常的问题。<br>我们开发过程中常见的是<strong>运行时异常</strong>，就是字面意思，运行时才知道的异常，运行时，才会有可能抛出来的异常。<br>那相对的，就有非运行时的异常，就是不需要运行，也能知道是异常。</p><p>而异常当中，又有几个概念，这些概念性的东西，只是帮助分类和理解，使用场景可以说是经常遇见，分别是：</p><p>两种异常：</p><ul><li><strong>运行时异常 RuntimeException</strong></li><li><strong>异常 Exception</strong></li></ul><h3 id="运行时异常-RuntimeException"><a href="#运行时异常-RuntimeException" class="headerlink" title="运行时异常 RuntimeException"></a>运行时异常 RuntimeException</h3><p>只有运行时才会知道是否有异常，比如下面这段代码会不会抛常异？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = a / b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会不会抛异常，用眼睛看很合理，没毛病，但是问题是你不知道<code>a</code>和<code>b</code>分别会传什么值进来。<br>如果传：</p><blockquote><p>a = 9;<br>b = 3;</p></blockquote><p>没问题，但是如果传：</p><blockquote><p>a = 1;<br>b = 0;</p></blockquote><p>就抛异常了，上面那段代码不在运行时，你根本不知道会不会抛异常，所以只有运行时才会知道，就叫运行时异常。<br><img src="/posts/7bb6d948/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8.jpg" alt="运行时异常"></p><p>处理RuntimeException的原则是：如果出现 RuntimeException，那么一定是程序员的错误。<br>例如，可以通过检查数组下标和数组边界来避免数组越界访问异常。<br>其他（IOException等等）checked 异常一般是外部错误，例如试图从文件尾后读取数据、网络中断等，这并不是程序本身的错误，而是在应用环境中出现的外部错误。</p><p>常见的运行时异常有：</p><ul><li><strong>NullPointerException: 空指针异常</strong></li><li><strong>IndexOutOfBoundsException: 下标越界异常</strong></li><li><strong>IllegalArgumentException: 传递非法参数异常</strong></li><li><strong>ClassCastException: 类型强制转换异常</strong></li><li><strong>NumberFormatException: String转换为指定的数字类型异常</strong></li><li><strong>ArithmeticException: 算术运算异常 如除数为0</strong></li></ul><h3 id="异常-Exception-1"><a href="#异常-Exception-1" class="headerlink" title="异常 Exception"></a>异常 Exception</h3><p>除了上面的 <strong>运行时异常 RuntimeException</strong>之外，其他的异常都是 Exception 的子类，都是检查时异常<strong>Checked Exception</strong>。<br>这种异常程序无法恢愎，运行出现时会导至程序终止，如空指针。<br>IOException、SQLException，这些都是异常。<br>上面已经总结了。</p><h2 id="错误-Error"><a href="#错误-Error" class="headerlink" title="错误 Error"></a>错误 Error</h2><p>代码运行中不是由代码引起的问题，是由外部资源异至的JVM错误，一般就归到错误里，通常由JVM处理问题，有的错误JVM也处理不了。<br>Error 是可以被捕获的，但是程序都已经出现了JVM都无法处理的错误，捕获的意思除了打印详情外，还让程序继续执行，比如 OOM 这种错误，还有必要执行吗，生产环境，这样做可能会造成经济损失，所以完全不建议捕获错误。</p><p>举个例子，手动制造内存溢出，使JVM产生错误后退出。</p><p>JVM 启动参数：</p><blockquote><p>-Xms20M -Xmx20M -Xmn20M -XX:+HeapDumpOnOutOfMemoryError</p></blockquote><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    test1();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> String());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;output...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>JVM 遇到错误后，直接就退出了，catch 里的语句没有打印。</p><p><img src="/posts/7bb6d948/%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF.jpg" alt="运行错误"></p><h2 id="checked-exception-和-unchecked-exception"><a href="#checked-exception-和-unchecked-exception" class="headerlink" title="checked exception 和 unchecked exception"></a>checked exception 和 unchecked exception</h2><p>这两个就是字面上的意思:</p><ul><li><strong>已检查异常 checked exception</strong></li><li><strong>未检查异常 unchecked exception</strong></li></ul><h3 id="捕获错误-不推荐"><a href="#捕获错误-不推荐" class="headerlink" title="捕获错误 不推荐"></a>捕获错误 不推荐</h3><p>还是那句话，JVM都Error了，再让程序运行，没有意义，不能保证JVM能恢复正常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.liukai.check;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCatchError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">351488225420878020L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestCatchError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestCatchError</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> TestCatchError(<span class="string">&quot;test catch error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;step in the catch ~&quot;</span>);</span><br><span class="line">      t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/7bb6d948/%E6%8D%95%E8%8E%B7%E9%94%99%E8%AF%AF.jpg" alt="捕获错误"></p><h3 id="checked-exceptions"><a href="#checked-exceptions" class="headerlink" title="checked exceptions"></a>checked exceptions</h3><p>需要在代码中显式地在方法签名中加上throws语句，或用throws-catch语句处理，否则编译不通过。<br>比如在使用IO类时，JDK一定会要求加上throws-catch，因为这些方法JDK已经throws了，也就是 checked 了，不加不行。</p><h3 id="unchecked-exceptions"><a href="#unchecked-exceptions" class="headerlink" title="unchecked exceptions"></a>unchecked exceptions</h3><p>不需要在代码中显式地处理，事实上是不鼓励显式的处理，因为这样的代码是多余的。<br>我们写的大部分代码都是 unchecked ，因为在代码中不可能每一行、每一个代码块都是添加 try-catch，这样直接设计JDK全局加上就完了，还需要程序员去关心checked不checked，我们只需要在可能出现的地方加上try-catch就可以了，这种问题完全依靠代码健状性即可。</p><p><img src="/posts/7bb6d948/check%E5%92%8Cuncheck.png" alt="check和uncheck"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>异常可以被补获，而错误不能，会异常JVM异常退出。<br>一般是指与虚拟机相关的问题，如系统崩溃，虚拟机错误，内存空间不足，方法调用栈溢等。<br>对于这类错误的导致的应用程序中断，仅靠程序本身无法恢复和和预防，遇到这样的错误，建议让程序终止。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 异常 </tag>
            
            <tag> exception </tag>
            
            <tag> error </tag>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程 如何停止一个线程</title>
      <link href="posts/23248.html"/>
      <url>posts/23248.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这看似一个完全没有意义的问题，但是如果你是从搜索引擎过来的话，那么说明你碰到过这个问题。<br>线程执行完不就退出了，说停止有什么意义？<br>当然有意义，意义在于，一般创建线程后，如果是一次性的线程，执行结束就可以了，不用管它。<br>如果是一个一直需要保持运行，而需要在某一时刻才需要停止的线程，就需要关注线程是如何退出的。</p><h3 id="退出方式"><a href="#退出方式" class="headerlink" title="退出方式"></a>退出方式</h3><ol><li><code>退出标志</code>: 使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。</li><li><code>interrupt</code>: 使用interrupt方法中断线程。</li><li><code>可以但不推荐</code>: 不推荐使用 stop、suspend及resume 方法。stop 相当于电脑断电关机一样，是不安全的方法。</li></ol><h3 id="退出标志"><a href="#退出标志" class="headerlink" title="退出标志"></a>退出标志</h3><p>方式：使用一个标志不控制线程是否需要继续执行。<br>常驻的业务线程当中一般都会写循环，如果不写循环，一句话能搞定的事或者需要调用才执行的事，就没必要再开线程来处理。<br>stop方法已经过时，不推荐使用。</p><p>开启多线程时，运行代码通常是循环结构，只要控制住循环，就可以让run方法结束，也就是线程结束。<br>原理：只要循环终止了，线程也就终止了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// flag 来控制线程的状态</span></span><br><span class="line">       <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">&quot;...run&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;...stop&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了一个关键字 volatile，保证当前 flag 在多核CPU 下的可见性。</p><h3 id="interrupt-方式"><a href="#interrupt-方式" class="headerlink" title="interrupt 方式"></a>interrupt 方式</h3><p>方式：主动中断线程。</p><p>上面不是说不要使有stop这种方式来停止吗，这里还用 interrupt 来主动中断。<br>interrupt 和 stop 不同，使用这个方法并不会让线程立即中断，而是给线程打一个标志，线程会在合适的时机退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.thread.stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5000</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="comment">// 打印这一句话后，后续还会打印 i= 后面的数字，证明线程并没有立即停止</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;主动中断线程&quot;</span>);</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;i=&quot;</span>+(i+<span class="number">1</span>));</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上两种方式，就是退出线程安全的方式，可以自行验证这两个方法。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> concurrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA 证书加解密通信</title>
      <link href="posts/20432.html"/>
      <url>posts/20432.html</url>
      
        <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>经常有需要使用安全传输的场景，尤其是在一些泛及资金安全的行业，对数据的传输犹为重视安全性。<br>一般常用的就是对前参的数据进行加密，再到后台进行解密。<br>接口和接口之前的数据也用一样的方式进行加密和解密。</p><ol><li>生成公私钥证书</li><li>公钥对接口参数明文加密</li><li>私钥对接口参数明文解密</li><li>通信双方互相持有对方公私钥</li></ol><p>如果所有的接口都需要加解密，可以放到拦截器中去统一处理，也可以用注解的方式，控制哪些接口需要加密，哪些接口不需要加密。</p><h2 id="生成-RAS-密钥"><a href="#生成-RAS-密钥" class="headerlink" title="生成 RAS 密钥"></a>生成 RAS 密钥</h2><p>windows 下使用 OpenSSL 工具生成即可，下载后需要解压，然后在 bin 下面打开 OpenSSL，解压是因为生运行后会生成公私钥文件在当前目录下。<br>mac也有一个自带OpenSSL，可以直接用来生成RSA公钥与私钥。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>打开iterm2，输入<code>openssl</code></p><p><img src="/posts/20432/%E6%89%93%E5%BC%80openssl.jpg" alt="打开openssl"></p><p>1.生成私钥</p><blockquote><p>genrsa -out rsa_private_key.pem 1024</p></blockquote><p><img src="/posts/20432/%E7%94%9F%E6%88%90%E7%A7%81%E9%92%A5.jpg" alt="生成私钥"></p><p>2.生成公钥</p><blockquote><p>rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</p></blockquote><p><img src="/posts/20432/%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5.jpg" alt="生成私钥"></p><p>3.生成 PKCS8 格式私钥</p><blockquote><p>pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt</p></blockquote><p><img src="/posts/20432/%E8%BD%AC%E6%8D%A2pkcs8.jpg" alt="转换pkcs8"></p><p> 这个需要保存另外保存起来，java 中需要使用 PKCS8 格式。</p><p>4.openssl生成RSA公、私钥对文件<br>rsa_private_key.pem<br>rsa_public_key.pem</p><p><img src="/posts/20432/%E6%96%87%E4%BB%B6.jpg" alt="文件"></p><p>cat 看一下内容，其实就是上面生成的部份。</p><p><img src="/posts/20432/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.jpg" alt="查看文件内容"></p><h2 id="使用证书"><a href="#使用证书" class="headerlink" title="使用证书"></a>使用证书</h2><p>看到这里有经验的小伙伴肯定会有疑问，平时用的不都是<code>.cer</code>后缀的文件吗，这里是<code>.pem</code>格式的密钥文件，这个怎么用？<br>这是因为<code>openssl</code>可以将不同后缀的文件进行转换，以便应用在不同场景中。<br>也可以在生成的时候，直接指定生成<code>.cer</code>类型的密钥文件，一步到位。</p><h3 id="pem-格式"><a href="#pem-格式" class="headerlink" title="pem 格式"></a>pem 格式</h3><p>内容为Base64编码的ASCII文件。</p><p>PEM格式是证书颁发机构颁发证书的最常见格式<code>.PEM</code>证书通常具有扩展名，例如<code>.pem</code>、<code>.crt</code>、<code>.cer</code>和<code>.key</code>。<br>它们是Base64编码的ASCII文件，<br>包含<code>-----BEGIN RSA PRIVATE KEY-----</code>和<code>-----END RSA PRIVATE KEY-----</code>语句，就像上面生在的一样。<br>服务器证书，中间证书和私钥都可以放入PEM格式。</p><h3 id="DER-格式"><a href="#DER-格式" class="headerlink" title="DER 格式"></a>DER 格式</h3><p>DER格式只是证书的二进制形式，而不是ASCII PEM格式。</p><p>它有时会有<code>.der</code>的文件扩展名，但它的文件扩展名通常是.cer所以判断DER .cer文件和PEM .cer文件之间区别的<strong>唯一方法是在文本编辑器中打开它并查找BEGIN / END语句</strong>。所有类型的证书和私钥都可以用DER格式编码。</p><p>DER通常与Java平台一起使用。<br>SSL转换器只能将证书转换为DER格式。<br>如果您需要将私钥转换为DER，请使用此页面上的OpenSSL命令。</p>]]></content>
      
      
      <categories>
          
          <category> safe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> 安全通信 </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的创建</title>
      <link href="posts/62665.html"/>
      <url>posts/62665.html</url>
      
        <content type="html"><![CDATA[<p>这里指普通 Java 对象，而非数组 和 Class对象等。</p><h2 id="1-创建对象的过程"><a href="#1-创建对象的过程" class="headerlink" title="1.创建对象的过程"></a>1.创建对象的过程</h2><p>new ---&gt; 到常量池中检查是否存在一个类的符号引用 ---&gt; 如果有，检查这个符号引用代表的类是否已被加载、解析、初始化 ---&gt; 没有，则执行类加载过程。</p><h2 id="2-分配对象"><a href="#2-分配对象" class="headerlink" title="2.分配对象"></a>2.分配对象</h2><p>类加载完毕后，为新生对象分配内存。<br>对象所需内存大小在类加载完成后便完全确定。分配空间。即，从JVM堆中划出一块确定大小的内存空间。</p><h2 id="3-分配方法"><a href="#3-分配方法" class="headerlink" title="3.分配方法"></a>3.分配方法</h2><p>有两种分配方法：</p><ol><li>指针碰撞：<br>使用这种方式的前提是，内存是规整的。<br>左边是空闲的空间，右边是已使用的内存空间，用一块，就往左边移一块，就像秤砣在称中间移动一样。</li><li>空闲列表<br>内存不规整，此时不能使用指针碰撞。JVM 就需要维护一个列表，记录哪些空间可用并给对象。</li></ol><p>堆内存是否规整决定了使用哪种分配方法。<br>而堆是否会规整则由GC是否带有压缩整理功能决定。</p><span id="more"></span><h2 id="4-避免并发操作同一片内存的问题"><a href="#4-避免并发操作同一片内存的问题" class="headerlink" title="4.避免并发操作同一片内存的问题"></a>4.避免并发操作同一片内存的问题</h2><p>并发时，A线程 拿着指针在为对象分配 <code>0x111111</code> 这片空间，分配动作执行到一半，B线程 也进来了拿着同一个指针在同一个地址上分配空间。这就出现了问题。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>CAS 配置失败重试的方式保证更新操作的原子性。</li><li>为每个线程开一小块内存空间，称为本地内存分配缓冲(TLAB)。线程在自己的TLAB是分配。</li></ol><h2 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5.初始化"></a>5.初始化</h2><p>当分配完成后，JVM将分配到的内存空间开始进行初始化为 0 值(不包括对象头)，0值就是数学中的0。如果是TLAB方式，提前到TLAB中分配时进行。<br>这就是使用对象时，程序访问某些字段的数据类型默认有0的原因。就可以不用赋值也可以使用。</p><h2 id="6-必要设置"><a href="#6-必要设置" class="headerlink" title="6.必要设置"></a>6.必要设置</h2><p>接下来JVM对对象进行必要设置。<br>设置如：对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、GC分代年龄等。<br>这些信息存放在对象头中。<br>对JVM来说，对象已分配完成，一个新对象就此产生。<br>但从 java 程序的角度来说对象创建才刚开始。调用 init 方法前，所有字段都是默认的0。执行init方法，对象进行初始化，这样一个真正可用的对象才算完全产生。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 对象 </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用级别</title>
      <link href="posts/40164.html"/>
      <url>posts/40164.html</url>
      
        <content type="html"><![CDATA[<p>引用级别<br>意义：用来标记对角是否可以被回收<br>级别：<br>强 &gt; 软 &gt; 弱 &gt; 虚</p><h3 id="1-强引用"><a href="#1-强引用" class="headerlink" title="1.强引用"></a>1.强引用</h3><p>即一般普通的引用。<br>如果一个对象是强引用，绝对不会被回收，即使内存空间不足也不会被回收，而是抛 OutOfMemoryError 异常使程序终止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> Arraylist&lt;String&gt;();</span><br><span class="line">list.add(str);</span><br></pre></td></tr></table></figure><p>在list集合里的数据不会释放，即使内存不足也不会</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();  </span><br></pre></td></tr></table></figure><span id="more"></span><p>//可直接通过obj取得对应的对象 如obj.equels(new Object());<br>而这样 obj对象对后面new Object的一个强引用，只有当obj这个引用被释放之后，对象才会被释放掉，这是经常用到的编码形式。</p><h3 id="2-软引用"><a href="#2-软引用" class="headerlink" title="2.软引用"></a>2.软引用</h3><p>非必须引用，如果空间不足就会被GC回收。换句话说，在内存溢出之前进行回收。<br>只要没有被回收，该对象就可能被程序使用。软引用可用来实现内存敏感的高速缓存。<br>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSofeReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object obj= <span class="keyword">new</span> Object();</span><br><span class="line">    SoftReference&lt;Object&gt; softReference = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(softReference.get());        <span class="comment">//有时候会返回 null</span></span><br><span class="line">    System.out.println(softReference.isEnqueued()); <span class="comment">//返回时否被 GC 回收的标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候 softReference 是对obj的一个软引用，通过sf.get()方法可以取到这个对象，当然，当这个对象被标记为需要回收的对象时，则返回null；<br>软引用主要用户实现类似缓存的功能，在内存足够的情况下直接通过软引用取值，无需从繁忙的真实来源查询数据，提升速度；当内存不足时，自动删除这部分缓存数据，从真正的来源查询这些数据。</p><h3 id="3-弱引用"><a href="#3-弱引用" class="headerlink" title="3.弱引用"></a>3.弱引用</h3><p>第二次圾垃回收时，被回收</p><h3 id="4-虚引用"><a href="#4-虚引用" class="headerlink" title="4.虚引用"></a>4.虚引用</h3><p>垃圾回收时回收，无法通过引用取到对象值</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 对象 </tag>
            
            <tag> 引用级别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 堆内存简介</title>
      <link href="posts/60275.html"/>
      <url>posts/60275.html</url>
      
        <content type="html"><![CDATA[<p>Java 堆 是虚拟机管理的最大的一块内存。是被所有线程所共享的一块内存区域，在虚拟机启动时创建。</p><h2 id="分配内存方式"><a href="#分配内存方式" class="headerlink" title="分配内存方式"></a>分配内存方式</h2><p>所有的实例和数组都在要堆上分配，但是随着JIT编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导至一些变化，所有的对象都分配在堆上也变得不那么绝对。</p><p>Java 堆是垃圾收集器管理的主要区域，也叫CG堆。由于现在收集器基本都爱用分代收集算法，<br>所以Java堆中还可以细分为：<br><code>新生代</code> 和 <code>老年代</code>。再细致一点的有: <code>Eden 空间</code>、<code>From Survivor 空间</code>、<code>To Survivor 空间</code>等。从内存分配的角度来看，线程共享的Java堆中可能划多个线程私有的分配缓存区。</p><p>如何划分与存放内容无关，无论哪个区域，存储的都仍然是对象实例。进一步划分的目的是为了更好的回收内存、或都更快的分配内存。</p><h2 id="存放特点"><a href="#存放特点" class="headerlink" title="存放特点"></a>存放特点</h2><p>Java 堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间。<br>堆的实现，即可固定大小，也可以扩展，通过 -Xms 和 -Xmx 控制。<br>如果堆中没有内存实例分配，并助理堆无法再扩展时，抛出 OutOfMemoryError</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
            <tag> jvm </tag>
            
            <tag> 堆 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环引用是否会被回收</title>
      <link href="posts/16504.html"/>
      <url>posts/16504.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>见过一个问题说，如果java里的对象出现了循环引用，对象会不会被回收。<br>结论是：<strong>会</strong>。<br>因为 java 的对象存活算法，使用的是可达性分析算法，而不是引用计算法，java中<strong>任何一款GC都没有</strong>使用过引用计算法。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line">    a.bb = b;</span><br><span class="line">    b.aa = a;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//a = null;</span></span><br><span class="line">    <span class="comment">//b = null;</span></span><br><span class="line">    System.in.read();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> 循环引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 虚拟机简单理解</title>
      <link href="posts/51565.html"/>
      <url>posts/51565.html</url>
      
        <content type="html"><![CDATA[<p>与PC寄存器一样，Java虚拟机栈也是线程私有的。每一个JVM线程都有自己的java虚拟机栈，这个栈与线程同时创建，它的生命周期与线程相同。</p><h2 id="1-虚拟机栈的特点"><a href="#1-虚拟机栈的特点" class="headerlink" title="1.虚拟机栈的特点"></a>1.虚拟机栈的特点</h2><p>“虚拟机栈”描述的是Java方法执行的内存模型：  </p><ol><li>每个方法被执行的时候都会同时创建一个<code>栈帧（Stack Frame）</code>用于存储:<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>等信息。(栈帧我的理解就是一个对象，用来存储信息用)</li><li>每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</li></ol><h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><ol><li>存放了8种基本数据 类型</li><li>对象引用 类型</li><li>returnAddress 类型</li></ol><span id="more"></span><p>除64位 long 和 duble 占2个局部空间外，其余的数据类型只占1个。<br>注意，局部变量表所需的内存空间在编译期间完成分配，所以进入某个方法时，这个方法需要在栈桢中分配多大的空间完全是确定的，在方法运行时是不会改变局部变量表的大小的。</p><h2 id="3-虚拟机栈出现异常两种情况"><a href="#3-虚拟机栈出现异常两种情况" class="headerlink" title="3.虚拟机栈出现异常两种情况"></a>3.虚拟机栈出现异常两种情况</h2><ol><li>如果线程请求的深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常;</li><li>如果虚拟机进行动态扩展，而扩展时无法申请到足够的内存，则抛出 OutOfMemoryError 异常。</li></ol><p>注，大部分 Java 虚拟机分为：<code>固定长度</code> 和 <code>动态扩展</code> 两种</p><h2 id="关于动态扩展"><a href="#关于动态扩展" class="headerlink" title="关于动态扩展"></a>关于动态扩展</h2><p>JVM stack 可以被实现成固定大小，也可以根据计算动态扩展。<br>如果采用固定大小的JVM stack设计，那么每一条线程的JVM Stack容量应该在线程创建时独立地选定。<br>JVM实现应该提供调节JVM Stack初始容量的手段；如果采用动态扩展和收缩的JVM Stack方式，应该提供调节最大、最小容量的手段。</p><p>如果线程请求的栈深度大于虚拟机所允许的深度将抛出StackOverflowError；<br>如果JVM Stack可以动态扩展，但是在尝试扩展时无法申请到足够的内存时抛出<code>OutOfMemoryError</code>。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
            <tag> jvm </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程 生产者消费者模式</title>
      <link href="posts/3113903e.html"/>
      <url>posts/3113903e.html</url>
      
        <content type="html"><![CDATA[<h2 id="多生产消费者模式"><a href="#多生产消费者模式" class="headerlink" title="多生产消费者模式"></a>多生产消费者模式</h2><p>真正的开发环境下，不可能只有两条线程在跑，但是也有特殊情况，就是只需要两条线程来处理。<br>比如一个线程生产，一个线程消费。<br>这是一种线程协作，这种情场景下，<code>生产者</code> 和 <code>消费者</code>会操作同一个共享变量。<br>看到这里的小伙伴应该是对线程的基本用法有一定了解，这里就直接开始明确几个概念</p><p><strong>生产者</strong></p><blockquote><p>生产数据的线程，比如产生订单</p></blockquote><p><strong>消费者</strong></p><blockquote><p>处理生产者产生的订单</p></blockquote><p>实际环境中，生产数据的速度要大于消费的速度，这个现象在很多场景中都存在。</p><p><strong>共享变量</strong></p><blockquote><p>会被多个线程共同访问的变量</p></blockquote><p>生产者、消费者模式本质是，通过严格控制两个线程的交替执行，来实现一个生产、一个消费的模式，数据存储在共享变量中。</p><p>可以再扩展一下，比如常用的MQ，也是一种生产者消费者模式，Producer 生产消费，Consumer消费消息。</p><h2 id="主要资源"><a href="#主要资源" class="headerlink" title="主要资源"></a>主要资源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/2/18.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;        <span class="comment">//注意，这里同样是判断标识位，但是这里和之前笔记不是的地方是，这里用的是while，而不是if。</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.wait();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;生产&quot;</span> + count++);</span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.wait();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;消费&quot;</span> + count++);</span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者类"><a href="#生产者类" class="headerlink" title="生产者类"></a>生产者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Resource res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.res = res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      res.set();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者类"><a href="#消费者类" class="headerlink" title="消费者类"></a>消费者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  Resource res;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Resource res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.res = res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      res.out();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Resource r = <span class="keyword">new</span> Resource();</span><br><span class="line">    Producer in = <span class="keyword">new</span> Producer(r);</span><br><span class="line">    Consumer out = <span class="keyword">new</span> Consumer(r);</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(in);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(out);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Thread-0--&gt;生产470</span><br><span class="line">Thread-1--&gt;消费471</span><br><span class="line">Thread-0--&gt;生产472</span><br><span class="line">Thread-1--&gt;消费473</span><br><span class="line">Thread-0--&gt;生产474</span><br><span class="line">Thread-1--&gt;消费475</span><br><span class="line">Thread-0--&gt;生产476</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> algorithm </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
          <category> concurrent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 生产者消费者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>telnet工具使用</title>
      <link href="posts/47cc4a4b.html"/>
      <url>posts/47cc4a4b.html</url>
      
        <content type="html"><![CDATA[<p>最近刚装的机器，发现没有telnet，手动搞了一把，顺便做下记录。</p><h3 id="查看telnet-server是否安装"><a href="#查看telnet-server是否安装" class="headerlink" title="查看telnet server是否安装"></a>查看telnet server是否安装</h3><blockquote><p>rpm -qa | grep telnet-server</p></blockquote><p>如果没有，则安装</p><blockquote><p>yum install telnet-server -y</p></blockquote><h3 id="开启telnet服务"><a href="#开启telnet服务" class="headerlink" title="开启telnet服务"></a>开启telnet服务</h3><blockquote><p>chkconfig telnet on</p></blockquote><h3 id="启动telnet服务"><a href="#启动telnet服务" class="headerlink" title="启动telnet服务"></a>启动telnet服务</h3><blockquote><p>service xinetd reload</p></blockquote><h3 id="手动方式启动服务"><a href="#手动方式启动服务" class="headerlink" title="手动方式启动服务"></a>手动方式启动服务</h3><p>编辑telent的配置文件/etc/xinetd.d/telnet 如下：<br>（设置disable = no，也就是开启telnet服务）</p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><blockquote><p>service xinetd restart</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> telnet </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-空类型指针</title>
      <link href="posts/49709.html"/>
      <url>posts/49709.html</url>
      
        <content type="html"><![CDATA[<h2 id="空类型指针"><a href="#空类型指针" class="headerlink" title="空类型指针"></a>空类型指针</h2><p><code>malloc</code> 查看底层源码中发现是空类型的指针，空类型的指针可以接收任意类型的指针，但是不能取出指针里的内容，如果要取出内容必须要强转。</p><h3 id="1-验证空类型指针，可以接收任意类型指针，但不可以取值"><a href="#1-验证空类型指针，可以接收任意类型指针，但不可以取值" class="headerlink" title="1.验证空类型指针，可以接收任意类型指针，但不可以取值"></a>1.验证空类型指针，可以接收任意类型指针，但不可以取值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testVoidPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">void</span> *p = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x, %x&quot;</span>, &amp;a, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *p);   <span class="comment">//error: invalid use of void expression</span></span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-通过强转取值"><a href="#2-通过强转取值" class="headerlink" title="2.通过强转取值"></a>2.通过强转取值</h3><p>将值强转成对应的指针类型取出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testVoidPoint2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">void</span> *p = &amp;a;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *((<span class="keyword">int</span>*)(p)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-开辟空间，证明指针即是动态数组"><a href="#3-开辟空间，证明指针即是动态数组" class="headerlink" title="3.开辟空间，证明指针即是动态数组"></a>3.开辟空间，证明指针即是动态数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testVoidPoint3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> intSize = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);  <span class="comment">//得到4，证明 int 是 4 个字节</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, intSize);</span><br><span class="line">  <span class="keyword">int</span> *p = (<span class="keyword">int</span>*) <span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  <span class="comment">//一开始就使用强转，开辟 20个4字节的空间，80个字节内存</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    <span class="comment">//注意，指针本质上也可看成数组。指针的数组下标是可以动态分配的，数组不可以。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%x\n&quot;</span>, &amp;p[i], i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-指针与动态数组的等价比较"><a href="#4-指针与动态数组的等价比较" class="headerlink" title="4.指针与动态数组的等价比较"></a>4.指针与动态数组的等价比较</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testVoidPoint4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> intSize = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, intSize);</span><br><span class="line">  <span class="keyword">int</span> *p = (<span class="keyword">int</span>*) <span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%x\n&quot;</span>, p[i], &amp;p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%x\n&quot;</span>, *(p + i), p + i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>p[i]</code> 等价于 <code>*(p + i)</code><br><code>&amp;p[i]</code> 等价于 <code>p + i</code></p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 指针 </tag>
            
            <tag> 空类型指针 </tag>
            
            <tag> malloc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-使用 molloc 手动开辟内存</title>
      <link href="posts/34852.html"/>
      <url>posts/34852.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>手动开辟内存 主要使用的函数 <code>molloc</code> 进行操作。开启指定的内存空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;自增内存&quot;</span>);</span><br><span class="line">  <span class="comment">//开10兆内存，并地址给一个指针。</span></span><br><span class="line">  <span class="keyword">int</span> *p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="number">1024</span> *<span class="number">10</span> );</span><br><span class="line">  Sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>malloc 无效可能是杀毒软件拦截的原因。<br>malloc 用来创建动态的数组也是数组，跟普通的数组有什么区别呢：</p><p>普通的数组是已知大小的情况下使用，malloc 的数组是在大小不确定的情况下使用，可以动态的分配指定大小，灵活度大。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
            <tag> molloc </tag>
            
            <tag> 开辟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是幂等</title>
      <link href="posts/28470.html"/>
      <url>posts/28470.html</url>
      
        <content type="html"><![CDATA[<h1 id="幂等（idempotent、idempotence）"><a href="#幂等（idempotent、idempotence）" class="headerlink" title="幂等（idempotent、idempotence）"></a>幂等（idempotent、idempotence）</h1><p>是一个数学与计算机学概念，常见于抽象代数中。</p><p>在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。</p><p>幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。</p><p>这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，&quot;setTrue()&quot;函数就是一个幂等函数,无论多次执行，其结果都是一样的.更复杂的操作幂等保证是利用唯一交易号(流水号)实现.</p><h1 id="编程中的幂等"><a href="#编程中的幂等" class="headerlink" title="编程中的幂等"></a>编程中的幂等</h1><span id="more"></span><p>编程中.一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，&quot;setTrue()&quot;函数就是一个幂等函数,无论多次执行，其结果都是一样的.更复杂的操作幂等保证是利用唯一交易号(流水号)实现.</p><p>白话：操作几次，结果都是一样。<br>幂等与操作有关</p><p>幂等与你是不是分布式高并发还有JavaEE都没有关系。关键是你的操作是不是幂等的。<br>一个幂等的操作典型如：把编号为5的记录的A字段设置为0这种操作不管执行多少次都是幂等的。<br>一个非幂等的操作典型如：把编号为5的记录的A字段增加1这种操作显然就不是幂等的。<br>要做到幂等性，从接口设计上来说不设计任何非幂等的操作即可。<br>譬如说需求是：当用户点击赞同时，将答案的赞同数量+1。<br>改为：当用户点击赞同时，确保答案赞同表中存在一条记录，用户、答案。<br>赞同数量由答案赞同表统计出来。</p>]]></content>
      
      
      <categories>
          
          <category> arch </category>
          
          <category> 概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 概念 </tag>
            
            <tag> 幂等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法技巧--两个原素交换位置</title>
      <link href="posts/36443.html"/>
      <url>posts/36443.html</url>
      
        <content type="html"><![CDATA[<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>要不使用第三个变量的前题下且原地修改变量位置，将两个数组元素交易位置。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不使用第三个变量的话，只能在原来的两上变量在动心思。<br>这两个变量没说不能变，那么就使用数学的方式将两个变量交换一下。<br>只需要把两个变量中的其中一个借用来存储当前的变量即可，最后再还原回去。<br>步骤：</p><ol><li>借变量</li><li>交换元素</li></ol><p>其实公式也很好记，变量位置不变，只是变了符号：</p><blockquote><p>a + b<br>a - b<br>a - b</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.algorithm.sort;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liu kai on 16/9/8.</span></span><br><span class="line"><span class="comment"> * 交换数组两个元素位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Change</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>, y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">        test(arr, x, y);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = arr[x];</span><br><span class="line">        <span class="keyword">int</span> b = arr[y];</span><br><span class="line">        a = a+b;  <span class="comment">// 8 = 3 + 5</span></span><br><span class="line">        b = a-b;  <span class="comment">// 3 = 8 - 5</span></span><br><span class="line">        a = a-b;  <span class="comment">// 5 = 8 - 3</span></span><br><span class="line">        arr[x] = a;</span><br><span class="line">        arr[y] = b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>变量交换位置是一个再常用不过的技巧了，把这些技巧综合起来就是算法。<br>不怕贼偷，就怕贼惦记。算法也是一样，只要反复做就会找到感觉，其实就那样。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 交换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法技巧--一维数组去重</title>
      <link href="posts/48481.html"/>
      <url>posts/48481.html</url>
      
        <content type="html"><![CDATA[ <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 一维数组去重</span></span><br><span class="line"><span class="comment"> * Author liu kai</span></span><br><span class="line"><span class="comment"> * Data 2016/7/25 14:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;        <span class="comment">//标记去重的次数</span></span><br><span class="line">    <span class="keyword">int</span> newLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] newArray;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] == arr[j]) &#123;</span><br><span class="line">                    arr[j] = -<span class="number">1</span>;</span><br><span class="line">                    len++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不使用 list 的情况下，用数组重新封装结果</span></span><br><span class="line">    newArray = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length - len];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] != -<span class="number">1</span>) &#123;</span><br><span class="line">            newArray[newLen] = arr[i];</span><br><span class="line">            newLen++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printResult (newArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printResult</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 去重 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm 手动触发gc</title>
      <link href="posts/733b48b5.html"/>
      <url>posts/733b48b5.html</url>
      
        <content type="html"><![CDATA[<p>很多时候我们在学习JVM时，往往需要查看JVM的回收日志，查看JVM的相关运行参数，这时候我们可以通过手动触发的形式获取JVM的运行回收情况。</p><h2 id="加上参数"><a href="#加上参数" class="headerlink" title="加上参数"></a>加上参数</h2><blockquote><p>-Xms1024m -Xmx1024m -Xmn512m -XX:+PrintGCDetails。</p></blockquote><p><img src="/posts/733b48b5/%E6%89%8B%E5%8A%A8%E8%A7%A6%E5%8F%91gc.jpeg" alt="手动触发gc"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGCRoots01</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> _10MB = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">byte</span>[] memory = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span> * _10MB];</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      method01();</span><br><span class="line">      System.out.println(<span class="string">&quot;返回main方法&quot;</span>);</span><br><span class="line">      System.gc();</span><br><span class="line">      System.out.println(<span class="string">&quot;第二次GC完成&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      TestGCRoots01 t = <span class="keyword">new</span> TestGCRoots01();</span><br><span class="line">      System.gc();</span><br><span class="line">      System.out.println(<span class="string">&quot;第一次GC完成&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键的一行在于 System.gc();</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[GC (System.gc()) [PSYoungGen: 97648K-&gt;624K(458752K)] 97648K-&gt;82552K(983040K), 0.0805172 secs] [Times: user=0.06 sys=0.04, real=0.08 secs] </span><br><span class="line">[Full GC (System.gc()) [PSYoungGen: 624K-&gt;0K(458752K)] [ParOldGen: 81928K-&gt;82426K(524288K)] 82552K-&gt;82426K(983040K), [Metaspace: 3305K-&gt;3305K(1056768K)], 0.0252976 secs] [Times: user=0.02 sys=0.00, real=0.03 secs] </span><br><span class="line">第一次GC完成</span><br><span class="line">返回main方法</span><br><span class="line">[GC (System.gc()) [PSYoungGen: 7864K-&gt;64K(458752K)] 90291K-&gt;82490K(983040K), 0.0017362 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] </span><br><span class="line">[Full GC (System.gc()) [PSYoungGen: 64K-&gt;0K(458752K)] [ParOldGen: 82426K-&gt;494K(524288K)] 82490K-&gt;494K(983040K), [Metaspace: 3306K-&gt;3306K(1056768K)], 0.0115159 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] </span><br><span class="line">第二次GC完成</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 458752K, used 23593K [0x00000007a0000000, 0x00000007c0000000, 0x00000007c0000000)</span><br><span class="line">  eden space 393216K, 6% used [0x00000007a0000000,0x00000007a170a568,0x00000007b8000000)</span><br><span class="line">  from space 65536K, 0% used [0x00000007bc000000,0x00000007bc000000,0x00000007c0000000)</span><br><span class="line">  to   space 65536K, 0% used [0x00000007b8000000,0x00000007b8000000,0x00000007bc000000)</span><br><span class="line"> ParOldGen       total 524288K, used 494K [0x0000000780000000, 0x00000007a0000000, 0x00000007a0000000)</span><br><span class="line">  object space 524288K, 0% used [0x0000000780000000,0x000000078007bb70,0x00000007a0000000)</span><br><span class="line"> Metaspace       used 3313K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 365K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell--解决数组拼接变成一行</title>
      <link href="posts/66cd2d52.html"/>
      <url>posts/66cd2d52.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>碰到了一个奇怪的问题，脚本在执行推送数据任务的时候，总是会有两个节点是失败的，确认环境都是相关的，有可能是脚本有毛病，加了堆日志后发现确实有问题。<br>因为之前修改数组拼接的方法。</p><h2 id="出现问题的shell"><a href="#出现问题的shell" class="headerlink" title="出现问题的shell"></a>出现问题的shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line">devNet=(</span><br><span class="line">10.40.100.114</span><br><span class="line">10.40.100.115</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">testNet=(</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">10.40.100.111</span><br><span class="line">10.40.100.110</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testFn() &#123;</span><br><span class="line">  local nodes=(&quot;$@&quot;)</span><br><span class="line">  for node in &quot;$&#123;nodes[@]&#125;&quot;; do</span><br><span class="line">    echo &quot;[info]: restart node: $node&quot;</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 就因为用 <span class="string">&quot; &quot;</span> 包起来了所以就出问题了，把两行当成一行处理</span></span><br><span class="line">allNode=(&quot;$&#123;devNet[@]&#125; $&#123;testNet[@]&#125;&quot;)</span><br><span class="line">testFn &quot;$&#123;allNode[@]&#125;&quot;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>[info]: restart node: 10.40.100.114<br>[info]: restart node: 10.40.100.115 10.40.100.111<br>[info]: restart node: 10.40.100.110</p></blockquote><h2 id="修复后"><a href="#修复后" class="headerlink" title="修复后"></a>修复后</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line">devNet=(</span><br><span class="line">10.40.100.114</span><br><span class="line">10.40.100.115</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">testNet=(</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">10.40.100.111</span><br><span class="line">10.40.100.110</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testFn() &#123;</span><br><span class="line">  local nodes=(&quot;$@&quot;)</span><br><span class="line">  for node in &quot;$&#123;nodes[@]&#125;&quot;; do</span><br><span class="line">    echo &quot;[info]: restart node: $node&quot;</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去掉 <span class="string">&quot; &quot;</span></span></span><br><span class="line">allNode=($&#123;devNet[@]&#125; $&#123;testNet[@]&#125;)</span><br><span class="line">testFn &quot;$&#123;allNode[@]&#125;&quot;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>[info]: restart node: 10.40.100.114<br>[info]: restart node: 10.40.100.115<br>[info]: restart node: 10.40.100.111<br>[info]: restart node: 10.40.100.110</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell--ssh解析本地变量到远程失败</title>
      <link href="posts/a5d7c01.html"/>
      <url>posts/a5d7c01.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>很多问题都是由于双眼号引起的，但是shell标准确很喜欢让开发者加上双眼号。<br>脚本通过<code>ssh</code>远程操作其它相器，正常情况下脚本会将我本机的脚本变量带到远程机器上，这个脚本一直远行正常。<br>然后看到一个shell的变量使用规范，要在大部分重要的变量是加上<code>又眼号</code>，我就这么干了，然后就出问题了。</p><h2 id="正常场景"><a href="#正常场景" class="headerlink" title="正常场景"></a>正常场景</h2><p>我在本机：192.168.1.100上执行脚本，并登陆:192.168.1.200上操作一下，正常应该打印出:<code>test-abcd</code>，但是由于变量失效，则打印为空。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">nodes(</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.102</span><br><span class="line">192.168.1.200</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">myVar=&quot;test-abcd&quot;</span><br><span class="line">startNodes() &#123;</span><br><span class="line">  local nodes=(&quot;$@&quot;)</span><br><span class="line">  for node in &quot;$&#123;nodes[@]&#125;&quot;; do</span><br><span class="line">     &#123;</span><br><span class="line">     echo &quot;[info]: start node: $node&quot;</span><br><span class="line">     # 处理，去掉&quot;EOF&quot;，改成 EOF，就正常</span><br><span class="line">     ssh -p 22008 -Tq java-tron@&quot;$node&quot;&lt;&lt;&quot;EOF&quot;</span><br><span class="line">     # 正常打印出 test-abcd</span><br><span class="line">     echo $myVar</span><br><span class="line">     exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个EOF必须在这个位置，左边不要有空格或缩进</span></span><br><span class="line">EOF</span><br><span class="line">    &#125;&amp;</span><br><span class="line">    done</span><br><span class="line">    wait</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因，是由于 EOF 改成了 &quot;EOF&quot;，导致变量解决失败。去掉&quot;EOF&quot;的双眼号，正常。<br>上面这段shell，也是并行ssh到远程的代码，也可以直接复制去使用，wait 标识是表示线处理完成之后，在wait处等待所有线程处理完毕后，往下执行，如果不需等待，就去掉wait。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 解决 </tag>
            
            <tag> 问题 </tag>
            
            <tag> ssh </tag>
            
            <tag> 远程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-工作区、暂存区、版本库</title>
      <link href="posts/ddc7c25.html"/>
      <url>posts/ddc7c25.html</url>
      
        <content type="html"><![CDATA[<h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><p>就是 git init 的目录，就是工程目录。<br>工作区下包含着版本库 .git 文件夹。</p><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><p>暂存区就存在于 <code>.git</code> 版本库文件夹内。<br>称为 <code>stage</code>，这并不是指某个目录的名称，而是一个逻辑概念。<br>一般存放在 .git 目录下的 index 文件（.git/index）中。</p><p>创建版本库的同时，会创建一个唯一的 master 分支。<br>git add    是往暂存区提交<br>git commit 是往 master分支提交</p><p>在实际开发中，这个作用很大，比如在编写一段时间的代码后，想要拉一下远程分支的代码，或者想回到之前的修改，但是又不想删掉这些修改，就可以用 stage 来暂存修改，暂存后，代码恢复未修改前的样子。</p><h2 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h2><p>工作区有一个隐藏目录 .git，虽然这个目录在工作区的工程目录下，但是目录是管理git的。这个不算工作区，而是 Git 的版本库。<br>工作区中的文件的修改和 stage 暂存区中的修改都会被 git 监控到。<br>不同的区之前的修改是独立互不影响的。工作区中的修改是不会被 commit 的。只有暂存区的才会被 commit。</p><p><img src="/posts/ddc7c25/git.jpeg" alt="版本库"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本管理 </tag>
            
            <tag> vcs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射05-Constructor对象</title>
      <link href="posts/4cf72284.html"/>
      <url>posts/4cf72284.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Constructor 对象，就是字面意思，就是一个构造器对象。可以通过它构建对象。</p><p>有构造器就能创建对象。<br>构造器对象，用来获取当前反射类的构造器。</p><p>主要方法:</p><ol><li><code>getDeclaredConstructor</code>：根据方法签名，获取构造器，可返回 private public 等。</li><li><code>getConstructor</code>: 只能返回 public 的构造器</li></ol><h3 id="反射获得-Constractor"><a href="#反射获得-Constractor" class="headerlink" title="反射获得 Constractor"></a>反射获得 Constractor</h3><p>这里是创建一个对象，不包括调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class cls = Class.forName(<span class="string">&quot;com.liukai.Person&quot;</span>);</span><br><span class="line">  <span class="comment">//获取指定的对象（公共的）</span></span><br><span class="line">  Constructor constructor = cls.getConstructor();</span><br><span class="line">  <span class="comment">// 创建一个对象</span></span><br><span class="line">  Object p = constructor.newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再举个例子，通过<code>getDeclaredConstructor</code>获取指定方法签名的构造器。<br>方法：Constructor.getDeclaredConstructor()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  Class cls = Class.forName(<span class="string">&quot;com.liukai.Person&quot;</span>);</span><br><span class="line">  <span class="comment">// Person (String str, int number) 的构造器</span></span><br><span class="line">  Constructor constructor2 = cls.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">  <span class="comment">// 可以转转</span></span><br><span class="line">  Person o = (Person) constructor2.newInstance(<span class="string">&quot;String&quot;</span>, <span class="number">1234</span>);</span><br><span class="line">  System.out.println(o.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有比如可以使用String的Constructor来构建一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.class.getConstructor(String.class).newInstance(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过构造器对象<code>Constructor</code>，可以更加抽象的实例化对象，不需要明确的指定特定类型进行实例化，这样在底层框架层面就可以更加灵活，String实例化对象的操作中就有大量这样的操作。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> reflect </category>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> reflect </tag>
            
            <tag> 反射 </tag>
            
            <tag> 调用栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos yum 使用</title>
      <link href="posts/f5c6baed.html"/>
      <url>posts/f5c6baed.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最早使用linux是在高三时，买了两张盗版的linux安装盘，安装的<code>RedHat</code>什么版本记不清楚了。<br>那时候安装是需要选择<code>精简安装</code>和<code>完整安装</code>，如果选了精简安装，很多应用就没有了。所以那时很苦恼，全装占磁盘，不全安装，要学习某个应用，又得重新拿B盘安装，我对装应用的印相一直停留在那个时候。</p><p>直到大学接触发了<code>yum</code></p><p><code>yum</code>是一个用于管理rpm包的后台程序，用python写成，可以非常方便的解决rpm的依赖关系。在建立好yum服务器后，yum客户端可以通过 http、ftp方式获得软件包，并使用方便的命令直接管理、更新所有的rpm包，甚至包括kernel的更新。它也可以理解为红旗环境下的apt管理工具。</p><h2 id="yum-search-搜索"><a href="#yum-search-搜索" class="headerlink" title="yum search 搜索"></a>yum search 搜索</h2><p>搜索需要的应用包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search httpd</span><br></pre></td></tr></table></figure><p><img src="/posts/f5c6baed/yum-search.jpg" alt="yum-search"></p><h2 id="yum-list-查询资源库中所有的可安装包"><a href="#yum-list-查询资源库中所有的可安装包" class="headerlink" title="yum list 查询资源库中所有的可安装包"></a>yum list 查询资源库中所有的可安装包</h2><p>yum list 这是一个功能很全的查询工具，可以查询各种状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list</span><br></pre></td></tr></table></figure><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum list java*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以使用正则</span></span><br><span class="line">yum list &lt;正则&gt;</span><br></pre></td></tr></table></figure><p><img src="/posts/f5c6baed/yun-list.jpg" alt="yun-list"></p><h2 id="yum-list-updates-查询已安装可更新的包"><a href="#yum-list-updates-查询已安装可更新的包" class="headerlink" title="yum list updates 查询已安装可更新的包"></a>yum list updates 查询已安装可更新的包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有可以更新的rpm包</span></span><br><span class="line">yum list updates               </span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式匹配</span></span><br><span class="line">yum list updates &lt;regex&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查可更新的所有软件包</span></span><br><span class="line">yum check-update</span><br></pre></td></tr></table></figure><h2 id="yum-update-更新指定的包"><a href="#yum-update-更新指定的包" class="headerlink" title="yum update 更新指定的包"></a>yum update 更新指定的包</h2><p>更新指定的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update java</span><br></pre></td></tr></table></figure><p>下载更新系统已安装的所有软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h2 id="yum-list-installed-查看已安装的包"><a href="#yum-list-installed-查看已安装的包" class="headerlink" title="yum list installed 查看已安装的包"></a>yum list installed 查看已安装的包</h2><p>列出资源库中所有已经安装的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed</span><br></pre></td></tr></table></figure><p>都是相关的视图，就不放图了。</p><h3 id="筛选出指定已安装的应用"><a href="#筛选出指定已安装的应用" class="headerlink" title="筛选出指定已安装的应用"></a>筛选出指定已安装的应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grpe java</span><br></pre></td></tr></table></figure><h2 id="yum-remove-卸载指定的包"><a href="#yum-remove-卸载指定的包" class="headerlink" title="yum remove 卸载指定的包"></a>yum remove 卸载指定的包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove</span><br></pre></td></tr></table></figure><h3 id="yum-list-extras"><a href="#yum-list-extras" class="headerlink" title="yum list extras"></a>yum list extras</h3><p>列出已安装的但是不包含在资源库(Yum Repository)中的包</p><p>注:extras是repos.d中定义的资源列表名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list extras</span><br></pre></td></tr></table></figure><h2 id="清空缓存"><a href="#清空缓存" class="headerlink" title="清空缓存"></a>清空缓存</h2><p>清除全部</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean</span><br></pre></td></tr></table></figure><p>清除暂存中rpm包文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean packages</span><br></pre></td></tr></table></figure><p>清除暂存中rpm头文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean headers</span><br></pre></td></tr></table></figure><p>清除暂存中旧的rpm头文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean oldheaders</span><br></pre></td></tr></table></figure><h2 id="yum-info-列出所有已安装的软件包信息"><a href="#yum-info-列出所有已安装的软件包信息" class="headerlink" title="yum info 列出所有已安装的软件包信息"></a>yum info 列出所有已安装的软件包信息</h2><p>有固定格式，看起来比较习惯。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum info installed</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Loaded plugins: fastestmirror, ovl</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.advancedhosters.com</span><br><span class="line"> * extras: mirrors.advancedhosters.com</span><br><span class="line"> * updates: forksystems.mm.fcix.net</span><br><span class="line">===================================================================================================================== N/S matched: httpd ======================================================================================================================</span><br><span class="line">keycloak-httpd-client-install.noarch : Tools to configure Apache HTTPD as Keycloak client</span><br><span class="line">libmicrohttpd-devel.i686 : Development files for libmicrohttpd</span><br><span class="line">libmicrohttpd-devel.x86_64 : Development files for libmicrohttpd</span><br><span class="line">libmicrohttpd-doc.noarch : Documentation for libmicrohttpd</span><br><span class="line">python2-keycloak-httpd-client-install.noarch : Tools to configure Apache HTTPD as Keycloak client</span><br><span class="line">httpd.x86_64 : Apache HTTP Server</span><br><span class="line">httpd-devel.x86_64 : Development interfaces for the Apache HTTP server</span><br><span class="line">httpd-manual.noarch : Documentation for the Apache HTTP server</span><br><span class="line">httpd-tools.x86_64 : Tools for use with the Apache HTTP Server</span><br><span class="line">libmicrohttpd.i686 : Lightweight library for embedding a webserver in applications</span><br><span class="line">libmicrohttpd.x86_64 : Lightweight library for embedding a webserver in applications</span><br><span class="line">mod_auth_mellon.x86_64 : A SAML 2.0 authentication module for the Apache Httpd Server</span><br><span class="line">mod_dav_svn.x86_64 : Apache httpd module for Subversion server</span><br><span class="line"></span><br><span class="line">  Name and summary matches only, use &quot;search all&quot; for everything.</span><br></pre></td></tr></table></figure><h2 id="No-packages-marked-for-update-问题"><a href="#No-packages-marked-for-update-问题" class="headerlink" title="No packages marked for update 问题"></a>No packages marked for update 问题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Loaded plugins: fastestmirror, ovl</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: coresite.mm.fcix.net</span><br><span class="line"> * extras: mirrors.advancedhosters.com</span><br><span class="line"> * updates: forksystems.mm.fcix.net</span><br><span class="line">No packages marked for update</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射04-获取方法调用栈</title>
      <link href="posts/9804.html"/>
      <url>posts/9804.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实际开发中，有多个接个有多个实现类时，搞不清调用栈，可以用这个方法来查看。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现方式，通过拿到当前线程的所有调用栈信息，再遍历输出即可，虽然简单吧，但是实用呀，有时候一个方法报错了，没有异常调用栈，就比较难受了，加上这个方法，自己打调用栈。</p><p>获取方法调用栈方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().getStackTrace();</span><br></pre></td></tr></table></figure><p>代码比较简单，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印所有调用栈</span></span><br><span class="line">    testInvoke();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInvoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    defaultTag();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">defaultTag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();</span><br><span class="line">    <span class="keyword">for</span> (StackTraceElement e : stackTrace) &#123;</span><br><span class="line">      System.out.println(e.getClassName() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">              + e.getMethodName() + <span class="string">&quot;\t行号: &quot;</span> + e.getLineNumber());</span><br><span class="line">    &#125;</span><br><span class="line">    StackTraceElement log = stackTrace[<span class="number">1</span>];</span><br><span class="line">    String tag = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; stackTrace.length; i++) &#123;</span><br><span class="line">      StackTraceElement e = stackTrace[i];</span><br><span class="line">      <span class="keyword">if</span> (!e.getClassName().equals(log.getClassName())) &#123;</span><br><span class="line">        tag = e.getClassName() + <span class="string">&quot;.&quot;</span> + e.getMethodName();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="keyword">null</span>) &#123;</span><br><span class="line">      tag = log.getClassName() + <span class="string">&quot;.&quot;</span> + log.getMethodName();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前方法: &quot;</span> + tag);</span><br><span class="line">    <span class="keyword">return</span> tag;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ThreadgetStackTrace行号: 1559</span><br><span class="line">TestdefaultTag行号: 17</span><br><span class="line">TesttestInvoke行号: 13</span><br><span class="line">Testmain行号: 8</span><br><span class="line">当前方法: Test.defaultTag</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> reflect </category>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> reflect </tag>
            
            <tag> 反射 </tag>
            
            <tag> 调用栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-指针的初始化</title>
      <link href="posts/35753.html"/>
      <url>posts/35753.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>必须初始化才可以使用，未经初始化的指针会产生一个垃圾数据，这个数据是胡乱读取到的。不初始化先危险</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="反例"><a href="#反例" class="headerlink" title="反例"></a>反例</h3><p>使用指针必须初始化，否则报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="comment">//错误，必须先初始化</span></span><br><span class="line">*p = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="NULL-空指针"><a href="#NULL-空指针" class="headerlink" title="NULL 空指针"></a>NULL 空指针</h3><p>在 <code>stdio.h</code> 头文件中 NULL 是常量，表示不指向任何地址。<br>if point == NULL 判断指针有没有被使用过。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示内存为 Ox000000;</span></span><br><span class="line"><span class="keyword">int</span> *p</span><br><span class="line"><span class="comment">//访问冲突，0x000000 是操作系统使用的。= NULL;</span></span><br><span class="line">*p = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>VS 会报错，未经初始化的变量，但是有的IDE是不会报错的。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-指针类型不兼容</title>
      <link href="posts/9777.html"/>
      <url>posts/9777.html</url>
      
        <content type="html"><![CDATA[<h2 id="类型不兼容"><a href="#类型不兼容" class="headerlink" title="类型不兼容"></a>类型不兼容</h2><p>不同类型的指针不可以赋值。否则赋值后，编译可以通过，但是执行后数据会变量错误数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">32138</span>;</span><br><span class="line"><span class="comment">//合法</span></span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"><span class="comment">//合法，但是问题就在这里</span></span><br><span class="line"><span class="keyword">char</span> *p1 = p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *p, *p1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n%d,%d&quot;</span>, <span class="keyword">sizeof</span>(*p), <span class="keyword">sizeof</span>(*p1));</span><br></pre></td></tr></table></figure><p>指针都是4个字节存，这个没问题，问题在取，取的时候根据什么类型，就会读多大的长度，如果是 <code>int *</code><br>则会读4个字节，如果是 char *类型，则只会读一个字节，数据错误。</p><p>在 vs 上重现不出来，vs 直接报 类型不兼容。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-一级指针简单理解</title>
      <link href="posts/12489.html"/>
      <url>posts/12489.html</url>
      
        <content type="html"><![CDATA[<h2 id="两个关键符号"><a href="#两个关键符号" class="headerlink" title="两个关键符号"></a>两个关键符号</h2><p><code>&amp;</code>: 取内存地址符<br><code>*</code>: 取内存值符</p><h3 id="指针的操作规律"><a href="#指针的操作规律" class="headerlink" title="指针的操作规律"></a>指针的操作规律</h3><blockquote><p>1.声明的时候是往里放地址 int *p = &amp;num，<br>2.直接拿的时候就是直接操作地址内的值 *p = 10;</p></blockquote><p>在 C 中操作地址就可以操作值，就跟 java 中两个引用类型拿到引用可以操作内一个对象一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名    内存地址   值</span><br><span class="line">a        [0x23fa32]100</span><br><span class="line">*p       [0x24aa34][0x23fa32]</span><br></pre></td></tr></table></figure><p>指针存放的是 a 的内存地址，&amp;p则是自己的内存地址 [0x24aa34]</p><h3 id="创建一个针指并使用"><a href="#创建一个针指并使用" class="headerlink" title="创建一个针指并使用"></a>创建一个针指并使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">  <span class="comment">//将内存地址给 *p</span></span><br><span class="line">  <span class="keyword">int</span> *p = &amp;num;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%x, %x&quot;</span>,&amp;num, &amp;p);</span><br><span class="line">  *p = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num); <span class="comment">//10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析过程：<br>根据拿到的直址 分别查看 &amp;num，和 &amp;p。&amp;num 的地址以 带符号 4字节查看是100。<br>查看&amp;p 的地址，以十六进制查看，因为存的是 &amp;num 的地址。并不是实际的值。这就证明了指针变量存的是地址。<br>当程序再往下走 *p = 10 时，再回头看 &amp;num 的值，已经变红，修改成了10。</p><h3 id="传递指针"><a href="#传递指针" class="headerlink" title="传递指针"></a>传递指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">  <span class="comment">//形参是指针类型，就可以将地址传递过去。</span></span><br><span class="line">  change(&amp;num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个指针用来接收地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> *p)</span> </span>&#123;</span><br><span class="line">  *p = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是C当中的方法形参使用的是变量副本机制，也就是说，方法形参也是有个自己的内存地址。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
          <category> pointer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>竟态条件 racing condition</title>
      <link href="posts/36140.html"/>
      <url>posts/36140.html</url>
      
        <content type="html"><![CDATA[<h2 id="竟态条件-racing-condition"><a href="#竟态条件-racing-condition" class="headerlink" title="竟态条件 racing condition"></a>竟态条件 racing condition</h2><p>多个线程读时，线程是安全的。<br>当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。<br>我的理解，竞态条件就是一种情况。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>假设有 A、B 两个线程，调用 add 方法分别传入 1 和 2，理想条件下结果应该是 3。<br>现在出现了不安全的情况，有可能结果不对。<br>add 方法就是<code>临界区</code>，<code>count</code> 就是同一资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> count = <span class="number">0</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.count = <span class="keyword">this</span>.count + value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>其实这样一看，说白了，就是要严格控制线程的执行顺序，假设是按A、B的顺序执行来讲，B依赖于A先执行完成，B再执行结果才是正确的，中间不能出现问题，否则如果，中间交叉执行，就有可能发生了竞态条件。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>checkout 检出和切换</title>
      <link href="posts/25206.html"/>
      <url>posts/25206.html</url>
      
        <content type="html"><![CDATA[<p>这个命令是个多功能的命令用法很灵活。<br>切换分支、撤消修改<br>下面文中是 <code>--</code> 两个杠框是连在一起，中间没有空格，因为字体太小，所说中间给个空格看着明显一些。</p><h3 id="1-切换分支"><a href="#1-切换分支" class="headerlink" title="1.切换分支"></a>1.切换分支</h3><blockquote><p>git checkout <code>&lt;name&gt;</code></p></blockquote><h3 id="2-创建并切换分支"><a href="#2-创建并切换分支" class="headerlink" title="2.创建并切换分支"></a>2.创建并切换分支</h3><blockquote><p>git checkout -b <code>&lt;name&gt;</code><br>这其实可以拆解成两步操作 -b 应该就是branch</p></blockquote><h3 id="3-撤销工作区修改"><a href="#3-撤销工作区修改" class="headerlink" title="3.撤销工作区修改"></a>3.撤销工作区修改</h3><p>实际就是“以旧换新”的操作<br>有两种情况：<br>1.如果未添加到暂存区，则把版本库中的最新版本覆盖<br>2.如果已添加到暂存区，则把暂存区中的修改拿出覆盖</p><p>撤销工作区修改:</p><blockquote><p>git checkout <code>-- &lt;file&gt;</code></p></blockquote><blockquote><p><code>git checkout -- .</code></p></blockquote><h3 id="4-连招"><a href="#4-连招" class="headerlink" title="4.连招"></a>4.连招</h3><p>假如有一个文件，做了修改，但是不确定后面的修改是不是想要的。先添加到暂存区中，过了一会这个修改是不想要的，想要把工作区的文件从暂存区撤回覆盖。</p><blockquote><p>git add                   //放一份当前写到一半觉得没问题的放到暂存区中</p></blockquote><blockquote><p>git checkout - - file     //将 版本库 中的修改替换到 工作区中<br>没有 add 的情况下，直接拿版本来覆盖本地，这样搞的话，之前工作区的文件的修改就没了。用这招就看之前修改要不要了。</p></blockquote><blockquote><p>git checkout - - file</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> checkout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 注解简述</title>
      <link href="posts/59248.html"/>
      <url>posts/59248.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>注解(annotation)相当于一个运行于内存当中的自定义类型的数据存储区域，理解以后才发现它的好用，就是数据存储区，相当于一个运行在内存当中的XML，所有的注解数据在JDK加载完类以后，就可以被使用。</p><h2 id="JDK内置注解"><a href="#JDK内置注解" class="headerlink" title="JDK内置注解"></a>JDK内置注解</h2><p>三个基本内置注解：<br>1.@override<br>2.@Deprecated       //加在类或方法上，标注为过时<br>3.@SuppressWarnings //制编译器</p><h2 id="元注解-MetaData"><a href="#元注解-MetaData" class="headerlink" title="元注解 MetaData"></a>元注解 MetaData</h2><p>元注解使用和创建注解的方式，让自己可以创建自己的注解。<br>元数据/元注解<br>作用：就是负责注解其他注解。<br>Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation 类型作说明。</p><p>Java5.0定义的元注解：<br><code>@Documented</code> 标记生成javadoc<br><code>@Inherited</code> 标记继承关系<br><code>@Retention</code> 注解的生存期<br><code>@Target</code> 标注的目标</p><h3 id="Target-注解"><a href="#Target-注解" class="headerlink" title="@Target 注解"></a>@Target 注解</h3><p>说明了Annotation所修饰的对象范围：</p><ol><li>Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）</li><li>类型成员（方法、构造方法、成员变量、枚举值）</li><li>方法参数和本地变量（如循环变量、catch参数）</li></ol><p>在Annotation类型的声明中使用了target可更加明晰其修饰的目标。<br>取值(ElementType)有：</p><p>1.CONSTRUCTOR:用于描述构造器<br>2.FIELD:用于描述域<br>3.LOCAL_VARIABLE:用于描述局部变量<br>4.METHOD:用于描述方法<br>5.PACKAGE:用于描述包<br>6.PARAMETER:用于描述参数<br>7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 数据表名称注解，默认值为类名称</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">tableName</span><span class="params">()</span> <span class="keyword">default</span> &quot;className&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；<br>而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。<br>使用这个meta-Annotation可以对 Annotation的&quot;生命周期&quot;限制。</p><p>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</p><p>取值（RetentionPoicy）有：<br>1.SOURCE:在源文件中有效（即源文件保留）<br>2.CLASS:在class文件中有效（即class保留）<br>3.RUNTIME:在运行时有效（即运行时保留）</p><p>Retention meta-annotation类型有唯一的value作为成员，它的取值来自<code>java.lang.annotation.RetentionPolicy</code>的枚举类型值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试时不能自动引入，所以放在这里</span></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;fieldName&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">setFuncName</span><span class="params">()</span> <span class="keyword">default</span> &quot;setField&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFuncName</span><span class="params">()</span> <span class="keyword">default</span> &quot;getField&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">defaultDBValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里RetentionPolicy的属性值是RUTIME，这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理。</p><p>注意，不可以省略不写 Retention，否则会出现拿不到注解的情况，测试中，忘了写 RUNTIME 结果怎么都是 null。所以如果默认不写应该不是 RUNTIME 的。下次再写时可以测试一下不写的情况。</p><p>测试代码</p><p>测试只测试了 成员变量 的测解，还城需要对参数，方法进行测试。</p><p>添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liukai on 2016/7/12.</span></span><br><span class="line"><span class="comment"> * 用于 成员属性中的注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//测试中忘了添加这 RUNTIME，默认是public</span></span><br><span class="line"><span class="meta">@interface</span> FieldAnnotion &#123;</span><br><span class="line">  <span class="function">String <span class="title">fileName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class&lt;User&gt; userClass = User.class;</span><br><span class="line">  Field[] fields = userClass.getDeclaredFields();</span><br><span class="line">  System.out.println(fields.length);</span><br><span class="line">  <span class="keyword">if</span> (fields != <span class="keyword">null</span> &amp;&amp; fields.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">      FieldAnnotion annotation = field.getAnnotation(FieldAnnotion.class);</span><br><span class="line">      System.out.println(annotation.fileName());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@FieldAnnotion(fileName = &quot;user_name&quot;)</span>      <span class="comment">//通过注解设置</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@FieldAnnotion(fileName = &quot;age&quot;)</span>      <span class="comment">//通过注解设置</span></span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@FieldAnnotion(fileName = &quot;address&quot;)</span>      <span class="comment">//通过注解设置</span></span><br><span class="line">  <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">  setter/getter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p>添加这个注解后，用到这个注解的程序可以被添加到javadoc中成为公共API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p>是一种标记注解。阐述了某个被注解的类型是被继承的。<br>如果使用了@Inherited的注解类型被用于一个类，则这个注解将被用于该类的子类。<br>条件：<br>1.注解于接口中，无效。<br>2.只能放在父类的类头中，放在父类的方法中无效，子类无法继承。</p><h2 id="自定义注解-interface"><a href="#自定义注解-interface" class="headerlink" title="自定义注解 @interface"></a>自定义注解 @interface</h2><p>注解的作用是可以利用反射来获取数据</p><p>使用<code>@interface</code>自定义注解时，自动继承了<code>java.lang.annotation.Annotation接口</code>，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p><p>定义注解格式：<br>public @interface 注解名 {定义体}</p><p>注解参数的可支持数据类型：</p><p>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)<br>2.String类型<br>3.Class类型<br>4.enum类型<br>5.Annotation类型<br>6.以上所有类型的数组</p><p>Annotation类型里面的参数该怎么设定:<br>第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　<br>第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　<br>第三,如果只有一个参数成员,最好把参数名称设为&quot;value&quot;,后加小括号.例:下面的例子FruitName注解就只有一个参数成员。</p><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>通过反射获取注解中的值<br>特别注意：每个注解，可以设置给不给默认值，如果注解中有 <code>default</code> 值的话，则在使用时可以不需要给注解赋;如果没有设置默认值，则一定要在对象是设置注解的值，否则一运行就报错。</p><h4 id="1-定义一个自定义注解"><a href="#1-定义一个自定义注解" class="headerlink" title="1.定义一个自定义注解"></a>1.定义一个自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;testing...&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;                <span class="comment">//default 可以不写修饰符</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>解释：<br>ElemengType.TYPE  元素类型，其实就是成员变量，JDK 的API中也称做元素注意。<br>特别注意 id 这个注解在对象的成员变量上使用的时候，一定要设置值，因为，上面代码中没有设置默认值，运行会报错。<br>可以通过设置默认值来避免。</p><p>2.反射来获取注解的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(id = 22)</span></span><br><span class="line"><span class="comment">//name有默认值，可写可不写，id没有默认值，一定要赋值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;TestMain&gt; clazz = TestMain.class;</span><br><span class="line">    MyAnnotation ma = clazz.getAnnotation(MyAnnotation.class);</span><br><span class="line">    System.out.println(ma.name());</span><br><span class="line">    System.out.println(ma.id());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>testing...<br>22</p><p>注意，如果不在TestMain中设值id=22 直接在注解接口中给id一个默认也是一样可以的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>注解一般使用在，不需要修改原代码的基本上，添加一些切面的功能，如，为方法添加切面日志、频次拦截等。可以不需要修改代码通过添加注解即可实现，从扩展的角度去解决代码的问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> annotation </category>
          
          <category> 注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 注解 </tag>
            
            <tag> 元注解 </tag>
            
            <tag> 内置注解 </tag>
            
            <tag> annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单说明 lock 锁和 Condition 的操作</title>
      <link href="posts/26489.html"/>
      <url>posts/26489.html</url>
      
        <content type="html"><![CDATA[<p>作用：使当前线程进入等待状，并交换执行执，等待被交换的当前执行线程唤醒，才可以继续执行，如果不被唤醒？<br>场景：多个线程操作同一个共享资源时使用。</p><p>Condition 是执行条件。类似传统技术中的 wait 的 notify 功能。<br>Condition 是基于一个 lock 而存在。<br>注意的是，Condition 的创建来自同一个 lock 对象，</p><p>Condition 也行 wait 也好，套路就是使用三个工具来完成三步套路。即，用两个线程，同时跑两个代码，并且用 while 不段的去读取一个条件，来判断自己是否应该唤醒对方。</p><p>步骤：</p><ol><li>先lock住</li><li>通过 lock 拿到 condition。再进行操作如 await</li><li>然后多个线程开始 await、single<br>注意 await 会释放锁。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await()的作用是能够让其他线程访问竞争资源，所以挂起状态就是要释放竞争资源的锁。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.thread.lock.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liukai on 2016/2/25.</span></span><br><span class="line"><span class="comment"> * 测试 Lock、Condition 代替 synchronized、wait</span></span><br><span class="line"><span class="comment"> * 例子来自 JDK Condition API 中的示例代码，阻塞队列的原理。</span></span><br><span class="line"><span class="comment"> * 注间的是，两个不同的方法里面的 等待 和 唤醒 是不同的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition full = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> takeptr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> putptr = <span class="number">0</span>;</span><br><span class="line">    Object [] blockArray = <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> TestCondition condition = <span class="keyword">new</span> TestCondition();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.put(<span class="keyword">new</span> Object());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.take();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span> <span class="params">(Object element)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (count == blockArray.length) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;put: putptr = &quot;</span> + putptr + <span class="string">&quot;, await&quot;</span>);</span><br><span class="line">                full.await();       <span class="comment">//等待和唤醒用的不是同一个对象</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;put: putptr = &quot;</span> + putptr + <span class="string">&quot;, 执行 put&quot;</span>);</span><br><span class="line">            blockArray[putptr] = element;</span><br><span class="line">            <span class="keyword">if</span> (++putptr == blockArray.length) &#123;</span><br><span class="line">                putptr = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">            notFull.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        Object data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">0</span> == count) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;take: takeptr == &quot;</span> + takeptr + <span class="string">&quot;，await&quot;</span>);</span><br><span class="line">                notFull.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;take: takeptr = &quot;</span> + takeptr + <span class="string">&quot;, 执行 take&quot;</span>);</span><br><span class="line">            data = blockArray[takeptr];</span><br><span class="line">            <span class="keyword">if</span> (++takeptr == blockArray.length) &#123;</span><br><span class="line">                takeptr = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            --count;</span><br><span class="line">            full.signal();</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 进程 </tag>
            
            <tag> lock锁 </tag>
            
            <tag> Condition 操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git push的一些总结</title>
      <link href="posts/2763.html"/>
      <url>posts/2763.html</url>
      
        <content type="html"><![CDATA[<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>拉取并合并远程代码</p><blockquote><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p></blockquote><h3 id="1-拉取"><a href="#1-拉取" class="headerlink" title="1.拉取"></a>1.拉取</h3><p>next 分支 拉到 本 master。</p><blockquote><p>git pull origin fast:master把远程的  </p></blockquote><h3 id="2-拉取到当前分支"><a href="#2-拉取到当前分支" class="headerlink" title="2.拉取到当前分支"></a>2.拉取到当前分支</h3><p>省略定法，表示拉取并合并自当前分支</p><blockquote><p>git pull origin fast  </p></blockquote><h3 id="3-等价上面的操作"><a href="#3-等价上面的操作" class="headerlink" title="3.等价上面的操作"></a>3.等价上面的操作</h3><blockquote><p>git fetch origin<br>git merge origin/fast</p></blockquote><h3 id="4-手动建立跟踪"><a href="#4-手动建立跟踪" class="headerlink" title="4.手动建立跟踪"></a>4.手动建立跟踪</h3><p>跟踪不是只能跟踪 master，可以指定本地和远程不同的分支。<br>意义在于可以使用简化命令 git push/pull，而不需要显示指定的版本库。  </p><blockquote><p>git branch --set-upstream master origin/fast<br>git branch --set-upstream develop origin/develop</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git pull </tag>
            
            <tag> 用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List 中的相同数据进行分组</title>
      <link href="posts/18028.html"/>
      <url>posts/18028.html</url>
      
        <content type="html"><![CDATA[<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>同一组数据分组<br>需求：一个 list 里可能会有出现一个用户多条数据的情况。要把多条用户数据合并成一条。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>思路：将相同的数据中可以进行确认是相同的数据，拿来做分组的 key，这样保证不会重。<br>实际中使用，以用户数据为例，可能用户名和身份证号是不会变的，用这两个条件拼接起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;liu big big&quot;</span>, <span class="string">&quot;123456789&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;liu big big&quot;</span>, <span class="string">&quot;987654321&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;su xiao xiao&quot;</span>, <span class="string">&quot;55555555&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        Map&lt;String, Set&lt;User&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            Set&lt;User&gt; userSet = map.get(user.getName());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == userSet) &#123;</span><br><span class="line">                userSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                userSet.add(user);</span><br><span class="line">                map.put(user.getName(), userSet);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                userSet.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keySet= map.keySet();</span><br><span class="line">        Iterator&lt;String&gt; it = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String key = it.next();</span><br><span class="line">            Set&lt;User&gt; user = map.get(key);</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[com.liukai.User@2dda6444]</span><br><span class="line">[com.liukai.User@79fc0f2f, com.liukai.User@50040f0c]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 程序驻留不退出保持运行</title>
      <link href="posts/2e1c54f4.html"/>
      <url>posts/2e1c54f4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不管是C、java、go 程序，要让程序一直不间断动行，就肯定需要保持线程不退出，才能可能持续运行。</p><p>今天说的是java，一般来说从main方法开始运行结束之后，线程也就退出，如何保证线程不退出？<br>实际上只要证保有一个线程在持续运行，程序就不算退出。<br>一般来说只需要保持main线程不退出，然后其他线程不间断的工作就OK。<br>实际上在如果开启多个线程，就算主线程执行结束了，子线程没有结整，JVM一样不会退出。</p><h2 id="保持运行"><a href="#保持运行" class="headerlink" title="保持运行"></a>保持运行</h2><p>上面说了，思路都量样的，就是阻塞一条线程，让JVM不要退出，一般是阻塞<code>主线程main</code>，让他阻塞不退出，直到需要退出的时候再限出。<br>演示几种不退出的方式:</p><ol><li>读取流: <code>System.in.read();</code></li><li>等待锁:<ul><li><code>wait()</code></li><li><code>CountDownLatch(1).await();</code></li></ul></li><li>死循环: <code>while(true)</code></li><li>睡眠: <code>sleep()</code></li></ol><p>这几种方式，不是阻塞，就是睡眠，大概思路都差不多，就是</p><h3 id="读取流"><a href="#读取流" class="headerlink" title="读取流"></a>读取流</h3><p>通过阻塞主线程，来验证一下，运行后就可以看到<code>service</code>的run方法执行完后，程序也不会退的。<br>代码可以自行复制验证。<br>这种方式可以用，一般线上服务都是通过<code>kill -15</code>来退出应用，即便是有流在等待读取，<code>kill -15</code>一样也会把服务kill掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2015/6/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Service()).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.in.read();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service: &quot;</span> + i);</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h2><p>这个也好理解，就是让主线程<code>wait</code>，子线程工作。<br>上面的阻塞也是一样的原理。只要有一条线程没退出，jvm就还会继续工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始等待&quot;</span>);</span><br><span class="line">        object.wait();</span><br><span class="line">        <span class="comment">// 不会打印退出，可以在上面 wait 开一个子线程跑任务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h2><p>这种也非常简单，但是问题是有一条线程不停的自旋，这个效率肯定不如<code>wait</code>来的节约性能。当然电费不是自己交随意。<br><code>wait</code>的原理是依赖于操作系统的阻塞队列，系统会检查线程状态，决定是否工作，这个后面可以专门说一下<code>wait</code>的r操作系统级别工作原理。<br>这种方式是相当的不推荐，那有没有办法，让程序可以在该阻塞的时候阻塞，该退出的时候退出，其实只能说方法还是有很多。再举个例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2016/6/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    <span class="comment">// 开一个子线程跑任务</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Service()).start(); </span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可控制的退阻塞"><a href="#可控制的退阻塞" class="headerlink" title="可控制的退阻塞"></a>可控制的退阻塞</h2><p>这个名字我自己起的，因为确实是可控。JDK内置了很多工具，当然都以好好利用一下。<br>还是一样阻塞，再唤醒。使用<code>JUC</code>工具<code>CountDownLatch</code>加一个标识来控制，使用<code>await</code>使程阻塞，再需要的时候唤醒。<br>这种方式比较有效的控制线程的阻塞、运行状态给程序一个除了kill线程之外的另一个选择。我个从比较喜欢这种方式，虽然最后大部分时候退出程序都是使用的<code>kill -15</code>，但是写程序就是要预留出扩展性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2016/6/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(<span class="keyword">new</span> Service(countDownLatch)).start();</span><br><span class="line">      countDownLatch.await();</span><br><span class="line">      System.out.println(<span class="string">&quot;程序退出&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Service</span><span class="params">(CountDownLatch countDownLatch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service: &quot;</span> + i);</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">50</span>) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;子线程调用 countDown&quot;</span>);</span><br><span class="line">          <span class="keyword">this</span>.countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是几种保持程序不退出的方式，当然还有别的方法，上面几种方式，很多框架也使用，总的来说多了解一种多一个选择。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 程序 </tag>
            
            <tag> 线程 </tag>
            
            <tag> countDownLatch </tag>
            
            <tag> 阻塞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 分代的概念</title>
      <link href="posts/30555.html"/>
      <url>posts/30555.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>堆，才有分代的概念。<br>堆，才有分代的概念。<br>堆，才有分代的概念。</p></blockquote><h2 id="分代"><a href="#分代" class="headerlink" title="分代"></a>分代</h2><p>JVM 将内存分为大致分为三个区域，1.8 前后有区别</p><p><img src="/posts/30555/1.jpeg" alt="jvm"></p><h3 id="为什么要分代"><a href="#为什么要分代" class="headerlink" title="为什么要分代"></a>为什么要分代</h3><blockquote><p>不分代行不行</p></blockquote><p>不分代完全可以，但是分代的唯一理由是为了优化GC性能。<br>怎么优化？<br>如果不进行分代，每次GC都要把整片堆扫一遍来寻找垃圾对象，太慢。分代直接把对象创建到某一个分代区，这样GC就可以针对这一分代区域就行优化，就不费劲了。</p><h3 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代"></a>年轻代</h3><blockquote><p>eden、survivor、from、to</p></blockquote><p>年轻代分三个部分：</p><ol><li>Eden 区，即新生对象区，除大对象以外，新生对象都创建在这里。</li><li>Survivor 区，即幸存区，该区域又分两个空间<br>s0 和 s1 分别也叫 from 和 to，默认比例8:1。</li></ol><p><img src="/posts/30555/2.png" alt="young"></p><h4 id="对象经历的过程"><a href="#对象经历的过程" class="headerlink" title="对象经历的过程"></a>对象经历的过程</h4><ol><li>新创建对象，分配到Eden区，除大对象特殊处理。</li><li>在 Eden 区经过一次GC后，如果仍存活，移到 Survivor。</li><li>在 Survivor 中又经历一次 GC，年龄会增加一岁。</li><li>年龄到一定程度，移到老年代。</li></ol><span id="more"></span><h4 id="年轻代使用什么GC算法"><a href="#年轻代使用什么GC算法" class="headerlink" title="年轻代使用什么GC算法"></a>年轻代使用什么GC算法</h4><blockquote><p>是复制算法。</p></blockquote><p>为什么选复制算法？<br>因为：年轻代中的80%以上的对象很快就死亡。<br>所以，在年轻代的垃圾回收算法使用的是复制算法。即，将内存分为两块，每次中使用其中一块（Eden 和 From），当一块使用完，则将还存活的对象复制到别一块上。复制算法不会产生碎片。</p><p><img src="/posts/30555/3.jpeg" alt="复制算法"></p><h4 id="From-和-to-区的复制过程"><a href="#From-和-to-区的复制过程" class="headerlink" title="From 和 to 区的复制过程"></a>From 和 to 区的复制过程</h4><p>对上一节的说明，演示复制的过程：</p><ol><li>在 GC 开始的前，对象只会存在于 Eden区 和 From 区。为什么 From 区会有对象？</li><li>From区有对象很容易理解，开始发生 GC ,Eden 中的对象被复制到了 To 区中。</li></ol><p>而 From 中的对象只有两个结果：</p><ol><li>年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中。</li><li>没有到达的复制到 To 区中</li><li>这次 GC 后，Eden 和 From 被清空。此时，To 和 From 互相交换换角色，也就是说 To 变成 GC 前的 From，类推。</li></ol><p>到现在清楚了，为什么 From 中也会有对象，因为第一次发生GC时复制过到 To 区后，交换角色而来的。</p><h3 id="年轻代相关的JVM参数"><a href="#年轻代相关的JVM参数" class="headerlink" title="年轻代相关的JVM参数"></a>年轻代相关的JVM参数</h3><ol><li><code>-XX:NewSize和-XX:MaxNewSize</code>: 用于设置年轻代的大小，建议设为整个堆大小的1/3或者1/4,两个值设为一样大。</li><li><code>-XX:SurvivorRatio</code><br>用于设置Eden和其中一个Survivor的比值，这个值也比较重要。</li><li><code>-XX:+PrintTenuringDistribution</code><br>这个参数用于显示每次Minor GC时Survivor区中各个年龄段的对象的大小。</li><li><code>-XX:InitialTenuringThreshol</code>和<code>-XX:MaxTenuringThreshold</code><br>用于设置晋升到老年代的对象年龄的最小值和最大值，每个对象在坚持过一次Minor GC之后，年龄就加1。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> 分代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wait-notify 实现生产者消费者模式</title>
      <link href="posts/19280.html"/>
      <url>posts/19280.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>wait 和 nofity 在线程中的搭配使用，其实就是生产者消费者的一种应用。</p></blockquote><h2 id="一、为什么要有生产者消费者模式"><a href="#一、为什么要有生产者消费者模式" class="headerlink" title="一、为什么要有生产者消费者模式"></a>一、为什么要有生产者消费者模式</h2><p>在实际应使用多线程时，线程间的角色并不一完全一样的，有的线程负责生产数据，有的线程负责消费数据。所在就会有一种情况，就是： 生产者生产数据太快，消费者消费能力跟不上。</p><p>比较线程A 不断的new 对象，并将对象放到一个队列里，而线程B，不断的从队列里拿出数据进行逻辑操作。显然线程A new 对象这一操作会更快，如果一直持续下去内存有可能会被撑暴。</p><p>解决这个问题的思路之一就是：生产者-消费者模式</p><span id="more"></span><h2 id="二、wait、notify-简单应用示例"><a href="#二、wait、notify-简单应用示例" class="headerlink" title="二、wait、notify 简单应用示例"></a>二、wait、notify 简单应用示例</h2><h3 id="Wait-类"><a href="#Wait-类" class="headerlink" title="Wait 类"></a>Wait 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWaitTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleWaitTest</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        testMethod(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;testMethod begin &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">//1. 锁住自己</span></span><br><span class="line">                lock.wait();</span><br><span class="line">                System.out.println(<span class="string">&quot;testMethod be notify &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">//4.唤醒 wait 线程</span></span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="notify-类"><a href="#notify-类" class="headerlink" title="notify 类"></a>notify 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleNotifyTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleNotifyTest</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        syncMethod(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncMethod</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;syncMethod begin &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">//2.唤醒 wait 线程后 wait</span></span><br><span class="line">                lock.notify();</span><br><span class="line">                <span class="comment">//3.wait 住，等待唤醒</span></span><br><span class="line">                lock.wait();</span><br><span class="line">                System.out.println(<span class="string">&quot;syncMethod be notify &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-wait、notify"><a href="#测试-wait、notify" class="headerlink" title="测试 wait、notify"></a>测试 wait、notify</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by kayle on 2016/12/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SimpleWaitTest simpleWaitTest = <span class="keyword">new</span> SimpleWaitTest(object);</span><br><span class="line">        SimpleNotifyTest simpleNotifyTest = <span class="keyword">new</span> SimpleNotifyTest(object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(simpleWaitTest).start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(simpleNotifyTest).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、生产者消费者模式"><a href="#三、生产者消费者模式" class="headerlink" title="三、生产者消费者模式"></a>三、生产者消费者模式</h2><p>做用在于生产者执行完生产任务后，阻塞自己再唤醒消费者进行消费。是一种线程间的协作。<br>下面通过一个例子，打印奇偶数来看这一过程。</p><p>效果：交替打印奇数 和 偶数</p><p>1.设计</p><ol><li>生产类</li><li>消费类</li><li>公共标识符，独立于生产为 和 消费类</li></ol><p>为什么要分开生产类 和 消费类，因为如果业务相同的线程，使用线程池就可以完成，不需要这么麻烦，控制两个线程的频率。<br>两边代码几乎相同，不同的就是 flag 的初始值不相同，为了在程序启动时，一个线程先执行，别一个线程直接进行 wait 状态，等待唤醒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoThreadWaitNotify</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TwoThreadWaitNotify twoThread = <span class="keyword">new</span> TwoThreadWaitNotify();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> OuNum(twoThread));</span><br><span class="line">        t1.setName(<span class="string">&quot;线程-A&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> JiNum(twoThread));</span><br><span class="line">        t2.setName(<span class="string">&quot;线程-B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 偶数线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OuNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TwoThreadWaitNotify number;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OuNum</span><span class="params">(TwoThreadWaitNotify number)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (number.start &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TwoThreadWaitNotify.class) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;偶数线程抢到锁了&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (number.flag) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;偶数&quot;</span> + number.start);</span><br><span class="line">                        number.start++;</span><br><span class="line">                        number.flag = <span class="keyword">false</span>;</span><br><span class="line">                        TwoThreadWaitNotify.class.notify();</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            TwoThreadWaitNotify.class.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 奇数线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JiNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TwoThreadWaitNotify number;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JiNum</span><span class="params">(TwoThreadWaitNotify number)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (number.start &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TwoThreadWaitNotify.class) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;奇数线程抢到锁了&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!number.flag) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;奇数&quot;</span> + number.start);</span><br><span class="line">                        number.start++;</span><br><span class="line">                        number.flag = <span class="keyword">true</span>;</span><br><span class="line">                        TwoThreadWaitNotify.class.notify();</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            TwoThreadWaitNotify.class.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final 的一些总结</title>
      <link href="posts/34874.html"/>
      <url>posts/34874.html</url>
      
        <content type="html"><![CDATA[<p>final 的含义是最终的、不可改变的。总结了一下 final 的一些规则。</p><ol><li>修饰&quot;类&quot;则类不能被继承，所以没有子类，final类中的方法默认是final的。可以提高效率。JDK中很多加final是这个原因的。编译期确认调哪个方法，所以更快。1.5以后这样做没有效果。</li><li>修饰&quot;方法&quot;则方法不能被重写,</li><li>修饰&quot;成员变量&quot;则变量不以被改变，即被修饰成了常量。只能被赋值一次。</li><li>不能修饰构造方法</li><li>父类中的private成员方法是不能被子类覆盖的，因为private类型的方法默认是隐式final类型的</li><li>final 的引用不能指向新的对象。</li><li>形参声明为 final，则方法内不能再改变其：</li><li>基础数据类型值不可被修改</li><li>传入对象不能再被 new</li><li>继承关系时，final 的方法将不会被子类重写。所以父类使用的仍是本类自己的方法。</li><li>final 类不可被继承。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> java </tag>
            
            <tag> final </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 序列化使用</title>
      <link href="posts/b560bc41.html"/>
      <url>posts/b560bc41.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>开始前先搞清楚一个问题什么是序列化?<br>就是一个目的：将 JAVA 对象转换成<code>二进制</code>的数据进行各种操作，如传输、保存、增删等。<br>是的，你没看错，就是要转成<code>二进制</code>的数据。</p><p>主要聊三个问题：<br>Java序列化与反序列化是什么？<br>为什么需要序列化与反序列化？<br>如何实现Java序列化与反序列化？</p><p>还是一样，先说怎么用，再说为什么。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这次的示例是准备了几种场景：</p><ol><li>序列化后文件存储</li><li>序列化后内存中使用</li></ol><p>java当中提供了原生序列化方式，也就是把内存中的数据，转换成二进制，或者把二进制数据，转换成内存数据的API。<br>在java的世界中，二进制数据称为流，通过流，也就是抽象成一个个流对象进行处理。</p><h3 id="序列化并持久化"><a href="#序列化并持久化" class="headerlink" title="序列化并持久化"></a>序列化并持久化</h3><p>首先第一步，需要实现序列化接口，才能被序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObj2</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再去操作这个初序列化的对象。<br>这里要做一个示例，就是序列化之后，把这个对象存储起来。<br><strong>对象还能存储到磁盘当中？</strong><br>那是必然的，对象也是创建出来的数据，数据能放到内存当中，当然也可以放到磁盘当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSerializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 创建一个测试对象</span></span><br><span class="line">      TestObj obj = <span class="keyword">new</span> TestObj();</span><br><span class="line">      <span class="comment">// 输出流，持久化对象</span></span><br><span class="line">      ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;/tmp/testObject.obj&quot;</span>));</span><br><span class="line">      out.writeObject(obj);</span><br><span class="line">      <span class="comment">// 输入流，反序列化对象</span></span><br><span class="line">      ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;/tmp/testObject.obj&quot;</span>));</span><br><span class="line">      TestObj2 newObj = (TestObj2) in.readObject();</span><br><span class="line">      System.out.println(newObj.getName());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了一次序列化操作，可以看看存储位置的磁盘保存形式。<br>以上就是java提供的序列化操作，通过两个<code>Stream</code>实现，分别是：</p><ol><li><code>ObjectOutputStream</code></li><li><code>ObjectInputStream</code></li></ol><h3 id="实现序列化过程"><a href="#实现序列化过程" class="headerlink" title="实现序列化过程"></a>实现序列化过程</h3><p>实现接口，IDE 会自动给一个 serializableId，没有也得自己给加上去，不加项目中出现过问题，踩坑。<br>如果变量声明为 <code>transient</code>，则不会被序列化。<br>JDK java.io 提供 API 操作：</p><ol><li>ObjectOutputStream.writeObject 对象输入流</li><li>ObjectInputStream.readObject 对象输入流</li></ol><p>实现步骤</p><ol><li>ObjectOutputStream.writeObject 将对象进行序列化，把得到的字节序列写到一个目标的输出流中。</li><li>ObjectInputStream.readObject 从源输入流中读取字节序列，再把它们反序列化成一个对象，并将其返回。</li></ol><p>两个接口的不同序列方式<br>大部分情况下只要实现 Serializable 接口就够用了，具体的还有几种情况，需要注意。<br>ObjectOutputStream/ObjectInputStream 下面简称 流处理类。</p><ol><li>直接实现 Serializable 接口，流处理类调用默认方法;</li><li>实现 Serializable 接口，并实现接口方法 writeObject/readObject，流处理类调用实现类方法;</li><li>实现 Externalizable 接口，必须实现接口方法 readExternal/writeExternal，流处理类调用实现类方法。</li></ol><p>这两个API相对简单，就不赘述了。</p><h2 id="序列化后内存"><a href="#序列化后内存" class="headerlink" title="序列化后内存"></a>序列化后内存</h2><p>实际上就是序列化成二进制数据，然后操作这个数据。<br>直接给测试类，感兴趣的同学可以自己复制代码验证一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 序列化</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object object) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">null</span>;</span><br><span class="line">    ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 序列化</span></span><br><span class="line">      baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">      oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">      oos.writeObject(object);</span><br><span class="line">      bytes = baos.toByteArray();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 反序列化</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    Object value = <span class="keyword">null</span>;</span><br><span class="line">    ByteArrayInputStream bais = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 反序列化</span></span><br><span class="line">      bais = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">      ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">      value = ois.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TestObj2 testObj2 = <span class="keyword">new</span> TestObj2();</span><br><span class="line">    testObj2.setName(<span class="string">&quot;test123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] serialize = serialize(testObj2);</span><br><span class="line">    TestObj2 unserialize = (TestObj2) unserialize(serialize);</span><br><span class="line">    System.out.println(unserialize.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObj2</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>test123</p></blockquote><h2 id="解惑"><a href="#解惑" class="headerlink" title="解惑"></a>解惑</h2><p>对开头说的几个问题一一说明</p><h3 id="为什么需要序列化与反序列化"><a href="#为什么需要序列化与反序列化" class="headerlink" title="为什么需要序列化与反序列化"></a>为什么需要序列化与反序列化</h3><p>上面说了，序列化可以把对象转成二进制数据，其本质就是二进制数据可以进行各项操作，如保存、传输、复制。<br>举个例子：<br>Http调用的对象为什么要序列化？因为转成二进制数据后，可以传输。<br>leveldb存储二进制数据。</p><p>序列化后，数据是二进制的。<br>机计算时只能使用二进制，因为只有高电平和低电平，所以用二进制，用十进制表示只是为了方便些。</p><h3 id="序列化应用场景"><a href="#序列化应用场景" class="headerlink" title="序列化应用场景"></a>序列化应用场景</h3><h4 id="1-网络传输"><a href="#1-网络传输" class="headerlink" title="1.网络传输"></a>1.网络传输</h4><p>主要应用例如：RPC，将对象进行序列化后，运行远程主机上的服务，就像在本地机上运行对象时一样。<br>RMI也是一样。</p><h4 id="2-持久化"><a href="#2-持久化" class="headerlink" title="2.持久化"></a>2.持久化</h4><p>序列化可以将内存中的类写入文件或数据库中。<br>文件已经演示过了，存数据库，最典型的就是leveldb，就是存二进制数据。</p><h4 id="3-java对象状态保存"><a href="#3-java对象状态保存" class="headerlink" title="3.java对象状态保存"></a>3.java对象状态保存</h4><p>这个有点意思。<br>java对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。</p><p>可以将整个对象层次写入字节流中，可以保存在文件中或在网络连接上传递。利用对象序列化可以进行对象的&quot;深复制&quot;，即复制对象本身及引用的对象本身。<br>序列化一个对象可能得到整个对象序列。<br>比如：将某个类序列化后存为文件，下次读取时只需将文件中的数据反序列化就可以将原先的类还原到内存中。<br>也可以将类序列化为流数据进行传输。</p><p>总的来说就是将一个已经实例化的类转成文件存储，下次需要实例化的时候只要反序列化即可将类实例化到内存中并保留序列化时类中的所有变量和状态。</p><h4 id="4-统一编码"><a href="#4-统一编码" class="headerlink" title="4.统一编码"></a>4.统一编码</h4><p>可以将二进制数据认为是一种编码。<br>对象、文件、数据，有许多不同的格式，很难统一传输和保存。</p><p>序列化以后就都是字节流了，无论原来是什么东西，都能变成一样的东西，就可以进行通用的格式传输或保存，传输结束以后，要再次使用，就进行反序列化还原，这样对象还是对象，文件还是文件。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>序列化在日常开发中，如果涉及到I/O的场景，就不可避免的会使用到序列化，序列化不止有java自带的API，还有别的一些序列化框架如<code>hessian</code>、<code>protobuf</code>等也是序列化框架也可以实现，本质上干的事是一样的。<br>了解序列化的原因和操作之后，在工作中可以少踩坑。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> serializable </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> serializable </tag>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm--数组分批次算法</title>
      <link href="posts/f4a68c42.html"/>
      <url>posts/f4a68c42.html</url>
      
        <content type="html"><![CDATA[<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>对一个数组，按指写个数n，划为一组。<br>比如有一个数组，包含<code>1200000</code> 的数据，要求每<code>1000</code>为一组。放到一个新的Array里要怎么处理呢。<br>方法肯定有很多，可以一一来验证。</p><h3 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h3><p>可能是最简单的方式：取模。可以用少最数据验证一下。<br>思路很简单：</p><ol><li>对 step 取模，每到1000就打印一下，这一步也机以创建新的数组都可以的</li><li>else就是普通的处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[total];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i % step == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 在这里相当于可以做一些特殊的开头处理，比如创建一个新的容器之类，这里我就直接用来打印</span></span><br><span class="line">        array[i] = i;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        array[i] = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(array));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line">40</span><br><span class="line">50</span><br><span class="line">60</span><br><span class="line">70</span><br><span class="line">80</span><br><span class="line">90</span><br><span class="line">100</span><br><span class="line">110</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h2><p>这个思路是：把每一段的<code>start</code>和<code>end</code>直接算出来。<br>这样有一个好处，就是可以提前知道每一段的位置，这样可以提前做一些处理。比如，在并发场景下，可以把每一段的<code>start</code>和<code>end</code>直接拿到，提交给不是的线程去处理。</p><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1200000</span>;</span><br><span class="line">    <span class="keyword">int</span> batch = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> segment = data / batch;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; batch; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> start = i * segment;</span><br><span class="line">      <span class="keyword">int</span> end = start + segment - <span class="number">1</span>;</span><br><span class="line">      System.out.println(<span class="string">&quot;start: &quot;</span> + start);</span><br><span class="line">      System.out.println(<span class="string">&quot;end: &quot;</span> + end);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看一下结果，下面这样就很棒棒了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">start: 0</span><br><span class="line">end: 239999</span><br><span class="line">start: 240000</span><br><span class="line">end: 479999</span><br><span class="line">start: 480000</span><br><span class="line">end: 719999</span><br><span class="line">start: 720000</span><br><span class="line">end: 959999</span><br><span class="line">start: 960000</span><br><span class="line">end: 1199999</span><br></pre></td></tr></table></figure><p>假设现在有一个线程池，就可以直接用上，比如在定时任务计算一天的订单或者其它批量任务，就可以这样分。</p><h3 id="双层for"><a href="#双层for" class="headerlink" title="双层for"></a>双层for</h3><p>虽然是双层for，但是很多刚开始学算法的人，未必能想到这种方式。<br>这种方式的关键点在于，i 的每一段都是 j 的起点，这种方式最大的好处是，煅练算法的小技巧，让自己多了解一种技巧。<br>结果是一样的，可以自行验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StepTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100000</span>];</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length ; i = i + step) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;current count: &quot;</span> + count++);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + step &amp;&amp; j &lt; arr.length ; j++) &#123;</span><br><span class="line">        arr[j] = j;</span><br><span class="line">        System.out.println(arr[j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分组算法，还有很多种，这里只是抛砖引玉，最主要还是熟练这种用法，当做一个基础的练习。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> array </category>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 实现一个下载脚本</title>
      <link href="posts/92556419.html"/>
      <url>posts/92556419.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在写复杂脚本时，往往需要复用下载这个操作，刚好碰到这个问题，就把下载功能抽成一个函数，拿来复用。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现就比较简单了，直接上代码，这段代码复制就可以直接使用。<br>功能上判断一下当前系统中使用的的<code>wget</code>还是<code>curl</code>，选择其中一个工具进行下载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">download() &#123;</span><br><span class="line">  local url=$1</span><br><span class="line">  local file_name=$2</span><br><span class="line">  if type wget &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">    wget --no-check-certificate -q $url</span><br><span class="line">  elif type curl &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">    echo &quot;curl -OLJ $url&quot;</span><br><span class="line">    curl -OLJ $url</span><br><span class="line">  else</span><br><span class="line">    echo &#x27;info: no exists wget or curl, make sure the system can use the &quot;wget&quot; or &quot;curl&quot; command&#x27;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 函数调用测试</span><br><span class="line">test() &#123;</span><br><span class="line">  download  https://liukay.com/atom.xml localFileName.xml</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//test</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>简单的示例，如果需要函数调用函数，直接在上面放开<code>test</code>这个注释即可。</p><blockquote><p>download.sh <a href="https://liukay.com/atom.xml">https://liukay.com/atom.xml</a> localFileName.xml</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> linux </tag>
            
            <tag> 工具 </tag>
            
            <tag> download </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存不足 java应用无法启动</title>
      <link href="posts/370e787d.html"/>
      <url>posts/370e787d.html</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在启动应用时，发现应用一启动就挂掉，线程号一闪就没了，有点奇怪，查看一下错误日志。报了一个错: <strong>Invalid initial heap size: -Xms9g</strong></p><p>完整日志如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thu May 19 18:14:59 CST 2016</span><br><span class="line">Invalid initial heap size: -Xms9g</span><br><span class="line">The specified size exceeds the maximum representable size.</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will exit.</span><br><span class="line">[java-tron@chaindev010 FullNodeHelloMessage]$ java -version</span><br><span class="line">java version &quot;1.8.0_161&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br></pre></td></tr></table></figure><p>这个机器有16G内存，有可能是内存被占用完了，查看一下内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -g</span><br></pre></td></tr></table></figure><p>只使用了6，free只存1G，这明显是有缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:             15           6           1           0           7           8</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure><h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><p>清理的方式就是修改系统的默认页缓存配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><p>空间马上腾出来了，再启动就解决问题了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:             15           6           8           0           0           8</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure><h2 id="drop-caches-命令"><a href="#drop-caches-命令" class="headerlink" title="drop_caches 命令"></a>drop_caches 命令</h2><p>drop_caches的值可以是0-3之间的数字，代表不同的含义：<br>0：不释放（系统默认值）<br>1：释放页缓存<br>2：释放<code>dentries</code>和<code>inodes</code><br>3：释放1 和 2 中说道的的所有缓存</p><p>也就是说<br>数字1: 是用来清空最近放问过的文件页面缓存<br>数字2: 是用来清空文件节点缓存和目录项缓存<br>数字3: 是用来清空1和2所有内容的缓存。</p><p><code>/proc</code>是一个虚拟文件系统，我们可以通过对它的读写操作作为与kernel实体间进行通信的一种手段。<br>也就是说可以通过修改/proc中的文件，来对当前kernel的行为做出调整。<br>也就是说我们可以通过调整/proc/sys/vm/drop_caches来释放内存。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm 的局部变量表</title>
      <link href="posts/32722.html"/>
      <url>posts/32722.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。<br>Java中方法的局部变量是放在虚拟机栈的局部变量表里面，形参也算一个。本地变量表，就是局部变量表，只是翻译不同。代码说明</p></blockquote><p>运行时栈帧中存储了以下内容</p><ul><li>局部变量</li><li>操作数栈</li><li>动态链接</li><li>返回地址</li><li>附加信息</li></ul><p><img src="/posts/32722/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8.jpg" alt="局部变量表"></p><p>每一个方法的调用开始和结束都是栈的压入(入栈)和弹出(出栈)的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] waste = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> new_var = <span class="number">0</span>;  </span><br><span class="line">    System.gc();  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>反编译得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;  </span><br><span class="line">flags: ACC_PUBLIC, ACC_STATIC      </span><br><span class="line">Code:</span><br><span class="line">stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span>  </span><br><span class="line">0: ldc           #2                  // int 6291456   </span><br><span class="line"><span class="number">2</span>: newarray       <span class="keyword">byte</span>  </span><br><span class="line"><span class="number">4</span>: astore_1   </span><br><span class="line"><span class="number">5</span>: iconst_0   </span><br><span class="line"><span class="number">6</span>: istore_2   </span><br><span class="line">7: invokestatic  #3                  // Method java/lang/System.gc:()V   </span><br><span class="line"><span class="number">10</span>: <span class="keyword">return</span> </span><br></pre></td></tr></table></figure><p>结果：<code>locals=3</code><br>也就是说局部变量表长度是3。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 局部变量表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有状态和无状态对象</title>
      <link href="posts/33529.html"/>
      <url>posts/33529.html</url>
      
        <content type="html"><![CDATA[<p>这个概念在多线程中一直被提及，实际上很简单。<br>1.有状态就是有<code>数据存储功能</code>。<code>有状态对象(Stateful Bean)</code>，就是有实例变量的对象，可以保存数据，是<code>非线程安全</code>的。在不同方法调用间不保留任何状态。</p><p>2.无状态就是一次操作，<code>不能保存数据</code>。<code>无状态对象(Stateless Bean)</code>，就是<code>没有实例变量的对象</code>，不能保存数据，是不变类，是线程安全的。</p><p>3.引用无状态的对象，则自己也可以是线程安全的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class StatelessBeanService &#123;   </span><br><span class="line">    &#x2F;&#x2F; 虽然有billDao属性，但billDao是没有状态信息的，是Stateless Bean.  </span><br><span class="line">    BillDao billDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 对象 </tag>
            
            <tag> 有状态 </tag>
            
            <tag> 无状态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-解决jar包反射获取不到类</title>
      <link href="posts/2d0b2fc1.html"/>
      <url>posts/2d0b2fc1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发一个基础工具包给业务组的小伙伴们使用的时候，发现一个小问题，就是在反射的时候在自己电脑上运行的正常，但是打成jar包后，就class not fuond，有点奇怪。<br>如果能借助Spring这个都不是事，关键是不能用。</p><h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><p>下面的目的是，找到这个指定包下的所有类，对我指定了注解的类进行加载，其实就是一个可以灵活装配、拆卸的策略模式。这样业务的类可以通过指定注解来选择是否成为业务的一部分。<br>下面这段代码在IDE中运行正常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.JarURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类加载工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2015/9/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, TransactionCreator&gt; creators = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 基于 IDE 运行</span></span><br><span class="line">    reflectByClass();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectByClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      ArrayList&lt;Class&gt; creatorsClass = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      ArrayList&lt;File&gt; classFiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="comment">// 拿到关键接口</span></span><br><span class="line">      Class&lt;?&gt; interfaceClass = Class.forName(<span class="string">&quot;com.liukai.test.generate.TransactionCreator&quot;</span>);</span><br><span class="line">      String packageName = interfaceClass.getPackage().getName();</span><br><span class="line">      <span class="comment">// 拿到 ClassLoader</span></span><br><span class="line">      ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">      String path = packageName.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;path: &quot;</span> + path);</span><br><span class="line">      Enumeration&lt;URL&gt; resources = contextClassLoader.getResources(path);</span><br><span class="line">      System.out.println(<span class="string">&quot;Enumeration&lt;URL&gt; resources: &quot;</span> + resources);</span><br><span class="line">      <span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">        URL url = resources.nextElement();</span><br><span class="line">        System.out.println(<span class="string">&quot;url.getFile(): &quot;</span> + url.getFile());</span><br><span class="line">        classFiles.add(<span class="keyword">new</span> File(url.getFile()));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (File file : classFiles) &#123;</span><br><span class="line">        creatorsClass.addAll(findClass(file, packageName));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Class clazz : creatorsClass) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Class clazz : creatorsClass&quot;</span>);</span><br><span class="line">        Creator declaredAnnotation = (Creator) clazz.getAnnotation(Creator.class);</span><br><span class="line">        <span class="keyword">if</span> (declaredAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;creators: add&quot;</span> + declaredAnnotation.type());</span><br><span class="line">          creators.put(declaredAnnotation.type(), (TransactionCreator) clazz.newInstance());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | IOException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TransactionCreator <span class="title">getGenerator</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;creators: &quot;</span> + creators.size());</span><br><span class="line">    <span class="keyword">return</span> creators.get(type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Class&gt; <span class="title">findClass</span><span class="params">(File file, String packagename)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Class&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    File[] files = file.listFiles();</span><br><span class="line">    <span class="keyword">for</span> (File file2 : files) &#123;</span><br><span class="line">      <span class="keyword">if</span> (file2.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">assert</span> !file2.getName().contains(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        ArrayList&lt;Class&gt; arrayList = findClass(file2, packagename + <span class="string">&quot;.&quot;</span> + file2.getName());</span><br><span class="line">        list.addAll(arrayList);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file2.getName().endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          list.add(Class.forName(packagename + <span class="string">&#x27;.&#x27;</span> + file2.getName().substring(<span class="number">0</span>,</span><br><span class="line">                  file2.getName().length() - <span class="number">6</span>)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方式：<br>由于打成jar包后，类路径多了一层<code>jar</code>，所以加载时，要考虑到<code>jar包路径</code>，以下这个demo，实际可以通过获取运行路径变量替换写死的路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.JarURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类加载工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2015/9/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, TransactionCreator&gt; creators = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 基于 jar 包反射</span></span><br><span class="line">    reflectByJar();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectByJar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String path = <span class="string">&quot;/Users/liukai/workspaces/java/test/build/libs/&quot;</span>;</span><br><span class="line">    String fileName = <span class="string">&quot;test.jar&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      JarFile jarFile = <span class="keyword">new</span> JarFile(path + fileName);</span><br><span class="line">      Enumeration&lt;JarEntry&gt; e = jarFile.entries();</span><br><span class="line">      JarEntry entry;</span><br><span class="line">      <span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">        entry = (JarEntry) e.nextElement();</span><br><span class="line">        <span class="keyword">if</span> (entry.getName().indexOf(<span class="string">&quot;META-INF&quot;</span>) &lt; <span class="number">0</span> &amp;&amp; entry.getName().indexOf(<span class="string">&quot;.class&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          String classFullName = entry.getName();</span><br><span class="line">          <span class="comment">//去掉后缀.class</span></span><br><span class="line">          String className = classFullName.substring(<span class="number">0</span>, classFullName.length() - <span class="number">6</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">          Class&lt;?&gt; clazz;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (!className.contains(<span class="string">&quot;com.liukai.test&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              System.out.println(<span class="string">&quot;Class clazz : creatorsClass:&quot;</span> + className);</span><br><span class="line">              clazz = Class.forName(className);</span><br><span class="line">              Creator declaredAnnotation = (Creator) clazz.getAnnotation(Creator.class);</span><br><span class="line">              <span class="keyword">if</span> (declaredAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;creators: add&quot;</span> + declaredAnnotation.type());</span><br><span class="line">                creators.put(declaredAnnotation.type(), (TransactionCreator) clazz.newInstance());</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e1) &#123;</span><br><span class="line">              e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉还是不智能，应该有一个通用的方法，无论我是什么场景，只需要一套代码就解决，而不是用户来抽像，这个JDK应该得提供。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> reflect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> reflect </tag>
            
            <tag> 反射 </tag>
            
            <tag> clazzloader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="posts/69e7b86f.html"/>
      <url>posts/69e7b86f.html</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>什么是单例模式?<br>单例模式确保一个类只有一个实例，自行提供这个实例并向整个系统提供这个实例。<br>特点：</p><ol><li>一个类只能有一个实例</li><li>自己创建这个实例</li><li>整个系统都要使用这个实例</li></ol><h3 id="什么时候用单例模式"><a href="#什么时候用单例模式" class="headerlink" title="什么时候用单例模式?"></a>什么时候用单例模式?</h3><p>用我的话说</p><ol><li>只用一个实例就能解决问题的时候，没必要创建多个实例的时<br>创建数据库连接池对象一个就够了</li><li>操作打印机的时候<br>一台打印机总不能让所有人同时去操作，确保只有一个实例，每次只能被一个人调用该实例。</li></ol><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><p>优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程并发问题。<br>缺点：在类装载的时候就完成实例化，没有达到<code>Lazy Loading</code>的效果。<br>如果从始至终从未使用过这个实例，则会造成内存的浪费。</p><p>但是说人话，如果这个对象最终一定会被使用到，最好是用饿汉模式，避免线程并发问题。<br>但是如果就是想追求这么点性能要求，也不是不可以用懒汉模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。<br>优缺点和上面是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><p>这种写法起到了<code>Lazy Loading</code>的效果，但是只能在单线程下使用。<br>如果在多线程下，一个线程进入了<code>if (singleton == null)</code>判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。<br>所以在多线程环境下不可使用这种方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//A B 争抢会有并发问题</span></span><br><span class="line">      singleton = <span class="keyword">new</span> Singleton(B);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进，双重检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式的特点：实例的延迟加载。</span></span><br><span class="line"><span class="comment"> * 问题是：多线程时会有同步问题。解决方式：加锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//1.创建空的对象，用于延迟加载。</span></span><br><span class="line">  <span class="comment">//2.私有化构造器</span></span><br><span class="line">  <span class="comment">//3.给出获取方法。但是为了防止出现线程安全问题，必须采取双得检查加同步代码块的方式进行安全保护机制。</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Hungry hungry = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hungry == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Hungry.class) &#123;</span><br><span class="line">        <span class="comment">//这层检查是必须要加的，如果没加，那么另一个线程进来后如果出现抢线程的情况那么对象将会被创建二个。</span></span><br><span class="line">        <span class="keyword">if</span> (hungry == <span class="keyword">null</span>) &#123;</span><br><span class="line">          hungry = <span class="keyword">new</span> Hungry();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hungry;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检查锁定失败的问题并不归咎于 JVM 中的实现 bug，而是归咎于 Java 平台内存模型。内存模型允许所谓的“无序写入”，这也是这些失败的一个主要原因。</p><p>所以，使用加上<code>volatile</code>关键字，防止指令重排：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Hungry hungry = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>到这懒汉模式算是一个可用的懒汉模式。但是单例械式还有别的形态。</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>有没有一种延时加载，并且能保证线程安全的简单写法呢？<br>我们可以把Singleton实例放到一个静态内部类中，这样就避免了静态实例在Singleton类加载的时候就创建对象，并且由于静态内部类只会被加载一次，所以这种写法也是线程安全的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Holder.singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，上面提到的所有实现方式都有两个共同的缺点：</p><p>都需要额外的工作(Serializable、transient、readResolve())来实现序列化，否则每次反序列化一个序列化的对象实例时都会创建一个新的实例。<br>可能会有人使用<strong>反射</strong>强行调用我们的私有构造器（如果要避免这种情况，可以修改构造器，让它在创建第二个实例的时候抛异常）。<br>我就干过。</p><h2 id="枚举写法"><a href="#枚举写法" class="headerlink" title="枚举写法"></a>枚举写法</h2><p>静态内部类，可以保证单例，但是不保证单例安全。<br>使有枚举可以。<br>使用枚举除了线程安全和防止<strong>反射</strong>强行调用构造器之外，还提供了自动序列化机制，防止反序列化的时候创建新的对象。<br>因此，&lt;Effective Java&gt;推荐尽可能地使用枚举来实现单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  INSTANCE;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;work&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">    Singleton.INSTANCE.doWork();</span><br><span class="line">      <span class="comment">// 反射</span></span><br><span class="line">      Class&lt;Singleton&gt; clazz = Singleton.class;</span><br><span class="line">      Singleton singleton = clazz.newInstance();</span><br><span class="line">      singleton.doWork();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用反射的报错：</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Exception in thread &quot;main&quot; java.lang.InstantiationException: com.liukai.test.Singleton<br>    at java.lang.Class.newInstance(Class.java:427)<br>    at com.liukai.test.Singleton.main(Singleton.java:15)<br>Caused by: java.lang.NoSuchMethodException: com.liukai.test.Singleton.<init>()<br>    at java.lang.Class.getConstructor0(Class.java:3082)<br>    at java.lang.Class.newInstance(Class.java:412)<br>    ... 1 more</init></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> singleton </category>
          
          <category> 单例模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> design </tag>
            
            <tag> 单例模式 </tag>
            
            <tag> singleton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法 二叉树的构建和查找</title>
      <link href="posts/d5bb5ce0.html"/>
      <url>posts/d5bb5ce0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对二叉树有一定了解之后，学习一下对二叉树的操作，有时候这些东西一学就忘，反复操作几回就熟了。<br>二叉树的概念已经了解了，那么得知道怎么操作。现在就讲讲怎么操作二叉树。</p><h2 id="构建二叉树"><a href="#构建二叉树" class="headerlink" title="构建二叉树"></a>构建二叉树</h2><p>首先得先种一颗树，然后才能操作树。<br>怎么构建？有哪些对象、需要什么方法？</p><h3 id="主要对象"><a href="#主要对象" class="headerlink" title="主要对象"></a>主要对象</h3><ol><li>Node 节点对象</li><li>BinaryTree 树对象</li></ol><h4 id="Node-节点对象"><a href="#Node-节点对象" class="headerlink" title="Node 节点对象"></a>Node 节点对象</h4><p>作用：存数据的。<br>大白话就是树中的每一个节点，存着外面进来的数据。最简单的理解就是<code>HashMap</code>就是一颗树的实现，每次不明白，就想想<code>HashMap</code>，是不是就通了。</p><p>四个关键要素：</p><ol><li>left</li><li>right</li><li>key</li><li>value</li></ol><h4 id="BinaryTree-对象"><a href="#BinaryTree-对象" class="headerlink" title="BinaryTree 对象"></a>BinaryTree 对象</h4><p>作用：操作node节点数据，维护树结构。<br>大白话，就是把Node拼起来，成为一颗大树。<br>主要操作：</p><ol><li>put</li><li>get</li><li>delete</li><li>size</li><li>min</li><li>max</li></ol><p>put 完以后要返回整棵树，开始是始于 root，返回也是返回 root。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现就是把<code>Node</code>和<code>BinaryTree</code>这两结合起来用，还用的没问题。<br>需要考虑几个问题：</p><ol><li>怎么结合起来用</li><li>从哪开始写</li></ol><p>怎么结合起来用？<br>即然要操作，那就需要对外暴露操作接口<code>BinaryTree</code>就是最外操作的对象。</p><p>从哪开始写？<br>先定义数据结构，再定义方法。</p><p>查询 和 添加 逻辑基本相同，都是通过递归的形式。<br>删除比较麻烦，如果被删除的节点有子节点，不能让丢掉这些子节点，需要重新维护这些子节点。<br>删除的节点，左子树的所有节点一定比右子树的节点小，所以只需要从右子树中拿到最小的那个节点即可，也就是右子树中最左边的叶子节点。</p><h3 id="删除步骤"><a href="#删除步骤" class="headerlink" title="删除步骤"></a>删除步骤</h3><ol><li><p>找到要删除的 key</p></li><li><p>判断如果左子树为空，就用右边最小</p></li><li><p>判断如果右子树为空，就用左边最小</p></li><li><p>删除找到的最小值</p></li><li><p>将最小值替换被删除的节点，重新跟左右子节点建立连接</p></li><li><p>简化的情况<br>被删除节点只有一个 左子树 或 右子树，直接拿过来替换当前节点就行</p></li></ol><p>实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树</span></span><br><span class="line"><span class="comment"> * 左小右大</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2015/5/30 19:30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根节点</span></span><br><span class="line">  <span class="keyword">private</span> Node root;</span><br><span class="line">  <span class="comment">//个数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Key key;</span><br><span class="line">    <span class="keyword">public</span> Value value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value value, Node left, Node right)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.left = left;</span><br><span class="line">      <span class="keyword">this</span>.right = right;</span><br><span class="line">      <span class="keyword">this</span>.key = key;</span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value value)</span> </span>&#123;</span><br><span class="line">    root = put(root, key, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">      size++;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Node(key, value, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> comp = key.compareTo(x.key);</span><br><span class="line">    <span class="comment">// key 比当前节点小，往左</span></span><br><span class="line">    <span class="keyword">if</span> (comp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      x.right = put(x.right, key, value);</span><br><span class="line">      <span class="comment">// key 比当前节点大，往右</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      x.left = put(x.left, key, value);</span><br><span class="line">      <span class="comment">// 相等，就是当前节点，替换值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      x.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(root, key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> comp = key.compareTo(x.key);</span><br><span class="line">    <span class="comment">// key 比当前节点小，往左</span></span><br><span class="line">    <span class="keyword">if</span> (comp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> get(x.right, key);</span><br><span class="line">      <span class="comment">// key 比当前节点大，往右</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> get(x.left, key);</span><br><span class="line">      <span class="comment">// 相等，就是当前节点，替换值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> x.value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Node <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> delete(root, key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// x 当前要被删除的点节</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> comp = key.compareTo(x.key);</span><br><span class="line">    <span class="comment">//   1 张三</span></span><br><span class="line">    <span class="comment">//   /   \</span></span><br><span class="line">    <span class="comment">// 2李四  3王五</span></span><br><span class="line">    <span class="comment">//         \</span></span><br><span class="line">    <span class="comment">//        4工作</span></span><br><span class="line">    <span class="keyword">if</span> (comp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      x.right = delete(x.right, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      x. left = delete(x.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1.简单情况：</span></span><br><span class="line">      <span class="comment">// 被删除节点只有一个 左子树 或 右子树，直接拿过来替换当前节点就行</span></span><br><span class="line">      <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> x.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> x.left;</span><br><span class="line">      &#125;</span><br><span class="line">      size--;</span><br><span class="line">      Node minNode = x.right;</span><br><span class="line">      <span class="comment">//2.找到最左节点</span></span><br><span class="line">      <span class="keyword">while</span> (minNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 minNode 没有子节点了，说明 minNode 是最小节点</span></span><br><span class="line">        <span class="comment">// 这里 minNode 是当前节点， .left 就是它的子节点</span></span><br><span class="line">        minNode = minNode.left;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3.断开最左节点和上个节点的联系</span></span><br><span class="line">      <span class="comment">// 由于没有记录父节点是谁，所以需要再次遍历</span></span><br><span class="line">      Node parent = x.right;</span><br><span class="line">      <span class="keyword">while</span> (parent.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 当前节点的子节点没有子节点，就是最小节点</span></span><br><span class="line">        <span class="keyword">if</span> (parent.left.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">          parent.left = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          parent = parent.left;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4.建立连接</span></span><br><span class="line">      <span class="comment">// 再跟左右子树建立连接，再跟父节点建立连接</span></span><br><span class="line">      minNode.left = x.left;</span><br><span class="line">      minNode.right = x.right;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>二叉树的构建和查找，相对比较简单，需要理清的是这个操作，有些写法经常不用就会忘。<br>为什么业务中用的东西不会忘，因为你天天在写，如果你天天写这些东西，你也不会忘的，唯手熟尔。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> tree </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> algorithm </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--红黑树</title>
      <link href="posts/deb9a016.html"/>
      <url>posts/deb9a016.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>前面对树已经有了一个认识，现在看下红黑树的定义。<br>开始之前提几个问题：</p><ol><li>什么是红黑树</li><li>有什么用</li><li>怎么实现</li><li>优缺点</li></ol><h2 id="什么是红黑树"><a href="#什么是红黑树" class="headerlink" title="什么是红黑树"></a>什么是红黑树</h2><p>红黑树: 又叫<strong>二叉平衡树</strong><br>红黑树又红又黑，真正的意义是什么？为什么要红一下黑一下？</p><p>会左旋 和 右旋，不会出现单边增长太多，会平衡。</p><p>红黑树是一种特化的AVL树（平衡二叉树），都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。<br>它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在实践中是高效的：它可以在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目。</p><h2 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h2><blockquote><p>为了实现快速定位而设计的算法。</p></blockquote><p>几乎所有基于二叉树的算法，都是基于二分法进行查找的，只要数据100%是按照一定顺序排列的，那么就可以被二分法查找。</p><p>假疫有10亿数据只需要不到30次比较就能查找到目标。</p><p>二叉查找树这一数据结构并不难，而红黑树之所以难是难在它是自平衡的二叉查找树，在进行插入和删除等可能会破坏树的平衡的操作时，需要重新自处理达到平衡状态。</p><p>红黑树特点：</p><ol><li>节点要么红、要么黑</li><li>根节点是黑色</li><li>叶节点null，都是黑色</li><li>每个红色节点包含的子节点，一定为黑色</li><li>任意一结点到每个叶子结点的路径都包含数量相同的黑子结点。</li></ol>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> tree </category>
          
          <category> struct </category>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 红黑树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法--二叉树</title>
      <link href="posts/3a865c0f.html"/>
      <url>posts/3a865c0f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>树即经典实用，又非常有助于学习算法。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二叉树是一个经典的数据结构，通过学习二叉树可以往后扩展学习更多类型的树。<br>这里要强调几点：</p><ol><li>树是逻辑上定义的数据结构，哪怕只有一个节点也可以称之为树。</li><li>不要慌，二叉树实际上比你想像的要容易上手。</li></ol><p>这篇文章先讲概念，再讲实现。</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉查找树也称为有序<strong>二叉查找树</strong>，满足二叉查找树的一般性质，是指一棵空树具有如下性质：</p><ol><li>任意节点左子树不为空,则左子树的值均小于根节点的值；</li><li>任意节点右子树不为空,则右子树的值均大于于根节点的值；</li><li>任意节点的左右子树也分别是二叉查找树；</li><li>没有键值相等的节点；</li></ol><p>不区分左右节点的值谁比谁大。<br>叶子节点：没有子节点的节点。<br>由于出版的问题，节点 和 结点 是一个意思。</p><p><img src="/posts/3a865c0f/%E7%AE%80%E5%8D%95%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="简单二叉树"></p><h3 id="二叉树五种状态"><a href="#二叉树五种状态" class="headerlink" title="二叉树五种状态"></a>二叉树五种状态</h3><p>树的五种状态要这样理解：为了抽象出树的各种情况下树当时的状态，而进行的命名。实际上就是当前树被操作当前状态。</p><ol><li><strong>空树</strong>: 就是null，一般是在操作中删完了。</li><li><strong>单节点树</strong>：只有一个根结点的二叉树</li><li><strong>只有左子树</strong></li><li><strong>只有右子树</strong></li><li><strong>满二叉树</strong>：每一次结构都达到最大值。就是完美状态<br>总节点数=2^n-1，n 为层数。(等比数列求和)</li><li><strong>完全二权树</strong>：叶子节点只能出现在最下层 和 次下层</li></ol><h3 id="形态展示"><a href="#形态展示" class="headerlink" title="形态展示"></a>形态展示</h3><h4 id="形态一-空树"><a href="#形态一-空树" class="headerlink" title="形态一 空树"></a>形态一 空树</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(null)</span><br></pre></td></tr></table></figure><h4 id="形态二-满二叉树"><a href="#形态二-满二叉树" class="headerlink" title="形态二: 满二叉树"></a>形态二: 满二叉树</h4><p>只有叶子节点多一个少一个就不是完全二叉树</p><p><img src="/posts/3a865c0f/%E7%AE%80%E5%8D%95%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="简单二叉树"></p><h3 id="形态三：完全二叉树"><a href="#形态三：完全二叉树" class="headerlink" title="形态三：完全二叉树"></a>形态三：完全二叉树</h3><p>定义：左满，右不满，叶子节点只能出现在最下层 和 次下层</p><p><img src="/posts/3a865c0f/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="完全二叉树"></p><p>这也是完全二叉树，左满又不满。</p><p><img src="/posts/3a865c0f/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%912.jpg" alt="完全二叉树2"></p><p>这种就不是完全二叉树，酒红色节点在右边，所以不满足最左原则。</p><p><img src="/posts/3a865c0f/%E9%9D%9E%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="非完全二叉树"></p><h3 id="形态四-左子树"><a href="#形态四-左子树" class="headerlink" title="形态四 左子树"></a>形态四 左子树</h3><p><img src="/posts/3a865c0f/%E5%B7%A6%E5%AD%90%E6%A0%91.jpg" alt="左子树"></p><h3 id="形态五-右子树"><a href="#形态五-右子树" class="headerlink" title="形态五 右子树"></a>形态五 右子树</h3><p><img src="/posts/3a865c0f/%E5%8F%B3%E5%AD%90%E6%A0%91.jpg" alt="右子树"></p><h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><p>二叉树遍历 - 前序、中序、后序：时间复杂度是多少？<br>前序：先输出父节点<br>中序：先输出左子树，再输出父节点，右子树<br>后序：先输出左子树、右子树，最后父节点</p><p>关键就是看父节点的输出顺序。</p><p>不论前序、中序、后序<br>每个节点会访问一次且仅访一次，所以复杂度线性于节点总数，所以是<code>O(n)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> tree </category>
          
          <category> 算法 </category>
          
          <category> 树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> algorithm </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法--树的定义</title>
      <link href="posts/eadc91e.html"/>
      <url>posts/eadc91e.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>树是一种逻辑上的概念，切记，这会帮助你理解。</p></blockquote><p>学习算法过程中你不得立即获得正向反馈，这就是学习无奈的地方，学习更像是一种投资。<br>不要觉得学习带有功利性不好，努力考上一个好大学，找到好工作也是一种功利性，只是平时不愿意承认。<br>学习算法也是，你可以找到好工作，这是一种长期投资。<br>坚持下去。</p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><blockquote><p>树是一种逻辑上的概念，切记，这会帮助你理解。</p></blockquote><p>树是一种数据结构<br>它是由n（n&gt;=1）个有限结点组成一个具有层次关系的集合。<br>即最少一个节点。</p><h3 id="树具有的特点有"><a href="#树具有的特点有" class="headerlink" title="树具有的特点有"></a>树具有的特点有</h3><ol><li>每个结点有零个或多个子结点</li><li>没有父节点的结点称为根节点</li><li>每一个非根结点有且只有一个父节点</li><li>除了根结点外，每个子结点可以分为多个不相交的子树。</li></ol><img src="/posts/eadc91e/树.jpg" height="70%" width="70%"><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ol><li>结点的度(Degree)：结点拥有的子树的数目，root，有 0-2个结点</li><li>叶子结点：度为0的结点        //就是最后一个节点</li><li>分支结点：度不为0的结点</li><li>树的度：树内各结点的度的最大的值。（即所有子节点加起来有多少度）</li><li>树的层次序号：每个节点，从上往下，从左往右都有一个编号，根是1，第二层最左是2依次递进</li><li>层次：根结点的层次为1，其余结点的层次等于该结点的双亲结点的层次加1</li><li>树的高度：树中结点的最大层次</li><li>森林：0个或多个不相交的树组成。<br>对森林加上一个根，森林即成为树；删去根，树即成为森林</li></ol><img src="/posts/eadc91e/术语解释.jpg" height="70%" width="70%"><p>二叉树的度是指树中所以结点的度数的最大值。二叉树的度小于等于2，因为二叉树的定义要求二叉树中任意结点的度数（结点的分支数）小于等于2 。</p><h3 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h3><p>若一个结点有子树，那么该结点称为子树根的&quot;双亲&quot;，子树的根称为该结点的&quot;孩子&quot;。<br>有相同双亲的结点互为&quot;兄弟&quot;。<br>一个结点的所有子树上的任何结点都是该结点的后裔。<br>从根结点到某个结点的路径上的所有结点都是该结点的祖先。</p><img src="/posts/eadc91e/节点关系.jpg" height="70%" width="70%"><h3 id="节点的层次"><a href="#节点的层次" class="headerlink" title="节点的层次"></a>节点的层次</h3><p>结点的层次（Level）从根开始定义起，根为第一层，根的孩子为第二层。<br>树中结点的最大层次称为树的深度（Depth）或高度。</p><img src="/posts/eadc91e/树的层次.jpg" height="70%" width="70%"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>树是概念的结构，如果树只有一侧，也可以理解为一个链表，在逻辑上规定了树的结构。<br>概念性的东西，不容易记住，当可以记住时，可以当作字典来查询。<br>关键点在于，概念是用来帮助理解的，当你理解了之后，自然就可以记住概念。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
          <category> tree </category>
          
          <category> 算法 </category>
          
          <category> 树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> 算法 </tag>
            
            <tag> algorithm </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git rebase使用</title>
      <link href="posts/d6698368.html"/>
      <url>posts/d6698368.html</url>
      
        <content type="html"><![CDATA[<h2 id="rebase-重置"><a href="#rebase-重置" class="headerlink" title="rebase 重置"></a>rebase 重置</h2><p>作用: 是重置提效记录。<br>本质是，当合并其它分支的提交记录后，重整提交记录。<br>不论是自己开发，还是参加开源项目，有很多时间，需要重整提交记录。美化一下，这时候就很有用了。</p><p>需要强调一点：一定是在你自己的分支上rebase，别把master之类的分支rebase掉了。</p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>假设你在<code>test_rebase分支</code>进行开发，现在<code>master</code>分支已经有新的提交，<code>test</code>有多次提交，现在你想合并<code>master</code>分支，并提交推送到远程仓库中看起来只有一次提交。</p><p>提交记录分别是：</p><p><strong>test_rebase分支</strong>:</p><blockquote><p>rebase: test commit2<br>rebase: test commit1</p></blockquote><p><strong>master分支</strong>:</p><blockquote><p>master: test commit2<br>master: test commit1</p></blockquote><p>在 <code>test_rebase</code>分支下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i master</span><br></pre></td></tr></table></figure><p><code>-i</code>: --interactive，即交互式的界面</p><p>进入交互模式，用<code>vim</code>来编辑，下面这个内容是：</p><p>pick: 要保留的掉交commit 和 message，如果要重写commit message用 reword。<br>e1164ca: 我执行 rebase 之前的commit<br># Rebase 27a682f..： 这部份是注释，不用改也不会被提交</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pick e1164ca rebase: test commit1</span><br><span class="line">pick <span class="number">221</span>d61d rebase: test commit2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Rebase <span class="number">27</span>a682f..<span class="number">221</span>d61d onto <span class="number">27</span>a682f (<span class="number">2</span> commands)</span><br><span class="line">#</span><br><span class="line"># Command<span class="variable">s:</span></span><br><span class="line"># <span class="keyword">p</span>, pick <span class="symbol">&lt;commit&gt;</span> = use commit</span><br><span class="line"># r, reword <span class="symbol">&lt;commit&gt;</span> = use commit, but <span class="keyword">edit</span> the commit message</span><br><span class="line"># <span class="keyword">e</span>, <span class="keyword">edit</span> <span class="symbol">&lt;commit&gt;</span> = use commit, but <span class="keyword">stop</span> <span class="keyword">for</span> amending</span><br><span class="line"># s, squash <span class="symbol">&lt;commit&gt;</span> = use commit, but meld into <span class="keyword">previous</span> commit</span><br><span class="line"># <span class="keyword">f</span>, fixup [-C | -<span class="keyword">c</span>] <span class="symbol">&lt;commit&gt;</span> = like <span class="string">&quot;squash&quot;</span> but keep <span class="keyword">only</span> the <span class="keyword">previous</span></span><br><span class="line">#                    commit<span class="string">&#x27;s log message, unless -C is used, in which case</span></span><br><span class="line">#                    keep only this commit&#x27;s message; -c is same as -C but</span><br><span class="line">#                    opens the editor</span><br><span class="line"># <span class="keyword">x</span>, exec <span class="symbol">&lt;command&gt;</span> = run <span class="keyword">command</span> (the rest of the <span class="built_in">line</span>) using <span class="keyword">shell</span></span><br></pre></td></tr></table></figure><h3 id="接下来要怎么做？"><a href="#接下来要怎么做？" class="headerlink" title="接下来要怎么做？"></a>接下来要怎么做？</h3><p>接下来保留一个主要commit，把其他commit合入主要commit。<br>保留一个主commit用：<code>pick</code>，其它的commit都用<code>s</code>，如下：<br>写完<code>wq</code>保存后，还有一次本次的commit message要写。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick e1164ca rebase: test commit1</span><br><span class="line">s 221d61d rebase: test commit2</span><br></pre></td></tr></table></figure><p>写本次的 commit message:<br>注意看下面，是把两次commit message 都给带上了，删掉一条重写即可，不然提交易去就是两条message。<br># 井号的内容不会被提交，最简单的方式，全删除，再写。<br>保存，退出</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># This <span class="keyword">is</span> <span class="keyword">a</span> combination of <span class="number">2</span> commits.</span><br><span class="line"># This <span class="keyword">is</span> the <span class="number">1</span><span class="keyword">st</span> commit message:</span><br><span class="line"></span><br><span class="line">rebase: test commit1</span><br><span class="line"></span><br><span class="line"># This <span class="keyword">is</span> the commit message #<span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">rebase: test commit2</span><br><span class="line"></span><br><span class="line"># Please enter the commit message <span class="keyword">for</span> your <span class="keyword">changes</span>. Lines starting</span><br><span class="line"># with <span class="string">&#x27;#&#x27;</span> will <span class="keyword">be</span> ignored, <span class="built_in">and</span> <span class="keyword">an</span> <span class="built_in">empty</span> message aborts the commit.</span><br><span class="line">#</span><br><span class="line"># Date:      Wed Dec <span class="number">7</span> <span class="number">00</span>:<span class="number">43</span>:<span class="number">42</span> <span class="number">2022</span> +<span class="number">0800</span></span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>看下结果，原来的：</p><blockquote><p>rebase: test commit1<br>rebase: test commit2</p></blockquote><p>被合并成一条了</p><p><img src="/posts/d6698368/git-rebase%E7%BB%93%E6%9E%9C.jpg" alt="git-rebase结果"></p><h2 id="中断-rebase"><a href="#中断-rebase" class="headerlink" title="中断 rebase"></a>中断 rebase</h2><p>如果过程中退出了，但又不想继续了，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><p>如果保存后出现冲空，解决后，再执行一下 rebase：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>rebase 操作比较简单，主要作用就是修剪提交的commit、重写新的message，这在平时多分支开发的时候，非常好用。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> rebase </tag>
            
            <tag> merge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 判断字符串</title>
      <link href="posts/7363f4a2.html"/>
      <url>posts/7363f4a2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>变量一定要用 &quot;&quot; 包起来，否则容易出问问题<br>= 和 == 都能用，但是有差异<br>== 支持模糊匹配</p><h2 id="判断字符串长度"><a href="#判断字符串长度" class="headerlink" title="判断字符串长度"></a>判断字符串长度</h2><p>主要参数：</p><p>-z 长度为:  0 返回 true<br>-n 长度不为: 0 返回 true</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">str1=</span><br><span class="line">str2=&quot;&quot;</span><br><span class="line">str3=&quot;1234&quot;</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$str1&quot; ]; then</span><br><span class="line"> echo &#x27;1 -z: &#x27; $str1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$str2&quot; ]; then</span><br><span class="line"> echo &#x27;2 -z: &#x27; $str2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n $&quot;str3&quot; ]; then</span><br><span class="line"> echo &#x27;3 -n&#x27; $str3</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>1 -z:<br>2 -z:<br>3 -n 1234</p></blockquote><h2 id="判断两个字符串是否相等"><a href="#判断两个字符串是否相等" class="headerlink" title="判断两个字符串是否相等"></a>判断两个字符串是否相等</h2><p>格式：string1 = string2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">str=&#x27;test_val&#x27;</span><br><span class="line"></span><br><span class="line">if [ &quot;$str&quot; = &quot;one&quot; ]; then</span><br><span class="line"> echo $str</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>1:  test_val<br>2:  test_val</p></blockquote><h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><p>下面这个错，需要用 [[ 包起来<br>test.sh: line 107: [: main: integer expression expected</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [[ &quot;$test&quot; != &quot;g&quot; ]]; then</span><br><span class="line"> echo &#x27;1&#x27;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="错误用法：不支持-eq-方式"><a href="#错误用法：不支持-eq-方式" class="headerlink" title="错误用法：不支持-eq 方式"></a>错误用法：不支持-eq 方式</h2><p><code>-eq</code>只支持整数的比较，这样写不报错，注意是<strong>不报错</strong>，但是结果不会相等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">test1=&#x27;abc&#x27;</span><br><span class="line">test2=&#x27;efg&#x27;</span><br><span class="line"></span><br><span class="line">testNum1=123</span><br><span class="line">testNum2=123</span><br><span class="line"></span><br><span class="line">if [[ $test1 -eq &#x27;efg&#x27; ]]; then</span><br><span class="line"> echo 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $test2 -eq &#x27;efg&#x27; ]]; then</span><br><span class="line"> echo 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $testNum1 -eq $testNum2 ]]; then</span><br><span class="line"> echo 3</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>1<br>2<br>3</p></blockquote><p>所以要格外注意。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用字符串比较一定要<code>=</code>或<code>==</code>，不可以使用<code>-eq</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven 项目依赖</title>
      <link href="posts/10e755c7.html"/>
      <url>posts/10e755c7.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是依赖"><a href="#什么是依赖" class="headerlink" title="什么是依赖"></a>什么是依赖</h2><p>依赖的作用可以将项目以包的方式引用到当前项目中进行使用。<br>实际上平时引用的jar包都看可以看成是一个个子项目被引入到了项目中。</p><h2 id="项目引用"><a href="#项目引用" class="headerlink" title="项目引用"></a>项目引用</h2><p>也就是把其他的项目当成jar包放入仓库中，进行依赖的引用，就跟从网上下载jar包到本地一样。<br>被项目在被引用前必须先 clean install 到仓库中。</p><h3 id="引用示例"><a href="#引用示例" class="headerlink" title="引用示例"></a>引用示例</h3><p>创建一个maven项目，在 pom.xml 中添加一个项目引用，这里引用一个外部项目 junit，用它来构建测试用例，这里仅作为项目引用的示例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完成后，项目中就出现这个依赖包。</p><p><img src="/posts/10e755c7/1.png" alt="项目依赖"></p><h2 id="跨项目调用类"><a href="#跨项目调用类" class="headerlink" title="跨项目调用类"></a>跨项目调用类</h2><p>日常开发中，不会只针对一个项目开发，会针对不同项目进行开发。</p><p>例如：<br>project03 要引用 project01 和 project02 时，project01 和 project02必须先打包发布到了本地仓库中。<br>project03在pom.xml中添加依赖，这样project01 和 project02 就都被当做依赖打成了jar包入进 project03 的 Maven Library 中。<br>project03 还会自动得到project01、project02中的所引用的jar包，这叫依赖传递。</p><p>project01 中所包含的包：junit，也会被project03续承。</p><h3 id="project03"><a href="#project03" class="headerlink" title="project03"></a>project03</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liukai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project03<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liukai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="project01"><a href="#project01" class="headerlink" title="project01"></a>project01</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liukai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示的效果</p><p><img src="/posts/10e755c7/2.jpg" alt="依赖传递"></p><p>依赖传递可以是链条式的一个引一个：<br><code>project01---&gt;project02---&gt;project03</code></p><p>同理，project03 也可以使用 project01 当中的类。</p><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>有几种项目类型</p><ol><li>compile: 默认</li><li>test: 不被传递</li><li>system: 本系统</li><li>optional:可选依赖</li></ol><p>实际开发中，并不是需要的包都需要被依赖，有些包只需要在本项目中进行依赖，并不需要被外部引用到如测试用到的包，这是候就可以选 test 类型。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h2><p>是在project元素下项目管理元素，在这标签下添加的项目座标会自动添加到项目中。<br>dependency 包含元素：</p><ul><li>type:依赖类型，对应于项目座标的packageing，一般不写。</li><li>scope：依赖范围</li><li>doptional：标记依赖是赖可选</li><li>exclusions：用来排除传递性依赖</li></ul><p>scope 属性：</p><ol><li>test: 测试的时候需要这个依赖，编译、打包、发布这个依赖都不会被生效。比如junit。</li><li>compile: 编译、打包有效，其他都无效。</li><li>runtime: 运行时有效，其他都无效。</li><li>provided: 编译和测试过程中有效，最后生成war不会加入依赖，如servlet-api tomcat有带，打包时就没必要了，只在测试时添加就可以了。</li><li>system: 特殊，这个使用的时本地的依赖，不使用maven仓库。</li></ol><p>默认是compile。假设如果，scope是依test，不会产生依赖。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>项目依赖是管理项目非常用的方式，也非常简便，实际开发中非常常用这种方式。但是如果多项目中的引用存在不同的版本，也会产生版本引用冲突，maven 一般是通过就近原则解决这个问题，我们也可以通过排除不需要的项目依赖来解决这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
            <tag> 项目构建 </tag>
            
            <tag> 项目依赖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven 安装</title>
      <link href="posts/5e421f68.html"/>
      <url>posts/5e421f68.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h2><p>官网 <a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>wget <a href="https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz">https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</a></p></blockquote><h2 id="配置maven环境变量"><a href="#配置maven环境变量" class="headerlink" title="配置maven环境变量"></a>配置maven环境变量</h2><blockquote><p>export MAVEN_HOME=/data/apache-maven-3.6.3<br>export PATH=${MAVEN_HOME}/bin:${PATH}</p></blockquote><h2 id="配置maven本地仓库的位置"><a href="#配置maven本地仓库的位置" class="headerlink" title="配置maven本地仓库的位置"></a>配置maven本地仓库的位置</h2><blockquote><p>vim /data/apache-maven-3.3.9/settings.xml<br>#设置本地仓库的位置<br><code>&lt;localRepository&gt;/data/maven/repo&lt;/localRepository&gt;</code></p></blockquote><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><blockquote><p>mvn -v<br>mvn clean</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> 项目构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven 项目模型</title>
      <link href="posts/15dcd314.html"/>
      <url>posts/15dcd314.html</url>
      
        <content type="html"><![CDATA[<h2 id="pom-xml-项目对象模型"><a href="#pom-xml-项目对象模型" class="headerlink" title="pom.xml 项目对象模型"></a>pom.xml 项目对象模型</h2><p>每一个项目都有一个pom.xml，Project Object Model，项目对象模型。<br>用面向对象的思维还看这个文件，它就是一个项目。<br>该文件用于管理：源代码、配置文件、开发者的信息和角色、问题追踪系统、组织信息、项目授权、项目的url、项目的依赖关系等等。</p><p>所有的pom.xml都要配置三个最基本的东西，其它的不配都没关系。下面的配置只需要知道即可，因为工具会自动生成。</p><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 固定的头部信息,不要去改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项目座标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>modelVersion: 永远的4.0.0，这个固定存在的。</li><li>groupId: 项目的项目组，就是把域名反转，一样的。如:com.test.study</li><li>artifactId: 项目中的哪一个模块。一般用&quot;项目名-模块名&quot;。如：study-frist</li><li>version: 快照版本一般是1.0-SNAPSHOT，或SNAPSHOT-0.0.1</li></ol><p>groupId、artifactId、version 还有一个作用，就是可以被其他的项目引用时，当作引用部头。这就是模块化的管项目管理理念。</p><h2 id="项目座标"><a href="#项目座标" class="headerlink" title="项目座标"></a>项目座标</h2><h3 id="什么是项目座标"><a href="#什么是项目座标" class="headerlink" title="什么是项目座标"></a>什么是项目座标</h3><p>项目座标，是为了让别人maven项目在引用当前项目时可以定位到的信息。这就是项目座标的意义。<br>两个项目之前之所以可以互相调用就是因为项目座标起了作用，maven通过识别项目座标来识别项目中的信息包括版本，包路径之类的信息。<br>注意，不要陷入理解的误区，maven是项目和管理的工具，但他不是项目的一部分。maven通过pom.xml识别项目信息从而帮助项目进行添加、打包、引用等操作，但不代表java项目代码本身会被maven影响，只是项目的构建形式不同了而已。项目是项目、代码是代码，不要混为一谈。maven做的是项目构造方面的操作，而不是代码的操作，仔细分析maven的功能，没有一个是对会代码产生影响的，maven的操作都是对项目构建产生影响。</p><h3 id="项目座标命名规则"><a href="#项目座标命名规则" class="headerlink" title="项目座标命名规则"></a>项目座标命名规则</h3><p>1.GroupID是分组ID，以包名方式命名，实际上就是命名空间的作用。惯例以部门命名。</p><blockquote><p>com.company.department<br>com.test.cash<br>com.test.deployment</p></blockquote><p>2.ArtifactID就是项目的唯一的标识符,也就是模块名称。实际对应项目的名称，</p><blockquote><p>admin        //view层<br>bussiness        //service、dao<br>commont        //公共代码库</p></blockquote><p>问题：不同的项目之前的部门名称可以相同，只是ArtifactID 不同可以吗？<br>答案是的，以模块的思想去看待。不同的项目只是不同的模块，把每一个不同的项目看成是不同功能的模块但是他们是同属于一个项目下的，所以可以以同一个GroupID命名。</p><p>3.引用项目座标</p><p>A项目的pom.xml中项目座标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>B项目引用A项目座标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- A项目的项目座标 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用：B项目即可引用A项目中的类了进行使用了。</p><h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line"> <span class="comment">&lt;!-- 固定的头部信息,不要去改变 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 项目座标 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>                //打包格式</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--插件信息，配完以后，maven会自动去下载。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> 项目构建 </tag>
            
            <tag> 项目模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven 概念</title>
      <link href="posts/f7d15fa4.html"/>
      <url>posts/f7d15fa4.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>maven 是用于项目构建 和 包管理的工具。<br>maven 只对项目构建进行影响，但是不会对java编码、代码产生任何的影响。</p><h2 id="maven有什么用"><a href="#maven有什么用" class="headerlink" title="maven有什么用"></a>maven有什么用</h2><ol><li>项目构建</li><li>包管理</li></ol><p>maven属于工具，下载安装后也需要配置path。非常简单。<br>而对maven的使用就是在使用maven的操作规范的情况下，用cmd输入maven命令即可。</p><p>使用maven必须在有网络的情况下，否则不可能成功。因为maven是自动去中央仓库中下载插件的，并把插件下到本地仓库中。</p><p>推荐书 《maven实战》</p><p>学习maven必须要有两个新概念要劳记：<br>1.模块<br>2.版本</p><p>大概摸到maven 命令的规律，maven的命令一般以模块或插件为基础比如</p><blockquote><p>mvn eclipse:eclipse        //生成eclipse 项目<br>mvn assembly:singl -DdescriptorId=project        //mvn 插件:插件模块 <code>-D</code>参数<br>maven 的perperties 标签可以影响到作域，在.properties 文件中用<code>$&#123; &#125;</code>可以取到sitting.xml中的值，如果是pom中的properties标签是否也能被取到。</p></blockquote><h2 id="maven公共仓库"><a href="#maven公共仓库" class="headerlink" title="maven公共仓库"></a>maven公共仓库</h2><p><a href="http://www.mvnrepository.com/">www.mvnrepository.com</a></p><h2 id="maven-项目结构"><a href="#maven-项目结构" class="headerlink" title="maven 项目结构"></a>maven 项目结构</h2><p>假设一个测试名为TestMaven的新项目来说明。src目录和一个pom.xml的配置文件。后面根据程序运行会有新目录产生。<br>1.项目目录下的结构三个同级：</p><blockquote><p>TestMaven\pom.xml        项目模型文件<br>TestMaven\src                代码存放处<br>TestMaven\target        生成的报告、class文件、jar包都在这里。不要把这个更新到svn中去。</p></blockquote><p>2.src目录下固定必须是main 和 test 不能有任何不同。<br>所有的代码必须放在java目录中。可以从java目录开始建包。</p><blockquote><p>\src\main\java        正式的JAVA代码，这是规定。<br>\src\main\resources        放资源文件，比如spring.xml、log4j这些配置。这个文件夹自己创建。<br>\src\test\java        所有测试项目都放这里。<br>\src\test\resources        放测试文件的配置。<br>\src\test\webapp        所有web文件，js、jsp之类下面包含的还是WEB-INFO。不要被名字搞蒙。</p></blockquote><p>这些在Effective pom 中可以查看</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>clean</li><li>compile</li><li>pacakge</li><li>install</li><li>test</li><li>archetype</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>项目之前存在继承关系<br>子项目可以继承父项目的配置。<br>在 maven 中，不同项目之前存在依赖时，其父项目中的配继，是可以被子项目继承的。</p><h2 id="仓库位置"><a href="#仓库位置" class="headerlink" title="仓库位置"></a>仓库位置</h2><p>maven 仓库有两种意思:</p><ol><li>本地仓库</li><li>中央仓库</li></ol><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><p>本地仓库的作用就是保存pom.xml中配置的插件的jar包从网上下载下来存在本地。<br>默认的位置：</p><blockquote><p>${USER}/.m2</p></blockquote><h3 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h3><p>默认仓库，这个就是所有maven的中心了，pom.xml配置后之所以能自动下载，原因就是配置文件通过地址去中央仓库中去把jar包下载到本地的。本地的jar包就是这么来的。中央仓库的地址是可以自定义的。网上有很多第三方的maven仓库。公司里的所谓maven私服也是这个道理，私服中放了很多平时需要用的jar包，从公司下比从网上下要快。</p><h3 id="查找顺序"><a href="#查找顺序" class="headerlink" title="查找顺序"></a>查找顺序</h3><p>先查找本地仓库，再查找远程仓库。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> 项目构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-代理模式 静态代理模式</title>
      <link href="posts/7c6993c.html"/>
      <url>posts/7c6993c.html</url>
      
        <content type="html"><![CDATA[<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="三个角色"><a href="#三个角色" class="headerlink" title="三个角色"></a>三个角色</h3><p>静态代理的条件至少有三个角色</p><ol><li>真实角色(RealObject)</li><li>代理角色(ProxyObject)</li><li>接口这三个(AbstractObject)</li></ol><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ol><li>真实角色与代理角色实现相同的接口。</li><li>代理类要持有真实角色的引用。<br>重点：真实角色、代理角色、接口的关系。代理接口实际上是抽象出所有真实角色的共有方法。</li></ol><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>1.创建真实角色<br>2.创建代理角色<br>3.代理角色.方法()。</p><p>注意：代理模式是要让代理类来使用委托类，所以是通过 new 代理类，在代理类中使用委托类，有点像回调函数的用法。</p><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述：测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015年11月13日 下午3:47:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ServiceImpl serviceImpl = <span class="keyword">new</span> ServiceImpl();</span><br><span class="line">IService iService = (IService) Proxy.getInstance(serviceImpl);</span><br><span class="line">iService.say();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述：代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015年11月13日 下午3:47:19 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IService</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> IService iService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(IService iService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.iService = iService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Proxy.say()&quot;</span>);</span><br><span class="line">iService.say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IService <span class="title">getInstance</span><span class="params">(ServiceImpl object)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Proxy(object);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述：实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015年11月13日 下午3:47:27 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">IService</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ServiceImpl.say()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述：接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015年11月13日 下午3:47:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态代理类优缺点"><a href="#静态代理类优缺点" class="headerlink" title="静态代理类优缺点"></a>静态代理类优缺点</h3><ol><li><p>优点：业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。</p></li><li><p>缺点：</p></li><li><p>代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。</p></li><li><p>如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> design </category>
          
          <category> 设计模式 </category>
          
          <category> proxy </category>
          
          <category> 代理模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 代理模式 </tag>
            
            <tag> 静态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 变量</title>
      <link href="posts/58139.html"/>
      <url>posts/58139.html</url>
      
        <content type="html"><![CDATA[<h2 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h2><p>shell 是解释型的语言，类似的有python。<br>shell 是没有类型的，分<code>局部变量</code> 和 <code>环境变量</code></p><ol><li>局部变量，只在创建shell 的脚本中命名用，其他shell不能访问</li><li>环境变量，在当前用户或系统环境中生效</li></ol><p>转义字符在 &quot; &quot; 中是起做用的<br>bash 只支持 整数 和 字符串，不支持浮点数，如果要使用浮点数，需要借助 bc。</p><h2 id="定义和引用变量"><a href="#定义和引用变量" class="headerlink" title="定义和引用变量"></a>定义和引用变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 声明变量时，不要出现空格</span></span><br><span class="line">A=123456</span><br><span class="line">B=&#x27;TEST&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用一个变量使用 $变量名</span></span><br><span class="line">echo $A</span><br></pre></td></tr></table></figure><p>定义变量时，变量名不加<code>$</code>，而在使用变量时，需要加<code>$</code>，格式：<code>$test_var</code></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>变量名和等号之间不能有空格，切记很多时候问题就是出在这里。</p><p>变量名的命名须遵循如下规则：</p><ol><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线 <code>_</code>。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ol><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><p>声明变量后，要需要将变量输出，输出变量需要使用 <code>echo $变量名</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">A=123456      #定义，变量名 和 字面量 前后都一定不可以用空格，否则被当做命令，报错</span><br><span class="line">B=TEST        #不加&quot; &quot; 或 &#x27;&#x27;，合法，正常输出不报错。</span><br><span class="line">echo $A       #引用变量</span><br><span class="line">echo $B</span><br><span class="line">echo $&#123;b&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果</p><blockquote><p>123456<br>TEST</p></blockquote><p>在控制台中 $A，不打印任务字符，要 echo $A 才正常输出。</p><h2 id="变量计算"><a href="#变量计算" class="headerlink" title="变量计算"></a>变量计算</h2><p>1.变量计算</p><blockquote><p>` ` 等价于 $( )</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">a=100;</span><br><span class="line">b=200;</span><br><span class="line">echo $(($a+$b))        #最外层也需要一个$，表示结果是一个变量</span><br><span class="line">echo $((1+2*3))</span><br></pre></td></tr></table></figure><p>2.浮点数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">c=$(echo &quot;1.1+2.2&quot; | bc)</span><br><span class="line">echo $c</span><br><span class="line"></span><br><span class="line">d=`echo &quot;1.1+2.2&quot; | bc`        #等价操作</span><br><span class="line">echo $d</span><br></pre></td></tr></table></figure><p>3.加减乘除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="meta">$</span><span class="bash">[a + b]</span></span><br></pre></td></tr></table></figure><p>4.重要的计算，用这种 expr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`expr $a + $b`</span><br><span class="line">echo &quot;a + b : $val&quot;</span><br></pre></td></tr></table></figure><p>5.逻辑运算符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-f         # 文件</span><br><span class="line">-d         # 目录</span><br><span class="line"></span><br><span class="line">-eg        # =</span><br><span class="line">-ne        # !=        not equals</span><br><span class="line">-lt        # &lt;</span><br><span class="line">-gt        # &gt;</span><br><span class="line">-le        # &lt;=</span><br><span class="line">-ge        # &gt;=</span><br><span class="line"></span><br><span class="line">-a         # and</span><br><span class="line">-o         # or</span><br><span class="line"></span><br><span class="line">-z         # 空字符串</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 编写Hello World</title>
      <link href="posts/55717.html"/>
      <url>posts/55717.html</url>
      
        <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>Shell 是一个用 C 写的程序，用于和内核做交互。是一种命令式的语言。解释执行。<br><code>Shell</code> 和 <code>Shell脚本</code>是两个概念。一般 shell 是指 Shell Script 即 Shell 脚本。</p><p>Shell 可以理解成命令的集合，即把命令集合在一个文件，就是脚本，称shell脚本。<br>Bash Shell 最常用<br>echo $BASH 查看当前的 Shell</p><p>控制台命令行就是一个 shell。<br>脚本就是一个命令行的集合，和在控制台输入的效果是一样的。但是脚本可以保存这些命令，提升率效。<br>linux 的文件不需要后缀，所以 .sh 可有可无。</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>创建一个测试文件 <code>test.sh</code> 然后执行 <code>sh test.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello World !&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>Hello World</p></blockquote><p>你会现，这里我并没有 chmod o+x test.sh 也能执行，网上很多文章说需要先修改执行权，这个后面说明。</p><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><p>1.作为解释器参数</p><p><code>#!</code>必须加这个头！！！！，则文件会以shell脚本形式执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br></pre></td></tr></table></figure><h2 id="使用-执行"><a href="#使用-执行" class="headerlink" title="使用 ./ 执行"></a>使用 ./ 执行</h2><p>每个文件必须赋于执行权，才可以使用 <code>./</code> 执行。</p><p>1.加执行权限</p><blockquote><p>chmod o+x test.sh<br>./test.sh</p></blockquote><p>2.如果不使用 chmod，会报错</p><blockquote><p>./test.sh<br>-bash: ./test.sh: 权限不够</p></blockquote><h2 id="使用-bash-运行"><a href="#使用-bash-运行" class="headerlink" title="使用 bash 运行"></a>使用 bash 运行</h2><p>使用<code>bash</code> 不需要 chmod 就可以执行，bash 是系统默认的shell执行器。</p><blockquote><p>sh test.sh</p></blockquote><p>同样可以执行</p><blockquote><p>/bin/sh _test.sh<br>/bin/bash test.sh</p></blockquote><h2 id="sh-和-的区别"><a href="#sh-和-的区别" class="headerlink" title="sh 和 ./ 的区别"></a>sh 和 ./ 的区别</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用 ./"></a>使用 ./</h3><p>./是执行当前的文件，当前的文件创建了出来只是个普通文件，所以当然需要赋值。</p><h3 id="使用-sh"><a href="#使用-sh" class="headerlink" title="使用 sh"></a>使用 sh</h3><p>sh是一个shell<br>表示将文件直接交给 bash 来执行<br>运行sh a.sh，表示我使用sh来解释这个脚本；<br>如果我直接运行./a.sh，首先你会查找脚本第一行是否指定了解释器，如果没指定，那么就用当前系统默认的shell(大多数linux默认是bash)，如果指定了解释器，那么就将该脚本交给指定的解释器</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-启动Nameserver</title>
      <link href="posts/59058.html"/>
      <url>posts/59058.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nameserver"><a href="#Nameserver" class="headerlink" title="Nameserver"></a>Nameserver</h2><h3 id="启动-nameserver"><a href="#启动-nameserver" class="headerlink" title="启动 nameserver"></a>启动 nameserver</h3><p>指定输出日志位置，未指定则目志在当前目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh mqnamesrv &gt; ~/logs/rocketmqlogs/namesrv.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>//ubuntu 下加 sudo 反而报错。最简单的命令：<br>nohup sh mqnamesrv &amp;</p><p>内存不足处理：<br>nameserver 内存不足时修改 runserver.sh，测试管用<br>JAVA_OPT=&quot;${JAVA_iOPT} -server -Xms512m -Xmx512m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=256m&quot;</p><p>验证启动成功</p><p>jobs 或 jps            //查看启动情况<br>NamesrvStartup           //nameserver 启动<br>BrokerStartup          //broker 启动<br>nohup.out        //未指定日志文件输出位置，则生成到执行 nohup 的当前目录下</p>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rocketmq </tag>
            
            <tag> Nameserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse+tomcat的问题能启动，但量不能访问</title>
      <link href="posts/13933.html"/>
      <url>posts/13933.html</url>
      
        <content type="html"><![CDATA[<p>今天还发现了一种情况tomcat起不来，配置是默认的，就是下面两张图的第一张图的配置。但是就是起不来，原因是web.xml配置有问题也会出现这种情况。</p><p>如果，按钮是灰的不能选择，那就把包含的项目先删掉，再clean一下就可以。</p><p>原来的解决方法：<br>tomcat启动了但是却访问不了是因为：<br><img src="/posts/13933/1.png" alt="原来配置"><br>改成以下即可：<br><img src="/posts/13933/2.png" alt="原来配置"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法 学习算法很简单</title>
      <link href="posts/45776.html"/>
      <url>posts/45776.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多非科班和科班的朋友看到算法就头疼，因为这东西学起来困难，也不常用，唯二的两个做用，面试和装B，一个能赚钱，一个能爽，但是学习路线太过陡峭，不是不想学，而是感觉入地无门。<br>其实凡事都有技巧，难是因为不够了解它，就好像追不到女孩子其实不是你不够好，而是你不够了解对方。<br>当然，开篇严肃一些，后面会慢慢把一些不容易理解的，化繁为简，包教包会，不会不退学费，本来也没人给我钱^.^。</p><p>首先我先说明我对学习的观点，学习一项技能，没有聪明之分，只有用不用心。<br>如果在自己没有达到可以称之为努力的程序，千万不要跟自己谈天赋，自己学没有达到能谈天赋的地步。<br>如果实在学不下去，不要骗自己，你就是抗拒学习这件事，而不是学不会。</p><p>如果算法还没有到了让你非学不可，也不要骗自己，是浪费时间。还不如去玩游戏、陪女朋友。但是如果现在非常迫切，已经到了非学不可，比如考试、面试，那就逼自己一把，不要轻易放弃自己。</p><h2 id="一、数据结构和算法"><a href="#一、数据结构和算法" class="headerlink" title="一、数据结构和算法"></a>一、数据结构和算法</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>是计算机存储、组织数据的方式。<br>数据结构往往同高效的检索算法和索引技术有关。</p><p>数据结构在计算机科学界至今没有标准的定义。<br>通常：<br>&quot;数据结构是数据对象，以及存在于该对象的实例合组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。&quot;<br>例如数组、集合、栈、队列、树、图都是数据结构。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>是在有限步骤内求解某一问题所使用的一组定义明确的规则。<br>通俗点说，就是计算机解题的过程。<br>在这个过程中，无论是形成解题思路还是编写程序，都是在实施某种算法。前者是推理实现的算法，后者是操作实现的算法。<br>一个算法应该具有以下五个重要的特征：</p><ol><li>有穷性： 一个算法必须保证执行有限步之后结束；</li><li>确切性： 算法的每一步骤必须有确切的定义；</li><li>输入：一个算法有0个或多个输入，以刻画运算对象的初始情况，所谓0个输入是指算法本身定除了初始条件；</li><li>输出：一个算法有一个或多个输出，以反映对输入数据加工后的结果。没有输出的算法是毫无意义的；</li><li>可行性： 算法原则上能够精确地运行，而且人们用笔和纸做有限次运算后即可完成。</li></ol><h2 id="二、问题规模"><a href="#二、问题规模" class="headerlink" title="二、问题规模"></a>二、问题规模</h2><p>就是所要解决的问题，它的规模。<br>1+2+3 是一个规模<br>1+2+3...+10 是一个规模<br>问题规模与核心操作次数，决定了这个算法的复杂度。</p><h2 id="三、时间复杂度-和-空间复杂度"><a href="#三、时间复杂度-和-空间复杂度" class="headerlink" title="三、时间复杂度 和 空间复杂度"></a>三、时间复杂度 和 空间复杂度</h2><p>这两个概念应该是很多非科班出身的程序员最难理解的，网上很多文章都讲的太云里雾里，其实没有那么难，化繁为简的讲明白才有用。<br>这两个概念就是的意义是什么才是关键，后面专门去说这两个概念。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体现，只需要先了解这么多即可，慢慢推进。<br>学习的第一步是在于不要骗自己，真的要学习，好好静下心来学习。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List分组</title>
      <link href="posts/18798.html"/>
      <url>posts/18798.html</url>
      
        <content type="html"><![CDATA[<p>对一个 List 里面相同属性的内容进行分类，如：对相同部门的员工进行分类。<br>思路是使可以区分类型的属性进行分类，以部门类型为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Devloper&gt; devlopers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">1</span>, <span class="string">&quot;嗯哼&quot;</span>, <span class="number">1</span>));</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">2</span>, <span class="string">&quot;啊哈&quot;</span>, <span class="number">1</span>));</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">3</span>, <span class="string">&quot;哦吼&quot;</span>, <span class="number">1</span>));</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">4</span>, <span class="string">&quot;呃呵&quot;</span>, <span class="number">2</span>));</span><br><span class="line">devlopers.add(<span class="keyword">new</span> Devloper(<span class="number">5</span>, <span class="string">&quot;呜唿&quot;</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, List&lt;Devloper&gt;&gt; devloperMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Devloper devloper: devlopers) &#123;</span><br><span class="line"><span class="keyword">if</span> (devloperMap.containsKey(devloper.getDept())) &#123;</span><br><span class="line">devloperMap.get(devloper.getDept()).add(devloper);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">List&lt;Devloper&gt; devs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">devs.add(devloper);</span><br><span class="line">devloperMap.put(devloper.getDept(), devs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a><strong>结果：</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">1=[</span><br><span class="line">Devloper&#123;id=1, name=&#x27;嗯哼&#x27;, dept=1&#125;, </span><br><span class="line">Devloper&#123;id=2, name=&#x27;啊哈&#x27;, dept=1&#125;, </span><br><span class="line">Devloper&#123;id=3, name=&#x27;哦吼&#x27;, dept=1&#125;</span><br><span class="line">], </span><br><span class="line">2=[</span><br><span class="line">Devloper&#123;id=4, name=&#x27;呃呵&#x27;, dept=2&#125;, </span><br><span class="line">Devloper&#123;id=5, name=&#x27;呜唿&#x27;, dept=2&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 安装、基本使用</title>
      <link href="posts/62b88c69.html"/>
      <url>posts/62b88c69.html</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS-下安装-nginx"><a href="#CentOS-下安装-nginx" class="headerlink" title="CentOS 下安装 nginx"></a>CentOS 下安装 nginx</h2><p>国内CentOS用的比较多，大部份都是在CentOS下安装。<br>使用的 nginx 版本<code>nginx-1.15.10.tar.gz</code></p><p>官网上有三种版本：Mainline version、Stable version、Legacy versions<br>网上推荐用 Stable 稳定版</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>前提是已安装了主要三个依赖包: pcre、openssl、zlib</p><p>如果没有安装，使用下面的命令装一遍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><p><img src="/posts/62b88c69/%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96.jpg" alt="安装依赖"></p><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><p>先到官网上下选择自己需要的版本</p><p><img src="/posts/62b88c69/%E5%AE%98%E7%BD%91.jpg" alt="官网"></p><p>我通常直接在这个页面选择下载  <a href="http://nginx.org/download/">http://nginx.org/download/</a> ，这上面全是，找一个合适 wget 一下。</p><p><img src="/posts/62b88c69/%E4%B8%8B%E8%BD%BD%E5%88%97%E8%A1%A8.jpg" alt="下载列表"></p><p>./configure --prefix=/usr/local/nginx  加不加前缀都在这个目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.15.10.tar.gz  </span><br><span class="line">tar -zxvf nginx-1.15.10.tar.gz</span><br><span class="line">cd nginx-1.15.10/</span><br><span class="line">./configure</span><br><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure><p>执行 <code>./configure</code> 后已经有提示路径了：</p><p><img src="/posts/62b88c69/config.jpg" alt="config"></p><p>你也可以在预编译阶段直接指定用户、安装目录等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">-user=www  #添加一个用户</span><br><span class="line">-group=www #添加一个用户组</span><br><span class="line">-prefix=/usr/local/nginx        #文件生成目录</span><br><span class="line">--with-http_ssl_model           #添加 ssl 模块</span><br></pre></td></tr></table></figure><p>安装成功后主目录:</p><blockquote><p>/usr/local/nginx/</p></blockquote><p>如果不知道目录在哪里，可以通过<code>whereis</code> 命令来定位<code>nginx</code>命令所以位置，也就是<code>nginx</code>的安装目录。</p><h3 id="添加-nginx-用户"><a href="#添加-nginx-用户" class="headerlink" title="添加 nginx 用户"></a>添加 nginx 用户</h3><p>添加这个用户主要是用应用账户隔离，每一个应用通过用户来控制它的权限，这样也是为了安全考虑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd nginx</span><br></pre></td></tr></table></figure><hr><h2 id="启停服务"><a href="#启停服务" class="headerlink" title="启停服务"></a>启停服务</h2><p>niginx 的安装目下有4个目录分别是：</p><blockquote><p>/usr/local/nginx/sbin<br>/usr/local/nginx/conf<br>/usr/local/nginx/html</p></blockquote><h3 id="sbin-目录"><a href="#sbin-目录" class="headerlink" title="sbin 目录"></a>sbin 目录</h3><p>存放<code>niginx</code>命令，也是nginx的主要操作命令</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动可以直接使用nginx命令，这种方式使用默认配置文件启动<br>默认配置文件路径：/usr/local/nginx/conf/nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>或者下面这个命令，效果一样，看个人习惯。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>指定配置文件启动，参数: <code>-c</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>测试启动，参数：<code>-t</code> 测试<br>如果测试问题会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><h3 id="进程验证"><a href="#进程验证" class="headerlink" title="进程验证"></a>进程验证</h3><p>启动后，怎么看成功没成功，直接访问一下？生成环境下很多是没有开外网访问的。直接访问肯定不行。<br>内网访问？云主机的内网浏览器访问不到。</p><p>1.直接查进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>root     17014     1  0 18:16 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx<br>root     17162 14260  0 19:22 pts/0    00:00:00 grep nginx</p></blockquote><p>2.查端口</p><p>默认使用80端口，直接看下80端口是不是<code>LISTEN</code>状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -na | grep 80</span><br></pre></td></tr></table></figure><blockquote><p>tcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure><blockquote><p>tcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      17014/nginx</p></blockquote><p>查看日志，也果没有 ERROR 就是启动成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail logs/error.log</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>参数：<code>-s</code></p><p>-s 代表向主线程发送信号，有4种信号：stop、quit、reopen、reload<br>这个参数也做到平滑重启，如果当前有用户连接，不断开用户连接。会再开线程处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><p>web服务器，不是web服务，基本上不需要持久化，直接杀死线程就可以。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>从容停止   kill -QUIT 主进程号<br>快速停止   kill -TERM 主进程号<br>强制停止   kill -9 nginx</p><p>不知道区别在哪</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>console 的一些常用命令</title>
      <link href="posts/c6686eb3.html"/>
      <url>posts/c6686eb3.html</url>
      
        <content type="html"><![CDATA[<p>linux 的命令行用了这么久的 linux 才开始整理这部分的内容，该罚站</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctrl + w    #往回删除一个单词，光标放在最末尾</span><br><span class="line"></span><br><span class="line">ctl + u     #删除光标以前的字符，其实这个是剪切</span><br><span class="line">ctl + k     #删除光标以后的字符</span><br><span class="line"></span><br><span class="line">ctrl + y    #粘贴由 ctrl+u 和 ctrl+w 剪走的单词</span><br><span class="line">ctrl + d    #从当前位置开始，向右边删除字符</span><br></pre></td></tr></table></figure><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl + l    #清屏</span><br><span class="line">ctrl + c    #另起一行</span><br></pre></td></tr></table></figure><h3 id="光标位置"><a href="#光标位置" class="headerlink" title="光标位置"></a>光标位置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctl + a     #移动光标至的字符头</span><br><span class="line">ctl + e     #移动光标至的字符尾</span><br><span class="line">ctrl + ?    #撤消前一次输入</span><br><span class="line"></span><br><span class="line">ctrl + s 锁住终端    #实际上只是不显示字符而已，命令照样执行。</span><br><span class="line">ctrl + q 解锁终端</span><br></pre></td></tr></table></figure><h3 id="历史和命令"><a href="#历史和命令" class="headerlink" title="历史和命令"></a>历史和命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl + r    #输入单词搜索历史命令，超好用</span><br><span class="line">ctrl + o    #重复执行命令</span><br></pre></td></tr></table></figure><h3 id="屏幕输出"><a href="#屏幕输出" class="headerlink" title="屏幕输出"></a>屏幕输出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+S      #暂停屏幕输出</span><br><span class="line">Ctrl+Q      #继续屏幕输出</span><br></pre></td></tr></table></figure><h3 id="上下翻屏"><a href="#上下翻屏" class="headerlink" title="上下翻屏"></a>上下翻屏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个是找了N久才查到的命令</span><br><span class="line">shift + pageUp/pageDown        #纯linux console 下测试有效，但不能一翻到顶，网上说只能翻最近15页</span><br><span class="line">shift + home/end               #只有 xshell 下可用</span><br><span class="line">shift + 上/下                  #xshell 下可用</span><br></pre></td></tr></table></figure><h3 id="连续执行命令"><a href="#连续执行命令" class="headerlink" title="连续执行命令"></a>连续执行命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo commond 1 ; echo commond 1   #用 ; 分隔,不论前面成功失败，每条都会执行</span><br><span class="line">commond 1 &amp;&amp; commond 1        #第一条成功则后面执行</span><br><span class="line">commond 1 || commond 1        #第一条失败，才执行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> console </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> console </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冲突域</title>
      <link href="posts/41169.html"/>
      <url>posts/41169.html</url>
      
        <content type="html"><![CDATA[<h2 id="冲突域-collision-domain"><a href="#冲突域-collision-domain" class="headerlink" title="冲突域 collision domain"></a>冲突域 collision domain</h2><blockquote><p>核心：冲突域是在同一个网络上两个比特同时进行传输则会产生冲突；</p></blockquote><p>先说人话：多N台计算机使连接在同一个集线器设备中，并同时往集线器发送数据要通过这个设备出去，但是这个设备同一时间内只能发送一个计算机的数据，所以会产生冲突。(便宜货就是问题多)</p><h3 id="1-简述"><a href="#1-简述" class="headerlink" title="1.简述"></a>1.简述</h3><p>冲突域是在同一个网络上两个比特同时进行传输则会产生冲突；在网路内部数据分组所产生与发生冲突的这样一个区域称为冲突域，</p><p>所有的共享介质环境都是一个冲突域，在共享介质环境中一定类型的冲突域是正常行为。总的来说,冲突域就是连接在同一导线上的所有工作站的集合,或者说是同一物理网段上所有节点的集合,或以太网上竞争同一带宽的节点集合.<br>一个交换机的端口就是一个冲突域。交换机本身就是一个冲突域，只不过，能隔离广播包。<br>物理原因：因为集线器这种设备比较低端，在交互机还没有出现的时候，使用集线器，集线器不具有路由选择功能，只是将接收到的数据以广播的形工发出，会产生广播风暴。</p><h3 id="2-为什么会有冲突"><a href="#2-为什么会有冲突" class="headerlink" title="2.为什么会有冲突"></a>2.为什么会有冲突</h3><p>如果同一时刻有两台设备试图传输数据，将导致冲突，而这两台设备必须分别重传数据，因此效率不高!这种情形通常出现在使用集线器的网络环境中一一与某个集线器相连的所有主机都属于同一个冲突域，且属于同一个广播域。与此相反，交换机的每个端口都是一个独立的冲突域。(也就是说，一个端口一个冲突域，这样就隔离了冲突域？)</p><p>集线器连接的计算机设备是冲突域，集线只能做连接，没有罗辑分段的功能。</p><p>一个使用集线器连接的基本 LAN 网络，它实际上只有一个冲突域和一个广播域。</p><p>所以，如果一个交换机的端口上没有连接使用了集线器的网络，那么一个端口一般只连接一台主机，那就没有冲突的可能了，就算使用了集线器的网络也没关系，如果发生了冲突，则不往外广播冲突包，冲突就在冲突域端口内部自行转发就完事了。</p>]]></content>
      
      
      <categories>
          
          <category> network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射03-查看方法修饰符</title>
      <link href="posts/619a787a.html"/>
      <url>posts/619a787a.html</url>
      
        <content type="html"><![CDATA[<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>通过反射可以获取类的<strong>修饰符</strong>，主要方法： <code>Class.getModifiers()</code> 返回一个用于描述<code>Field</code>、<code>Method</code>和<code>Constructor</code>的修饰符的整形数值，该数值代表的含义可通过<code>Modifier</code>这个类分析。<br><code>Modifier</code> 类它提供了有关Field、Method和Constructor等的访问修饰符的信息，主要的方法有：<strong>toString(int modifiers);</strong><br>返回: <strong>整形</strong>数值modifiers代表的修饰符的字符串；</p><h3 id="查看类修饰符"><a href="#查看类修饰符" class="headerlink" title="查看类修饰符"></a>查看类修饰符</h3><p>使用 String.class 来验证一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取类的修改符</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2015-11-23 14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModifierTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class cl = String.class;</span><br><span class="line">        String modifiers = Modifier.toString(cl.getModifiers());</span><br><span class="line">        <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(modifiers + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><blockquote><p>public final</p></blockquote><p>来看一下 String 类的头部：</p><p><img src="/posts/619a787a/String%E7%9A%84%E7%B1%BB%E4%BF%AE%E9%A5%B0%E7%AC%A6.jpg" alt="String的类修饰符"></p><h3 id="判断是否为-public"><a href="#判断是否为-public" class="headerlink" title="判断是否为 public"></a>判断是否为 public</h3><p>方法:</p><blockquote><p>Reflection.quickCheckMemberAccess(clazz, modifiers);</p></blockquote><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class clz = String.class;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Method method = clz.getMethod(<span class="string">&quot;isEmpty&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> isPublic = Reflection.quickCheckMemberAccess(clz, method.getModifiers());</span><br><span class="line">    <span class="keyword">if</span> (isPublic) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;is public&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;is private&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><p>Reflection.quickCheckMemberAccess 的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@code</span> int&#125; value representing the &#123;<span class="doctag">@code</span> public&#125;</span></span><br><span class="line"><span class="comment"> * modifier.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PUBLIC           = <span class="number">0x00000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">quickCheckMemberAccess</span><span class="params">(Class&lt;?&gt; var0, <span class="keyword">int</span> var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Modifier.isPublic(getClassAccessFlags(var0) &amp; var1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPublic</span><span class="params">(<span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mod &amp; PUBLIC) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种用法在框架底层，如Spring 中有大量的用法。平时开发中虽然用到的少，但是学习一下有助于理解反射相关的机制和操作。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> reflect </category>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> reflect </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机原理：数组下标为什么从0开始</title>
      <link href="posts/e1a923d8.html"/>
      <url>posts/e1a923d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="为了记数方便"><a href="#为了记数方便" class="headerlink" title="为了记数方便"></a>为了记数方便</h2><p>注意这个红色的0，这里是从零开始。<br>内存地址是从<code>0</code>开始，如果内存上装载一个数据如int类型。<br>一个int类型是<code>4</code>个字节，那么假设一个int的 data_type_size=4。<br>那么数据的内存是连续的，那初始化5个数组就是：<br>int[] a = new int[5]，到这都很清楚吧。</p><blockquote><p>base_address = 1000</p></blockquote><p>那么假设首地址从1000开始，连边开5个内存地址就是：int[5]<br>公式</p><blockquote><p>a[i]_address = base_address + i * data_type_size</p></blockquote><p>那么来推一下：<br>下标：i=0 数组[0]：</p><blockquote><p>a[0]_address = base_address + 0 * data_type_size</p></blockquote><p>下标：i=1 数组[1]：</p><blockquote><p>a[1]_address = base_address + 1 * data_type_size</p></blockquote><p>最络结果是这样</p><p>i=0 { a[0] } 1000-1003<br>i=1 { a[1] } 1004-1007<br>i=2 { a[2] } 1008-1011<br>i=3 { a[3] } 1012-1016<br>i=4 { a[4] } 1016-1020</p><p>这有啥，不就是常规操作嘛，下面换个角度看。</p><h2 id="减少CPU指令运算"><a href="#减少CPU指令运算" class="headerlink" title="减少CPU指令运算"></a>减少CPU指令运算</h2><p>如果下标从1开始，base_address 这种内存地址还是从 1000 开始<br>下标：i=1 数组[1]：</p><blockquote><p>a[i]_address = base_address + (i-1) * data_type_size</p></blockquote><p>那就是</p><blockquote><p>a[1]_address = 1000 + (i-1) * 4</p></blockquote><p>有什么不一样吗？<br>不一样的地方就是多了一步<code>i-1</code> 的操作，-1 这个操作需要CPU额外多计算一次，这不就是费了一丝性能嘛。<br>在那个登月火箭的计算性能只有一个电子表的时代理，这一丢丢的性能损耗放大到一个工程里可是不小的损耗。<br>而且做为系统级别的设计，更是需要把性能压榨到最优。</p>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
          <category> principle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机原理 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射02-使用Class对象</title>
      <link href="posts/378dab4f.html"/>
      <url>posts/378dab4f.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>使用反射万事第一步，获取 <code>Class</code> 类。<br>获取Class对象的方式:</p><ol><li>Class.forName()</li><li>Class.class</li><li>Class.getClass()</li></ol><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><p>如何取得操作类的Class对象，常用的有三种方式：<br>使用Class的静态方法来获取一个要被反射的对象。</p><p>1.调用Class.forName();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class cls = Class.forName(<span class="string">&quot;com.test.Person&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用类的.class字节文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class&lt;?&gt; cls = String.class</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.调用对象的getClass方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String str = <span class="string">&quot;abc&quot;</span>；</span><br><span class="line">  Class&lt;?&gt; cls = str.getClass()；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证相同类型class是一个对象"><a href="#验证相同类型class是一个对象" class="headerlink" title="验证相同类型class是一个对象"></a>验证相同类型class是一个对象</h3><p>代码验证不同 class 获取<br>用来同的方式来获取，实际上都是同一个 Class 的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  TestClass testClass = <span class="keyword">new</span> TestClass();</span><br><span class="line">  Class clazz1 = TestClass.class;</span><br><span class="line">  Class clazz2 = testClass.getClass();</span><br><span class="line">  System.out.println(TestClass.class == clazz1);</span><br><span class="line">  System.out.println(TestClass.class == clazz2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>true<br>true</p></blockquote><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>创建对象需要使用到<code>newInstance</code>这个功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class&lt;User&gt; clazz = User.class;</span><br><span class="line">  User user = clazz.newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即便是泛型的对象也可以创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T1 <span class="title">convert</span><span class="params">(Class&lt;T1&gt; clazz)</span> </span>&#123;</span><br><span class="line">  T1 t = clazz.newInstance();</span><br><span class="line">  <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取对象类型"><a href="#获取对象类型" class="headerlink" title="获取对象类型"></a>获取对象类型</h2><p>获取 object 具体类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  TestInterface testInterface = <span class="keyword">new</span> TestInterfaceImpl();</span><br><span class="line">  String aaa = <span class="string">&quot;cccc&quot;</span>;</span><br><span class="line">  getObject(testInterface);</span><br><span class="line">  getObject(aaa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getObject</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">  System.out.println(object.getClass().getTypeName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><blockquote><p>com.liukai.auth.authorization.service.TestInterfaceImpl<br>java.lang.String</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> reflect </category>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> reflect </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-NameServer原理</title>
      <link href="posts/23688.html"/>
      <url>posts/23688.html</url>
      
        <content type="html"><![CDATA[<h2 id="NameServer-名字服务"><a href="#NameServer-名字服务" class="headerlink" title="NameServer 名字服务"></a>NameServer 名字服务</h2><blockquote><p>实际作就是就一个注册中心</p></blockquote><h3 id="NameServer-作用"><a href="#NameServer-作用" class="headerlink" title="NameServer 作用"></a>NameServer 作用</h3><p>在系统中肯定是做命名服务，服务治理方面的工作，功能应该是和zookeeper差不多<br>早期的版本中，使用的是 Zookeeper 做为配置中心，改名 RocketMQ 后使用了自己开发的 NameServer。<br>是一个几乎无状态的节点，可集群部署，节点之间无任何信息同步</p><p>两个主要做用</p><ol><li><strong>NameServer维护Broker</strong><br>NameServer 维护了一份 Broker 的地址列表和 Broker 在启动的时候会去 NameServer 进行注册，会维护 Broker 的存活状态。</li><li><strong>NameServer 维护Topic</strong><br>NameServer 维护了一份 Topic 和 Topic 对应队列的地址列表，Broker 每次发送的心跳过来的时候会把 Topic 信息带上。</li></ol><p> producer、consumer 发送消息会去 NameServer 去拉取路由信息</p><p><img src="/posts/23688/nameserver%E7%BB%93%E6%9E%84.png" alt="nameserver结构"></p><h3 id="NameServer-维护-Broker"><a href="#NameServer-维护-Broker" class="headerlink" title="NameServer 维护 Broker"></a>NameServer 维护 Broker</h3><p><strong>1.维护 Broker 信息</strong><br>broker 启动后，会连接到 NameServer，定期上报自身信息，NameServer 收到消息后会每 30秒 扫描一次所有已上报的 Broker 信息的心跳。<br>NameServer与每台Broker保持长连接，并间隔30S检测Broker是否存活，如果检测到Broker宕机，则从路由注册表中删除。<br>注意：<br>但是路由变化不会马上通知消息生产者Producer。<br>这样设计的目的是为了降低 NameServer 实现的复杂度，在消息发送端提供容错机制保证消息发送的可用性。</p><p><strong>2.判断 broker 失效</strong><br>以 NameServer自身 broker列表中的broker的更新时间，当前时间与最后更新时间差值超过2分钟，就判定为失效，移除失效 broker。这个后面带上源码分析。</p><p><strong>3.无状态性</strong><br>NameServer本身的高可用是通过部署多台NameServer来实现，但彼此之间不通讯，也就是NameServer服务器之间在某一个时刻的数据并不完全相同，但这对消息发送并不会造成任何影响，这也是NameServer设计的一个亮点</p><p>特点：</p><ol><li>互相独立，彼此没有通信关系，单台nameserver挂掉，不影响其他nameserver，即使全部挂掉，也不影响业务系统使用，这点类似于dubbo的zookeeper。</li><li>nameserver不会有频繁的读写，所以性能开销非常小，稳定性很高。</li></ol><p><strong>Broker</strong> 启动的时候会将自己注册到 NameServer 中，注册的同时还会将 Broker 的 IP 地址、端口相关的数据，以及保存在 Broker 中的 RocketMQ 集群路由的数据一并跟随<strong>心跳</strong>发送到 NameServer。这里的<strong>路由信息</strong>是指 Topic 下的 MessageQueue 分别都在哪台 Broker 上。</p><p>从代码是了解这一过程</p><p><strong>registerBroker</strong> 是<code>broker</code>注册、维护的主要逻辑，主要的几个集合：</p><ul><li><code>topicQueueTable</code> topic和broker对应关系</li><li><code>brokerAddrTable</code> broker信息</li><li><code>clusterAddrTable</code> 集群信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理 broker 相关事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteInfoManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);</span><br><span class="line">    <span class="comment">//broker 超时时间设置 120 秒，就是这个指定的，没有发现有给api修改</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> BROKER_CHANNEL_EXPIRED_TIME = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="comment">// topic 路由表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String<span class="comment">/* topic */</span>, List&lt;QueueData&gt;&gt; topicQueueTable;</span><br><span class="line">    <span class="comment">// broker 信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String<span class="comment">/* brokerName */</span>, BrokerData&gt; brokerAddrTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册 broker</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RegisterBrokerResult <span class="title">registerBroker</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String clusterName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String brokerAddr,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String brokerName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">long</span> brokerId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String haServerAddr,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> TopicConfigSerializeWrapper topicConfigWrapper,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> List&lt;String&gt; filterServerList,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> Channel channel)</span> </span>&#123;</span><br><span class="line">        RegisterBrokerResult result = <span class="keyword">new</span> RegisterBrokerResult();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.lock.writeLock().lockInterruptibly();</span><br><span class="line">                <span class="comment">//集群名称</span></span><br><span class="line">                Set&lt;String&gt; brokerNames = <span class="keyword">this</span>.clusterAddrTable.get(clusterName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == brokerNames) &#123;</span><br><span class="line">                    <span class="comment">//如果没有拿到 broker名，broker就用 clusterName</span></span><br><span class="line">                    brokerNames = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">                    <span class="keyword">this</span>.clusterAddrTable.put(clusterName, brokerNames);</span><br><span class="line">                &#125;</span><br><span class="line">                brokerNames.add(brokerName);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> registerFirst = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//brokerData 数据，第一次注册，并没有数据</span></span><br><span class="line">                BrokerData brokerData = <span class="keyword">this</span>.brokerAddrTable.get(brokerName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == brokerData) &#123;</span><br><span class="line">                    registerFirst = <span class="keyword">true</span>;</span><br><span class="line">                    brokerData = <span class="keyword">new</span> BrokerData(clusterName, brokerName, <span class="keyword">new</span> HashMap&lt;Long, String&gt;());</span><br><span class="line">                    <span class="keyword">this</span>.brokerAddrTable.put(brokerName, brokerData);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//key 是 0-n</span></span><br><span class="line">                Map&lt;Long, String&gt; brokerAddrsMap = brokerData.getBrokerAddrs();</span><br><span class="line">                <span class="comment">//Switch slave to master: first remove &lt;1, IP:PORT&gt; in namesrv, then add &lt;0, IP:PORT&gt;</span></span><br><span class="line">                <span class="comment">//The same IP:PORT must only have one record in brokerAddrTable</span></span><br><span class="line">                <span class="comment">//slave 切换到 master：删除1，再将slave改为0，add到brokerAddrTable</span></span><br><span class="line">                Iterator&lt;Entry&lt;Long, String&gt;&gt; it = brokerAddrsMap.entrySet().iterator();</span><br><span class="line">                <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                    Entry&lt;Long, String&gt; item = it.next();</span><br><span class="line">                    <span class="comment">//brokerAddr 申请注册的 broker</span></span><br><span class="line">                    <span class="comment">//去重，找到 IP:PORT 只允许一条存在，如果 IP:PORT 存在，ID不同，删除这一条</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != brokerAddr &amp;&amp; brokerAddr.equals(item.getValue()) &amp;&amp; brokerId != item.getKey()) &#123;</span><br><span class="line">                        it.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//上面删完，这里add进去，可以理解成更新操作</span></span><br><span class="line">                String oldAddr = brokerData.getBrokerAddrs().put(brokerId, brokerAddr);</span><br><span class="line">                registerFirst = registerFirst || (<span class="keyword">null</span> == oldAddr);<span class="comment">//返回旧值</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//处理 topic 的配置修改，如果是master，开发中topic经常会调整</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != topicConfigWrapper</span><br><span class="line">                    &amp;&amp; MixAll.MASTER_ID == brokerId) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.isBrokerTopicConfigChanged(brokerAddr, topicConfigWrapper.getDataVersion())</span><br><span class="line">                        || registerFirst) &#123;</span><br><span class="line">                        ConcurrentMap&lt;String, TopicConfig&gt; tcTable =</span><br><span class="line">                            topicConfigWrapper.getTopicConfigTable();</span><br><span class="line">                        <span class="keyword">if</span> (tcTable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (Map.Entry&lt;String, TopicConfig&gt; entry : tcTable.entrySet()) &#123;</span><br><span class="line">                                <span class="keyword">this</span>.createAndUpdateQueueData(brokerName, entry.getValue());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 省略部分代码</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.lock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;registerBroker Exception&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>topic 队列和 broker 的对应关系</strong></p><p>一个topic默认会有<code>16个队列(queue)</code>，队列(queue)会分布在<code>不同的broker</code> 上</p><p><img src="/posts/23688/topic-queue%E5%88%86%E5%B8%83.png" alt="topic-queue分布"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建、更新队列 brokerName 和 queue 的对应关系</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createAndUpdateQueueData</span><span class="params">(<span class="keyword">final</span> String brokerName, <span class="keyword">final</span> TopicConfig topicConfig)</span> </span>&#123;</span><br><span class="line">    QueueData queueData = <span class="keyword">new</span> QueueData();</span><br><span class="line">    queueData.setBrokerName(brokerName);</span><br><span class="line">    <span class="comment">//默认16</span></span><br><span class="line">    queueData.setWriteQueueNums(topicConfig.getWriteQueueNums());</span><br><span class="line">    <span class="comment">//默认16</span></span><br><span class="line">    queueData.setReadQueueNums(topicConfig.getReadQueueNums());</span><br><span class="line">    queueData.setPerm(topicConfig.getPerm());</span><br><span class="line">    queueData.setTopicSynFlag(topicConfig.getTopicSysFlag());</span><br><span class="line"></span><br><span class="line">    List&lt;QueueData&gt; queueDataList = <span class="keyword">this</span>.topicQueueTable.get(topicConfig.getTopicName());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == queueDataList) &#123;</span><br><span class="line">        queueDataList = <span class="keyword">new</span> LinkedList&lt;QueueData&gt;();</span><br><span class="line">        queueDataList.add(queueData);</span><br><span class="line">        <span class="keyword">this</span>.topicQueueTable.put(topicConfig.getTopicName(), queueDataList);</span><br><span class="line">        log.info(<span class="string">&quot;new topic registered, &#123;&#125; &#123;&#125;&quot;</span>, topicConfig.getTopicName(), queueData);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> addNewOne = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;QueueData&gt; it = queueDataList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            QueueData qd = it.next();</span><br><span class="line">            <span class="comment">//绑定队列对应的 brokerName</span></span><br><span class="line">            <span class="comment">//比如 broker1  TopicA---queue1</span></span><br><span class="line">            <span class="comment">//                      queue2</span></span><br><span class="line">            <span class="comment">//                      queue3</span></span><br><span class="line">            <span class="comment">//                      queue4</span></span><br><span class="line">            <span class="keyword">if</span> (qd.getBrokerName().equals(brokerName)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (qd.equals(queueData)) &#123;</span><br><span class="line">                    addNewOne = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic changed, &#123;&#125; OLD: &#123;&#125; NEW: &#123;&#125;&quot;</span>, topicConfig.getTopicName(), qd,</span><br><span class="line">                        queueData);</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (addNewOne) &#123;</span><br><span class="line">            queueDataList.add(queueData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>NameServer 其实就是抄的 kafka的注册中心，又搞的不像，两个节点之前状态不一致表面上说是开发简单，那实际用起来呢，再观望一下，不行我提个PR帮他们搞搞。</p>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mq </tag>
            
            <tag> RocketMQ原理 </tag>
            
            <tag> NameServer原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-Broker</title>
      <link href="posts/27731.html"/>
      <url>posts/27731.html</url>
      
        <content type="html"><![CDATA[<h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h2><p>作用：消息中转角色。<br>负责存储消息，转发消息。<br>一般也称为<code>Server</code>。在JMS规范中称为: <code>Provider</code>。</p><p>组成模式：<br>两两一组，四个，两主两从。<br>Master 干活，Slave 作为备节点，据说新版本会增加主备切换。</p><p>Broker 几个关键点：</p><ol><li>负载均衡</li><li>可用性</li></ol><h3 id="1-负载均衡"><a href="#1-负载均衡" class="headerlink" title="1.负载均衡"></a>1.负载均衡</h3><ol><li>一个topic分布在多个broker上，一个broker可以配置多个topic，它们是多对多的关系。</li><li>如果某个topic消息量很大，应该给它多配置几个队列，并且尽量多分布在不同broker上，减轻某个broker的压力。</li><li>topic消息量都比较均匀的情况下，如果某个broker上的队列越多，则该broker压力越大。</li></ol><h3 id="2-可用性"><a href="#2-可用性" class="headerlink" title="2.可用性"></a>2.可用性</h3><p>由于消息分布在各个broker上，一旦某个broker宕机，则该broker上的消息读写都会受到影响。所以rocketmq提供了master/slave的结构，salve定时从master同步数据，如果master宕机，则slave提供消费服务，但是不能写入消息，此过程对应用透明，由rocketmq内部解决。</p>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mq </tag>
            
            <tag> rocketmq </tag>
            
            <tag> broker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ安装</title>
      <link href="posts/35508.html"/>
      <url>posts/35508.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>装的多了，都是零碎的片段，需要重新整理一个这一块东西。</p><p>包推荐使用 git 直接拉下来。没装 git 就 wget 去拉。需要 maven 来编译 rocketmq，实际上只要装好 maven 即可，其他不用操作 maven。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>安装 JDK，配置 JAVA_HOME，yum 方式安装的JDK也要配轩JAVA_HOME。</li><li>安装 maven。因为编译需要 maven，先配置MAVEN_HOME，否则执行 sh install.sh 不起作用</li><li>默认最少4G内存，需要最少2G SWAP 内存，内存不够则修改默认内存小于本机内存，不然一直报错</li><li>内存不够的话，直接看下面的修改内存</li></ol><h3 id="测试安装环境"><a href="#测试安装环境" class="headerlink" title="测试安装环境"></a>测试安装环境</h3><ol><li>centOS 6.5</li><li>1G 内存</li><li>RocketMQ 3.4.6</li></ol><h3 id="编译和安装"><a href="#编译和安装" class="headerlink" title="编译和安装"></a>编译和安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install.sh //在 mq 的根目录 下</span><br></pre></td></tr></table></figure><p>说明：<br>安装完成后，因为 install.sh  脚本中创建 devenv 符号链接写错了目录，需要在RocketMQ目录下执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf devenv</span><br></pre></td></tr></table></figure><p>删除错误的 devenv 目录ln -s target/alibaba-rocketmq-broker/alibaba-rocketmq devenv  //搞了两天问题就在这里，坑坑坑坑</p>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mq </tag>
            
            <tag> rocketmq </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-架构设计</title>
      <link href="posts/55381.html"/>
      <url>posts/55381.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>架构设计分为：1.技术架构，2.部署架构</p></blockquote><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><ol><li><strong>技术架构</strong></li><li><strong>部署架构</strong></li></ol><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><p>学习一个技术，从最开始建立概念开始，先看架构图<br>怎么理解这个图？<br>这个图画出4个重要解色 和 消息的发送、保存、消费的大流程。</p><p>整个消息流转的过程中，有4个重要的角色负责：</p><ol><li>Producer</li><li>NameServer</li><li>BrokerServer</li><li>Consumer</li></ol><p><img src="/posts/55381/rocketmq_architecture_1.png" alt="rocketmq_architecture"></p><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>消息发布的角色，支持分布式集群方式部署。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>消息消费的角色，支持分布式集群方式部署。支持以push推，pull拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。</p><h3 id="NameServer"><a href="#NameServer" class="headerlink" title="NameServer"></a>NameServer</h3><p>NameServer是一个非常简单的Topic路由注册中心，其角色类似Dubbo中的zookeeper，支持Broker的动态注册与发现。主要包括两个功能：Broker管理，NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活；路由信息管理，每个NameServer将保存关于Broker集群的整个路由信息和用于客户端查询的队列信息。然后Producer和Conumser通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费。NameServer通常也是集群的方式部署，各实例间相互不进行信息通讯。Broker是向每一台NameServer注册自己的路由信息，所以每一个NameServer实例上面都保存一份完整的路由信息。当某个NameServer因某种原因下线了，Broker仍然可以向其它NameServer同步其路由信息，Producer,Consumer仍然可以动态感知Broker的路由的信息。</p><h3 id="BrokerServer"><a href="#BrokerServer" class="headerlink" title="BrokerServer"></a>BrokerServer</h3><p>Broker是一个非常重要组件，在实际应用当中是调优的重点。<br>Broker主要负责消息的存储、投递和查询以及服务高可用保证，为了实现这些功能，Broker包含了以下几个重要子模块。</p><ul><li><strong>Remoting Module</strong>：整个Broker的实体，负责处理来自clients端的请求。</li><li><strong>Client Manager</strong>：负责管理客户端(Producer/Consumer)和维护Consumer的Topic订阅信息</li><li><strong>Store Service</strong>：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。</li><li><strong>HA Service</strong>：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。</li><li><strong>Index Service</strong>：根据特定的Message key对投递到Broker的消息进行索引服务，以提供消息的快速查询。</li></ul><h4 id="BrokerServer-消息处理"><a href="#BrokerServer-消息处理" class="headerlink" title="BrokerServer 消息处理"></a>BrokerServer 消息处理</h4><p>Producer--&gt;BrokerServer--&gt;Consumer</p><p><img src="/posts/55381/rocketmq_architecture_2.png" alt="borker消息请求"></p><p>理解这几个角色，在后续学习中有重要帮助。</p><h2 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h2><p>部署架构的重点在重要组件的部署流程和细节</p><h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><p>从部署的架构出发，看整体部署流程</p><ol><li>NameServer启动</li><li>Broker启动</li><li>Producer发送消息</li><li>Consumer消费消息</li></ol><p><img src="/posts/55381/rocketmq_architecture_3.png" alt="borker消息请求"></p><p>结合部署架构图，描述集群工作流程：</p><ul><li><strong>启动NameServer</strong>，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。</li><li><strong>启动Broker</strong>，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。<br>收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。</li><li><strong>Producer发送消息</strong>，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。</li><li><strong>Consumer消费消息</strong>，跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息。</li></ul><h3 id="部署特点"><a href="#部署特点" class="headerlink" title="部署特点"></a>部署特点</h3><ul><li><p><strong>NameServer</strong>: 是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。</p></li><li><p><strong>Broker</strong>: 部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave 的对应关系通过指定相同的BrokerName，不同的BrokerId 来定义，BrokerId为0表示Master，非0表示Slave。<br>Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。<br>注意：当前RocketMQ版本在部署架构上支持一Master多Slave，但只有BrokerId=1的从服务器才会参与消息的读负载。</p></li><li><p><strong>Producer</strong>: 与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic 服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署。</p></li><li><p><strong>Consumer</strong>: 与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，消费者在向Master拉取消息时，Master服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读I/O），以及从服务器是否可读等因素建议下一次是从Master还是Slave拉取。</p></li></ul><h2 id="官方地址"><a href="#官方地址" class="headerlink" title="官方地址"></a>官方地址</h2><p>Github: <a href="https://github.com/apache/rocketmq">https://github.com/apache/rocketmq</a><br>Apache RocketMQ: <a href="https://rocketmq.apache.org/">https://rocketmq.apache.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mq </tag>
            
            <tag> 架构设计 </tag>
            
            <tag> Broker </tag>
            
            <tag> Producer </tag>
            
            <tag> Consumer </tag>
            
            <tag> NameServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-消息存储设计</title>
      <link href="posts/59340.html"/>
      <url>posts/59340.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>消息存储是RocketMQ中最为复杂和最为重要的一部分</p></blockquote><h2 id="消息存储整体架构"><a href="#消息存储整体架构" class="headerlink" title="消息存储整体架构"></a>消息存储整体架构</h2><p>消息存储是RocketMQ中最为复杂和最为重要的一部分，将分别从RocketMQ的消息<strong>存储整体架构</strong>、<strong>PageCache</strong>与<strong>Mmap内存映射</strong>以及RocketMQ中<strong>两种不同的刷盘方式</strong>三方面来分别展开叙述。</p><p>先看这个图，这个图看着复杂，但是多理解几遍历，不要着急跳过去</p><p><img src="/posts/59340/rocketmq_design_1-2.png" alt="存储设计"></p><p>从这个图理梳理出几个关键词</p><ol><li>CommitLog</li><li>ConsumeQueue</li><li>CommitLogOffset</li><li>IndexFile</li><li>producer send</li></ol><p>CommitLog和producer发送消息有关，ConsumeQueue和consumer消费端有关。</p><h2 id="消息存储相关的文件"><a href="#消息存储相关的文件" class="headerlink" title="消息存储相关的文件"></a>消息存储相关的文件</h2><p>消息都是存储在 <strong>Broker服务器</strong>上的以文件形式存储分：Producer端和Consumer端，消息查询也是通过Broker节点查询。</p><h3 id="CommitLog-发送端消息主体-Producer端"><a href="#CommitLog-发送端消息主体-Producer端" class="headerlink" title="CommitLog 发送端消息主体---Producer端"></a>CommitLog 发送端消息主体---Producer端</h3><blockquote><p>CommitLog：消息真正的存储文件，所有消息都存储在 CommitLog 文件中。</p></blockquote><p><img src="/posts/59340/commitLog%E7%BB%93%E6%9E%84.jpeg" alt="commitLog结构"></p><p>CommitLog 文件是存放消息数据的地方，所有的消息都将存入到 CommitLog 文件中。<br>生产者将消息发送到 RocketMQ 的 Broker 后，Broker 服务器会将消息<code>顺序</code>写入到 CommitLog 文件中，这也就是 RocketMQ 高性能的原因，因为我们知道磁盘顺序写特别快，RocketMQ 充分利用了这一点，极大的提高消息写入效率。</p><p>CommitLog: 消息主体以及元数据的存储主体，存储Producer端写入的消息主体内容,消息内容不是定长的。单个文件大小默认<code>1G</code>， 文件名长度为20位，左边补零，剩余为起始偏移量，比如:<br><code>00000000000000000000</code>代表了第一个文件，起始偏移量为0，文件大小为<code>1G=1073741824</code>；当第一个文件写满了，第二个文件为00000000001073741824，起始偏移量为1073741824，以此类推。消息主要是顺序写入日志文件，当文件满了，写入下一个文件；</p><p><img src="/posts/59340/commitLog.jpeg" alt="commitLog"></p><h3 id="ConsumeQueue-消息消费队列-Consume端"><a href="#ConsumeQueue-消息消费队列-Consume端" class="headerlink" title="ConsumeQueue 消息消费队列---Consume端"></a>ConsumeQueue 消息消费队列---Consume端</h3><blockquote><p>consumequeue文件可以看成是基于topic的commitlog索引文件</p></blockquote><p>ConsumeQueue 引入的目的主要是提高消息消费的性能，由于RocketMQ是基于主题<code>topic</code>的订阅模式，消息消费是针对主题进行的，如果要遍历commitlog文件中根据topic检索消息是非常低效的。</p><p>Consumer即可根据<code>ConsumeQueue</code>来查找待消费的消息。其中，ConsumeQueue（逻辑消费队列）作为消费消息的索引，保存了指定Topic下的队列消息在CommitLog中的:</p><ol><li>起始物理偏移量offset</li><li>消息大小size</li><li>消息Tag的HashCode值</li></ol><p>CommitLog 文件是存放消息数据的地方，所有的消息都将存入到 CommitLog 文件中。</p><p>但是消费者消费消息的时候，可能就会遇到麻烦，每一个消费者只能订阅一个主题，消费者关心的是订阅主题下的所有消息，但是同一主题的消息在 CommitLog 文件中可能是不连续的，那么消费者消费消息的时候，需要将 CommitLog 文件加载到内存中遍历查找订阅主题下的消息，频繁的 IO 操作，性能就会急速下降。</p><p>为了解决这个问题，RocketMQ 引入了 Consumequeue 文件。Consumequeue 文件可以看作是索引文件，类似于 MySQL 中的二级索引。在存放了同一主题下的所有消息，消费者消费的时候只需要去对应的 Consumequeue 组中取消息即可。Consumequeue 文件不会存储消息的全量信息，了解 MySQL 索引的话，应该好理解这里，具体存储的字段，我在上图已经标注。这样做可以带来以下两个好处：</p><p>由于 Consumequeue 文件内容小，可以尽可能的保证 Consumequeue 文件全部读入到内存，提高消费效率。<br>Consumequeue 文件也是会持久化的，不存全量信息可以节约磁盘空间。</p><p><img src="/posts/59340/commitLog%E5%92%8CTopic+queue.jpeg" alt="commitLog和Topic+queue"></p><p>consumequeue文件可以看成是基于topic的commitlog索引文件，故consumequeue文件夹的组织方式如下：<code>topic/queue/file</code>三层组织结构，<br>具体存储路径为：<code>$HOME/store/consumequeue/&#123;topic&#125;/&#123;queueId&#125;/&#123;fileName&#125;</code>。<br>同样consumequeue文件采取定长设计，每一个条目共<code>20个字节</code>，分别为<code>8字节的commitlog物理偏移量</code>、<code>4字节的消息长度</code>、<code>8字节tag hashcode</code>，单个文件由30W个条目组成，可以像数组一样随机访问每一个条，每个ConsumeQueue文件大小约<code>5.72M</code>；</p><h3 id="IndexFile"><a href="#IndexFile" class="headerlink" title="IndexFile"></a>IndexFile</h3><p>IndexFile（索引文件）提供了一种可以通过key或时间区间在CommitLog中查询消息，找到offset结的方法。<br><strong>Index文件的存储位置是</strong>：<code>$HOME\store\index$&#123;fileName&#125;</code>，文件名fileName是以创建时的<code>时间戳</code>命名的。<br>固定的单个IndexFile文件大小约为400M，一个IndexFile可以保存 2000W个索引，IndexFile的底层存储设计为在文件系统中实现HashMap结构，故rocketmq的索引文件其底层实现为hash索引。</p><p><img src="/posts/59340/rocketmq_design_13.jpg" alt="IndexFile位置"></p><p>在上面的RocketMQ的消息存储整体架构图中可以看出，RocketMQ采用的是混合型的存储结构，即为Broker单个实例下所有的队列共用一个日志数据文件（即为CommitLog）来存储。</p><p><strong>RocketMQ的混合型存储结构</strong>(多个Topic的消息实体内容都存储于一个CommitLog中)针对Producer和Consumer分别采用了数据和索引部分相分离的存储结构。</p><p><strong>Producer发送消息至Broker端</strong>，然后Broker端使用同步或者异步的方式对消息刷盘持久化，保存至CommitLog中。只要消息被刷盘持久化至磁盘文件CommitLog中，那么Producer发送的消息就不会丢失。即使ConsumeQueue中的数据丢失，也可以通过CommitLog来恢复。正因为如此，Consumer也就肯定有机会去消费这条消息。</p><p><strong>Consume端当无法拉取到消息后</strong>，可以等下一次消息拉取，同时服务端也支持长轮询模式，如果一个消息拉取请求未拉取到消息，Broker允许等待30s的时间，只要这段时间内有新消息到达，将直接返回给消费端。这里，RocketMQ的具体做法是，使用Broker端的后台服务线程—ReputMessageService不停地分发请求并异步构建ConsumeQueue（逻辑消费队列）和IndexFile（索引文件）数据。</p><h2 id="页缓存-page-cache-与内存映射-mmap"><a href="#页缓存-page-cache-与内存映射-mmap" class="headerlink" title="页缓存(page cache)与内存映射(mmap)"></a>页缓存(page cache)与内存映射(mmap)</h2><blockquote><p>用于加速对文件的读写。</p></blockquote><p><strong>页缓存（PageCache)是OS对文件的缓存</strong>，用于加速对文件的读写。<br>一般来说，程序对文件进行顺序读写的速度几乎接近于内存的读写速度，主要原因就是由于OS使用PageCache机制对读写访问操作进行了性能优化，将一部分的内存用作PageCache。<br>对于数据的写入，OS会先写入至Cache内，随后通过异步的方式由<code>pdflush内核线程</code>将Cache内的数据刷盘至物理磁盘上。对于数据的读取，如果一次读取文件时出现未命中PageCache的情况，OS从物理磁盘上访问读取文件的同时，会顺序对其他相邻块的数据文件进行预读取。</p><p>在RocketMQ中，ConsumeQueue逻辑消费队列存储的数据较少，并且是顺序读取，在page cache机制的预读取作用下，Consume Queue文件的读性能几乎接近读内存，即使在有消息堆积情况下也不会影响性能。而对于CommitLog消息存储的日志数据文件来说，读取消息内容时候会产生较多的随机访问读取，严重影响性能。如果选择合适的系统IO调度算法，比如设置调度算法为“Deadline”（此时块存储采用SSD的话），随机读的性能也会有所提升。</p><p><strong>内存映射 (mmap)</strong><br>另外，RocketMQ主要通过MappedByteBuffer对文件进行读写操作。其中，利用了NIO中的FileChannel模型将磁盘上的物理文件直接映射到用户态的内存地址中（这种Mmap的方式减少了传统IO将磁盘文件数据在操作系统内核地址空间的缓冲区和用户应用程序地址空间的缓冲区之间来回进行拷贝的性能开销），将对文件的操作转化为直接对内存地址进行操作，从而极大地提高了文件的读写效率（正因为需要使用内存映射机制，故RocketMQ的文件存储都使用定长结构来存储，方便一次将整个文件映射至内存）。</p><p><img src="/posts/59340/pagecache.webp" alt="pagecache"></p><h2 id="消息刷盘"><a href="#消息刷盘" class="headerlink" title="消息刷盘"></a>消息刷盘</h2><p>分两种刷盘模式，没有好坏之分，实际应用中根据业务进行调整：</p><ol><li>同步刷盘</li><li>异步刷盘</li></ol><p><img src="/posts/59340/rocketmq_design_2.png" alt="刷盘"></p><p>(1) 同步刷盘：如上图所示，只有在消息真正持久化至磁盘后RocketMQ的Broker端才会真正返回给Producer端一个成功的ACK响应。同步刷盘对MQ消息可靠性来说是一种不错的保障，但是性能上会有较大影响，一般适用于金融业务应用该模式较多。</p><p>(2) 异步刷盘：能够充分利用OS的PageCache的优势，只要消息写入PageCache即可将成功的ACK返回给Producer端。消息刷盘采用后台异步线程提交的方式进行，降低了读写延迟，提高了MQ的性能和吞吐量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RocketMQ 在存储设计的一概念性的东西，熟练应用，并了解这些概念，对后续深入学习RocketMQ和排查问题很有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mq </tag>
            
            <tag> rocketmq </tag>
            
            <tag> architecture </tag>
            
            <tag> 存储设计 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射01-简述</title>
      <link href="posts/cad77793.html"/>
      <url>posts/cad77793.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>意义：反射的意义是在于改变程序运行时的状态。<br>比如我在程序没运行之前，我不知道我需要什么对象，但是我想在程序运行的过程中去动态的说我想要什么东西，这时可以通过反射去实现。<br>通过反射可以调用运行时类的指定方法和属性。<br>任何一个类对反射来说结构都是暴露的。<br>java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；<br>这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。</p><p>反射需要四个类实现一些常用的功能:</p><ol><li>Class</li><li>Field</li><li>Medthod</li><li>Constrator</li></ol><p>使用反射机制要遵循以下三步：</p><ol><li>获取要操作的类的Class对象</li><li>通过拿到这个Class对象，就可以拿到类的属性和方法</li><li>可以通过上面拿到的属性和方法去操作属性和方法</li></ol><h3 id="反射有什么用"><a href="#反射有什么用" class="headerlink" title="反射有什么用"></a>反射有什么用</h3><p>通过反射API可以获取任何，是任何在运行时的对象和属性。</p><p>反射的功能：</p><ol><li>构建对象</li><li>在运行时操作对象属性、方法、构造器</li><li>生成动态代理</li></ol><h2 id="Class-对象"><a href="#Class-对象" class="headerlink" title="Class 对象"></a>Class 对象</h2><p>使用反射第一步，获取Class对象。拿到Class对象才能接着往下操作。<br>Java 类在运行的时候，某个类无论生成多少个对象，他们都会对应同一个Class对象，它表示正在运行程序中的类和接口。</p><p>Class 类的实例表示Java应用程序运行时的类枚举或接口和注释（每个Java类运行时被表示为JVM中的类对象）<br>数组还映射到一个类对象，该类对象由具有相同元素类型和维度的所有数组共享。<br>基本类型布尔、字节、char、.、int、long、float、double和关键词void也表示为类对象。</p><p>1.手动编写的类被编译后会产生一个Class对象，其表示的是创建的类的类型信息，而且这个Class对象保存在同名.class的文件中(字节码文件)<br>2.Class类只存私有构造函数，因此对应Class对象只能有JVM创建和加载<br>3.Class类的对象作用是运行时提供或获得某个对象的类型信息，这点对于反射技术很重要</p><h3 id="Class对象与反射机制"><a href="#Class对象与反射机制" class="headerlink" title="Class对象与反射机制"></a>Class对象与反射机制</h3><p>RRIT（Run-Time Type Identification）运行时类型识别。<br>它的功能是在运行时识别对象的类型和类信息。<br>有两种主要方式：</p><ol><li>&quot;传统的&quot;RTTI（它假定我们在编译时已经知道所有类型）和</li><li>&quot;反射&quot;机制（它允许我们在运行时发现和使用类信息）。</li></ol><p>无论何时编写和编译新类，都会生成一个Class对象，更恰当地说，保存在相同名称的A.class文件中。<br>当第一次使用所有类时，它们都被动态地加载到JVM中。<br>当我们新建一个对象或引用一个静态成员变量时，Java虚拟机（JVM）中的类加载器子系统将相应的类对象加载到JVM中，然后JVM从这个类型的信息中创建我们需要的类对象，或者提供静态变量的参考值。</p><h3 id="Class-类的加载"><a href="#Class-类的加载" class="headerlink" title="Class 类的加载"></a>Class 类的加载</h3><p>java 中的类是按需加载的，用到时才会加载。<br>所有类在第一次使用时都动态地加载到JVM中。当程序创建对该类的第一个静态成员引用时，它加载使用的类（实际加载该类的字节码文件）。使用 new 操作符创建类的新实例对象也被视为对类的静态成员（构造函数也是一个类）的引用。</p><p>动态加载：</p><p>当使用这个类时，类加载器首先检查这个类的Class对象是否已经被加载。<br>如果未加载，则默认的ClassLorder 将 Class 对象将以相同的名称保存。<br>当该类的字节码文件被加载时，它们必须接受相关的验证，以确保它们不被破坏，并且不包含坏的Java代码（这是Java的安全机制检测）。<br>在没有问题之后，它们将被动态地加载到内存中，这相当于Class对象被加载到内存中，，并且还可以用于创建类的所有实例对象。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>万事开头第一步，反射开头Class，理解了反射的意义后，接下来就是怎么操作反射。<br>长篇大论，不如写个demo。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> reflect </category>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> reflect </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机原理-原码、补码、反码</title>
      <link href="posts/bbd69ce2.html"/>
      <url>posts/bbd69ce2.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>二进制数字表示法三兄弟:</p><ul><li>原码</li><li>补码</li><li>反码</li></ul><p>原码就是原来的编码，就是字面意思，而补码和反码比较奇怪，为什么需要这两种编码，意义是什么？</p><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>原码表示法，正数没有区别，负数首位为<code>1</code>。<br><code>3</code>的原码 <code>0000 0011</code><br><code>-3</code>的原码 <code>1000 0011</code></p><p>这个就这么简单，没什么可说的。</p><h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>这个是操作系统在对<code>负数</code>进行计算时的一种策略。<br>作用：解决二进制下表示负数的问题。</p><p><strong>为什么需要补码，是什么情况下需要使用到补码。不用行不行？</strong><br>不行<br>因为使用两个<code>原码</code>做加法，没法运算！！</p><p><strong>不用行不行？</strong><br>不行，不用玩不了。因为两个<code>原码</code>在二进制下无法做加法！！</p><p>使用二进制的第一位表示数字的正负位:<br>0表示正数，1表示<code>负</code>数。</p><h3 id="原码加法"><a href="#原码加法" class="headerlink" title="原码加法"></a>原码加法</h3><p><code>原码</code>之间无法直接进行计算，举个反例</p><p>2 + (-2) 结果应该是0，但是如果直接使用原码进行计算，结果溢出</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000</span> <span class="number">0010</span></span><br><span class="line"><span class="number">1000</span> <span class="number">0010</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1000</span> <span class="number">0100</span></span><br></pre></td></tr></table></figure><p>结果<br>期望是: <code>0</code><br>实际为: <code>-4</code></p><h3 id="现在解释为什么需要补码"><a href="#现在解释为什么需要补码" class="headerlink" title="现在解释为什么需要补码"></a>现在解释为什么需要补码</h3><p>为了得到正确的计算结果！！<br>如何能得到正确的计算结果？</p><p>再举个例子，这次是正确的例子: 2 + (-2) = 0<br>转换成二进制：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000</span> <span class="number">0010</span></span><br><span class="line">???? ????</span><br><span class="line">---------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span></span><br></pre></td></tr></table></figure><p>结果<br>0</p><p>也就是说，第二行<code>?</code>是什么样的二进制，才能得到正确的结果，才是关键！！</p><h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><p>其实已经有了结果了，那可以从结果中求和<code>?</code>的结果。<br>要得到补码，就需要<code>反码</code>参与通过<code>反码</code>算出补码。</p><h3 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h3><p>还是：2 + (-2)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000</span> <span class="number">0010</span></span><br><span class="line"><span class="number">1111</span> <span class="number">1110</span>        &lt;-- 十进制(-<span class="number">2</span>)在计算机中真正的表示形态，即，补码</span><br><span class="line">---------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  </span><br></pre></td></tr></table></figure><p>负数计算补码步骤：<br>1.计算二进制的绝对值，即，该数除符号位之外的二进制有效数据位，符号位是要保留的。<br>2.按位取反<br>3.+1</p><p>1.计算二进制的绝对值<br><code>-2</code>的绝对值，就是正2：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000</span> <span class="number">0010</span> # 最高位保留符号 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>2.取反</p><p>这个就是反码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1111</span> <span class="number">1101</span>        # 注意，上面说了，符号位是要保留的。</span><br></pre></td></tr></table></figure><p>3.最后进行 +1</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1111</span> <span class="number">1110</span></span><br></pre></td></tr></table></figure><p>这个最终结果就是:<code>补码</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有点繁索，但过程就是这么个过程，实际使用中无感知，但是必须了解这个原理，这也就是为什么 127+1=-128的由来。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0111</span> <span class="number">1111</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1000</span> <span class="number">0000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
          <category> principle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> 原码 </tag>
            
            <tag> 补码 </tag>
            
            <tag> 反码 </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 基础 </tag>
            
            <tag> 计算机原理 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript--自定义对象</title>
      <link href="posts/6b782e60.html"/>
      <url>posts/6b782e60.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JS对象是一种复合类型，它允许你通过变量名存储和访问，换一种思路，对象是一个无序的属性集合，集合中的每一项都由名称和值组成（听起来是不是很像我们常听说的HASH表、字典、健/值对？），而其中的值类型可能是内置类型(如number,string)，也可能是对象。这种方式不能用new方式创建，所以不可重用。</p><h2 id="字面量方式-最简单方式"><a href="#字面量方式-最简单方式" class="headerlink" title="字面量方式-最简单方式"></a>字面量方式-最简单方式</h2><p>这种创建对象的方式通过<code>&#123;&#125;</code>来组织对象属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyObj = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>，   <span class="comment">//注意是逗号</span></span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zhagnsan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fn1&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//使有 this 调用方法</span></span><br><span class="line">        <span class="built_in">this</span>.fn2()</span><br><span class="line">        <span class="comment">//&quot;此处是js对象的方法，可以写不限个，注意冒号，逗号&quot;</span></span><br><span class="line">        alert(<span class="built_in">this</span>.id);        <span class="comment">//同样可以用this方法。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;fn2&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>[<span class="string">&#x27;id&#x27;</span>]);<span class="comment">//以集合的方式访问。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象的方法调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emptyObj.fn1();</span><br><span class="line">emptyObj.fn2();</span><br></pre></td></tr></table></figure><p>绑定：<br>如果使用这种方式进行绑定，则需要进行一次方法调用，才会生效，不像之前任意放在 script 代码块中就可以生效的<br>对象要用自己的方法，使用 <code>this</code> 进行调用。</p><h2 id="构造函数方式"><a href="#构造函数方式" class="headerlink" title="构造函数方式"></a>构造函数方式</h2><p>可重用，先像Java一样创建一个对象的模板，然后new一个出来。this在里面的用法一样的。<br>第二种创建对象的方式。<br>这种方式就像Java一样，先创建一个对象的模板:</p><h3 id="定义一个js类"><a href="#定义一个js类" class="headerlink" title="定义一个js类"></a>定义一个js类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.id = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;myClass&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> my = <span class="keyword">new</span> myClass();</span><br><span class="line">my.getName();</span><br><span class="line">alert(my.id);</span><br></pre></td></tr></table></figure><h2 id="工厂方式"><a href="#工厂方式" class="headerlink" title="工厂方式"></a>工厂方式</h2><p>返回一个对象给函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>:<span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;myclass&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_myClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  obj.id = <span class="number">1</span>;</span><br><span class="line">  obj.name = <span class="string">&#x27;_myclass&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> my = <span class="keyword">new</span> myClass();</span><br><span class="line"><span class="keyword">var</span> _my = <span class="keyword">new</span> _myClass();</span><br><span class="line">alert(my.id);</span><br><span class="line">alert(my.name);</span><br><span class="line">alert(_my.id);</span><br><span class="line">alert(_my.name);</span><br></pre></td></tr></table></figure><h2 id="带参方式"><a href="#带参方式" class="headerlink" title="带参方式"></a>带参方式</h2><p>在使用百度地图API时，碰到一种调用方式，没有见过有一时搞不明白是怎么回事。研实了一下才明白。<br>js中使用this时可以直接指向方法名，不需要加()。<br>new 出来的对象调用方法属性时，要看构造函数中的this是指向谁的，注意。</p><p>构造函数的this的用引指向，直接影响到new 的时候的指针引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">value, fun</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.fun = fun;                <span class="comment">//指向形参</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> funTest = <span class="keyword">new</span> fun(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> test(<span class="number">11</span>, funTest);</span><br><span class="line">obj.fun();</span><br></pre></td></tr></table></figure><p>匿名函数方式，匿名函数指向当前匿名函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(e+<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">value, fun</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.fun = fun;                <span class="comment">//指向形参</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> test(<span class="number">22</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    alert(e+<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">obj.fun(<span class="string">&quot;aaaaaaaaaaa&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果打印：aaaaaaaaaaa1</p><p>改变构造函数中的this指向，new的对象指向名部方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">e</span>) </span>&#123;        <span class="comment">//指向这里</span></span><br><span class="line">    alert(e+<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">value, ttt</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.fun = fun;</span><br><span class="line">                <span class="comment">//！！！！注意，指向的是fun方法，ttt参数没有起做用，在局部没有找到变量，则直接找表达式右边的方法名。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> test(<span class="number">22</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    alert(e+<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">obj.fun(<span class="string">&quot;aaaaaaaaaaa&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果打印：aaaaaaaaaa2</p><p>总结：实际应用中不要出现this引用不清楚的清况。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> javascript </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-系统默认目录说明</title>
      <link href="posts/fcdeeeaa.html"/>
      <url>posts/fcdeeeaa.html</url>
      
        <content type="html"><![CDATA[<p>很多目录是看着眼熟，但是不知道用来干什么的，了解清楚每个目录的作用在开发开发功能、定位问题都致关重要。<br>比如从网下安装了一个二进制的工具，这个工具安装在哪个目录下？<br>比如wget在哪个目录下可以找到？<br>挂载了USB设备，去个目录下读文件？<br>SSH-KEY 在哪个目录下？<br>等等，都需要对系统目录有一个基本了解。</p><h2 id="系统目录"><a href="#系统目录" class="headerlink" title="系统目录"></a>系统目录</h2><h3 id="根目录"><a href="#根目录" class="headerlink" title="/ 根目录"></a>/ 根目录</h3><p>每一个文件和目录都是从根目录开始的<br>root用户具有该目录下的写权限。</p><h3 id="root"><a href="#root" class="headerlink" title="/root"></a>/root</h3><p>是root 用户的主目录，这与/.不一样</p><h3 id="bin-用户二进制文件"><a href="#bin-用户二进制文件" class="headerlink" title="/bin 用户二进制文件"></a>/bin 用户二进制文件</h3><p>bin即，binary。<br>二进制文件，就是可执行文件，说白就是可执行的程序，一般以命令形式执行。<br>用户的可执行文件一般放在这里。<br>存储linux系统自有的所有命令，可以cd bin去查看，里面有比如cp、ls这样系统命令。<br>就连 cd　这个命令也是在bin下面的。</p><p>常用的可执行文件</p><blockquote><p>/bin      如：bash、cat、ls、cd、rm、touch<br>/usr/bin  主要放置应用程序工具的必备执行文件，如：c++、g++、gcc、ncftp</p></blockquote><h3 id="sbin-系统二进制文件"><a href="#sbin-系统二进制文件" class="headerlink" title="/sbin 系统二进制文件"></a>/sbin 系统二进制文件</h3><p>就像/bin一样，/sbin 同样包含二进制可执行文件。<br>sbin 全称：system bin<br>说白了就是一堆工具所需要的命令，bin里装的都是内核所需要命令。sbin里的命令在就像是用yum安装工具后的工具命令的存放处。</p><blockquote><p>/sbin          系统管理的必备程序，如：iptables、reboot、fdisk、ifconfig<br>/usr/sbin      主要放置网路管理的必备程序，例如: dhcpd、httpd、imap、inetd、lpd、named</p></blockquote><h3 id="etc-系统配置"><a href="#etc-系统配置" class="headerlink" title="/etc 系统配置"></a>/etc 系统配置</h3><p>包含: 系统配置、一些服务配置、帐号密码、应用配置。<br>我装了httpd配置也在这里。<br>也包含了用于启动/停止单个程序的启动和关闭shell脚本。<br>例如：</p><blockquote><p>/etc/profile    系统变量、环境变量<br>/etc/resolv.conf<br>/etc/logrotate.conf</p></blockquote><h3 id="dev"><a href="#dev" class="headerlink" title="/dev"></a>/dev</h3><p>装所有的硬件设备的目录</p><p>dev命名规则</p><blockquote><p>xx        磁盘类型<br>y        第几个接口<br>N        分区编号</p></blockquote><p>举例：</p><blockquote><p>/dev/xxyN                规则<br>/dev/hda                //hd 表示IDE硬盘    a表示第一个接口<br>/dev/hdb                //hd 表示IDE硬盘    b表示第一个接口<br>/dev/sdb                //sd 表示SCSI硬盘   b表示第二个接口<br>abcd         表示插在主板上的哪个接口<br>扩展分区不能直接使用，是用必拆分出更多的逻辑分区，扩展分没有个数限制。</p></blockquote><p>N表示分区<br>主分区、扩展分区 1-4编号<br>逻辑分区 从5开始算第一个编号<br>理解：以树型结构来理解：</p><blockquote><p>|-----hda1主分区                        //相当于C:<br>|----------hda2 扩展分区                    //相当于windows 中的扩展分区<br>|----------------hda5 逻辑分区         //相当于D:<br>|----------------hda6 逻辑分区<br>|----------------hdaN 逻辑分区</p></blockquote><p>例<br>/dev/hda6        主板的第一个接口的和一个逻辑分区</p><h3 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a>/tmp</h3><p>包含系统和用户创建的临时文件。<br>当系统重新启动时，这个目录下的文件都将被删除。</p><h3 id="var变量文件目录"><a href="#var变量文件目录" class="headerlink" title="/var变量文件目录"></a>/var变量文件目录</h3><p>这个目录下可以找到内容可能增长的文件<br>这包括：</p><ol><li>系统日志文件（/var/log）;</li><li>包和数据库文件（/var/lib）;</li><li>电子邮件（/var/mail）;</li><li>打印队列（/var/spool）;</li><li>锁文件（/var/lock）;</li><li>多次重新启动需要的临时文件（/var/tmp）;</li></ol><h3 id="proc-文件系统"><a href="#proc-文件系统" class="headerlink" title="/proc 文件系统"></a>/proc 文件系统</h3><p>Linux 内核提供的一种伪文件系统，可以在运行时访问内核内部数据结构、改变内核设置的机制<br>这个文件系统只能存在于内存当中，不占用外部空间。它以文件系统的方式为访问系统内核数据提供接口。</p><p>作用：<br>1.用户和程序可以通过proc得到系统信息，并可以改变内核的某些参数。</p><p>三个重要的子目录：<br>net、scsi、sys。</p><ol><li>sys目录是可写的，通过他可以攸 改内核的参数。</li><li>net、scsi、依赖于内核，如果内核不支持则sisc目录不存在</li><li>以数字命名的目录是系统的进程目录。是以pid号为目录名。它们是读取进程信息的接口。</li><li>self目录则是读取进程本身的信息接口，是一个link。</li></ol><p>测了一下，比如查看系时间:<br>cd /proc/uptime    //有个白色文件说明是文本文件<br>vi uptime          //查看到系统运行的时间，是以豪秒计算的。<br>几乎所有跟系统相关的东西都可以被查到。</p><h3 id="usr-存放应用程序的目录"><a href="#usr-存放应用程序的目录" class="headerlink" title="/usr 存放应用程序的目录"></a>/usr 存放应用程序的目录</h3><p>/usr/bin  应用程序的存放目录。<br>yum 就装在bin这个目录下。</p><p>说明：应用程序和命令是不同的概念。</p><p>子目录说明：</p><blockquote><p>/usr/bin      普通应用，包含用户的二进制文件如果在bin中找不到用户的二进制程序文件，可以到这里找。<br>/usr/sbin     服务器应用s表示server，包含系统的二进制文件，同要可以来这找sbin中没有的文件<br>/usr/bin      包含了/usr/bin 和 /usr/sbin用到的库<br>/usr/etc      配置</p></blockquote><p>用了一段时间后，发现一般开发都把应有装在 /usr/local 这个目录下。</p><p>/usr目录的由来，看了网上的分析很有意思。<br>大部分观点认为：<br>usr 是 unix system resources 的缩写；<br>usr 是 user 的缩写；<br>usr 是 unix software resources 的缩写。<br>但是这错的，user目录的真身是/home。<br>现代的/usr 只是纯粹的存放用户的各种应用程序。</p><h3 id="boot-引导加载程序文件"><a href="#boot-引导加载程序文件" class="headerlink" title="/boot 引导加载程序文件"></a>/boot 引导加载程序文件</h3><p>内核的initrd、vmlinux、grub文件位于/boot下。<br>系统内核、引导文件、GRUB或LILO</p><h3 id="opt-可选的附加应用"><a href="#opt-可选的附加应用" class="headerlink" title="/opt  可选的附加应用"></a>/opt  可选的附加应用</h3><p>应该是 options 的缩写<br>opt代表可选的。<br>包含从个别厂商的附加应用程序。<br>附加应用程序应该安装在/opt/或者/opt/的子目录下。</p><h3 id="mnt-挂载目录"><a href="#mnt-挂载目录" class="headerlink" title="/mnt 挂载目录"></a>/mnt 挂载目录</h3><p>临时安装目录，系统管理员可以挂载文件系统。<br>什么叫临时安装?<br>我自己的理解是，不是随系统启时加载的硬件，比如，移动硬盘，U盘，投影仪等。这windows下添加设备的过程是自动化的，在linux下需要手动添加。<br>mmt = mount 的缩写</p><p>挂载的设备会在/mnt下多也一个设备目录，里面包含了设备文件。</p><h3 id="media-多媒体"><a href="#media-多媒体" class="headerlink" title="/media 多媒体"></a>/media 多媒体</h3><p>可移动媒体设备<br>用于挂载可移动设备的临时目录。<br>举例来说，挂载CD-ROM的/media/cdrom，挂载软盘驱动器的/media/floppy;</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> console </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-策略模式</title>
      <link href="posts/e68876c4.html"/>
      <url>posts/e68876c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>策略模式在多种相似业务抽象相似性，提供扩展性上是非常好用。</p>]]></content>
      
      
      <categories>
          
          <category> design </category>
          
          <category> 策略模式 </category>
          
          <category> strategy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> design </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket02 ServerSocket 服务端与客户端连接</title>
      <link href="posts/31777.html"/>
      <url>posts/31777.html</url>
      
        <content type="html"><![CDATA[<h2 id="ServerSocket-服务端"><a href="#ServerSocket-服务端" class="headerlink" title="ServerSocket 服务端"></a>ServerSocket 服务端</h2><p>是运行的服务端的ServerSocket。socket方式是点对点的属于TCP。</p><h3 id="建立服务端频骤"><a href="#建立服务端频骤" class="headerlink" title="建立服务端频骤"></a>建立服务端频骤</h3><ol><li>建立端口并指定服务器IP</li><li>使用 accpet 方法接收连接，阻塞式方法</li><li>使用流通信</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li><p>建立服务器，建立通道对象</p></li><li><p>接收数据</p></li><li><p>发送数据</p></li><li><p>阻塞式的意思是，如果没有连接，就会一直等待。所以在while里面是一直处于等待状态。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建服务器套接字</span></span><br><span class="line">    ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">    BufferedWriter bf = <span class="keyword">null</span>;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    DataInputStream date = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    String welcome = <span class="string">&quot;欢迎使用我的宇宙无敌服务器&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">      <span class="comment">//2.建立连接，这只是建立连接，并不是接收客户端发来的信息，就像按电话的接听键</span></span><br><span class="line">      socket = serverSocket.accept(); <span class="comment">// 阻塞式的接收方式</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Server: &quot;</span> + welcome);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3.逐行写出给客户端</span></span><br><span class="line">      bf = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">              socket.getOutputStream() <span class="comment">// 从socket中获取数据</span></span><br><span class="line">      ));</span><br><span class="line">      bf.append(welcome);</span><br><span class="line">      bf.newLine(); <span class="comment">// 一定要换行，相当于\r\n</span></span><br><span class="line">      bf.flush();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//4.接收客户端发来的信息</span></span><br><span class="line">      date = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line">      String message = date.readUTF();</span><br><span class="line">      System.out.println(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Soket客户端"><a href="#Soket客户端" class="headerlink" title="Soket客户端"></a>Soket客户端</h2><p>可以用来连接服务器</p><h3 id="连接步骤"><a href="#连接步骤" class="headerlink" title="连接步骤"></a>连接步骤</h3><ol><li>建立连接</li><li>使用I/O 学节流进行交互</li></ol><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.建立服务器连接</span></span><br><span class="line">    Socket client = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取服务器传来的数据</span></span><br><span class="line">    BufferedReader bf = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">            <span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                    client.getInputStream()</span><br><span class="line">            ));</span><br><span class="line">    <span class="comment">//阻塞式</span></span><br><span class="line">    String getMessage = bf.readLine();</span><br><span class="line">    System.out.println(getMessage);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.客户端向服务器发送</span></span><br><span class="line">    DataOutputStream ds = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</span><br><span class="line">    ds.writeUTF(<span class="string">&quot;client: 获取到了服务器连接&quot;</span>);</span><br><span class="line">    ds.flush();</span><br><span class="line">    ds.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/31777/%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81.jpg" alt="socket连接状态"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> socket </category>
          
          <category> socket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 通信 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket01 原理和简述</title>
      <link href="posts/12663.html"/>
      <url>posts/12663.html</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>网络之间的通信，说穿了还是网络流在通信。<br>客户端跟服务器之间建立的管道，就叫scoket。</p><p>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。<br>套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。<br>网络套接字是IP地址与端口的组合。</p><h3 id="网络通信的三要素"><a href="#网络通信的三要素" class="headerlink" title="网络通信的三要素"></a>网络通信的三要素</h3><ol><li>IP</li><li>端口</li><li>协议</li></ol><p>网络编程也需要输入流和输出流进行交互，交互步骤：</p><ol><li>使用ServerSocket 指定端口，地址为本机。</li><li>使用accept 接收客户端连接。</li><li>发送数据（流）。</li></ol><p>注意：1024以下端口保留给系统。</p><h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h3><ol><li>TCP:像打电话，双向的，建产连接的。数据安全，不易丢失。点对点。</li><li>UDP:像发知信，单向的，非面向连接。数据不安全，易丢失。</li></ol><h2 id="scoket-的由来"><a href="#scoket-的由来" class="headerlink" title="scoket 的由来"></a>scoket 的由来</h2><p>Socket 最初是<strong>加利福尼亚大学Berkeley分校</strong>为Unix系统开发的网络通信接口。<br>后来随着TCP/IP网络的发展，Socket成为最为通用的应用程序接口，也是在Internet上进行应用开发最为通用的API。</p><p>Windows系统流行起来之后，由 Microsoft 联合了其他几家公司在 Berkeley Sockets 的基础之上进行了扩充（主要是增加了一些异步函数，并增加了符合Windows消息驱动特性的网络事件异步选择机制），共同制定了一套Windows下的网络编程接口，即Windows Sockets规范。<br>Windows Sockets规范是一套开放的、支持多种协议的Windows下的网络编程接口，包括1.1版和2.0版两个版本。其中1.1版只支持TCP/IP协议，而2.0版可以支持多协议，2.0版有良好的向后兼容性。当前Windows下的Internet软件绝大部分都是基于Windows Socks开发的。</p><h2 id="socket-运行在传输层"><a href="#socket-运行在传输层" class="headerlink" title="socket 运行在传输层"></a>socket 运行在传输层</h2><p>传输层实现端到端的通信，因此，每一个传输层连接有两个端点。<br>那么，传输层连接的端点是什么呢？不是主机，不是主机的IP地址，不是应用进程，也不是传输层的协议端口。<br>传输层连接的端点叫做套接字（socket）。</p><h3 id="端到端的通信"><a href="#端到端的通信" class="headerlink" title="端到端的通信"></a>端到端的通信</h3><p>根据<strong>RFC793</strong>的定义：端口号拼接到IP地址就构成了套接字。所谓套接字，实际上是一个通信端点，每个套接字都有一个套接字序号，包括主机的IP地址与一个16位的主机端口号，即形如（主机IP地址：端口号）。例如，如果IP地址是210.37.145.1，而端口号是23，那么得到套接字就是（210.37.145.1：23）。</p><p>套接字Socket=(IP地址：端口号)，套接字的表示方法是点分十进制的IP地址后面写上端口号，中间用冒号或逗号隔开。<br>每一个传输层连接唯一地被通信两端的两个端点（即两个套接字）所确定。<br>套接字可以看成是两个网络应用程序进行通信时，各自通信连接中的一个端点。通信时，其中的一个网络应用程序将要传输的一段信息写入它所在主机的Socket中，该Socket通过网络接口卡的传输介质将这段信息发送给另一台主机的Socket中，使这段信息能传送到其他程序中。</p><p>因此，两个应用程序之间的数据传输要通过套接字来完成。<br>在网络应用程序设计时，由于TCP/IP的核心内容被封装在操作系统中，如果应用程序要使用TCP/IP，可以通过系统提供的TCP/IP的编程接口来实现。在Windows环境下，网络应用程序编程接口称作Windows Socket。为了支持用户开发面向应用的通信程序，大部分系统都提供了一组基于TCP或者UDP的应用程序编程接口（API），该接口通常以一组函数的形式出现，也称为套接字（Socket）。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> socket </category>
          
          <category> socket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>juc10-线程中断interrupt</title>
      <link href="posts/ca5b9b8c.html"/>
      <url>posts/ca5b9b8c.html</url>
      
        <content type="html"><![CDATA[<h2 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h2><p><strong>作用</strong></p><p>1.对运行中的线程，仅设置了一个停止的标记，但程序照常运行。<br>2.对阻塞中的线程，该线程会抛出InterruptedException异常。</p><p><code>interrupt</code>方法用于中断线程。调用该方法的线程的状态为将被置为&quot;中断&quot;状态。<br><code>interrupt</code>方法只能打上一个停止标记(<strong>改变状态</strong>)，不能终止一个正在运行的线程，还需要加入一个判断才停止线程。</p><p>interrupt方法的使用效果并不像 for+break 语句那样，马上就停止循环。<br>调用interrupt方法是在当前线程中打了一个停止标志，并不是真的停止线程。</p><p>三个主要API<br>1.interrupt() ：中间当前线程，实际并不是马上执行;<br>2.interrupted()： 获取前线程的interrupt状态，关置重置interrupt状态为false，即未打interrupt状态 ；<br>3.isInterrupted()： 获取前线程的interrupt状态，不重置；</p><p>看个小例子，子线程中断自己</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主动中断线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.run();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5000</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;主动中断线程&quot;</span>);</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span>+(i+<span class="number">1</span>));</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">    thread.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i&#x3D;99</span><br><span class="line">i&#x3D;100         &#x2F;&#x2F;这里调用了，但是并没有马上中断</span><br><span class="line">主动中断线程</span><br><span class="line">i&#x3D;101</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">      at java.lang.Thread.sleep(Native Method)</span><br><span class="line">      at com.liukai.algorithm.practise.tree.MyThread.run(MyThread.java:18)</span><br></pre></td></tr></table></figure><h2 id="interrupted-判断当前线程状态"><a href="#interrupted-判断当前线程状态" class="headerlink" title="interrupted 判断当前线程状态"></a>interrupted 判断当前线程状态</h2><p>工作步骤:</p><ol><li>检测当前线程是否被中断，是: 返回true，否: 返回false，</li><li>如果被中断，返回true，同时清除中断标志，即重置中断标志为false。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    test();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TestThread testThread = <span class="keyword">new</span> TestThread();</span><br><span class="line">      System.out.println(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">      testThread.start();</span><br><span class="line">      testThread.sleep(<span class="number">1000</span>);</span><br><span class="line">      testThread.interrupted();</span><br><span class="line">      System.out.println(<span class="string">&quot;是否中断1 &quot;</span> + testThread.isInterrupted());</span><br><span class="line">      System.out.println(<span class="string">&quot;是否中断2 &quot;</span> + testThread.isInterrupted());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;main catch&quot;</span>);</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看下如何重置状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static boolean interrupted() &#123;</span><br><span class="line">    &#x2F;&#x2F; 实际上就是通 isInterrupted 为 true</span><br><span class="line">    return currentThread().isInterrupted(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> concurrent </tag>
            
            <tag> juc </tag>
            
            <tag> interrupt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>juc08-守护线程</title>
      <link href="posts/a9e6cc2.html"/>
      <url>posts/a9e6cc2.html</url>
      
        <content type="html"><![CDATA[<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>所谓<strong>守护线程</strong>可以理解为后台线程，<strong>用户线程</strong>理解为前台线程，那么后台线程依赖前台线程。<br>当前台线程远行结束后，后台线程自动结束，不管后台线程是不是无限循环。<br>守护线程地位比用户线程底，用户线程退出后，就会随JVM线程退出，而不管工作是否完成!!!</p><p>java中有两种线程：</p><ol><li>用户线程(User Thread)</li><li>守护线程(Daemon Thread)<br>比如GC垃圾回收线程，这个线程具有最低的优先级。</li></ol><p>两者几乎没有区别，唯一的不同之处就在于虚拟机的离开:</p><p>如果用户线程全部退出离开，只剩下守护线程，虚拟机就会退出。<br>如果还有至少一个用户线程，那么虚拟机就不会退出。</p><p>别急大白话在下面。</p><h3 id="守护线程有什么用"><a href="#守护线程有什么用" class="headerlink" title="守护线程有什么用"></a>守护线程有什么用</h3><p>守护线程的目的是守护其他线程、守护其他线程、守护其他线程!!!<br>守护线程的目的就是：<strong>为其他线程服务的线程</strong>。<br>所以守护线程需要有<strong>被守护的线程!!!</strong></p><h3 id="说这么多，跟普通线程到底有什么区别，不还是一个用户创建的线程？"><a href="#说这么多，跟普通线程到底有什么区别，不还是一个用户创建的线程？" class="headerlink" title="说这么多，跟普通线程到底有什么区别，不还是一个用户创建的线程？"></a>说这么多，跟普通线程到底有什么区别，不还是一个用户创建的线程？</h3><p>区别在于：</p><ol><li>用户线程退出，守护线程立即结束<br>这个和普通线程可不一样，一般情况下，普通线程在main线程结整后，依然会运行直到任务结束，可以自行实验。<br>守护线程不一样，只要用户线程退出，就立马退出，不管三七二一。</li><li>在Daemon线程中产生的新线程也是Daemon的</li></ol><p>说白了就是其他线程的小妾，随他生，随他死，地位又低，连把话说完的机会都没有，就不配叫守护线程，应该叫小妾线程。</p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>守护线程，必须在线程启动前调用 <code>setDeamon</code> 方法，则线程成为守护线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StopThread s = <span class="keyword">new</span> StopThread();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">    <span class="comment">//设置为守护进程</span></span><br><span class="line">    t1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    t2.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&quot;</span> + num);</span><br><span class="line">      <span class="keyword">if</span> (num++ == <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//验证自己是否为守护线程</span></span><br><span class="line">    <span class="comment">//t1.isDaemon();</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot;...run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;...stop&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么时候用"><a href="#什么时候用" class="headerlink" title="什么时候用"></a>什么时候用</h2><p>比如在有一个用户线程，进行定时查询，创建业务线程时，再创建一个守护线程，专门用来统计每次查询耗时，这个线程唯一的做用就是服务这个查询线程。<br>如果查询线程退出了，它也没必要存在了，也不影响业务。</p><p>用户线程提供某些服务或支持时，在任何情况下，用户线程结束这个服务需要立刻停止的情况下。比如有用户操作就起一个守护线程执行备份操作。若所有用户线程都退出了，守护线程自动退出，就没必要再备份了。</p><p>在守护线程中，编写代码要注意：守护线程不能持有任何需要关闭的资源，例如打开文件等，因为虚拟机退出时，守护线程没有任何机会来关闭文件，这会导致数据丢失。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> concurrent </tag>
            
            <tag> juc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>juc07 创建线程</title>
      <link href="posts/61bee200.html"/>
      <url>posts/61bee200.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>JAVA中线程被封装成Thread对象。JDK API中有对Thread的说明，连创建方式都有。<br>自定义线程有两种方式：</p><ol><li><strong>继承Thread</strong></li><li><strong>实现Runable接口</strong></li></ol><p>从打印结果是否是不同线程运行来验证多线程执行。<br>主线程代码在main方法中，自定义线程方法代码在run方法中。</p><p>两种创建方式的区别：</p><ol><li>Thread 的代码是存在子类当中；</li><li>Runable方式的代码是的实现接口的子类当中，还避免了单继承的问题。</li></ol><h2 id="一、继承-Thread-方式"><a href="#一、继承-Thread-方式" class="headerlink" title="一、继承 Thread 方式"></a>一、继承 Thread 方式</h2><p>这种方式最简单，需要三个步骤：</p><ol><li>继承 Thread 类</li><li>重写 run 方法，run方法要看成一个入口点。</li><li>调用 start 方法来执行自定义线程</li></ol><p>实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1.继承Thread</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.重写run方法</span></span><br><span class="line">    <span class="comment">//super.run();</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;run: &quot;</span>+ i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//3.执行start线程</span></span><br><span class="line">    TestThread testThread = <span class="keyword">new</span> TestThread();</span><br><span class="line">    testThread.start();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;main: &quot;</span>+ i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br>会交替打印 run 和 main 证明CPU执行线程时是交替进行的。而且这种交替是随机性的。</p><p>说明：<code>run</code>方法中写上自定义线程要执行的程序，而调用 <code>start</code> 才是真正表示开始执行这条自定义线程。<br>理解: <code>main</code>是程序默认线程入口，<code>run</code> 是自定义程序入口，和 <code>main</code> 等价。<br>但是 <code>main</code> 是程序开启的，<code>run</code> 是由用户开启的。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>注意this</li></ol><p>如果继承自Thread类，可以直接使用this关键字来调用Thread类中的方法，如getName方法，因为是继承所以可以直接使用方法。</p><ol start="2"><li>注意super</li></ol><p>继承Thread后，也可以直接调用父类的方法给自己用，而不需要.currentThread.方法。<br>如super(name); 直接调用构造方法重命名线程。</p><h2 id="二、Runable-方式"><a href="#二、Runable-方式" class="headerlink" title="二、Runable 方式"></a>二、Runable 方式</h2><p>这种方式业务类必须实现<code>Runnable</code>接口，并将业务类所创建的对象传入 <code>Thread</code> 对角中去。<br>由于对象只有一份，所以多个 <code>Thread</code> 对象操作的是同一个对象，所以就会产生共享数据的问题，即，不安全问题的产生。</p><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSun</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TestClass c = <span class="keyword">new</span> TestClass();</span><br><span class="line">    TestClass d = <span class="keyword">new</span> TestClass();</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(c);        <span class="comment">//TestClass 必须实现Runnable的run方法才能使用这种方式。</span></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(d);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承 Runnable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;子类重写run方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多写一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSun</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TestSun testSun = <span class="keyword">new</span> TestSun();</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(testSun);</span><br><span class="line">    t.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解：例用实现Runnable还有一个好处就是，我不同的类，我可以有不同的run实现方法，</p><h2 id="Runable-共享资源问题"><a href="#Runable-共享资源问题" class="headerlink" title="Runable 共享资源问题"></a>Runable 共享资源问题</h2><p>下面代码的执行结果是：输出 50次。如果使用继承Thread的方式的话，会被执行200次。<br>原就是就因为 Test 对象实际上被所有线程所共享，所有线程所操作的时同一个对象。<br>如果使用Thread方式，给变量i设为静态也可以做到执行50次，但是静态的生命周期太长了，不推荐。<br>这个例子为了说明 Thread 和 Runable 的区别。<br>而为什么 Thread 对执行多次，是因为继承的Thread 后，每new 一次，就是创建的一个新对象，每个对象都是一分独立的副本，并不是同一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liukai.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test test = <span class="keyword">new</span> Test();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    jhread t3 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t3.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + i--);</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>runnable 和 继承Thread 方式的区别<br>这种非常重要的概念，一定要明白。关系到线程的执行方式。</p><ol><li>继承Thread类方式：线程到码存放在Thread子类的run方法中。即继承了Thread类的自定义线程类的run方法中。</li><li>实现Runnable接口方式：线程代码存在接口的子类的run方法中。注意是接口的子类的run方法中，不是实现类的run方法中。</li></ol><p>第2种方式最常用。<br>优点：</p><ol><li>避免单继承的局限性。</li><li>多个业务代码可以有不同的代码存放区。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> juc </tag>
            
            <tag> thread </tag>
            
            <tag> runnable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>juc06-BLOCKED状态</title>
      <link href="posts/224c62dd.html"/>
      <url>posts/224c62dd.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>java线程模型中有<code>5种</code>线程状态。五种状态之间可以进行转换。</p><p>强调一下 <code>BLOCKED</code> 状态跟 <code>I/O</code> 的阻塞是不同的，它不是一般意义上的阻塞，而是特指被 <code>synchronized 块阻塞</code>，即是跟线程同步有关的一个状态。</p><h2 id="BLOCKED-阻塞"><a href="#BLOCKED-阻塞" class="headerlink" title="BLOCKED(阻塞)"></a>BLOCKED(阻塞)</h2><p>简单定义为:</p><blockquote><p>A thread that is blocked waiting for a monitor lock is in this state.<br>一个正在阻塞等待一个监视器锁的线程处于这一状态。</p></blockquote><p>两种阻塞的情况：</p><p>第一种：</p><blockquote><p>A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method.<br>一个处于 blocked 状态的线程正在等待一个监视器锁以进入一个同步的块或方法。</p></blockquote><p>第二种：</p><blockquote><p>A thread in the blocked state is waiting for a monitor lock to reenter a synchronized block/method after calling Object.wait。<br>一个处于 blocked 状态的线程正在等待一个监视器锁，在其调用 Object.wait 方法之后，以再次进入一个同步的块或方法。</p></blockquote><h2 id="进入（enter）同步块时阻塞"><a href="#进入（enter）同步块时阻塞" class="headerlink" title="进入（enter）同步块时阻塞"></a>进入（enter）同步块时阻塞</h2><p>监视器锁用于同步访问，以达到多线程间的互斥。所以一旦一个线程获取锁进入同步块，在其出来之前，如果其它线程想进入，就会因为获取不到锁而阻塞在同步块之外，这时的状态就是 BLOCKED。<br>注：这一状态的进入及解除都不受我们控制，当锁可用时，线程即从阻塞状态中恢复。</p><h2 id="wait-之后重进入（reenter）同步块时阻塞"><a href="#wait-之后重进入（reenter）同步块时阻塞" class="headerlink" title="wait 之后重进入（reenter）同步块时阻塞"></a>wait 之后重进入（reenter）同步块时阻塞</h2><p>举个场景：</p><ol><li>调用 wait 方法必须在同步块中，即是要先获取锁并进入同步块，这是第一次 enter。<br>而调用 wait 之后则会释放该锁，并进入此锁的等待队列（wait set）中。</li><li>当收到其它线程的 notify 或 notifyAll 通知之后，等待线程并不能立即恢复执行，因为停止的地方是在同步块内，而锁已经释放了，所以它要重新获取锁才能再次进入（reenter）同步块，然后从上次 wait 的地方恢复执行。</li></ol><p>这是第二次 enter，所以叫 reenter。<br>但锁并不会优先给它，该线程还是要与其它线程去竞争锁，这一过程跟 enter 的过程其实是一样的，因此也可能因为锁已经被其它线程据有而导致 BLOCKED。</p><h2 id="模拟-BLOCKED-代码"><a href="#模拟-BLOCKED-代码" class="headerlink" title="模拟 BLOCKED 代码"></a>模拟 BLOCKED 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBlocked</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> counter;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            counter++;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Counter c = <span class="keyword">new</span> Counter();</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            c.increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1线程&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line"></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            c.increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t2线程&quot;</span>);</span><br><span class="line">    t2.start();</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">100</span>); <span class="comment">// 确保 t2 run已经得到执行</span></span><br><span class="line">    assertThat(t2.getState()).isEqualTo(Thread.State.BLOCKED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为什么专门提这一块，因为后面在排查问题，查看错误的vm_log时，线常会看到BLOCKED状态，需要了解这个状态代表什么，排查问题才看的问是什么意思。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> concurrent </tag>
            
            <tag> juc </tag>
            
            <tag> BLOCKED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发线程和进程的区别</title>
      <link href="posts/594d4e80.html"/>
      <url>posts/594d4e80.html</url>
      
        <content type="html"><![CDATA[<h2 id="在开销方面"><a href="#在开销方面" class="headerlink" title="在开销方面"></a>在开销方面</h2><p>每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；<br>线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</p><h2 id="所处环境"><a href="#所处环境" class="headerlink" title="所处环境"></a>所处环境</h2><p>在操作系统中能同时运行多个进程（程序）；<br>而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</p><h2 id="内存分配方面"><a href="#内存分配方面" class="headerlink" title="内存分配方面"></a>内存分配方面</h2><p>系统在运行的时候会为每个进程分配不同的内存空间；<br>而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。</p><h2 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h2><p>没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；<br>线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p><h2 id="进程示例"><a href="#进程示例" class="headerlink" title="进程示例"></a>进程示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在Java中如何开启一个进程：运行记事本程序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//方式1：使用Runtime类的exec方法</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(<span class="string">&quot;notepad&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：使用ProcessBuilder的start方法</span></span><br><span class="line">        ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;notepad&quot;</span>);</span><br><span class="line">        pb.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>juc05--线程通信</title>
      <link href="posts/55398.html"/>
      <url>posts/55398.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>目的：就是让线程间具有互相发送信号通信的能力。</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>核心：利用共享对象实现通信，这里的通信不是指传值，而是发送信号。<br>目的：就是让线程间具有互相发送信号通信的能力。<br>而且，线程通信可以实现，一个线程可以等待来自其他线程的信号。<br>举个例子，一个线程B可能正在等待来自线程A的信号，这个信号告诉线程B数据已经处理好了。</p><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>开发中不免会遇到，需要所有子线程执行完毕通知主线程处理某些逻辑的场景。<br>或者是 线程A 在执行到某个条件通知 线程B 执行某个操作。<br>在java中，比较典型的就是：等待通知机制。</p><h3 id="等待通知机制"><a href="#等待通知机制" class="headerlink" title="等待通知机制"></a>等待通知机制</h3><p>等待通知模式是 Java 中比较经典的线程通信方式。<br>两个线程通过对同一对象调用等待 wait() 和通知 notify() 方法来进行通讯。<br>这种方式，有三个参与者：</p><ol><li>阻塞线程 wait()</li><li>唤醒线程 notify()</li><li>monitor锁</li></ol><p>看个最简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWaitNotify4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A 1, B 1, B 2, B 3, A 2, A 3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        Thread A = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;A 1&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;A 2&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;A 3&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread B = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;B 1&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;B 2&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;B 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    lock.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A 1</span><br><span class="line">B 1</span><br><span class="line">B 2</span><br><span class="line">B 3</span><br><span class="line">A 2</span><br><span class="line">A 3</span><br></pre></td></tr></table></figure><p>这个例子很简单，<code>线程A</code> 启动后，wait 自己，等待 <code>线程B</code> 唤醒自己。<br>这里 <code>lock</code>，就是一个 monitor锁，是不是奇怪，为什么需要一个 monitor锁，因为等待和唤醒必须是同一个锁，后面说。</p><h3 id="线程通信方式"><a href="#线程通信方式" class="headerlink" title="线程通信方式"></a>线程通信方式</h3><p>不同线程之间通过使用以下方法进行通信：</p><ol><li>wait();        等待，该线程等待，并放弃执行权。</li><li>notify();        唤醒，唤醒正在等待中的其他线程。</li><li>notifyAll();        唤醒全部，推荐用这种<br>以上三个方法必须是同步线程中才能使用，锁对象才能使用。<br>只有同步才有锁的概念。</li></ol><p>而上面三个方法是属于 Object 的方法，理由是：<br>因为这些方法在操作同步中线程时，都必须要标识它们所操作线程持有的锁，只有同一个锁上的被等待线程可以被同一个锁上的notify唤醒。<br>不可以对不同的锁中的线程进行唤醒。<br>也就是说<code>等待</code>和<code>唤醒</code>必须是同一个锁，而锁可以是任意对象，所以可以被任意对象调用的方法定义Object类中。</p><h2 id="监视器对象"><a href="#监视器对象" class="headerlink" title="监视器对象"></a>监视器对象</h2><blockquote><p>监视器对象，实际使用中，不止一种，不同场景有不同使用方式。<br><code>monitor锁</code>是利用的对象的 monitor机制实现的，简单的说，对象的对象头存在隐藏字段，用来存储线程ID、锁标识、分代信息等，jvm 可以利用这个小存储进行线程状态的存储。</p></blockquote><h3 id="synchronized-方式"><a href="#synchronized-方式" class="headerlink" title="synchronized 方式"></a>synchronized 方式</h3><p>对象锁，就是创建一个中间对象，用来存储线程状态。<br>注间，这里方法使用 synchronized 进行修饰，synchronized 底层为 monitor锁。<br>使用 synchronized 和 synchronized(lock)，这两个是等价的，锁的都是同一个 monitor锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait 和 notify 使用的是同一把锁</span></span><br><span class="line"><span class="keyword">public</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifySlef</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">    lock.notify();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> waitSlef（）&#123;</span><br><span class="line">  <span class="comment">//注意，用的是 lock 这个对象来操作 wait</span></span><br><span class="line">  <span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">    lock.wait();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this-方式"><a href="#this-方式" class="headerlink" title="this 方式"></a>this 方式</h3><p>this 锁，锁的当前线程自己，所以只会等到自己执行完成才会出这个方法。<br>这里就有个问题，如果 this.wait()，谁来唤醒自己，因为 this 只能是自己持有，别的线程根本不可能拿到这个锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test2 testWait = <span class="keyword">new</span> Test2();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(testWait);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifySelf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;notify，thread: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    <span class="keyword">this</span>.notify();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitSelf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;wait，thread: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">      <span class="keyword">this</span>.wait();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;current thread: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    waitSelf();</span><br><span class="line">    notifySelf();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>只 wait 住自己，没有办法再唤醒自己，卡在 wait 这一步，程序也不会退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">current thread: Thread-0</span><br><span class="line">wait，thread: Thread-0</span><br></pre></td></tr></table></figure><p>在线程通信中，使用 this.wait() 如果没有设置超时时间，就会一直被阻塞，因为没有线程可以拿到 this 锁。</p><h3 id="类锁方式"><a href="#类锁方式" class="headerlink" title="类锁方式"></a>类锁方式</h3><p>这种方式也是对象没，每个类都会对就有一个 Class 对象，实际上就是锁的该类的 Class 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifyClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Test.class.notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (Test.class) &#123;</span><br><span class="line">    Test.class.wait();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="IllegalMonitorStateException-异常"><a href="#IllegalMonitorStateException-异常" class="headerlink" title="IllegalMonitorStateException 异常"></a>IllegalMonitorStateException 异常</h2><h3 id="异常代码演示"><a href="#异常代码演示" class="headerlink" title="异常代码演示"></a>异常代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWait</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Start-----&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait(<span class="number">1000</span>);  <span class="comment">//没有一个锁对象，所以报错！！！</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End-------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> WaitTest test = <span class="keyword">new</span> WaitTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.testWait();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;Thread-0&quot; Exception in thread &quot;Thread-1&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">Thread-1</span><br><span class="line">    at java.lang.Object.wait(Native Method)</span><br></pre></td></tr></table></figure><blockquote><p>错误的主要原因为：<br>违法的监控状态异常。当某个线程试图等待一个自己并不拥有的对象（O）的监控器或者通知其他线程等待该对象（O）的监控器时，抛出该异常。</p></blockquote><h3 id="大白话就是"><a href="#大白话就是" class="headerlink" title="大白话就是"></a>大白话就是</h3><p>当前线程必须持有一个当前线程的锁，才能使用 wait。<br>当前线程并没有持有一个锁，就来调 wait 方法，直接抛异常。<br>要使用 wait 必须拥有该对象的锁！！！<br>详细说明在 wait() 方法的<code>JDK</code>注释中有详细说明。</p><h3 id="正确写法"><a href="#正确写法" class="headerlink" title="正确写法"></a>正确写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> WaitTest test = <span class="keyword">new</span> WaitTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.testWait();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testWait</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//增加Synchronized关键字</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Start-----&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End-------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>wait</code> 和 <code>notify</code> 一般在使用时，容易搞混的就是 <code>IllegalMonitorStateException</code> 异常。<br>主要是容易忽略需要加锁这件事，因为 <code>wait</code> 和 <code>notify</code> 是对象的自有方法，一般在使用时会想当然的就调用，而忽略了要先拿到锁的前提。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> juc </tag>
            
            <tag> 通信 </tag>
            
            <tag> 线程通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>juc04-验证线程处于临时状态</title>
      <link href="posts/35966.html"/>
      <url>posts/35966.html</url>
      
        <content type="html"><![CDATA[<h2 id="临时状态"><a href="#临时状态" class="headerlink" title="临时状态"></a>临时状态</h2><p>当一个线程被启动时，并不代表线程就有了执行权。<br>线程处于临就绪状态并没有执行权，这个时候 main 线程继续往下执行，有可能是别的线程先开始执行。</p><h3 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test test = <span class="keyword">new</span> Test();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    t1.start();</span><br><span class="line">    test.flag = <span class="keyword">true</span>;</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">            Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + flag);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>1.期望结果</p><blockquote><p>Thread-0—&gt;false<br>Thread-1—&gt;true</p></blockquote><p>2.实际结果</p><blockquote><p>Thread-1---&gt;true<br>Thread-0---&gt;true</p></blockquote><p>结果说明了，如果是按照顺序执行，那么，应该是先 T0---&gt;false 再 T1---&gt;true。<br>但是结果确是上面的结果。说明: 当 main 线程开启后执行了t1，但是 t1 并没有马上执行，而是处于就绪状态。</p><h3 id="代码验证-1"><a href="#代码验证-1" class="headerlink" title="代码验证"></a>代码验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test test = <span class="keyword">new</span> Test();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">// 开启注释就可以按顺序执行，结果就是 false true了。</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   test.flag = <span class="keyword">true</span>;</span><br><span class="line">   t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">            Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + flag);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> concurrent </tag>
            
            <tag> juc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC03-模拟线程不安全</title>
      <link href="posts/13412.html"/>
      <url>posts/13412.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多时间，我们需要证明线程是不安全的，那就需要复现线程不安全的情况。<br>怎么复现？<br>通过代码构建不安全场景。</p><p>由于线程在执行的时候是异步的，当所有线程操作共享数据时，有可以能出现都已经进入判断的情况下，共享数据已被改变，但是其后线程不知道，当线程醒来的时候，直接开始运行，这样就会出现数据不全安的问题。</p><p>为什么能构建出来?<br>多条语句操作一个共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导到共享数据的错误。</p><h2 id="构建不安全场景"><a href="#构建不安全场景" class="headerlink" title="构建不安全场景"></a>构建不安全场景</h2><p>通过多个线程，在不加锁的情况下，让多条线程竞争同一个资源。</p><h3 id="构建多条线程"><a href="#构建多条线程" class="headerlink" title="构建多条线程"></a>构建多条线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DemoRunnable run = <span class="keyword">new</span> DemoRunnable();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">  </span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br></pre></td></tr></table></figure><h3 id="竞争资源"><a href="#竞争资源" class="headerlink" title="竞争资源"></a>竞争资源</h3><p>下面的代码执行，预其结果，最后打印：0，<br>而实际结果为负数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">          <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">//线程进入判断后睡10豪秒</span></span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                 Thread.sleep(<span class="number">10</span>);      <span class="comment">//让每一条进入的线程都sleep 10豪秒</span></span><br><span class="line">                 ticket--;           <span class="comment">//ticket也可以放到sleep上面，结果也是错的。</span></span><br><span class="line">                 System.out.println(ticket);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              flag = <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次结果都是不一样的！！！切记。<br><strong>结果</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">-2</span><br><span class="line">-3</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>上面的例子中有4条线程，4条进程都是在 ticket&gt;0 时进入。<br>假设此时ticket为1，按1、2、3、4顺序执行的。</p><blockquote><p>线程1先 sleep 10豪秒，然后 ticket--后此时为0。<br>线程2先sleep 10豪秒，然后 ticket--后此时为-1。<br>线程3先sleep 10豪秒，然后 ticket--后此时为-2。<br>线程4先sleep 10豪秒，然后 ticket--后此时为-3。</p></blockquote><p>由于是异步的，所以每次的错误并不一定是相同的。<br>由于每次，线程都已进入了判断，而每次sleep导至线程在执行上，都走到了一起，然后配来后分别各自执行各自的代码，此时所有线程都已绕过了if的判断，所以出现了问题。</p><p>一般CPU是交替执行线程的，但是每个线程被sleep后CPU就交换了执行权，当CPU再切换过来时，实际上次代码并没有执行完。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>构建线程不安全场景，可以帮助自己理解这种场景，在实际开发中，这种并发问题非常常见，在线程需要多加一些日志来保证业务线程的安全。很多时候业务不得不使用多线程来提升效率，而代价就是安全性，所以需要彻底搞通线程安全问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> concurrent </tag>
            
            <tag> juc </tag>
            
            <tag> 进程线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC多线程02--什么是上下文切换</title>
      <link href="posts/10731.html"/>
      <url>posts/10731.html</url>
      
        <content type="html"><![CDATA[<h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>即，不同线程之间的切换。<br>是存储和恢愎CPU 状态的过程，它使得线程执行能够从中断恢愎执行。<br>上下文切换是需要开销的。</p><h3 id="线程切换只在多核-CPU-中才有"><a href="#线程切换只在多核-CPU-中才有" class="headerlink" title="线程切换只在多核 CPU 中才有"></a>线程切换只在多核 CPU 中才有</h3><p>并不是，线程切换是CPU的功能，单核 CPU 也可以进行上下文切换。<br>CPU 执行线程的粒度是通过给分个线程分配时间切片来实现的。在单核时代，一个系统也会开很多程序，每个程序都会等待CPU来执行并不会等会某一个线程执行完毕。<br>比如单核时代玩 CS，可以边玩游戏边听千千静听。</p><p>CPU 通过切换时间分片来执行任务，切换前都会保存上一次任务的状态，这样下次再切回来的时候，可以继续执行当前这个状态。<br>这种保存再切换回来的操作，就是<strong>一次上下文切换</strong>。</p><h3 id="查看上下文切换"><a href="#查看上下文切换" class="headerlink" title="查看上下文切换"></a>查看上下文切换</h3><p>在linux下，使用<code>vmstat</code> 进行查看：</p><p>执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat 10 10</span><br></pre></td></tr></table></figure><p>查看一下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line">16  0      0 221468  41628 19576852    0    0   328   145    0    0  1  0 99  0  0</span><br><span class="line"> 0  2      0 222260  41748 19564900    0    0 292478 15765 14014 14467  5  1 84 10  0</span><br><span class="line"> 1  1      0 266040  41764 19512824    0    0 289173 18031 16546 11848  7  1 83  9  0</span><br><span class="line"> 3  0      0 230408  41636 19525744    0    0 293228 13974 16831 12866  6  1 83 10  0</span><br><span class="line"> 0  1      0 235068  41636 19497308    0    0 289227 17846 17284 13136  6  1 83 10  0</span><br><span class="line"> 0  2      0 247768  41536 19484392    0    0 297066 10654 16103 12549  3  1 85 11  0</span><br><span class="line"> 1  3      0 222212  41776 19476168    0    0 285245 22050 17815 13645  5  1 83 11  0</span><br><span class="line"> 0  1      0 225332  41584 19473580    0    0 295298 11009 15639 15600  3  1 82 15  0</span><br><span class="line"> 0  8      0 221040  40884 19477252    0    0 304033  5120 13754 13055  2  1 86 12  0</span><br><span class="line"> 1  1      0 227988  40440 19432700    0    0 296429  9154 15598 16809  4  1 82 13  0</span><br></pre></td></tr></table></figure><h3 id="如何减少上下文切换"><a href="#如何减少上下文切换" class="headerlink" title="如何减少上下文切换"></a>如何减少上下文切换</h3><p>既然上下文切换会导致额外的开销，因此减少上下文切换次数便可以提高多线程程序的运行效率。</p><p>减少上下文切换的方法有：</p><ol><li>无锁并发编程</li><li>CAS算法</li><li>使用最少线程和使用协程</li><li>协程，go 当中使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
            <tag> concurrent </tag>
            
            <tag> juc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC 多线程01--线程、进程概念</title>
      <link href="posts/27434.html"/>
      <url>posts/27434.html</url>
      
        <content type="html"><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>正在进行中的程序。<br>每一个进程至少有一个线程。当程序运行时在内存空间中开辟一片独立空间。每一个进程都有一个执行顺序。<br>一个进程更象一个任务。<br>进程的内存原理：</p><ul><li>应用程序在执行时都会在内存中开辟一片内存空间并分配地址。进程用于标识这片空间，封装里面的控制单元。</li><li>而线程就是进程中的控制单元。线程在控制着进程的执行。</li></ul><h3 id="进程和内存"><a href="#进程和内存" class="headerlink" title="进程和内存"></a>进程和内存</h3><p>每个进程都有自己的一套虚拟内存地址，用来给自己的进程空间编号。<br>进程空间的数据同样以字节为单位，依次增加。<br>从功能上说，虚拟内存地址和物理内存地址类似，都是为数据提供位置索引。<br>进程的虚拟内存地址相互独立。因此，两个进程空间可以有相同的虚拟内存地址，如<code>0x10001000</code>。<br>虚拟内存地址和物理内存地址又有一定的对应关系，<br>对进程某个虚拟内存地址的操作，会被<code>CPU</code>翻译成对某个具体内存地址的操作。</p><p><img src="/posts/27434/%E8%BF%9B%E7%A8%8B%E5%AF%B9%E5%BA%94%E5%86%85%E5%AD%98.png" alt="进程对应内存"></p><h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><p>进程和线程都是由系统来进行创建，JVM通过调用当前系进行开辟进行和线程的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在Java中如何开启一个进程：运行记事本程序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//方式1：使用Runtime类的exec方法       </span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(<span class="string">&quot;notepad&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：使用ProcessBuilder的start方法</span></span><br><span class="line">        ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;notepad&quot;</span>);</span><br><span class="line">        pb.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程是进程中的内容。它是程序中的控制单元或叫执行路径。线程才是真正去执行的。一个进程可以有多个线程组成，他们分别执行不同的任务。<br>一个进程至少有一条线程，当线程内有多个进程同时运行时，这种方式 称为并发运行。如：web服务器。线程控制着进程的执行。<br>执行路径：一个程序从头走到尾就是一个执行路径</p><p>线程执行原理：以主线程为例，当执行进程时，进程内的线程开始执行代码。在程序中，内存中的代码都是由线程在执行的。java中的主线程就是main。</p><h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><h3 id="1-在开销方面"><a href="#1-在开销方面" class="headerlink" title="1.在开销方面"></a>1.在开销方面</h3><p>每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；<br>线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</p><h3 id="2-所处环境"><a href="#2-所处环境" class="headerlink" title="2.所处环境"></a>2.所处环境</h3><p>在操作系统中能同时运行多个进程（程序）；<br>而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</p><h3 id="3-内存分配方面"><a href="#3-内存分配方面" class="headerlink" title="3.内存分配方面"></a>3.内存分配方面</h3><p>系统在运行的时候会为每个进程分配不同的内存空间；<br>而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。</p><h3 id="4-包含关系"><a href="#4-包含关系" class="headerlink" title="4.包含关系"></a>4.包含关系</h3><p>没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；<br>线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一进程可以同时执行个线程，称多线程。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> concurrent </category>
          
          <category> juc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> 概念 </tag>
            
            <tag> java </tag>
            
            <tag> 线程 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 进程 </tag>
            
            <tag> concurrent </tag>
            
            <tag> juc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 安装JDK</title>
      <link href="posts/70942257.html"/>
      <url>posts/70942257.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>有三种安装方式</p><ul><li>tar包安装</li><li>yum安装</li><li>bin安装</li></ul><p>三种安装方式任选其一即可，有各自的特点。</p><h3 id="tar包安装"><a href="#tar包安装" class="headerlink" title="tar包安装"></a>tar包安装</h3><p>步骤：</p><ol><li>建立目录</li><li>下载安装包</li><li>配置环境变量</li></ol><p>建立目录<br>如果是在linux下，推荐在<code>/usr/local/</code>下创建目录，如果是mac，根据自己的习惯来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/java</span><br></pre></td></tr></table></figure><p>下载安装包</p><p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p><p><img src="/posts/70942257/oracle%E4%B8%8B%E8%BD%BD%E9%A1%B5%E9%9D%A2.jpg" alt="oracle下载页面"></p><p>解压安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u221-linux-x64.tar.gz</span><br><span class="line">mv jdk1.8.0_221/ /usr/local/java/</span><br></pre></td></tr></table></figure><p>设置环境变量</p><p>linux 的话就直接配置<code>/etc/profile</code>，mac也有这个文件，但是建议配置在用户配置文件<code>~/.bash_profile</code>，如果不存在就手动创建一个文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_221</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="yum方式安装"><a href="#yum方式安装" class="headerlink" title="yum方式安装"></a>yum方式安装</h3><p>yum方式安装的是<code>OpenJDK</code>这个得注意。先看本机是否已安装，如果有安装先卸载再安装。</p><ol><li><p>查看是否已安装过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep java</span><br></pre></td></tr></table></figure></li><li><p>卸载多个jdk<br>同名的可以直接一起卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove  java-1.7.0-openjdk*</span><br></pre></td></tr></table></figure></li><li><p>查看可安装的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y list java-1.7*</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install java-1.7.0-openjdk*</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除内置OpenJDK"><a href="#删除内置OpenJDK" class="headerlink" title="删除内置OpenJDK"></a>删除内置OpenJDK</h3><p>默认OpenJDK的安装目录在<code>/usr/lib/jvm</code>，查看OpenJDK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/lib/jvm</span><br></pre></td></tr></table></figure><p>查看一下已经安装的<code>OpenJDK</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |grep java</span><br></pre></td></tr></table></figure><p>移除默认OpenJDK</p><p>格式：</p><blockquote><p>rpm -e --nodeps jdkxxxxxx</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.302.b08-0.el7_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.302.b08-0.el7_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-devel-1.8.0.302.b08-0.el7_9.x86_64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> linux </tag>
            
            <tag> jdk </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言-gcc使用</title>
      <link href="posts/4e1ccfbe.html"/>
      <url>posts/4e1ccfbe.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>编译 <code>C</code> 言语有: gcc 和 g++，两者都可以编译，本文介绍<code>gcc</code></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>macOS安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gcc</span><br></pre></td></tr></table></figure><p>centOS安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc</span><br></pre></td></tr></table></figure><p>验证一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>准备一个Hello World的源文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Hello, World! \n&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello.out</span><br><span class="line">./hello.out</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>C</code>语言简单又高效，学习起来也很简单，没有太多概念。掌握<code>C</code>语言可以更好的让自己可以控制硬件。</p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> cpp </tag>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c和cpp环境准备</title>
      <link href="posts/c5738510.html"/>
      <url>posts/c5738510.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在开始转行干<code>java</code>，但是在学校和最初的这两年搞C，始终是对C有个执念，总归需要留下点什么。<br>把所以有记录，转成博客输出。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>安装 vscode</li><li>安装 gcc</li></ul><h2 id="安装-vscode"><a href="#安装-vscode" class="headerlink" title="安装 vscode"></a>安装 vscode</h2><p>直接下载<code>vscode</code>进行学习和开发，不推荐<code>Clion</code>是因为要钱！<br>还有一个原因，在<code>C/C++</code>开发者当中，使用<code>vscode</code>的群体比较大，文档比较多。<br>下载地址：<a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a></p><p>不要使用console不编写代码，因为如果你不习惯console开发，这点练习量，不会让你得到什么进步，如果你已经linux用的很6了，用console也不会有什么收获。<br>直接用ide，可以快速熟悉ide的开发模式。</p><h3 id="安装C-C-插件"><a href="#安装C-C-插件" class="headerlink" title="安装C/C++插件"></a>安装C/C++插件</h3><p><img src="/posts/c5738510/vscode%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.jpg" alt="vscode插件安装"></p><h3 id="安装Code-Runner"><a href="#安装Code-Runner" class="headerlink" title="安装Code Runner"></a>安装Code Runner</h3><p><img src="/posts/c5738510/%E5%AE%89%E8%A3%85codeRunner.jpg" alt="安装codeRunner"></p><p>安装完成后点小齿轮: Extension Setting--&gt;Code-runner:Run in Terminal</p><h2 id="安装-gcc"><a href="#安装-gcc" class="headerlink" title="安装 gcc"></a>安装 gcc</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gcc</span><br></pre></td></tr></table></figure><p>验证一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure><h2 id="使用-vscode"><a href="#使用-vscode" class="headerlink" title="使用 vscode"></a>使用 vscode</h2><p>创建一个项目目录，然后使用从资源管理器中打开。<br>这样打开的话，会加载工作环境。</p><p><img src="/posts/c5738510/%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C.jpg" alt=" 运行效果"></p><p>到这里就OK了，可以开始使用。</p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> cpp </tag>
            
            <tag> ide </tag>
            
            <tag> 环境 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔--旅行开始的起点</title>
      <link href="posts/4f61675.html"/>
      <url>posts/4f61675.html</url>
      
        <content type="html"><![CDATA[<p>从这里开始。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
