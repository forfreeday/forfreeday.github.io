<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>思想家</title>
  
  <subtitle>有限的时间，编写先限的可能</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liukay.com/"/>
  <updated>2020-12-17T03:00:57.074Z</updated>
  <id>http://liukay.com/</id>
  
  <author>
    <name>咪雅先森</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法--leetcode-283-移动零</title>
    <link href="http://liukay.com/2020/12/16/%E7%AE%97%E6%B3%95--leetcode-283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
    <id>http://liukay.com/2020/12/16/算法--leetcode-283-移动零/</id>
    <published>2020-12-16T03:30:33.000Z</published>
    <updated>2020-12-17T03:00:57.074Z</updated>
    
    <content type="html"><![CDATA[<p>相当于是使用 for 进行交换的一个小技巧的练习，后面会给出一些算法的小技巧，都是总结的一些算法的小技巧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">               arr[j] = arr[i];</span><br><span class="line">               arr[i] = temp;</span><br><span class="line">               j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相当于是使用 for 进行交换的一个小技巧的练习，后面会给出一些算法的小技巧，都是总结的一些算法的小技巧。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="algorithm" scheme="http://liukay.com/categories/algorithm/"/>
    
      <category term="leetcode" scheme="http://liukay.com/categories/algorithm/leetcode/"/>
    
    
      <category term="算法" scheme="http://liukay.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="http://liukay.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>算法-leetcode007-整数反转</title>
    <link href="http://liukay.com/2020/12/16/%E7%AE%97%E6%B3%95--leetcode007-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <id>http://liukay.com/2020/12/16/算法--leetcode007-整数反转/</id>
    <published>2020-12-16T03:14:32.000Z</published>
    <updated>2020-12-16T03:21:23.915Z</updated>
    
    <content type="html"><![CDATA[<p>当所计算数字大于2^30 次方或等于2^31 次方但余下的数大于7或小于-2^30 次方或等于-2^31 次方但余下的数小于-8时，只要再计算一次就溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pop;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        pop = x % <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;pop: &quot;</span> + pop);</span><br><span class="line">        x = x / <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;x: &quot;</span> + x);</span><br><span class="line">        <span class="keyword">if</span> (res &gt; Integer.MAX_VALUE / <span class="number">10</span> || (res == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; Integer.MIN_VALUE / <span class="number">10</span> || (res == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;res before: &quot;</span> + res);</span><br><span class="line">        res = res * <span class="number">10</span> + pop;</span><br><span class="line">        System.out.println(<span class="string">&quot;res after: &quot;</span> + res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/reverse-integer/">Leetcode007</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当所计算数字大于2^30 次方或等于2^31 次方但余下的数大于7或小于-2^30 次方或等于-2^31 次方但余下的数小于-8时，只要再计算一次就溢出。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="algorithm" scheme="http://liukay.com/categories/algorithm/"/>
    
      <category term="leetcode" scheme="http://liukay.com/categories/algorithm/leetcode/"/>
    
    
      <category term="算法" scheme="http://liukay.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-栈stack-用栈实现队列-Leetcode232</title>
    <link href="http://liukay.com/2020/12/15/%E7%AE%97%E6%B3%95--leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>http://liukay.com/2020/12/15/算法--leetcode232-用栈实现队列/</id>
    <published>2020-12-15T05:57:25.000Z</published>
    <updated>2020-12-16T03:12:03.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><p>这个是 Leetcode 232 题，用两个栈来实现一个先进先出的队列，实现了一个版本。</p><p><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">https://leetcode-cn.com/problems/implement-queue-using-stacks/</a></p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize your data structure here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Push element x to the back of queue.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack1.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = stack2.pop();</span><br><span class="line">        <span class="keyword">while</span> (!stack2.empty()) &#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the front element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = stack2.peek();</span><br><span class="line">        <span class="keyword">while</span> (!stack2.empty()) &#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns whether the queue is empty.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack1.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用栈实现队列&quot;&gt;&lt;a href=&quot;#用栈实现队列&quot; class=&quot;headerlink&quot; title=&quot;用栈实现队列&quot;&gt;&lt;/a&gt;用栈实现队列&lt;/h2&gt;&lt;p&gt;这个是 Leetcode 232 题，用两个栈来实现一个先进先出的队列，实现了一个版本。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/implement-queue-using-stacks/&quot;&gt;https://leetcode-cn.com/problems/implement-queue-using-stacks/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://liukay.com/categories/algorithm/"/>
    
      <category term="栈" scheme="http://liukay.com/categories/algorithm/%E6%A0%88/"/>
    
    
      <category term="算法" scheme="http://liukay.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="http://liukay.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>集群容错模式</title>
    <link href="http://liukay.com/2020/05/06/architecture-%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liukay.com/2020/05/06/architecture-集群容错模式/</id>
    <published>2020-05-06T09:39:25.000Z</published>
    <updated>2020-12-15T04:38:32.377Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Failfast-Cluster模式"><a href="#Failfast-Cluster模式" class="headerlink" title="Failfast Cluster模式"></a>Failfast Cluster模式</h3><p>这种模式称为快速失败模式，调用只执行一次，失败则立即报错。这种模式适用于非幂等性操作，每次调用的副作用是不同的，如写操作，比如交易系统我们要下订单，如果一次失败就应该让它失败，通常由服务消费方控制是否重新发起下订单操作请求（另一个新的订单）。<br>-Failsafe Cluster模式<br>失败安全模式，如果调用失败， 则直接忽略失败的调用，而是要记录下失败的调用到日志文件，以便后续审计。<br><a id="more"></a></p><h3 id="Failback-Cluster模式"><a href="#Failback-Cluster模式" class="headerlink" title="Failback Cluster模式"></a>Failback Cluster模式</h3><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p><h3 id="Forking-Cluster模式"><a href="#Forking-Cluster模式" class="headerlink" title="Forking Cluster模式"></a>Forking Cluster模式</h3><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。</p><h3 id="Broadcast-Cluster模式"><a href="#Broadcast-Cluster模式" class="headerlink" title="Broadcast Cluster模式"></a>Broadcast Cluster模式</h3><p>广播调用所有提供者，逐个调用，任意一台报错则报错（2.1.0开始支持）。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Failfast-Cluster模式&quot;&gt;&lt;a href=&quot;#Failfast-Cluster模式&quot; class=&quot;headerlink&quot; title=&quot;Failfast Cluster模式&quot;&gt;&lt;/a&gt;Failfast Cluster模式&lt;/h3&gt;&lt;p&gt;这种模式称为快速失败模式，调用只执行一次，失败则立即报错。这种模式适用于非幂等性操作，每次调用的副作用是不同的，如写操作，比如交易系统我们要下订单，如果一次失败就应该让它失败，通常由服务消费方控制是否重新发起下订单操作请求（另一个新的订单）。&lt;br&gt;-Failsafe Cluster模式&lt;br&gt;失败安全模式，如果调用失败， 则直接忽略失败的调用，而是要记录下失败的调用到日志文件，以便后续审计。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="architecture" scheme="http://liukay.com/categories/architecture/"/>
    
      <category term="中间件" scheme="http://liukay.com/categories/architecture/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="架构" scheme="http://liukay.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="概念" scheme="http://liukay.com/tags/%E6%A6%82%E5%BF%B5/"/>
    
      <category term="容错" scheme="http://liukay.com/tags/%E5%AE%B9%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>NIO概述</title>
    <link href="http://liukay.com/2019/11/01/java-nio-1-NIO%E6%A6%82%E8%BF%B0/"/>
    <id>http://liukay.com/2019/11/01/java-nio-1-NIO概述/</id>
    <published>2019-11-01T15:12:02.000Z</published>
    <updated>2020-12-16T03:41:57.975Z</updated>
    
    <content type="html"><![CDATA[<p>服务器实现模式为一个请求一个线程，但客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</p><p>Java NIO（Non-blocking / New IO）是从Java 1.4版本开始引入的一个新的IO API，可以替代标准的Java IO API。<br>NIO 和 IO 的区别在于，IO 是面向流，NIO 是面向缓存。<br>是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，<br>成为解决高并发与大量连接、I/O处理问题的有效方式。<br><a id="more"></a></p><h2 id="传统面向流的，单向的。"><a href="#传统面向流的，单向的。" class="headerlink" title="传统面向流的，单向的。"></a>传统面向流的，单向的。</h2><p>三个核心组件</p><ol><li>Channels</li><li>Buffers</li><li>Selectors</li></ol><h3 id="1-Channels-负责传输"><a href="#1-Channels-负责传输" class="headerlink" title="1.Channels  负责传输"></a>1.Channels  负责传输</h3><p>白话: 就是数据传输用的通道。作用是打开到IO设备的连接，文件、套接字都行。<br>绕绕话:   标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。</p><h3 id="2-Buffers-负责存储"><a href="#2-Buffers-负责存储" class="headerlink" title="2.Buffers  负责存储"></a>2.Buffers  负责存储</h3><p>缓冲区，用来存放具体要被传输的数据，比如文件、scoket 等。这里将数据装入 Buffers 再通过通道进行传输。</p><h3 id="3-Selector"><a href="#3-Selector" class="headerlink" title="3.Selector"></a>3.Selector</h3><p>负责监听事件和选择对应事件的渠道。</p><p>NIO 主要的编程模型来自 Reactor</p><h2 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h2><p>NIO基于Reactor，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。<br>也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。</p><h3 id="NIO-是一种可以替代-Java-IO-API-的新API，提供了与标准-API-不同的工作方式。"><a href="#NIO-是一种可以替代-Java-IO-API-的新API，提供了与标准-API-不同的工作方式。" class="headerlink" title="NIO 是一种可以替代 Java IO API 的新API，提供了与标准 API 不同的工作方式。"></a>NIO 是一种可以替代 Java IO API 的新API，提供了与标准 API 不同的工作方式。</h3><h3 id="BIO是一个连接一个线程。"><a href="#BIO是一个连接一个线程。" class="headerlink" title="BIO是一个连接一个线程。"></a>BIO是一个连接一个线程。</h3><h3 id="NIO是一个请求一个线程。"><a href="#NIO是一个请求一个线程。" class="headerlink" title="NIO是一个请求一个线程。"></a>NIO是一个请求一个线程。</h3><h3 id="AIO是一个有效请求一个线程。"><a href="#AIO是一个有效请求一个线程。" class="headerlink" title="AIO是一个有效请求一个线程。"></a>AIO是一个有效请求一个线程。</h3><h2 id="三种IO-的区别"><a href="#三种IO-的区别" class="headerlink" title="三种IO 的区别"></a>三种IO 的区别</h2><p>Java BIO:同步并阻塞<br>服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</p><p>Java NIO: 同步非阻塞<br>服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</p><p>Java AIO(NIO.2) :异步非阻塞<br>服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处。</p><h3 id="BIO、NIO、AIO适用场景分析"><a href="#BIO、NIO、AIO适用场景分析" class="headerlink" title="BIO、NIO、AIO适用场景分析:"></a>BIO、NIO、AIO适用场景分析:</h3><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。<br>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。<br>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务器实现模式为一个请求一个线程，但客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。&lt;/p&gt;
&lt;p&gt;Java NIO（Non-blocking / New IO）是从Java 1.4版本开始引入的一个新的IO API，可以替代标准的Java IO API。&lt;br&gt;NIO 和 IO 的区别在于，IO 是面向流，NIO 是面向缓存。&lt;br&gt;是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，&lt;br&gt;成为解决高并发与大量连接、I/O处理问题的有效方式。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="nio" scheme="http://liukay.com/categories/java/nio/"/>
    
    
      <category term="nio" scheme="http://liukay.com/tags/nio/"/>
    
      <category term="概述" scheme="http://liukay.com/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Spring Gateway 静态路由--路径切割</title>
    <link href="http://liukay.com/2019/07/22/Spring-Spring-Cloud-Gateway-%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1-%E8%B7%AF%E5%BE%84%E5%88%87%E5%89%B2/"/>
    <id>http://liukay.com/2019/07/22/Spring-Spring-Cloud-Gateway-静态路由-路径切割/</id>
    <published>2019-07-22T03:40:18.000Z</published>
    <updated>2020-12-15T04:09:18.979Z</updated>
    
    <content type="html"><![CDATA[<p>以代码 或 配置文件形式进行配置。<br>RewritePath：路径匹配切割<br>StripPrefix： 路径载取</p><p>参数说明<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">路由ID</span></span><br><span class="line"><span class="attr">uri:</span> <span class="string">目标地址，可以是服务，如果服务Spring推荐用全大写，实际调用大小写不敏感，都可以调通。</span></span><br><span class="line"><span class="attr">predicates:</span> <span class="string">匹配路径，以浏览器请求的端口号后面的第一级路径为起始。</span></span><br><span class="line"><span class="attr">filters:</span> <span class="string">过滤器，包含Spring</span> <span class="string">Gateway</span> <span class="string">内置过滤器，可以自定义过滤器。</span></span><br></pre></td></tr></table></figure></p><h2 id="1-请求转发，转发到目标地址"><a href="#1-请求转发，转发到目标地址" class="headerlink" title="1. 请求转发，转发到目标地址"></a>1. 请求转发，转发到目标地址</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="comment"># 跳转URL</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">163_route</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">http://www.163.com/</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/163</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-切路径"><a href="#2-切路径" class="headerlink" title="2.切路径"></a>2.切路径</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oauth2 认证</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">OAUTH2</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">lb://OAUTH-SERVER</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/oauth-server/**</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>参数说明</p><ol><li>StripPrefix的意思是将路径切掉一级，这个例子中 oauth-server 被剪。</li><li>请求路径：localhost:9000/oauth-server/oauth-center/oauth/token?username=admin</li><li>最终结果：lb://OAUTH-SERVER/oauth-center/oauth/token?username=admin</li></ol><h2 id="3-请求重写"><a href="#3-请求重写" class="headerlink" title="3.请求重写"></a>3.请求重写</h2>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oauth2 认证</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">OAUTH2</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">lb://OAUTH-SERVER/</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/oauth-server/**</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RewritePath=/oauth-server/(?&lt;path&gt;.*),</span> <span class="string">/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><ol><li>请求路径: localhost:9000/oauth-server/oauth-center/oauth/token?username=admin</li><li>最终结果: lb://OAUTH-SERVER/oauth-center/oauth/token?username=admin</li></ol><h3 id="验证了一下，RewritePath-的处理方式："><a href="#验证了一下，RewritePath-的处理方式：" class="headerlink" title="验证了一下，RewritePath 的处理方式："></a>验证了一下，RewritePath 的处理方式：</h3><ol><li>RewritePath 找到自己的 /oauth-server/ 这一段，从 - Path 中去匹配，如果能匹配的到就是会将路径进行切割，注意是切割</li><li>切割方式将 /oauth-server/(?<path></path>.*) ，中 <path></path> 中的路径切出来，也就是 oauth-server/后面的部份。</li><li>并将切的结果赋值到 {path} 中。</li><li>最后的拼接路径为     lb://SPRINGCLOUD-PROVIDER/path</li></ol><h3 id="Path-设置多个无效"><a href="#Path-设置多个无效" class="headerlink" title="-Path 设置多个无效"></a>-Path 设置多个无效</h3><p>验证 predicates 的 -Path 设置多个无效，如果 -Path 中的路径匹配对了，但是 RewritePath 中的路径和 -Path 匹配不上会报 HTTP Status 404</p><h2 id="4-路径重定–结果路径多一级"><a href="#4-路径重定–结果路径多一级" class="headerlink" title="4.路径重定–结果路径多一级"></a>4.路径重定–结果路径多一级</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">4</span><span class="string">.路径重写</span></span><br><span class="line">    <span class="string">这个测试，是在请求路径中不存在的url，添加到最终的请求路径中去</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">OAUTH2</span></span><br><span class="line">     <span class="attr">uri:</span> <span class="string">lb://OAUTH-SERVER/</span></span><br><span class="line">     <span class="attr">predicates:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">Path=/oauth-server/**</span></span><br><span class="line">     <span class="attr">filters:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">RewritePath=/oauth-server/(?&lt;path&gt;.*),</span> <span class="string">/oauth-center/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><ul><li>请求路径: localhost:9000/oauth-server/oauth/token?username=admin</li><li>最终结果: lb://OAUTH-SERVER/oauth-center/oauth/token?username=admin<br>oauth-center 在请求的路径中不存在，在 RewritePath 中进行重写，添加了一级路径。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>RewritePath: predicates 中的 - path 路径如果和 RewritePath 匹配则会被 RewritePath 剪切。</li><li>StripPrefix：剪取指定路径位数截取</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">举个示例</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rewritepath_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/a/b/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RewritePath=/a/b/(?&lt;segment&gt;.*),</span> <span class="string">/f/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">请求的时为：</span> <span class="string">/a/b/c</span></span><br><span class="line"><span class="string">最终结果为：</span> <span class="string">/f/c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以代码 或 配置文件形式进行配置。&lt;br&gt;RewritePath：路径匹配切割&lt;br&gt;StripPrefix： 路径载取&lt;/p&gt;
&lt;p&gt;参数说明&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;路由ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;uri:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;目标地址，可以是服务，如果服务Spring推荐用全大写，实际调用大小写不敏感，都可以调通。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;predicates:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;匹配路径，以浏览器请求的端口号后面的第一级路径为起始。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;filters:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;过滤器，包含Spring&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Gateway&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;内置过滤器，可以自定义过滤器。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-请求转发，转发到目标地址&quot;&gt;&lt;a href=&quot;#1-请求转发，转发到目标地址&quot; class=&quot;headerlink&quot; title=&quot;1. 请求转发，转发到目标地址&quot;&gt;&lt;/a&gt;1. 请求转发，转发到目标地址&lt;/h2&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;routes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 跳转URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;163_route&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;uri:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;http://www.163.com/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;predicates:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Path=/163&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="spring" scheme="http://liukay.com/categories/java/spring/"/>
    
    
      <category term="spring cloud" scheme="http://liukay.com/tags/spring-cloud/"/>
    
      <category term="spring gateway" scheme="http://liukay.com/tags/spring-gateway/"/>
    
      <category term="路由" scheme="http://liukay.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>面试-产生线程死锁的原因和处理方式</title>
    <link href="http://liukay.com/2019/07/02/%E9%9D%A2%E8%AF%95-%E4%BA%A7%E7%94%9F%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <id>http://liukay.com/2019/07/02/面试-产生线程死锁的原因和处理方式/</id>
    <published>2019-07-02T03:28:10.000Z</published>
    <updated>2020-12-15T04:09:18.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h3><p>线程同步(就是加锁)会有一个问题，就是产生死锁<br>所谓死锁: 是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p><h3 id="帮助理解："><a href="#帮助理解：" class="headerlink" title="帮助理解："></a>帮助理解：</h3><p>地上放着两个桶泡面，一个老坛酸菜，一个小鸡炖磨茹。有两个人：<code>一个产品</code>(线程1)，<code>一个测试</code>(线程2)，同时扑向<code>抢老坛酸菜</code>(锁A)和<code>小鸡炖磨茹</code>(锁B)，产品拿到老坛酸菜，测试拿到小鸡炖磨茹，同一时刻，产品伸要去拽测试怀里的小鸡炖磨茹，测试伸手去拽产品的老坛酸菜，互使剪刀脚两个僵持不下，就卡死在那了，叫这就死锁。如果没有<code>一个开发</code>将他们各打一顿解救出来(中断状态)，它们将无法推进下去。</p><h3 id="发生死锁的具体原因如下"><a href="#发生死锁的具体原因如下" class="headerlink" title="发生死锁的具体原因如下:"></a>发生死锁的具体原因如下:</h3><a id="more"></a><ol><li>因为系统资源不足。</li><li>进程运行推进的顺序不合适。    </li><li>资源分配不当。</li></ol><h3 id="举列说明场景"><a href="#举列说明场景" class="headerlink" title="举列说明场景:"></a>举列说明场景:</h3><p>死锁是因为多线程访问共享资源，由于访问的顺序不当所造成的，通常是一个线程锁定了一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在等待，而无法执行的情况。</p><h3 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h3><p>如果只使用一个锁就不会有死锁的问题，不过复杂场景下不太理实。<br>1.以确定的顺序获得锁<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">线程A</span> <span class="string">---&gt;</span> <span class="string">锁定</span> <span class="string">A</span>  <span class="string">----&gt;</span> <span class="string">偿试锁定</span> <span class="string">B</span></span><br><span class="line"><span class="string">线程B</span> <span class="string">---&gt;</span> <span class="string">锁定</span> <span class="string">A</span>  <span class="string">----&gt;</span> <span class="string">偿试锁定</span> <span class="string">B</span></span><br><span class="line"><span class="string">这样就不会发生死锁</span></span><br></pre></td></tr></table></figure></p><p>2.超时放弃<br>Lock接口提供了boolean tryLock(long time, TimeUnit unit) throws InterruptedException方法，该方法可以按照固定时长等待锁，因此线程可以在获取锁超时以后，主动释放之前已经获得的所有的锁。通过这种方式，也可以很有效地避免死锁。</p><p>死锁示列:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">packag com.liukai.thread.daed_locl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncDeadLock</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object locka = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lockb = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SyncDeadLock().deadLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 拿到 lock-A!&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 偿试获取 lock-B!&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 已获得 lock-B!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockb)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 拿到 lock-B!&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 睡眠 500ms 后续继执行...!&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 偿试获取 lock-A!&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (locka)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 已获得 lock-A!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;thread2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景:&quot;&gt;&lt;/a&gt;背景:&lt;/h3&gt;&lt;p&gt;线程同步(就是加锁)会有一个问题，就是产生死锁&lt;br&gt;所谓死锁: 是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。&lt;/p&gt;
&lt;h3 id=&quot;帮助理解：&quot;&gt;&lt;a href=&quot;#帮助理解：&quot; class=&quot;headerlink&quot; title=&quot;帮助理解：&quot;&gt;&lt;/a&gt;帮助理解：&lt;/h3&gt;&lt;p&gt;地上放着两个桶泡面，一个老坛酸菜，一个小鸡炖磨茹。有两个人：&lt;code&gt;一个产品&lt;/code&gt;(线程1)，&lt;code&gt;一个测试&lt;/code&gt;(线程2)，同时扑向&lt;code&gt;抢老坛酸菜&lt;/code&gt;(锁A)和&lt;code&gt;小鸡炖磨茹&lt;/code&gt;(锁B)，产品拿到老坛酸菜，测试拿到小鸡炖磨茹，同一时刻，产品伸要去拽测试怀里的小鸡炖磨茹，测试伸手去拽产品的老坛酸菜，互使剪刀脚两个僵持不下，就卡死在那了，叫这就死锁。如果没有&lt;code&gt;一个开发&lt;/code&gt;将他们各打一顿解救出来(中断状态)，它们将无法推进下去。&lt;/p&gt;
&lt;h3 id=&quot;发生死锁的具体原因如下&quot;&gt;&lt;a href=&quot;#发生死锁的具体原因如下&quot; class=&quot;headerlink&quot; title=&quot;发生死锁的具体原因如下:&quot;&gt;&lt;/a&gt;发生死锁的具体原因如下:&lt;/h3&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="concurrent" scheme="http://liukay.com/categories/java/concurrent/"/>
    
    
      <category term="面试" scheme="http://liukay.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="线程死锁" scheme="http://liukay.com/tags/%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>使用递归实现地址数据菜单</title>
    <link href="http://liukay.com/2019/06/14/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%A1%A8%E6%A0%91%E5%9E%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://liukay.com/2019/06/14/算法-单表树型实现/</id>
    <published>2019-06-13T17:31:32.000Z</published>
    <updated>2020-12-15T04:09:18.998Z</updated>
    
    <content type="html"><![CDATA[<p>跟网上的不同的是，我这种方式是以时间换空间的做法，不会一次性把数据全查出来再慢慢遍历，而是每次查询是否存在子级，有就递归下去查。<br>数据量大时，查库的次数比较多，数据量少时对数据库查询次数少，压力较小，但是多次查询不会出现一次查询数据量很大卡住的情况。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>先获取一级菜单，对每个一级菜单设子区域。</li><li>如果子区域还有子区域，就递归查询，直到查不到子区域返回。</li><li>递归的核心就是在方法中设置一个返回条件，防止无限递归下去。</li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@author</span> liukai</span><br><span class="line"> * <span class="meta">@since</span> <span class="number">2019</span>/<span class="number">6</span>/<span class="number">12</span> <span class="number">16</span>:<span class="number">14.</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RegionDao regionDao = <span class="keyword">new</span> RegionDao();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先拿到第一级地址</span></span><br><span class="line">        <span class="comment">//2. 递归查每一级下面的子级：</span></span><br><span class="line">        <span class="comment">//      如果子级下面，还有子级就递归</span></span><br><span class="line">        <span class="comment">//      如果子级下面，没有子级就返回退出递归</span></span><br><span class="line">        List&lt;RegionBean&gt; firstRegion = regionDao.queryParentId(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (RegionBean regionBean : firstRegion) &#123;</span><br><span class="line">            <span class="comment">//设置子区域</span></span><br><span class="line">            regionBean.setRegionBeanList(setChild(regionBean.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">        String jsonObject = JSONObject.toJSONString(firstRegion);</span><br><span class="line"></span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归查询所有子级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;RegionBean&gt; <span class="title">setChild</span><span class="params">(<span class="keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">        List&lt;RegionBean&gt; childList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;RegionBean&gt; childTemp = regionDao.queryParentId(parentId);</span><br><span class="line">        <span class="keyword">if</span> (childTemp != <span class="keyword">null</span> &amp;&amp; childTemp.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RegionBean regionBean : childTemp) &#123;</span><br><span class="line">                childList.add(regionBean);</span><br><span class="line">                regionBean.setRegionBeanList(setChild(regionBean.getId()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> childList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> childList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegionDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询父级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;RegionBean&gt; <span class="title">queryParentId</span><span class="params">(<span class="keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">        List&lt;RegionBean&gt; regionBeans = dataBaseRegion();</span><br><span class="line">        List&lt;RegionBean&gt; firstRegion = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (RegionBean regionBean : regionBeans) &#123;</span><br><span class="line">            <span class="keyword">if</span> (regionBean.getParentId() == parentId) &#123;</span><br><span class="line">                firstRegion.add(regionBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> firstRegion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;RegionBean&gt; <span class="title">dataBaseRegion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;RegionBean&gt; regionBeans = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">2</span>, <span class="string">&quot;北京市&quot;</span>, <span class="string">&quot;北京市&quot;</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">22</span>, <span class="string">&quot;天津市&quot;</span>, <span class="string">&quot;天津市&quot;</span>, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">783</span>, <span class="string">&quot;上海市&quot;</span>, <span class="string">&quot;上海市&quot;</span>, <span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">457</span>, <span class="string">&quot;辽宁省&quot;</span>, <span class="string">&quot;辽宁省&quot;</span>, <span class="number">0</span>, <span class="number">8</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">458</span>, <span class="string">&quot;沈阳市&quot;</span>, <span class="string">&quot;辽宁省-沈阳市&quot;</span>, <span class="number">457</span>, <span class="number">1</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">472</span>, <span class="string">&quot;铁岭市&quot;</span>, <span class="string">&quot;辽宁省-铁岭市&quot;</span>, <span class="number">457</span>, <span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">480</span>, <span class="string">&quot;大连市&quot;</span>, <span class="string">&quot;辽宁省-大连市&quot;</span>, <span class="number">457</span>, <span class="number">3</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">491</span>, <span class="string">&quot;鞍山市&quot;</span>, <span class="string">&quot;辽宁省-鞍山市&quot;</span>, <span class="number">457</span>, <span class="number">4</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">499</span>, <span class="string">&quot;抚顺市&quot;</span>, <span class="string">&quot;辽宁省-抚顺市&quot;</span>, <span class="number">457</span>, <span class="number">5</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">507</span>, <span class="string">&quot;本溪市&quot;</span>, <span class="string">&quot;辽宁省-本溪市&quot;</span>, <span class="number">457</span>, <span class="number">6</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">514</span>, <span class="string">&quot;丹东市&quot;</span>, <span class="string">&quot;辽宁省-丹东市&quot;</span>, <span class="number">457</span>, <span class="number">7</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">521</span>, <span class="string">&quot;锦州市&quot;</span>, <span class="string">&quot;辽宁省-锦州市&quot;</span>, <span class="number">457</span>, <span class="number">8</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">529</span>, <span class="string">&quot;营口市&quot;</span>, <span class="string">&quot;辽宁省-营口市&quot;</span>, <span class="number">457</span>, <span class="number">9</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">536</span>, <span class="string">&quot;阜新市&quot;</span>, <span class="string">&quot;辽宁省-阜新市&quot;</span>, <span class="number">457</span>, <span class="number">10</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">544</span>, <span class="string">&quot;辽阳市&quot;</span>, <span class="string">&quot;辽宁省-辽阳市&quot;</span>, <span class="number">457</span>, <span class="number">11</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">552</span>, <span class="string">&quot;朝阳市&quot;</span>, <span class="string">&quot;辽宁省-朝阳市&quot;</span>, <span class="number">457</span>, <span class="number">12</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">560</span>, <span class="string">&quot;盘锦市&quot;</span>, <span class="string">&quot;辽宁省-盘锦市&quot;</span>, <span class="number">457</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">561</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">562</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">563</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">564</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">565</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">566</span>, <span class="string">&quot;三级数据&quot;</span>, <span class="string">&quot;辽宁省-三级数据&quot;</span>, <span class="number">560</span>, <span class="number">13</span>),</span><br><span class="line">                <span class="keyword">new</span> RegionBean(<span class="number">666</span>, <span class="string">&quot;四级数据&quot;</span>, <span class="string">&quot;辽宁省-四级数据&quot;</span>, <span class="number">566</span>, <span class="number">13</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> regionBeans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegionBean</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String fullLabel;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> parentId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> sortId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;RegionBean&gt; regionBeanList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;fullLabel&quot;:&quot;北京市&quot;,&quot;id&quot;:2,&quot;label&quot;:&quot;北京市&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:1&#125;,&#123;&quot;fullLabel&quot;:&quot;天津市&quot;,&quot;id&quot;:22,&quot;label&quot;:&quot;天津市&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:2&#125;,&#123;&quot;fullLabel&quot;:&quot;上海市&quot;,&quot;id&quot;:783,&quot;label&quot;:&quot;上海市&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:3&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省&quot;,&quot;id&quot;:457,&quot;label&quot;:&quot;辽宁省&quot;,&quot;parentId&quot;:0,&quot;regionBeanList&quot;:[&#123;&quot;fullLabel&quot;:&quot;辽宁省-沈阳市&quot;,&quot;id&quot;:458,&quot;label&quot;:&quot;沈阳市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:1&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-铁岭市&quot;,&quot;id&quot;:472,&quot;label&quot;:&quot;铁岭市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:2&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-大连市&quot;,&quot;id&quot;:480,&quot;label&quot;:&quot;大连市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:3&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-鞍山市&quot;,&quot;id&quot;:491,&quot;label&quot;:&quot;鞍山市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:4&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-抚顺市&quot;,&quot;id&quot;:499,&quot;label&quot;:&quot;抚顺市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:5&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-本溪市&quot;,&quot;id&quot;:507,&quot;label&quot;:&quot;本溪市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:6&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-丹东市&quot;,&quot;id&quot;:514,&quot;label&quot;:&quot;丹东市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:7&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-锦州市&quot;,&quot;id&quot;:521,&quot;label&quot;:&quot;锦州市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:8&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-营口市&quot;,&quot;id&quot;:529,&quot;label&quot;:&quot;营口市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:9&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-阜新市&quot;,&quot;id&quot;:536,&quot;label&quot;:&quot;阜新市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:10&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-辽阳市&quot;,&quot;id&quot;:544,&quot;label&quot;:&quot;辽阳市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:11&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-朝阳市&quot;,&quot;id&quot;:552,&quot;label&quot;:&quot;朝阳市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:12&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-盘锦市&quot;,&quot;id&quot;:560,&quot;label&quot;:&quot;盘锦市&quot;,&quot;parentId&quot;:457,&quot;regionBeanList&quot;:[&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:561,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:562,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:563,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:564,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:565,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;,&#123;&quot;fullLabel&quot;:&quot;辽宁省-三级数据&quot;,&quot;id&quot;:566,&quot;label&quot;:&quot;三级数据&quot;,&quot;parentId&quot;:560,&quot;regionBeanList&quot;:[&#123;&quot;fullLabel&quot;:&quot;辽宁省-四级数据&quot;,&quot;id&quot;:666,&quot;label&quot;:&quot;四级数据&quot;,&quot;parentId&quot;:566,&quot;regionBeanList&quot;:[],&quot;sortId&quot;:13&#125;],&quot;sortId&quot;:13&#125;],&quot;sortId&quot;:13&#125;],&quot;sortId&quot;:8&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1n712ep0u8906">https://cloud.tencent.com/developer/support-plan?invite_code=1n712ep0u8906</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟网上的不同的是，我这种方式是以时间换空间的做法，不会一次性把数据全查出来再慢慢遍历，而是每次查询是否存在子级，有就递归下去查。&lt;br&gt;数据量大时，查库的次数比较多，数据量少时对数据库查询次数少，压力较小，但是多次查询不会出现一次查询数据量很大卡住的情况。&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;先获取一级菜单，对每个一级菜单设子区域。&lt;/li&gt;
&lt;li&gt;如果子区域还有子区域，就递归查询，直到查不到子区域返回。&lt;/li&gt;
&lt;li&gt;递归的核心就是在方法中设置一个返回条件，防止无限递归下去。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://liukay.com/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://liukay.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://liukay.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>server和client模式的区别</title>
    <link href="http://liukay.com/2019/06/01/jvm-server%E5%92%8Cclient%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liukay.com/2019/06/01/jvm-server和client模式/</id>
    <published>2019-06-01T13:02:21.000Z</published>
    <updated>2020-12-15T04:09:18.992Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这两个相反的，由jvm启动时自动选择。</code></pre><p>   <code>-server 模式</code>：初始空间大，默认启动并行 VM，启动慢，运行快<br>    <code>-client 模式</code>：初始空间小，默认启动串行 VM，启动快，运行慢<br>    一般情况下 -server 模式多<br><a id="more"></a></p><ol><li><p>64位系统只能使用 server 模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">java version <span class="string">&quot;11.0.2&quot;</span> <span class="number">2019</span>-<span class="number">01</span>-<span class="number">15</span> LTS</span><br><span class="line">Java(TM) SE Runtime Environment <span class="number">18.9</span> (build <span class="number">11.0</span>.<span class="number">2</span>+<span class="number">9</span>-LTS)</span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server VM 18.9 <span class="params">(build <span class="number">11.0</span><span class="number">.2</span>+<span class="number">9</span>-LTS, mixed mode)</span></span></span><br></pre></td></tr></table></figure><p> 32位了解即可</p></li><li><p>测试 java -D 命令<br> -D 后面传入的命令，会解析成 System 中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//java -DtestJvm=test TestGetSystemProperties</span></span><br><span class="line">    String test = System.getProperty(<span class="string">&quot;testJvm&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != test) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test -&gt;&quot;</span> + test);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;property is null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.启动选择模式<br><code>java -client -showversion TestGetSystemProperties</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这两个相反的，由jvm启动时自动选择。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   &lt;code&gt;-server 模式&lt;/code&gt;：初始空间大，默认启动并行 VM，启动慢，运行快&lt;br&gt;    &lt;code&gt;-client 模式&lt;/code&gt;：初始空间小，默认启动串行 VM，启动快，运行慢&lt;br&gt;    一般情况下 -server 模式多&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="jvm" scheme="http://liukay.com/categories/java/jvm/"/>
    
    
      <category term="jvm" scheme="http://liukay.com/tags/jvm/"/>
    
      <category term="client 模式" scheme="http://liukay.com/tags/client-%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="server 模式" scheme="http://liukay.com/tags/server-%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud eureka 注册服务显示IP端口号</title>
    <link href="http://liukay.com/2019/05/06/springcloud--%E6%9C%8D%E5%8A%A1%E6%98%BE%E7%A4%BAIP%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
    <id>http://liukay.com/2019/05/06/springcloud--服务显示IP端口号/</id>
    <published>2019-05-06T06:21:29.000Z</published>
    <updated>2020-12-15T04:09:18.996Z</updated>
    
    <content type="html"><![CDATA[<p>Spring cloud 显示 INSTANCE-ID 如果以IP + 端口号的形式显示，会更清析的定位每个服务所在的机器节点的状态。</p><h3 id="依赖的-pom"><a href="#依赖的-pom" class="headerlink" title="依赖的 pom"></a>依赖的 pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="yml-相关配置"><a href="#yml-相关配置" class="headerlink" title="yml 相关配置"></a>yml 相关配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://10.168.16.101:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2019/05/06/springcloud--%E6%9C%8D%E5%8A%A1%E6%98%BE%E7%A4%BAIP%E7%AB%AF%E5%8F%A3%E5%8F%B7/1557126376514.jpg" alt="效果图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring cloud 显示 INSTANCE-ID 如果以IP + 端口号的形式显示，会更清析的定位每个服务所在的机器节点的状态。&lt;/p&gt;
&lt;h3 id=&quot;依赖的-pom&quot;&gt;&lt;a href=&quot;#依赖的-pom&quot; class=&quot;headerlink&quot; title=&quot;依赖的 pom&quot;&gt;&lt;/a&gt;依赖的 pom&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-cloud-commons&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.1.0.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="spring cloud" scheme="http://liukay.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring cloud" scheme="http://liukay.com/tags/spring-cloud/"/>
    
      <category term="java" scheme="http://liukay.com/tags/java/"/>
    
      <category term="eureka" scheme="http://liukay.com/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud 四种服务下线方式</title>
    <link href="http://liukay.com/2019/05/05/springcloud--%E5%9B%9B%E7%A7%8D%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%BA%BF%E6%96%B9%E5%BC%8F/"/>
    <id>http://liukay.com/2019/05/05/springcloud--四种服务下线方式/</id>
    <published>2019-05-05T12:06:54.000Z</published>
    <updated>2020-12-15T04:09:18.996Z</updated>
    
    <content type="html"><![CDATA[<p>这里指已经在 Eureka 注册中心注册的服务，如果需要停用，有四种方式进行停用。</p><h3 id="1-直接关闭"><a href="#1-直接关闭" class="headerlink" title="1.直接关闭"></a>1.直接关闭</h3><p>最粗暴。<br>写这个是因为，直接关闭，如果 Eureka 开了保护模式，会导至服务已关闭，但是未下线，还是会重试调用。如果不需强稳定性的话可以这么干。</p><h3 id="2-客户端主动通知注册中心下线"><a href="#2-客户端主动通知注册中心下线" class="headerlink" title="2.客户端主动通知注册中心下线"></a>2.客户端主动通知注册中心下线</h3><p>安全。<br>Eureka注册中心在收到某个客户端下线后不会马上通知所有的注册的客户端，而是等到客户端进行心跳的时候(心跳(续约)频率，默认30秒 )再将下的数据返回。通过这种方式下线的话，可以在某个服务下线后防止其他服务调用此服务失败。</p><p>白话就是，服务状态下线了，但是不通知其他服务。等到续约时间到了，再通知所有注册服务。</p><a id="more"></a><p>猜测，服务下线后，在没有心跳前，其他服务还是可以进行调用。等到心跳后，通知所有服务已下线，其他服务认为已下线，就不会再调该下线服务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/eurekaUnRegister&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       eurekaClient.shutdown();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;eurekaUnRegistering&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>或<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/offline&quot;, method = RequestMethod.GET)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offLine</span><span class="params">()</span></span>&#123;</span><br><span class="line">   DiscoveryManager.getInstance().shutdownComponent();</span><br><span class="line"> &#125;  </span><br></pre></td></tr></table></figure></p><h3 id="3-调用接口方式下线"><a href="#3-调用接口方式下线" class="headerlink" title="3.调用接口方式下线"></a>3.调用接口方式下线</h3><p><a href="http://10.168.62.58:9999/message/actuator/shutdown">http://10.168.62.58:9999/message/actuator/shutdown</a></p><p>返回结果<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Shutting down, bye...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>本地起机器后，调试结果</p><p>结果就是服务线程关闭，服务停止：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stopping beans in phase 2147483647</span><br><span class="line">Stopping beans in phase 0</span><br><span class="line">Unregistering JMX-exposed beans on shutdown</span><br><span class="line">DiscoveryClient_GROUP-MESSAGE&#x2F;group-message-provider-704 - registration status: 204</span><br><span class="line">Shutting down DiscoveryClient ...</span><br><span class="line">Unregistering ...</span><br><span class="line">DiscoveryClient_GROUP-MESSAGE&#x2F;group-message-provider-704 - deregister  status: 200</span><br></pre></td></tr></table></figure><br>网上博客<a href="https://blog.csdn.net/memmsc/article/details/78122962">https://blog.csdn.net/memmsc/article/details/78122962</a></p><h3 id="4-修改服务状态"><a href="#4-修改服务状态" class="headerlink" title="4.修改服务状态"></a>4.修改服务状态</h3><p>这种方式，服务不会停止，只是状态变为 DOWN，适合禁用该服务的操作。<br>DOWN 禁用<br>UP 启用<br><a href="http://10.168.62.58:9999/message/actuator/service-registry">http://10.168.62.58:9999/message/actuator/service-registry</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>sprinng boot 2.0 以上需要添加额外配置才能生效，否则报404<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"> <span class="attr">endpoints:</span></span><br><span class="line">   <span class="attr">web:</span></span><br><span class="line">     <span class="attr">exposure:</span></span><br><span class="line">       <span class="attr">include:</span> <span class="string">&quot;*&quot;</span>                <span class="comment">#包含的路径，可以单个如 info</span></span><br><span class="line"> <span class="attr">endpoint:</span></span><br><span class="line">   <span class="attr">shutdown:</span></span><br><span class="line">     <span class="attr">enabled:</span> <span class="literal">true</span>                <span class="comment">#开启shutdown 关闭</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里指已经在 Eureka 注册中心注册的服务，如果需要停用，有四种方式进行停用。&lt;/p&gt;
&lt;h3 id=&quot;1-直接关闭&quot;&gt;&lt;a href=&quot;#1-直接关闭&quot; class=&quot;headerlink&quot; title=&quot;1.直接关闭&quot;&gt;&lt;/a&gt;1.直接关闭&lt;/h3&gt;&lt;p&gt;最粗暴。&lt;br&gt;写这个是因为，直接关闭，如果 Eureka 开了保护模式，会导至服务已关闭，但是未下线，还是会重试调用。如果不需强稳定性的话可以这么干。&lt;/p&gt;
&lt;h3 id=&quot;2-客户端主动通知注册中心下线&quot;&gt;&lt;a href=&quot;#2-客户端主动通知注册中心下线&quot; class=&quot;headerlink&quot; title=&quot;2.客户端主动通知注册中心下线&quot;&gt;&lt;/a&gt;2.客户端主动通知注册中心下线&lt;/h3&gt;&lt;p&gt;安全。&lt;br&gt;Eureka注册中心在收到某个客户端下线后不会马上通知所有的注册的客户端，而是等到客户端进行心跳的时候(心跳(续约)频率，默认30秒 )再将下的数据返回。通过这种方式下线的话，可以在某个服务下线后防止其他服务调用此服务失败。&lt;/p&gt;
&lt;p&gt;白话就是，服务状态下线了，但是不通知其他服务。等到续约时间到了，再通知所有注册服务。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="spring cloud" scheme="http://liukay.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring cloud" scheme="http://liukay.com/tags/spring-cloud/"/>
    
      <category term="java" scheme="http://liukay.com/tags/java/"/>
    
      <category term="服务下线" scheme="http://liukay.com/tags/%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>产生线程死锁的原因和处理方式</title>
    <link href="http://liukay.com/2019/04/20/java-%E4%BA%A7%E7%94%9F%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <id>http://liukay.com/2019/04/20/java-产生线程死锁的原因和处理方式/</id>
    <published>2019-04-20T13:14:38.000Z</published>
    <updated>2020-12-15T04:09:18.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><p>线程同步(就是加锁)会有一个问题，就是产生死锁</p><h2 id="所谓死锁"><a href="#所谓死锁" class="headerlink" title="所谓死锁"></a>所谓死锁</h2><p>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。<br>发生死锁的具体原因如下:</p><a id="more"></a><ol><li>因为系统资源不足。</li><li>进程运行推进的顺序不合适。    </li><li>资源分配不当。</li></ol><h2 id="举列说明场景"><a href="#举列说明场景" class="headerlink" title="举列说明场景:"></a>举列说明场景:</h2><p>死锁是因为多线程访问共享资源，由于访问的顺序不当所造成的，通常是一个线程锁定了一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在等待，而无法执行的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">背景: 线程同步(就是加锁)会有一个问题，就是产生死锁</span><br><span class="line">所谓死锁: 是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</span><br><span class="line">帮助理解：</span><br><span class="line">地上放着两个桶泡面，一个老坛酸菜，一个小鸡炖磨茹。两个人一个产品，一个测试，同时出发去抢老坛酸菜和小鸡炖磨茹，产品老坛酸菜，测试拿到小鸡炖磨茹，同一时刻，产品伸要去拽测试怀里的小鸡炖磨茹，测试伸手去拽产品的老坛酸菜，两个僵持不下，就死在那了，叫死锁。如果没有开发将他们各打一顿解救出来，它们奖无法推进下去。</span><br><span class="line">发生死锁的具体原因如下:</span><br><span class="line">1. 因为系统资源不足。</span><br><span class="line">2. 进程运行推进的顺序不合适。    </span><br><span class="line">3. 资源分配不当。</span><br><span class="line">举列说明场景:</span><br><span class="line">死锁是因为多线程访问共享资源，由于访问的顺序不当所造成的，通常是一个线程锁定了一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在等待，而无法执行的情况。</span><br><span class="line">死锁预防</span><br><span class="line">如果只使用一个锁就不会有死锁的问题，不过复杂场景下不太理实。</span><br><span class="line">1.以确定的顺序获得锁</span><br><span class="line">    线程A ---&gt; 锁定 A  ----&gt; 偿试锁定 B</span><br><span class="line">    线程B ---&gt; 锁定 A  ----&gt; 偿试锁定 B</span><br><span class="line">    这样就不会发生死锁</span><br><span class="line">2.超时放弃</span><br><span class="line">Lock接口提供了boolean tryLock(long time, TimeUnit unit) throws InterruptedException方法，该方法可以按照固定时长等待锁，因此线程可以在获取锁超时以后，主动释放之前已经获得的所有的锁。通过这种方式，也可以很有效地避免死锁。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;产生背景&quot;&gt;&lt;a href=&quot;#产生背景&quot; class=&quot;headerlink&quot; title=&quot;产生背景&quot;&gt;&lt;/a&gt;产生背景&lt;/h2&gt;&lt;p&gt;线程同步(就是加锁)会有一个问题，就是产生死锁&lt;/p&gt;
&lt;h2 id=&quot;所谓死锁&quot;&gt;&lt;a href=&quot;#所谓死锁&quot; class=&quot;headerlink&quot; title=&quot;所谓死锁&quot;&gt;&lt;/a&gt;所谓死锁&lt;/h2&gt;&lt;p&gt;是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。&lt;br&gt;发生死锁的具体原因如下:&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="concurrent" scheme="http://liukay.com/categories/java/concurrent/"/>
    
    
      <category term="多线程" scheme="http://liukay.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="死锁" scheme="http://liukay.com/tags/%E6%AD%BB%E9%94%81/"/>
    
      <category term="并发" scheme="http://liukay.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>你为什么学不会lambda</title>
    <link href="http://liukay.com/2019/04/14/java--%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B8%8D%E4%BC%9Alamdbd/"/>
    <id>http://liukay.com/2019/04/14/java--你为什么学不会lamdbd/</id>
    <published>2019-04-13T19:12:56.000Z</published>
    <updated>2020-12-15T04:09:18.985Z</updated>
    
    <content type="html"><![CDATA[<p>这个一篇对学习 Lambda 表达式进行解惑的文章，主要是总结了自己在学习 Lambda 表达式时候的一些理解不了的坑进行总结。长篇大论和详细语法，自行谷歌，这里只说一些理解起来不顺的概念。</p><h3 id="重要事情说三遍"><a href="#重要事情说三遍" class="headerlink" title="重要事情说三遍"></a>重要事情说三遍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先 Lambda 表达式 ()-&gt;&#123; &#125; 是一种方法实现，并且在直接调用的时候才会执行。</span><br><span class="line">首先 Lambda 表达式 ()-&gt;&#123; &#125; 是一种方法实现，并且在直接调用的时候才会执行。</span><br><span class="line">首先 Lambda 表达式 ()-&gt;&#123; &#125; 是一种方法实现，并且在直接调用的时候才会执行。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-什么是-gt"><a href="#1-什么是-gt" class="headerlink" title="1. 什么是 ()-&gt;{ }"></a>1. 什么是 ()-&gt;{ }</h3><p>理论造航母，程序就一行。<br>不提什么是函数式编程，用大白话，其实就是写了一个匿名实现，并且在需要使用这行匿名实现的时候调用了一下，才会直正去执行这个匿名实现方法。<br>Lambda 表达式，本质上是一种延迟加载执行。将预先写好的实现方法进行加载。到实际使用时，再执行。</p><h3 id="演示执行过程："><a href="#演示执行过程：" class="headerlink" title="演示执行过程："></a>演示执行过程：</h3><h4 id="1-声明一个-Lambda-表达式接口"><a href="#1-声明一个-Lambda-表达式接口" class="headerlink" title="1.声明一个 Lambda 表达式接口"></a>1.声明一个 Lambda 表达式接口</h4><h4 id="2-加载一下匿名实现方法"><a href="#2-加载一下匿名实现方法" class="headerlink" title="2.加载一下匿名实现方法"></a>2.加载一下匿名实现方法</h4><h4 id="3-执行一下"><a href="#3-执行一下" class="headerlink" title="3.执行一下"></a>3.执行一下</h4><ol><li>新建一个类，声明一个 Lambda 表达式接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunctional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//只允许存在一个 public abstract 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新建一个测试类，加载一下匿名函数实现<br>用来测试 Lambda 表达式的执行顺序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReference</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 一般匿名写法，这里仅是声明了这个匿名写法，但是并没有执行任务操作</span></span><br><span class="line">        testRef((test) -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;3. lambda 接口调用方法时传入的参数: %s&quot;</span>, test));</span><br><span class="line">            System.out.println(<span class="string">&quot;4.bbb&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> test;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testRef</span><span class="params">(MyFunctional myFunctional)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;1. 到这一步，lambda 表达式还没有执行&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. 传入一个参数&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 真正的去调用 lambda 表达式的实现方法</span></span><br><span class="line">        myFunctional.say(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>执行结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 到这一步，lambda 表达式还没有执行</span><br><span class="line"><span class="number">2.</span> 传入一个参数</span><br><span class="line"><span class="number">3.</span> lambda 接口调用方法时传入的参数: aaaa</span><br><span class="line"><span class="number">4.</span> bbb</span><br></pre></td></tr></table></figure></li></ol><p>用 IDEA 到 Functional 接口中点一下，可以看到，直接跳到 MethodReference 这个测试为的这一行 lambda 表达式中，也就是说，当有一个 lambda 表达式实现了 Functional 接口时，并通过以当前 Functional 为形参的方法传入时，可以被调用到。<br><img src="https://upload-images.jianshu.io/upload_images/6164010-9e0fc62a80bb14ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个一篇对学习 Lambda 表达式进行解惑的文章，主要是总结了自己在学习 Lambda 表达式时候的一些理解不了的坑进行总结。长篇大论和详细语法，自行谷歌，这里只说一些理解起来不顺的概念。&lt;/p&gt;
&lt;h3 id=&quot;重要事情说三遍&quot;&gt;&lt;a href=&quot;#重要事情说三遍&quot; class=&quot;headerlink&quot; title=&quot;重要事情说三遍&quot;&gt;&lt;/a&gt;重要事情说三遍&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;首先 Lambda 表达式 ()-&amp;gt;&amp;#123; &amp;#125; 是一种方法实现，并且在直接调用的时候才会执行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;首先 Lambda 表达式 ()-&amp;gt;&amp;#123; &amp;#125; 是一种方法实现，并且在直接调用的时候才会执行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;首先 Lambda 表达式 ()-&amp;gt;&amp;#123; &amp;#125; 是一种方法实现，并且在直接调用的时候才会执行。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="lambda" scheme="http://liukay.com/categories/java/lambda/"/>
    
    
      <category term="java" scheme="http://liukay.com/tags/java/"/>
    
      <category term="lambda" scheme="http://liukay.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>docker run 和 start 的区别</title>
    <link href="http://liukay.com/2019/03/08/docker--run%E5%92%8Cstart%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://liukay.com/2019/03/08/docker--run和start的区别/</id>
    <published>2019-03-08T14:40:34.000Z</published>
    <updated>2020-12-16T03:42:44.646Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-docker-run"><a href="#1-docker-run" class="headerlink" title="1.docker run"></a>1.docker run</h3><p>docker run 只在第一次运行时使用，将镜像放到容器中，以后再次启动这个容器时，只需要使用命令docker start 即可。<br>docker run相当于执行了两步操作：将镜像放入容器中（docker create）,然后将容器启动，使之变成运行时容器（docker start）。</p><h3 id="2-docker-start"><a href="#2-docker-start" class="headerlink" title="2.docker start"></a>2.docker start</h3><p>docker start的作用是，重新启动已存在的镜像。也就是说，如果使用这个命令，我们必须事先知道这个容器的ID，或者这个容器的名字，我们可以使用docker ps找到这个容器的信息。<br><a id="more"></a></p><h3 id="3-查看所有容器"><a href="#3-查看所有容器" class="headerlink" title="3.查看所有容器"></a>3.查看所有容器</h3><p>而要显示出所有容器，包括没有启动的，可以使用命令<br>docker ps -a</p><h3 id="4-重命名"><a href="#4-重命名" class="headerlink" title="4.重命名"></a>4.重命名</h3><p>docker rename old_name new_name</p><h3 id="5-启停"><a href="#5-启停" class="headerlink" title="5.启停"></a>5.启停</h3><p>docker [stop]|[start] name</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-docker-run&quot;&gt;&lt;a href=&quot;#1-docker-run&quot; class=&quot;headerlink&quot; title=&quot;1.docker run&quot;&gt;&lt;/a&gt;1.docker run&lt;/h3&gt;&lt;p&gt;docker run 只在第一次运行时使用，将镜像放到容器中，以后再次启动这个容器时，只需要使用命令docker start 即可。&lt;br&gt;docker run相当于执行了两步操作：将镜像放入容器中（docker create）,然后将容器启动，使之变成运行时容器（docker start）。&lt;/p&gt;
&lt;h3 id=&quot;2-docker-start&quot;&gt;&lt;a href=&quot;#2-docker-start&quot; class=&quot;headerlink&quot; title=&quot;2.docker start&quot;&gt;&lt;/a&gt;2.docker start&lt;/h3&gt;&lt;p&gt;docker start的作用是，重新启动已存在的镜像。也就是说，如果使用这个命令，我们必须事先知道这个容器的ID，或者这个容器的名字，我们可以使用docker ps找到这个容器的信息。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://liukay.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://liukay.com/tags/docker/"/>
    
      <category term="微服务" scheme="http://liukay.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="虚拟化" scheme="http://liukay.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>docker 基本操作</title>
    <link href="http://liukay.com/2019/03/04/docker--%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://liukay.com/2019/03/04/docker--基本操作/</id>
    <published>2019-03-04T13:40:34.000Z</published>
    <updated>2020-12-16T03:43:06.583Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究使用 docker 进行微服务改造，总结了一下常用的命令，docker 这东西，单个用简单，整体配合 k8s 和 spring cloud 坑还是不少，一个一个解决掉以后，他的易用性和高可用的特性确实很棒。</p><p>如果是业务日志需要输出到宿主机上，可以使用 -v 挂载。</p><h4 id="1-查看-docker-信息-info"><a href="#1-查看-docker-信息-info" class="headerlink" title="1.查看 docker 信息 info"></a>1.查看 docker 信息 info</h4><p>dorker info</p><a id="more"></a><p>####2.运行 docker 容器 run<br>docker run IMAGE    //启动容器<br>docker run ubuntu echo “en heng”<br>这种命令运行完就退出了。</p><h4 id="3-启动交互式容器"><a href="#3-启动交互式容器" class="headerlink" title="3.启动交互式容器"></a>3.启动交互式容器</h4><p>docker run -it IMAGE    //交互式，即进入容器<br>docker run -i -t ubuntu /bin/bash    //进入容器<br>ps -ef<br>exit        //退出</p><h4 id="4-查看容器-ps"><a href="#4-查看容器-ps" class="headerlink" title="4.查看容器 ps"></a>4.查看容器 ps</h4><p>docker ps [-a] [-l]<br>docker ps<br>docker ps -a        //-a 全部容器</p><p>CONTAINER ID        //docker为容器分配的id，即守护进程ID<br>NAME            //docker 自动为镜象创建的名称</p><h4 id="5-自定义容器名称-name"><a href="#5-自定义容器名称-name" class="headerlink" title="5.自定义容器名称 name"></a>5.自定义容器名称 name</h4><p>docker run –name=[自定义名称] -i -t ubuntu /bin/bash<br>docker run –name=container01 -i -t ubuntu /bin/bash</p><h4 id="6-重新启动停止的容器-start"><a href="#6-重新启动停止的容器-start" class="headerlink" title="6.重新启动停止的容器 start"></a>6.重新启动停止的容器 start</h4><p>docker start [-i] 容器ID<br>-i 交互模式<br>docker start  8cf94828c8e6<br>进入容器<br>docker exec -it 8cf94828c8e6 bash</p><h4 id="7-删除已经停止的容器"><a href="#7-删除已经停止的容器" class="headerlink" title="7.删除已经停止的容器"></a>7.删除已经停止的容器</h4><p>docker rm [容器id | 容器名]    //不能删除正在运行的容器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究使用 docker 进行微服务改造，总结了一下常用的命令，docker 这东西，单个用简单，整体配合 k8s 和 spring cloud 坑还是不少，一个一个解决掉以后，他的易用性和高可用的特性确实很棒。&lt;/p&gt;
&lt;p&gt;如果是业务日志需要输出到宿主机上，可以使用 -v 挂载。&lt;/p&gt;
&lt;h4 id=&quot;1-查看-docker-信息-info&quot;&gt;&lt;a href=&quot;#1-查看-docker-信息-info&quot; class=&quot;headerlink&quot; title=&quot;1.查看 docker 信息 info&quot;&gt;&lt;/a&gt;1.查看 docker 信息 info&lt;/h4&gt;&lt;p&gt;dorker info&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://liukay.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://liukay.com/tags/docker/"/>
    
      <category term="微服务" scheme="http://liukay.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="虚拟化" scheme="http://liukay.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>静态资源配置的问题</title>
    <link href="http://liukay.com/2019/01/10/springboot--%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://liukay.com/2019/01/10/springboot--静态资源配置的问题/</id>
    <published>2019-01-10T06:42:09.000Z</published>
    <updated>2020-12-15T04:09:18.995Z</updated>
    
    <content type="html"><![CDATA[<p>spring boot 的项目是将静态资源打包到.jar 的文件包中， 项目中有碰到需要使用外部静态资源的情况，使用外部资源的一直老出问题，查了google 后发现是指定的方式不对。</p><h3 id="静态资源配置"><a href="#静态资源配置" class="headerlink" title="静态资源配置"></a>静态资源配置</h3><p>将 <code>resource/static</code> 进行映射，springboot 默认优先级:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;META-INF&#x2F;resources&#x2F;</span><br><span class="line">&#x2F;resources&#x2F;</span><br><span class="line">&#x2F;static&#x2F;</span><br><span class="line">&#x2F;public&#x2F;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>spring 属性合配 resources 配置<br>1.本项目包含路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">mvc:</span><br><span class="line">   static-path-pattern: &#x2F;late</span><br><span class="line">resources:</span><br><span class="line">  static-locations: classpath:&#x2F;templates&#x2F;dist&#x2F;</span><br></pre></td></tr></table></figure><br>这两天遇到的坑</p><p>2.指定项目外的磁盘路径<br>如果要映射本地磁盘路径，可以使用，注意必须得有 <code>file:</code>, 注意必须得有<code>file:</code>,注意必须得有<code>file:</code>  否则 404, 重要事情说三遍。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">mvc:</span><br><span class="line">   static-path-pattern: &#x2F;late</span><br><span class="line">resources:</span><br><span class="line">   static-locations: file:&#x2F;templates&#x2F;dist&#x2F;</span><br></pre></td></tr></table></figure></p><p>浏览器的访问路径通过这个就可以改。<br>static-path-pattern</p><p>3.还有一种方式是打包到 webjars 中，不过一样是费劲的事，不如直接指定外部磁盘路径，使用 nginx 做转换成功访问静态文件，但是配置更麻烦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;spring boot 的项目是将静态资源打包到.jar 的文件包中， 项目中有碰到需要使用外部静态资源的情况，使用外部资源的一直老出问题，查了google 后发现是指定的方式不对。&lt;/p&gt;
&lt;h3 id=&quot;静态资源配置&quot;&gt;&lt;a href=&quot;#静态资源配置&quot; class=&quot;headerlink&quot; title=&quot;静态资源配置&quot;&gt;&lt;/a&gt;静态资源配置&lt;/h3&gt;&lt;p&gt;将 &lt;code&gt;resource/static&lt;/code&gt; 进行映射，springboot 默认优先级:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;META-INF&amp;#x2F;resources&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;resources&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;static&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;public&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="spring boot" scheme="http://liukay.com/categories/java/spring-boot/"/>
    
    
      <category term="java" scheme="http://liukay.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://liukay.com/tags/spring-boot/"/>
    
      <category term="yml" scheme="http://liukay.com/tags/yml/"/>
    
  </entry>
  
  <entry>
    <title>springboot 注解实现日志切面</title>
    <link href="http://liukay.com/2018/11/27/springboot--%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%88%87%E9%9D%A2/"/>
    <id>http://liukay.com/2018/11/27/springboot--注解实现日志切面/</id>
    <published>2018-11-27T10:46:27.000Z</published>
    <updated>2020-12-15T04:09:18.995Z</updated>
    
    <content type="html"><![CDATA[<p>项目中很多时候需要去打印方法入参和出参的日志，有助于排查错误。<br>注解需要操作简单。<br>常用的方式之一就是使用切面来切日志。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>定义自定义注解</li><li>编写自定义注解的切面方法</li><li>使用注解在需要输出日志的方法上</li></ol><a id="more"></a><h4 id="1-自定义注解"><a href="#1-自定义注解" class="headerlink" title="1.自定义注解"></a>1.自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * controller 注解切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2018/8/7 15:26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><span class="comment">//目标是方法</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//注解会在class中存在，运行时可通过反射获取</span></span><br><span class="line"><span class="meta">@Documented</span><span class="comment">//文档生成时，该注解将被包含在javadoc中，可去掉</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ControllerLog &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作描述 业务名称business</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作模块</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">OperateModule <span class="title">module</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作类型 create modify delete</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">OperateType <span class="title">opType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键入参参数名称，入参中的哪个参数为主键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">primaryKeyName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键在参数中的顺序，从0开始，默认0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">primaryKeySort</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">business</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-模块枚举"><a href="#2-模块枚举" class="headerlink" title="2.模块枚举"></a>2.模块枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 操作类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/7/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OperateModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOGIN(<span class="string">&quot;登陆&quot;</span>),</span><br><span class="line">    LOGOUT(<span class="string">&quot;退出登陆&quot;</span>),</span><br><span class="line">    DEMAND(<span class="string">&quot;需求&quot;</span>),</span><br><span class="line">    ITERATION(<span class="string">&quot;迭代&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    OperateModule(String text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-操作类型"><a href="#3-操作类型" class="headerlink" title="3.操作类型"></a>3.操作类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.group.core.web.log;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 操作类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/7/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OperateModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOGIN(<span class="string">&quot;登陆&quot;</span>),</span><br><span class="line">    LOGOUT(<span class="string">&quot;退出登陆&quot;</span>),</span><br><span class="line">    DEMAND(<span class="string">&quot;需求&quot;</span>),</span><br><span class="line">    ITERATION(<span class="string">&quot;迭代&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    OperateModule(String text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-日志切面"><a href="#4-日志切面" class="headerlink" title="4.日志切面"></a>4.日志切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.group.core.web.log;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.group.common.constants.Constants;</span><br><span class="line"><span class="keyword">import</span> com.group.core.model.SysLog;</span><br><span class="line"><span class="keyword">import</span> com.group.core.service.SysLogService;</span><br><span class="line"><span class="keyword">import</span> com.group.core.web.vo.ResultVo;</span><br><span class="line"><span class="keyword">import</span> com.group.core.web.log.annotation.ControllerLog;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.CodeSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志切面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2018/8/7 15:50.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODULE = <span class="string">&quot;module&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysLogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SecurityManager securityManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切入点.</span></span><br><span class="line"><span class="comment">     * (&quot;execution(public * com.group.*.web..*.*(..))&quot;)</span></span><br><span class="line"><span class="comment">     * 解释下：</span></span><br><span class="line"><span class="comment">     * 第一个 * 代表任意修饰符及任意返回值.</span></span><br><span class="line"><span class="comment">     * 第二个 * 任意包名</span></span><br><span class="line"><span class="comment">     * 第三个 * 代表任意方法.</span></span><br><span class="line"><span class="comment">     * 第四个 * 定义在web包或者子包</span></span><br><span class="line"><span class="comment">     * 第五个 * 任意方法</span></span><br><span class="line"><span class="comment">     * .. 匹配任意数量的参数.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.group..*.controller..*.*(..))  &amp;&amp; @annotation(com.group.core.web.log.annotation.ControllerLog)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * round</span></span><br><span class="line"><span class="comment">     * 环境切面方法，切日方法调用的出入时的操作</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 16:16</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">round</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;环绕日志切面开始&quot;</span>);</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        String user = (String) subject.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(user)) &#123;</span><br><span class="line">            JSONObject jsonObject = JSONObject.parseObject(user.substring(<span class="number">4</span>));</span><br><span class="line">            user = jsonObject.getString(<span class="string">&quot;sub&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; controllerAnnotationValues = getControllerAnnotationValue(joinPoint);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(user)) &#123;</span><br><span class="line">            controllerAnnotationValues.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;用户 &#123;&#125;-- 操作:&#123;&#125; -- 模块: &#123;&#125;&quot;</span>, user, controllerAnnotationValues.get(<span class="string">&quot;operateName&quot;</span>), controllerAnnotationValues.get(<span class="string">&quot;moduleName&quot;</span>));</span><br><span class="line"><span class="comment">//            //需求目志特殊处理</span></span><br><span class="line"><span class="comment">//            if (controllerAnnotationValues.get(MODULE).equals(OperateModule.DEMAND.toString())) &#123;</span></span><br><span class="line"><span class="comment">////                demandLogger.insertLog(controllerAnnotationValues, getParameter(joinPoint));</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line">            insertLog(controllerAnnotationValues);</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//切面返回值</span></span><br><span class="line">        Object returnValue = joinPoint.proceed();</span><br><span class="line">        <span class="comment">//用户登陆，登陆后 subject 才会包含用户信息。</span></span><br><span class="line">        <span class="keyword">if</span> (returnValue <span class="keyword">instanceof</span> ResultVo &amp;&amp; user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Subject logSubject = SecurityUtils.getSubject();</span><br><span class="line">            String logUser = (String) logSubject.getPrincipal();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(logUser)) &#123;</span><br><span class="line">                JSONObject jsonObject = JSONObject.parseObject(logUser.substring(<span class="number">4</span>));</span><br><span class="line">                logUser = jsonObject.getString(<span class="string">&quot;sub&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            controllerAnnotationValues.put(<span class="string">&quot;user&quot;</span>, logUser);</span><br><span class="line">            insertLog(controllerAnnotationValues);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入通用日志</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/10 17:33</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> controllerParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertLog</span><span class="params">(Map&lt;String, Object&gt; controllerParam)</span> </span>&#123;</span><br><span class="line">        SysLog sysLog = <span class="keyword">new</span> SysLog();</span><br><span class="line">        String moduleName = (String) controllerParam.get(<span class="string">&quot;moduleName&quot;</span>);</span><br><span class="line">        String operateName = (String) controllerParam.get(<span class="string">&quot;operateName&quot;</span>);</span><br><span class="line">        controllerParam.get(<span class="string">&quot;primaryKeyName&quot;</span>);</span><br><span class="line">        controllerParam.get(<span class="string">&quot;primaryKeySort&quot;</span>);</span><br><span class="line">        String user = (String) controllerParam.get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        sysLog.setOperationUser(user);</span><br><span class="line">        sysLog.setModifyUserId(user);</span><br><span class="line">        sysLog.setCreateUserId(user);</span><br><span class="line">        sysLog.setOperation(operateName);</span><br><span class="line">        sysLog.setModel(moduleName);</span><br><span class="line">        sysLog.setFlag(Constants.DELETE_TYPE_FALSE);</span><br><span class="line">        logService.insert(sysLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取日志注解的方法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 16:41</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String   ,   java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getControllerAnnotationValue</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//取切点相关参数</span></span><br><span class="line">        String targetName = joinPoint.getTarget().getClass().getName();</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        Object[] arguments = joinPoint.getArgs();</span><br><span class="line">        LOGGER.info(<span class="string">&quot;targetName: &#123;&#125; - methodName: &#123;&#125; - arguments: &#123;&#125;&quot;</span>, targetName, methodName, arguments.toString());</span><br><span class="line">        <span class="comment">//实例化该</span></span><br><span class="line">        Class targetClass = Class.forName(targetName);</span><br><span class="line">        <span class="comment">//获取该类的所有方法</span></span><br><span class="line">        Method[] methods = targetClass.getMethods();</span><br><span class="line">        Map&lt;String, Object&gt; map = Maps.newHashMapWithExpectedSize(<span class="number">7</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(methodName)) &#123;</span><br><span class="line">                Class[] classes = method.getParameterTypes();</span><br><span class="line">                <span class="keyword">if</span> (classes.length == arguments.length) &#123;</span><br><span class="line">                    String description = method.getAnnotation(ControllerLog.class).description();</span><br><span class="line">                    String <span class="keyword">module</span> = method.getAnnotation(ControllerLog.class).<span class="keyword">module</span>().name();</span><br><span class="line">                    String operateType = method.getAnnotation(ControllerLog.class).opType().name();</span><br><span class="line">                    String primaryKeyName = method.getAnnotation(ControllerLog.class).primaryKeyName();</span><br><span class="line">                    <span class="keyword">int</span> primaryKeySort = method.getAnnotation(ControllerLog.class).primaryKeySort();</span><br><span class="line">                    String operateName = getOpName(operateType);</span><br><span class="line">                    String moduleName = getModelName(<span class="keyword">module</span>);</span><br><span class="line">                    map.put(<span class="string">&quot;module&quot;</span>, <span class="keyword">module</span>);</span><br><span class="line">                    map.put(<span class="string">&quot;moduleName&quot;</span>, moduleName);</span><br><span class="line">                    map.put(<span class="string">&quot;operateType&quot;</span>, operateType);</span><br><span class="line">                    map.put(<span class="string">&quot;operateName&quot;</span>, operateName);</span><br><span class="line">                    map.put(<span class="string">&quot;business&quot;</span>, description);</span><br><span class="line">                    map.put(<span class="string">&quot;primaryKeyName&quot;</span>, primaryKeyName);</span><br><span class="line">                    map.put(<span class="string">&quot;primaryKeySort&quot;</span>, primaryKeySort);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取模块名</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 21:11</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> module</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getModelName</span><span class="params">(String <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">        String operate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (OperateModule model : OperateModule.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (model.name().equals(<span class="keyword">module</span>)) &#123;</span><br><span class="line">                operate = model.getText();</span><br><span class="line">                <span class="keyword">return</span> operate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> operate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类型名</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * author liukai</span></span><br><span class="line"><span class="comment">     * date 2018/8/7 21:06</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operateType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getOpName</span><span class="params">(String operateType)</span> </span>&#123;</span><br><span class="line">        String operate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (OperateType opType : OperateType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (opType.name().equals(operateType)) &#123;</span><br><span class="line">                operate = opType.getMsg();</span><br><span class="line">                <span class="keyword">return</span> operate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> operate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getParameter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//入参  value</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="comment">//入参名称</span></span><br><span class="line">        String[] paramNames = ((CodeSignature) joinPoint.getSignature()).getParameterNames();</span><br><span class="line">        Map&lt;String, Object&gt; params = Maps.newHashMapWithExpectedSize(<span class="number">7</span>);</span><br><span class="line">        <span class="comment">//获取所有参数对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != args[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> BindingResult) &#123;</span><br><span class="line">                    params.put(paramNames[i], <span class="string">&quot;bindingResult&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    params.put(paramNames[i], args[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                params.put(paramNames[i], <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-使用注解"><a href="#5-使用注解" class="headerlink" title="5.使用注解"></a>5.使用注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 退出</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2018/8/2 上午9:05</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/logout&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@ControllerLog(module = OperateModule.LOGOUT, opType = OperateType.logout)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResultVo <span class="title">logOut</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">       ResultVo resultVo = <span class="keyword">new</span> ResultVo();</span><br><span class="line">       Subject subject = SecurityUtils.getSubject();</span><br><span class="line">       resultVo.setCode(SUCCESS_CODE);</span><br><span class="line">       resultVo.setMsg(<span class="string">&quot;退出登陆&quot;</span>);</span><br><span class="line">       logger.info(<span class="string">&quot;退出登陆&quot;</span>);</span><br><span class="line">       subject.logout();</span><br><span class="line">       <span class="keyword">return</span> resultVo;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中很多时候需要去打印方法入参和出参的日志，有助于排查错误。&lt;br&gt;注解需要操作简单。&lt;br&gt;常用的方式之一就是使用切面来切日志。&lt;/p&gt;
&lt;h3 id=&quot;步骤：&quot;&gt;&lt;a href=&quot;#步骤：&quot; class=&quot;headerlink&quot; title=&quot;步骤：&quot;&gt;&lt;/a&gt;步骤：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;定义自定义注解&lt;/li&gt;
&lt;li&gt;编写自定义注解的切面方法&lt;/li&gt;
&lt;li&gt;使用注解在需要输出日志的方法上&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="spring boot" scheme="http://liukay.com/categories/java/spring-boot/"/>
    
    
      <category term="java" scheme="http://liukay.com/tags/java/"/>
    
      <category term="srping boot" scheme="http://liukay.com/tags/srping-boot/"/>
    
      <category term="aop" scheme="http://liukay.com/tags/aop/"/>
    
      <category term="日志" scheme="http://liukay.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="切面" scheme="http://liukay.com/tags/%E5%88%87%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>使用freemarker页面静态化</title>
    <link href="http://liukay.com/2018/10/06/java-%E4%BD%BF%E7%94%A8freemarker%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96/"/>
    <id>http://liukay.com/2018/10/06/java-使用freemarker页面静态化/</id>
    <published>2018-10-05T17:30:04.000Z</published>
    <updated>2020-12-15T04:09:18.989Z</updated>
    
    <content type="html"><![CDATA[<p>公司使用 <code>vue + ngixn</code> 前后端分离架构，重构一套新的静态化的门户网站。后台管理系统为动态页面。<br>使用 freemarker 进行页面静态化的处理，生成静态化页在。<br>前后分离的页面，静态图片需要使用 nginx 进行路径转换。UEditor 上传到本地的图片，没有使用文件管理系统，直接存放到服务器本地，需要 nginx 进行路径转换。</p><p>使用原理:<br>1.freemarker 将数据填充入 ftl 模板中，再由 freemarker 生成静态页面<br>2.vue 获取静态页面进行数据展示</p><a id="more"></a><p>1.工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title: 工具类</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/20 上午10:37.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateHtmlUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CreateHtmlUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;htmlPath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String htmlPath;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ftlPath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ftlPath;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过freemarker生成静态HTML页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">createHtml</span><span class="params">(String templateName,String targetFileName,Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;生成路径: &#123;&#125;, 模板路径：&#123;&#125;&quot;</span>, htmlPath, ftlPath);</span><br><span class="line">        <span class="comment">//创建fm的配置</span></span><br><span class="line">        Configuration config = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">//指定默认编码格式</span></span><br><span class="line">        config.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        Template template = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//设置模版文件的路径</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            config.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(ftlPath));</span><br><span class="line">            <span class="comment">//获得模版包</span></span><br><span class="line">            template = config.getTemplate(templateName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;设置模板包异常：&#123;&#125;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义输出流，注意必须指定编码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fileInputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(htmlPath+<span class="string">&quot;/&quot;</span>+targetFileName));</span><br><span class="line">             OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(fileInputStream, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">             Writer writer = <span class="keyword">new</span> BufferedWriter(outputStreamWriter)) &#123;</span><br><span class="line">            template.process(map, writer);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;写入html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;生成异常: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.添加填充数据据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateHtml</span> <span class="params">(Integer CategoryNo, <span class="keyword">int</span> count, Map&lt;String, Object&gt; pageMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String htmlFileName = getHtmlFileName(CategoryNo, count + <span class="number">1</span>);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;html 文件名: &#123;&#125;&quot;</span> , htmlFileName);</span><br><span class="line">        createHtmlUtil.createHtml(NEWS_TEMPLATE, htmlFileName, pageMap);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.静态页面<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;total&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;total&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">newsPageDatas</span>??&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#list</span> <span class="attr">newsPageDatas</span> <span class="attr">as</span> <span class="attr">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;new-item-box clearfix clear&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image fl&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;#if key.titleUrl??&gt;$&#123;key.titleUrl&#125;&lt;#else &gt;../images/news-1.png&lt;/#if&gt;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-content-box&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-content&quot;</span>&gt;</span></span><br><span class="line">                    $&#123;key.title!&#x27;&#x27;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time-arrow clearfix&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time-day&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">key.publishDate</span>??&gt;</span></span><br><span class="line">                                $&#123;key.publishDate?string(&quot;dd&quot;)!&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-time-year&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">key.publishDate</span>??&gt;</span></span><br><span class="line">                                $&#123;key.publishDate?string(&quot;yyyy.MM&quot;)!&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../page/news_details_$&#123;key.id&#125;.html&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/jiantou.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司使用 &lt;code&gt;vue + ngixn&lt;/code&gt; 前后端分离架构，重构一套新的静态化的门户网站。后台管理系统为动态页面。&lt;br&gt;使用 freemarker 进行页面静态化的处理，生成静态化页在。&lt;br&gt;前后分离的页面，静态图片需要使用 nginx 进行路径转换。UEditor 上传到本地的图片，没有使用文件管理系统，直接存放到服务器本地，需要 nginx 进行路径转换。&lt;/p&gt;
&lt;p&gt;使用原理:&lt;br&gt;1.freemarker 将数据填充入 ftl 模板中，再由 freemarker 生成静态页面&lt;br&gt;2.vue 获取静态页面进行数据展示&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="freemarker" scheme="http://liukay.com/categories/java/freemarker/"/>
    
    
      <category term="页面静态化" scheme="http://liukay.com/tags/%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96/"/>
    
      <category term="freemarker" scheme="http://liukay.com/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>什么是上下文context</title>
    <link href="http://liukay.com/2018/09/17/springboot-%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87context/"/>
    <id>http://liukay.com/2018/09/17/springboot-什么是上下文context/</id>
    <published>2018-09-17T02:56:00.000Z</published>
    <updated>2020-12-15T04:09:18.996Z</updated>
    
    <content type="html"><![CDATA[<p>上下文(背景/语境) context<br>是当前运行程序的环境。<br>网上各种不可说，模糊不清，但是一个概念的提出肯定有最初的含义。</p><h3 id="总结上下文可以理解成："><a href="#总结上下文可以理解成：" class="headerlink" title="总结上下文可以理解成："></a>总结上下文可以理解成：</h3><ol><li>上下文指由代码已运行的程序环境，不是指代码。</li><li>一组状态，这个好理解，取 spring cloud 的官方文档的例子：<blockquote><p>一个Spring Cloud应用程序通过创建一个”引导”上下文来进行操作，这个上下文是主应用程序的父上下文。<br>引导上下文使用与主应用程序上下文不同的外部配置约定，因此使用bootstrap.yml application.yml（或.properties）代替引导和主上下文的外部配置。<br>这里所谓的 引导上下文 就是一组状态，实际就是一个保存配置的大对象，换个角度理就是环境。</p></blockquote></li><li>环境背景<br>每一段程序都有很多外部变量。只有像Add这种简单的函数才是没有外部变量的。一旦你的一段程序有了外部变量，这段程序就不完整，不能独立运行。你为了使他们运行，就要给所有的外部变量一个一个写一些值进去。这些值的集合就叫上下文。</li></ol><p>查了一下 context<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n.        语境; 上下文; 背景; 环境;</span><br></pre></td></tr></table></figure><br>谁用的翻译上下文，明明用背景、环境更贴切，</p><h3 id="摘自知乎"><a href="#摘自知乎" class="headerlink" title="摘自知乎"></a>摘自知乎</h3><blockquote><p>和其他传入对象参数没什么区别。<br>但是通常使用Context来描述有几个特点：<br>被传入Context的部分（组件），内部需要频繁的获取Context的data和调用function。<br>对context有很强的依赖，实现建立在context的基础上。<br>Context会被较为多数部分（组件）所需要，在软件实现部分Context会在某个scene下出现单一实例化，然后被多个部分（组件）实例对象调用。<br>出现局部全局化。<br>Context会持有很多状态data。<br>Coder习惯，命名选择困难下的胶合产物。</p></blockquote><p><a href="https://www.zhihu.com/question/26387327">https://www.zhihu.com/question/26387327</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上下文(背景/语境) context&lt;br&gt;是当前运行程序的环境。&lt;br&gt;网上各种不可说，模糊不清，但是一个概念的提出肯定有最初的含义。&lt;/p&gt;
&lt;h3 id=&quot;总结上下文可以理解成：&quot;&gt;&lt;a href=&quot;#总结上下文可以理解成：&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="spring boot" scheme="http://liukay.com/categories/java/spring-boot/"/>
    
    
      <category term="java" scheme="http://liukay.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://liukay.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>spring boot 使用 maven 打 jar 包配置</title>
    <link href="http://liukay.com/2018/09/02/springboot--%E4%BD%BF%E7%94%A8%20maven%E6%89%93jar%E5%8C%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://liukay.com/2018/09/02/springboot--使用 maven打jar包配置/</id>
    <published>2018-09-02T04:18:05.000Z</published>
    <updated>2020-12-15T04:09:18.994Z</updated>
    
    <content type="html"><![CDATA[<p>使用 ide 进行开发时，直接在ide上启动即可，如果要放到服务器上进行使用，就必须打成jar包，这里使用 maven 的打包插件进行打包。注意 <code>&lt;mainClass&gt;com.devops.WebApplication&lt;/mainClass&gt;</code> 这行要改成你的启动类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>devops-web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.devops.WebApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 ide 进行开发时，直接在ide上启动即可，如果要放到服务器上进行使用，就必须打成jar包，这里使用 maven 的打包插件进行打包。注意 &lt;code&gt;&amp;lt;mainClass&amp;gt;com.devops.WebApplication&amp;lt;/mainClass&amp;g
      
    
    </summary>
    
      <category term="java" scheme="http://liukay.com/categories/java/"/>
    
      <category term="spring boot" scheme="http://liukay.com/categories/java/spring-boot/"/>
    
    
      <category term="spring boot" scheme="http://liukay.com/tags/spring-boot/"/>
    
      <category term="jar包" scheme="http://liukay.com/tags/jar%E5%8C%85/"/>
    
  </entry>
  
</feed>
